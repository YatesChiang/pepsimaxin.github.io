<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客索引（Android 9.0）</title>
      <link href="/2019/12/31/00.thinking-in-android-01.bo-ke-suo-yin/"/>
      <url>/2019/12/31/00.thinking-in-android-01.bo-ke-suo-yin/</url>
      
        <content type="html"><![CDATA[<h4 id="Thinking-in-Android-–-“系统启动”"><a href="#Thinking-in-Android-–-“系统启动”" class="headerlink" title="Thinking in Android – “系统启动”"></a><center>Thinking in Android – “系统启动”</center></h4><p><br></p><table><thead><tr><th style="text-align:center"><strong><font color="#EE2C2C" size="3">【启动阶段】</font></strong></th><th style="text-align:center"><strong><font color="#0000FF" size="3">【相关文章】</font></strong></th><th style="text-align:center"><strong><font color="#9932CC" size="3">状态</font></strong></th><th style="text-align:center"><strong>源码版本</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">init</font></strong></td><td style="text-align:center"><a href>深入研究 Android 启动阶段 之 init</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">zygote</font></strong></td><td style="text-align:center"><a href>深入研究 Android 启动阶段 之 zygote</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">systemserver</font></strong></td><td style="text-align:center"><a href>深入研究 Android 启动阶段 之 systemserver</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">Launcher</font></strong></td><td style="text-align:center"><a href>深入研究 Android 启动阶段 之 Launcher 启动及加载流程</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr></tbody></table><p><br></p><h4 id="Thinking-in-Android-–-“框架服务”"><a href="#Thinking-in-Android-–-“框架服务”" class="headerlink" title="Thinking in Android – “框架服务”"></a><center>Thinking in Android – “框架服务”</center></h4><p><br></p><table><thead><tr><th style="text-align:center"><strong><font color="#EE2C2C" size="3">【框架服务】</font></strong></th><th style="text-align:left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong><font color="#0000FF" size="3">【相关文章】</font></strong></th><th style="text-align:center"><strong><font color="#9932CC" size="3">状态</font></strong></th><th style="text-align:center"><strong>源码版本</strong></th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href>PackageManagerService 钻研（1）- 启动流程</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"></td><td style="text-align:left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href>PackageManagerService 钻研（2）- 构造函数</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"></td><td style="text-align:left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href>PackageManagerService 钻研（3）- PackageManager</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">PackageManagerService</font></strong></td><td style="text-align:left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href>PackageManagerService 钻研（4）- PackageInstaller</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"></td><td style="text-align:left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href>PackageManagerService 钻研（5）- PackageParser</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"></td><td style="text-align:left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href>PackageManagerService 钻研（6）- APK 安装（上）</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"></td><td style="text-align:left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href>PackageManagerService 钻研（7）- APK 安装（中）</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"></td><td style="text-align:left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href>PackageManagerService 钻研（8）- APK 安装（下）</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr></tbody></table><p><br></p><table><thead><tr><th style="text-align:center"><strong><font color="#EE2C2C" size="3">【核心机制】</font></strong></th><th style="text-align:center"><strong><font color="#0000FF" size="3">【相关文章】</font></strong></th><th style="text-align:center"><strong><font color="#9932CC" size="3">状态</font></strong></th><th style="text-align:center"><strong>源码版本</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">Binder</font></strong></td><td style="text-align:center"><a href>深入钻研 Android 核心机制 之 Binder（基础篇）</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">JNI</font></strong></td><td style="text-align:center"><a href>深入钻研 Android 核心机制 之 JNI</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">LowMemoryKiller</font></strong></td><td style="text-align:center"><a href>深入钻研 Android 核心机制 之 LowMemoryKiller</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">事件分发</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/09/26/04.he-xin-ji-zhi-xi-lie-shen-ru-yan-jiu-android-he-xin-ji-zhi-zhi-shi-jian-fen-fa/">深入钻研 Android 核心机制 之 事件分发</a></td><td style="text-align:center"><font color="#0000ff" size="3">完结</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">Handler</font></strong></td><td style="text-align:center"><a href>深入钻研 Android 核心机制 之 Handler（用法篇）</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">Handler</font></strong></td><td style="text-align:center"><a href>深入钻研 Android 核心机制 之 Handler（原理篇）</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">杀进程</font></strong></td><td style="text-align:center"><a href>深入钻研 Android 核心机制 之 进程被杀</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr></tbody></table><p><br></p><h4 id="Thinking-in-Android-–-“性能优化”"><a href="#Thinking-in-Android-–-“性能优化”" class="headerlink" title="Thinking in Android – “性能优化”"></a><center>Thinking in Android – “性能优化”</center></h4><p><br></p><table><thead><tr><th style="text-align:center"><strong><font color="#EE2C2C" size="3">【性能优化】</font></strong></th><th style="text-align:center"><strong><font color="#0000FF" size="3">【相关文章】</font></strong></th><th style="text-align:center"><strong><font color="#9932CC" size="3">状态</font></strong></th><th style="text-align:center"><strong>源码版本</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">内存泄露</font></strong></td><td style="text-align:center"><a href>带你领略 Android 内存泄漏的前世今生</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3"></font></strong></td><td style="text-align:center"><a href>聊聊 ANR 之 Input 超时</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">ANR</font></strong></td><td style="text-align:center"><a href>聊聊 ANR 之 Broadcast 超时</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3"></font></strong></td><td style="text-align:center"><a href>聊聊 ANR 之 Service 超时</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr></tbody></table><p><br></p><h4 id="Thinking-in-Android-–-“进程线程”"><a href="#Thinking-in-Android-–-“进程线程”" class="headerlink" title="Thinking in Android – “进程线程”"></a><center>Thinking in Android – “进程线程”</center></h4><p><br></p><table><thead><tr><th style="text-align:center"><strong><font color="#EE2C2C" size="3">【进程线程】</font></strong></th><th style="text-align:center"><strong><font color="#0000FF" size="3">【相关文章】</font></strong></th><th style="text-align:center"><strong><font color="#9932CC" size="3">状态</font></strong></th><th style="text-align:center"><strong>源码版本</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">AsyncTask</font></strong></td><td style="text-align:center"><a href>AsyncTask 详解（用法篇）</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">同步和死锁</font></strong></td><td style="text-align:center"><a href>浅析多线程中的 “同步” 和 “死锁”</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr></tbody></table><p><br></p><h4 id="Thinking-in-Android-–-“常用组件”"><a href="#Thinking-in-Android-–-“常用组件”" class="headerlink" title="Thinking in Android – “常用组件”"></a><center>Thinking in Android – “常用组件”</center></h4><p><br></p><table><thead><tr><th style="text-align:center"><strong><font color="#EE2C2C" size="3">【常用组件】</font></strong></th><th style="text-align:center"><strong><font color="#0000FF" size="3">【相关文章】</font></strong></th><th style="text-align:center"><strong><font color="#9932CC" size="3">状态</font></strong></th><th style="text-align:center"><strong>源码版本</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">Activity</font></strong></td><td style="text-align:center"><a href>探讨 Activity 的启动模式</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">Activity</font></strong></td><td style="text-align:center"><a href>探讨 Activity 的生命周期</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">Fragment</font></strong></td><td style="text-align:center"><a href>探讨 Fragment 的生命周期</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">Service</font></strong></td><td style="text-align:center"><a href>探讨 Service 的使用方法</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">Broadcast</font></strong></td><td style="text-align:center"><a href>探讨 “动态广播” 和 “静态广播” 的用法和区别</a></td><td style="text-align:center"><font color="#FF0000" size="3">修订中</font></td><td style="text-align:center"><strong>Android 9.0</strong></td></tr></tbody></table><p><br></p><h4 id="Thinking-in-Android-–-“谷歌认证”"><a href="#Thinking-in-Android-–-“谷歌认证”" class="headerlink" title="Thinking in Android – “谷歌认证”"></a><center>Thinking in Android – “谷歌认证”</center></h4><p><br></p><table><thead><tr><th style="text-align:center"><strong><font color="#EE2C2C" size="3">【谷歌认证】</font></strong></th><th style="text-align:center"><strong><font color="#0000FF" size="3">【相关文章】</font></strong></th><th style="text-align:center"><strong>版本</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">GMS</font></strong></td><td style="text-align:center"><a href>深入解读 GMS 认证</a></td><td style="text-align:center"><font color="#FF0000" size="3">P 版本，cts_r17，gts_6.0 r4</font></td></tr></tbody></table><p><br></p><h4 id="Thinking-in-Android-–-“经验总结”"><a href="#Thinking-in-Android-–-“经验总结”" class="headerlink" title="Thinking in Android – “经验总结”"></a><center>Thinking in Android – “经验总结”</center></h4><p><br></p><table><thead><tr><th style="text-align:center"><strong><font color="#EE2C2C" size="3">【经验总结】</font></strong></th><th style="text-align:center"><strong><font color="#0000FF" size="3">【相关文章】</font></strong></th><th style="text-align:center"><strong><font color="#9932CC" size="3">状态</font></strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">Bug/需求</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2019/04/15/10.jing-yan-zong-jie-xi-lie-android-kai-fa-chang-jian-wen-ti-ji-chu-pian/">Android 开发常见问题总结（基础篇）</a></td><td style="text-align:center"><font color="#0000ff" size="3">持续更新</font></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">面试题</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2019/04/23/10.jing-yan-zong-jie-xi-lie-guan-yu-shi-jian-fen-fa-ji-zhi-de-mian-shi-ti-ji/">“事件分发机制” - 面试题集</a></td><td style="text-align:center"><font color="#0000ff" size="3">持续更新</font></td></tr></tbody></table><p><br></p><h4 id="Thinking-in-Android-–-“算法专栏”"><a href="#Thinking-in-Android-–-“算法专栏”" class="headerlink" title="Thinking in Android – “算法专栏”"></a><center>Thinking in Android – “算法专栏”</center></h4><p><br></p><table><thead><tr><th style="text-align:center"><strong><font color="#EE2C2C" size="3">【算法专栏】</font></strong></th><th style="text-align:center"><strong><font color="#0000FF" size="3">【相关文章】</font></strong></th><th style="text-align:center"><strong><font color="#9932CC" size="3">状态</font></strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">算法复杂度</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2019/03/01/11.suan-fa-zhuan-lan-xi-lie-tan-tan-shi-jian-fu-za-du/">谈谈算法中的 “时间复杂度”</a></td><td style="text-align:center"><font color="#0000ff" size="3">完结</font></td></tr></tbody></table><p><br></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架服务 </tag>
            
            <tag> 通信机制 </tag>
            
            <tag> 性能优化 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资源收藏</title>
      <link href="/2019/12/30/00.thinking-in-android-02.zi-yuan-shou-cang/"/>
      <url>/2019/12/30/00.thinking-in-android-02.zi-yuan-shou-cang/</url>
      
        <content type="html"><![CDATA[<h4 id="Android-官方"><a href="#Android-官方" class="headerlink" title="Android 官方"></a><center>Android 官方</center></h4><p><br></p><style>table th:first-of-type {    width: 490px;}</style><table><thead><tr><th style="text-align:center"><strong><a href="https://source.android.com/" target="_blank" rel="noopener">AOSP</a></strong></th><th style="text-align:center"><strong><a href="https://developer.android.google.cn/index.html" target="_blank" rel="noopener">Android Developers</a></strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><a href="http://www.android-studio.org/" target="_blank" rel="noopener">Android Studio - 中文社区</a></strong></td><td style="text-align:center"><strong><a href="http://androidxref.com/" target="_blank" rel="noopener">Android 源码 - 在线检索</a></strong></td></tr><tr><td style="text-align:center"><strong><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="noopener">Android官方培训课程中文版</a></strong></td><td style="text-align:center"><strong>… …</strong></td></tr></tbody></table><p><br></p><hr><h4 id="Android-知名博主"><a href="#Android-知名博主" class="headerlink" title="Android 知名博主"></a><center>Android 知名博主</center></h4><p><br></p><style>table th:first-of-type {    width: 490px;}</style><table><thead><tr><th style="text-align:center"><strong><a href="http://gityuan.com/" target="_blank" rel="noopener">Gityuan</a></strong></th><th style="text-align:center"><strong><a href="https://blog.csdn.net/innost?viewmode=contents" target="_blank" rel="noopener">Innost 的专栏</a></strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><a href="https://blog.csdn.net/luoshengyang/article/details/8923485" target="_blank" rel="noopener">老罗的 Android 之旅</a></strong></td><td style="text-align:center"><strong><a href="http://blog.csdn.net/guolin_blog/" target="_blank" rel="noopener">郭霖</a></strong></td></tr><tr><td style="text-align:center"><strong><a href="http://liuwangshu.cn/system/" target="_blank" rel="noopener">刘望舒</a></strong></td><td style="text-align:center"><strong><a href="https://me.csdn.net/cjpx00008" target="_blank" rel="noopener">香辣牛肉面</a></strong></td></tr><tr><td style="text-align:center"><strong><a href="https://www.jianshu.com/u/77699cd41b28" target="_blank" rel="noopener">i校长</a></strong></td><td style="text-align:center"><strong><a href="http://guoyangard.cn/" target="_blank" rel="noopener">ArrayBy</a></strong></td></tr><tr><td style="text-align:center"><strong><a href="http://blog.csdn.net/Android_Tutor/" target="_blank" rel="noopener">魏祝林</a></strong></td><td style="text-align:center"><strong><a href="https://www.jianshu.com/u/3b1099674c2c" target="_blank" rel="noopener">看书的小蜗牛</a></strong></td></tr><tr><td style="text-align:center"><strong><a href="https://blog.csdn.net/Gaugamela/article/details/78655546" target="_blank" rel="noopener">ZhangJianIsAStark</a></strong></td><td style="text-align:center"><strong><a href="https://www.jianshu.com/u/8b9c629f69dd" target="_blank" rel="noopener">隔壁老李头</a></strong></td></tr></tbody></table><p><br></p><hr><h4 id="Android-精品技术贴"><a href="#Android-精品技术贴" class="headerlink" title="Android 精品技术贴"></a><center>Android 精品技术贴</center></h4><p><br></p><style>table th:first-of-type {    width: 490px;}</style><table><thead><tr><th style="text-align:center"><strong><a href="https://www.cnblogs.com/vincent0519/p/6060114.html" target="_blank" rel="noopener">Android 性能优化浅谈</a></strong></th><th style="text-align:center"><strong><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2017/0526/7973.html" target="_blank" rel="noopener">31个 Android 开发工具</a></strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><a href="https://meedamian.com/post/deuglifying-android-studio/" target="_blank" rel="noopener">Making Android Studio pretty</a></strong></td><td style="text-align:center"><strong><a href="https://blog.csdn.net/QQxiaoqiang1573/article/details/72903237" target="_blank" rel="noopener">Android Studio 导入整个 Android 系统源码</a></strong></td></tr><tr><td style="text-align:center"><strong><a href="https://github.com/BolexLiu/AutoEx" target="_blank" rel="noopener">帮助 Android 开发者，自动寻找 Stack Overflow 的解决方案</a></strong></td><td style="text-align:center"><strong><a href="https://androidweekly.cn/" target="_blank" rel="noopener">Android 开发技术周报</a></strong></td></tr></tbody></table><p><br></p><p><br></p><hr><h4 id="Linux-专区"><a href="#Linux-专区" class="headerlink" title="Linux 专区"></a><center>Linux 专区</center></h4><p><br></p><style>table th:first-of-type {    width: 490px;}</style><table><thead><tr><th style="text-align:center"><strong><a href="http://linux.vbird.org/" target="_blank" rel="noopener">鸟哥的 Linux 私房菜</a></strong></th><th style="text-align:center"><strong><a href="https://blog.csdn.net/u010746357/article/details/81813739" target="_blank" rel="noopener">Ubuntu 频繁卡死解决</a></strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><a href="https://www.cnblogs.com/wmr95/p/7574615.html" target="_blank" rel="noopener">Ubuntu16.04 安装 Teamviewer</a></strong></td><td style="text-align:center"><strong>… …</strong></td></tr></tbody></table><p><br></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 官方资料 </tag>
            
            <tag> 优秀博主 </tag>
            
            <tag> 干货资源 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客日志</title>
      <link href="/2019/12/29/00.thinking-in-android-03.xiu-gai-ri-zhi/"/>
      <url>/2019/12/29/00.thinking-in-android-03.xiu-gai-ri-zhi/</url>
      
        <content type="html"><![CDATA[<h4 id="Thinking-in-Android-–-“新增”"><a href="#Thinking-in-Android-–-“新增”" class="headerlink" title="Thinking in Android – “新增”"></a><center>Thinking in Android – “新增”</center></h4><p><br></p><table><thead><tr><th style="text-align:center">日期</th><th style="text-align:center">新增博文</th></tr></thead><tbody><tr><td style="text-align:center">2019.05.26</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《谈谈 ANR 之 Input 超时》 </font></td></tr><tr><td style="text-align:center">2019.05.10</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《谈谈 ANR 之 Broadcast 超时》 </font></td></tr><tr><td style="text-align:center">2019.04.29</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《谈谈 ANR 之 Service 超时》 </font></td></tr><tr><td style="text-align:center">2019.04.24</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《应用 ANR 分析实录》 </font></td></tr><tr><td style="text-align:center">2019.04.23</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《“事件分发机制” - 面试题集》 </font></td></tr><tr><td style="text-align:center">2019.04.15</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《Android 日常开发问题总结》 </font></td></tr><tr><td style="text-align:center">2019.04.01</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《深入解读 GMS 认证》 </font></td></tr><tr><td style="text-align:center">2019.03.01</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《谈谈算法中的 “时间复杂度》 </font></td></tr><tr><td style="text-align:center">2019.02.06</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《PackageManagerService 钻研（8）- APK 安装（下）》 </font></td></tr><tr><td style="text-align:center">2019.02.01</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《PackageManagerService 钻研（7）- APK 安装（中）》 </font></td></tr><tr><td style="text-align:center">2019.01.26</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《PackageManagerService 钻研（6）- APK 安装（上）》 </font></td></tr><tr><td style="text-align:center">2019.01.22</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《PackageManagerService 钻研（5）- PackageParser》 </font></td></tr><tr><td style="text-align:center">2019.01.16</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《PackageManagerService 钻研（4）- PackageInstaller》 </font></td></tr><tr><td style="text-align:center">2019.01.12</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《PackageManagerService 钻研（3）- PackageManager》 </font></td></tr><tr><td style="text-align:center">2019.01.05</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《PackageManagerService 钻研（2）- 构造函数》 </font></td></tr><tr><td style="text-align:center">2019.01.01</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《PackageManagerService 钻研（1）- 启动流程》 </font></td></tr><tr><td style="text-align:center">2018.12.26</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《深入钻研 Android 启动阶段 之 Launcher 启动和加载》 </font></td></tr><tr><td style="text-align:center">2018.12.18</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《深入钻研 Android 启动阶段 之 systemserver》 </font></td></tr><tr><td style="text-align:center">2018.12.10</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《深入钻研 Android 启动阶段 之 zygote》 </font></td></tr><tr><td style="text-align:center">2018.12.01</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《深入钻研 Android 启动阶段 之 init》 </font></td></tr><tr><td style="text-align:center">2018.11.20</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《深入钻研 Android 核心机制 之 Binder（基础篇）》 </font></td></tr><tr><td style="text-align:center">2018.11.10</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《深入钻研 Android 核心机制 之 JNI》 </font></td></tr><tr><td style="text-align:center">2018.11.01</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《深入钻研 Android 核心机制 之 LowMemoryKiller》 </font></td></tr><tr><td style="text-align:center">2018.09.26</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《深入钻研 Android 核心机制 之 事件分发》 </font></td></tr><tr><td style="text-align:center">2018.09.13</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《深入钻研 Android 核心机制 之 Handler（原理篇）》 </font></td></tr><tr><td style="text-align:center">2018.09.10</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《深入钻研 Android 核心机制 之 Handler（用法篇）》 </font></td></tr><tr><td style="text-align:center">2018.09.03</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《带你领略 Android 内存泄漏的前世今生》 </font></td></tr><tr><td style="text-align:center">2018.08.20</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《深入钻研 Android 核心机制 之 进程被杀》 </font></td></tr><tr><td style="text-align:center">2018.08.10</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《深入钻研 Android 设计模式 之 单例模式》 </font></td></tr><tr><td style="text-align:center">2018.08.08</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《AsyncTask 详解（用法篇）》 </font></td></tr><tr><td style="text-align:center">2018.08.06</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《浅析多线程中的 “同步” 和 “死锁”》 </font></td></tr><tr><td style="text-align:center">2018.07.28</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《探讨 “动态广播” 和 “静态广播” 的用法和区别》 </font></td></tr><tr><td style="text-align:center">2018.07.25</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《探讨 Service 的使用方法》 </font></td></tr><tr><td style="text-align:center">2018.07.22</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《探讨 Fragment 的生命周期》 </font></td></tr><tr><td style="text-align:center">2018.07.20</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《探讨 Activity 的生命周期》 </font></td></tr><tr><td style="text-align:center">2018.07.18</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《探讨 Activity 的启动模式》 </font></td></tr></tbody></table><p><br></p><h4 id="Thinking-in-Android-–-“修订”"><a href="#Thinking-in-Android-–-“修订”" class="headerlink" title="Thinking in Android – “修订”"></a><center>Thinking in Android – “修订”</center></h4><p><br></p><table><thead><tr><th style="text-align:center">日期</th><th style="text-align:center">修订博文</th><th style="text-align:center">细节说明</th></tr></thead><tbody><tr><td style="text-align:center">2019.04.24</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《“事件分发机制” - 面试题集》 </font></td><td style="text-align:center">新增面试题</td></tr><tr><td style="text-align:center">2019.04.23</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《深入钻研 Android 核心机制 之 事件分发》</font></td><td style="text-align:center">更加细化源码流程</td></tr><tr><td style="text-align:center">2019.02.02</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《谈谈算法中的 “时间复杂度”》 </font></td><td style="text-align:center">优化细节</td></tr></tbody></table><p><br></p><h4 id="Thinking-in-Android-–-“优化”"><a href="#Thinking-in-Android-–-“优化”" class="headerlink" title="Thinking in Android – “优化”"></a><center>Thinking in Android – “优化”</center></h4><p><br></p><table><thead><tr><th style="text-align:center">日期</th><th style="text-align:center">修改记录 </th></tr></thead><tbody><tr><td style="text-align:center">2019.04.23</td><td style="text-align:center"><font color="#87CEEB" size="3">UI 细节优化</font></td></tr><tr><td style="text-align:center">2019.04.14</td><td style="text-align:center"><font color="#87CEEB" size="3">重构博客布局及文章</font></td></tr><tr><td style="text-align:center">2019.01.24</td><td style="text-align:center"><font color="#87CEEB" size="3">优化布局，导航栏新增项</font></td></tr><tr><td style="text-align:center">2019.01.07</td><td style="text-align:center"><font color="#87CEEB" size="3">Blog计划更新，部分细节优化</font></td></tr><tr><td style="text-align:center">2019.01.02</td><td style="text-align:center"><font color="#87CEEB" size="3">局部修改UI细节</font></td></tr><tr><td style="text-align:center">2018.12.29</td><td style="text-align:center"><font color="#87CEEB" size="3">新增 Links 页，局部修改UI细节</font></td></tr><tr><td style="text-align:center">2018.12.13</td><td style="text-align:center"><font color="#87CEEB" size="3">关于作者页面 – 主题优化</font></td></tr><tr><td style="text-align:center">2018.12.11</td><td style="text-align:center"><font color="#87CEEB" size="3">优化 Blog – 标签页</font></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><font color="#87CEEB" size="3">优化 Blog – 目录页</font></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><font color="#87CEEB" size="3">新增 Blog –   时间源追溯</font></td></tr><tr><td style="text-align:center">2018.12.03</td><td style="text-align:center"><font color="#87CEEB" size="3">Blog 主题改版 – 卡片式风格</font></td></tr><tr><td style="text-align:center">2018.07.01</td><td style="text-align:center"><font color="#87CEEB" size="3">《Thinking in Android》博客启程</font></td></tr></tbody></table><p><br></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客优化 </tag>
            
            <tag> 修订记录 </tag>
            
            <tag> 方向规划 </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈 ANR 之 Input 超时</title>
      <link href="/2019/05/26/07.xing-neng-you-hua-xi-lie-tan-tan-ying-yong-anr-zhi-input-chao-shi/"/>
      <url>/2019/05/26/07.xing-neng-you-hua-xi-lie-tan-tan-ying-yong-anr-zhi-input-chao-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-核心源码"><a href="#1-核心源码" class="headerlink" title="1. 核心源码"></a>1. 核心源码</h1><table><thead><tr><th>关键类</th><th>路径（/frameworks/base/）</th></tr></thead><tbody><tr><td><font color="#D15FEE">ActiveServices.java</font></td><td>services/core/java/com/android/server/am/ActiveServices.java</td></tr><tr><td><font color="#D15FEE">ActivityManagerService.java</font></td><td>services/core/java/com/android/server/am/ActivityManagerService.java</td></tr><tr><td><font color="#D15FEE">AppErrors.java</font></td><td>services/core/java/com/android/server/am/AppErrors.java</td></tr><tr><td><font color="#D15FEE">BroadcastQueue.java</font></td><td>services/core/java/com/android/server/am/BroadcastQueue.java</td></tr></tbody></table><p><br></p><hr><h1 id="2-ANR-基础认知"><a href="#2-ANR-基础认知" class="headerlink" title="2. ANR 基础认知"></a>2. ANR 基础认知</h1><h2 id="2-1-ANR-是什么？"><a href="#2-1-ANR-是什么？" class="headerlink" title="2.1 ANR 是什么？"></a>2.1 ANR 是什么？</h2><p><strong><font color="#FF00FF">ANR(Application Not Responding)</font></strong>，应用程序无响应，简单一个定义，却涵盖了很多 Android 系统的设计思想。</p><p>首先，<font color="#0000FF">ANR 属于应用程序的范畴</font>，这不同于 SNR(System Not Respoding)，SNR 反映的问题是系统进程(system_server)失去了响应能力，而 ANR 明确将问题圈定在应用程序。<strong><code>SNR 由 Watchdog 机制保证，ANR 由消息处理机制保证</code></strong>，Android 在系统层实现了一套精密的机制来发现 ANR，核心原理是<strong><code>消息调度</code></strong>和<strong><code>超时处理</code></strong>。</p><p>其次，ANR 机制<strong><code>主体实现在系统层</code></strong>。所有与 ANR 相关的消息，都会经过系统进程(system_server)调度，然后派发到应用进程完成对消息的实际处理，同时，系统进程设计了不同的超时限制来跟踪消息的处理。一旦应用程序处理消息不当，超时限制就起作用了，它收集一些系统状态，例如：CPU/IO使用情况、进程函数调用栈，并且报告用户有进程<strong><code>无响应了（ANR 对话框）</code></strong>。</p><p>然后，ANR 问题<strong><code>本质是一个性能问题</code></strong>。ANR 机制实际上对应用程序主线程的限制，要求主线程在限定的时间内处理完一些最常见的操作(启动服务、处理广播、处理输入)，如果处理超时，则认为主线程已经失去了响应其他操作的能力。主线程中的<strong><code>耗时操作</code></strong>，例如：密集CPU运算、大量IO、复杂界面布局等，都会降低应用程序的响应能力。</p><p>最后，部分 ANR 问题是很难分析的，有时候由于系统底层的一些影响，导致消息调度失败，出现问题的场景又难以复现。这类 ANR 问题往往需要花费大量的时间去了解系统的一些行为，超出了 ANR 机制本身的范畴。</p><h2 id="2-2-ANR-机制"><a href="#2-2-ANR-机制" class="headerlink" title="2.2 ANR 机制"></a>2.2 ANR 机制</h2><p>分析一些初级的 ANR 问题，只需要简单理解最终输出的日志即可，但对于一些由系统问题(例如：CPU 负载过高、进程卡死)引发的 ANR，就需要对整个 ANR 机制有所了解，才能定位出问题的原因。</p><p><strong><font color="#FF0000" size="3">ANR 机制可以分为两部分：</font></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ &nbsp;<strong>ANR的监测</strong>：Android 对于不同的 ANR 类型(Broadcast，Service，InputEvent)都有一套监测机制。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ &nbsp;<strong>ANR的报告</strong>：在监测到 ANR 以后，需要显示 ANR 对话框、输出日志(发生 ANR 时的进程函数调用栈、CPU 使用情况等)。</p><h2 id="2-3-ANR-的触发原因"><a href="#2-3-ANR-的触发原因" class="headerlink" title="2.3 ANR 的触发原因"></a>2.3 ANR 的触发原因</h2><p>前面我们说过，出现 ANR 之后一个直观现象就是系统会展示出一个 ANR 对话框。</p><p><strong><font color="#FF0000" size="3">谷歌文档中对 ANR 产生的原因是这么描述的：</font></strong></p><p>Android 系统中的应用被 <code>ActivityManagerService</code> 及 <code>WindowManagerService</code> 两个系统服务监控着，系统会在如下两种情况展示出 ANR 的对话框！</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ &nbsp;<font color="#ff00ff" size="3">KeyDispatchTimeout</font>&nbsp;(<font color="#FF0000"> 5 seconds</font> ) ：按键或触摸事件在特定时间内无响应<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ &nbsp;<font color="#ff00ff" size="3">BroadcastTimeout</font>&nbsp;(<font color="#FF0000"> 10 seconds</font> )：BroadcastReceiver 在特定时间内无法处理完成<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ &nbsp;<font color="#ff00ff" size="3">ServiceTimeout</font>&nbsp;(<font color="#FF0000"> 20 seconds</font> ) ：Service 在特定的时间内无法处理完成</p><h1 id="3-ANR-的监测机制"><a href="#3-ANR-的监测机制" class="headerlink" title="3. ANR 的监测机制"></a>3. ANR 的监测机制</h1><h2 id="3-3-Input-超时处理"><a href="#3-3-Input-超时处理" class="headerlink" title="3.3 Input 超时处理"></a>3.3 Input 超时处理</h2><p>应用程序可以接收输入事件(按键、触屏、轨迹球等)，当 <strong><font color="#FF0000">5秒</font></strong> 内没有处理完毕时，则会引发 ANR。</p><p><strong><font color="#7FF000" size="3">和分析 Broadcast ANR 一样，我们先抛出 Input ANR 两个问题：</font></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;💥 输入事件经历了一些什么工序才能被派发到应用的界面？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;💥 如何检测输入事件处理超时？</p><p>我们先来看看第一个问题。</p><h3 id="输入事件派发工序"><a href="#输入事件派发工序" class="headerlink" title="输入事件派发工序"></a>输入事件派发工序</h3><p>输入事件最开始由硬件设备（如按键或触摸屏幕）发起，Android 有一套输入子系统来发现各种输入事件，这些事件最终都会被 <font color="#FF00FF">InputDispatcher</font> 分发到各个需要接收事件的窗口。那么，窗口如何告之 InputDispatcher 自己需要处理输入事件呢？Android 通过 <font color="#FF00FF">InputChannel</font> 连接 InputDispatcher 和窗口，<font color="#FF7F24">InputChannel 其实是封装后的 Linux管道(Pipe)。每一个窗口都会有一个独立的 InputChannel ，窗口需要将这个 InputChannel 注册到 InputDispatcher 中</font>:</p><pre class=" language-cpp"><code class="language-cpp">status_t InputDispatcher<span class="token operator">::</span><span class="token function">registerInputChannel</span><span class="token punctuation">(</span><span class="token keyword">const</span> sp<span class="token operator">&lt;</span>InputChannel<span class="token operator">></span><span class="token operator">&amp;</span> inputChannel<span class="token punctuation">,</span>        <span class="token keyword">const</span> sp<span class="token operator">&lt;</span>InputWindowHandle<span class="token operator">></span><span class="token operator">&amp;</span> inputWindowHandle<span class="token punctuation">,</span> <span class="token keyword">bool</span> monitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    sp<span class="token operator">&lt;</span>Connection<span class="token operator">></span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Connection</span><span class="token punctuation">(</span>inputChannel<span class="token punctuation">,</span> inputWindowHandle<span class="token punctuation">,</span> monitor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> inputChannel<span class="token operator">-</span><span class="token operator">></span><span class="token function">getFd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mConnectionsByFd<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    mLooper<span class="token operator">-</span><span class="token operator">></span><span class="token function">addFd</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ALOOPER_EVENT_INPUT<span class="token punctuation">,</span> handleReceiveCallback<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    mLooper<span class="token operator">-</span><span class="token operator">></span><span class="token function">wake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对于 InputDispatcher 而言，每注册一个 InputChannel 都被视为一个 Connection ，通过文件描述符来区别。InputDispatcher 是一个消息处理循环，当有新的 Connection 时，就需要唤醒消息循环队列进行处理。</p><p>输入事件的类型有很多，按键、轨迹球、触屏等，Android 对这些事件进行了分类，处理这些事件的窗口也被赋予了一个类型(targetType)：Foucused 或 Touched。</p><p>如果当前输入事件是按键类型，则寻找 Focused 类型的窗口。如果当前输入事件类型是触摸类型，则寻找 Touched 类型的窗口。</p><p>InputDispatcher 需要经过以下复杂的调用关系，才能把一个输入事件派发出去(调用关系以按键事件为例，触屏事件的调用关系类似)：</p><pre><code>InputDispatcherThread::threadLoop()└── InputDispatcher::dispatchOnce()    └── InputDispatcher::dispatchOnceInnerLocked()        └── InputDispatcher::dispatchKeyLocked()            └── InputDispatcher::dispatchEventLocked()                └── InputDispatcher::prepareDispatchCycleLocked()                    └── InputDispatcher::enqueueDispatchEntriesLocked()                        └── InputDispatcher::startDispatchCycleLocked()                            └── InputPublisher::publishKeyEvent()</code></pre><p>具体每个函数的实现逻辑此处不表。我们提炼出几个关键点：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;💥 InputDispatcherThread 是一个线程，它处理一次消息的派发。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;💥 输入事件作为一个消息，需要排队等待派发，每一个 Connection 都维护两个队列：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;· outboundQueue: 等待发送给窗口的事件。每一个新消息到来，都会先进入到此队列。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;· waitQueue: 已经发送给窗口的事件。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;💥 publishKeyEvent 完成后，表示事件已经派发了，就将事件从 outboundQueue 挪到了 waitQueue。</p><p>事件经过这么一轮处理，就算是从 InputDispatcher 派发出去了，但事件是不是被窗口收到了，还需要等待接收方的 <font color="#FF00FF">“finished”</font> 通知。在向 InputDispatcher 注册 InputChannel 的时候，同时会注册一个回调函数 handleReceiveCallback():</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> InputDispatcher<span class="token operator">::</span><span class="token function">handleReceiveCallback</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> events<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        status <span class="token operator">=</span> connection<span class="token operator">-</span><span class="token operator">></span>inputPublisher<span class="token punctuation">.</span><span class="token function">receiveFinishedSignal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>seq<span class="token punctuation">,</span> <span class="token operator">&amp;</span>handled<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        d<span class="token operator">-</span><span class="token operator">></span><span class="token function">finishDispatchCycleLocked</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">,</span> connection<span class="token punctuation">,</span> seq<span class="token punctuation">,</span> handled<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    d<span class="token operator">-</span><span class="token operator">></span><span class="token function">unregisterInputChannelLocked</span><span class="token punctuation">(</span>connection<span class="token operator">-</span><span class="token operator">></span>inputChannel<span class="token punctuation">,</span> notify<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当收到的 status 为 OK 时，会调用 <font color="#FF00FF">finishDispatchCycleLocked()</font> 来完成一个消息的处理：</p><pre><code>InputDispatcher::finishDispatchCycleLocked()└── InputDispatcher::onDispatchCycleFinishedLocked()    └── InputDispatcher::doDispatchCycleFinishedLockedInterruptible()        └── InputDispatcher::startDispatchCycleLocked()</code></pre><p>调用到 <font color="#FF00FF">doDispatchCycleFinishedLockedInterruptible()</font> 方法时，会将已经成功派发的消息从 <font color="#FF00FF">waitQueue</font> 中移除， 进一步调用会 <font color="#FF00FF">startDispatchCycleLocked</font> 开始派发新的事件。</p><p><strong><font color="#FF0000">至此，我们回答了第一个问题：</font></strong></p><p><strong><font color="#FF7F24">一个正常的输入事件会经过从 outboundQueue 挪到 waitQueue 的过程，表示消息已经派发出去；再经过从 waitQueue 中移除的过程，表示消息已经被窗口接收。InputDispatcher 作为中枢，不停地在递送着输入事件，当一个事件无法得到处理的时候，InputDispatcher 不能就此死掉啊，否则系统也太容易崩溃了。InputDispatcher 的策略是放弃掉处理不过来的事件，并发出通知(这个通知机制就是ANR)，继续进行下一轮消息的处理。</font></strong></p><p><strong><font color="#FF0000">理解输入事件分发模型，我们可以举一个生活中的例子：</font></strong></p><pre><code>每一个输入事件可以比做一个快递，InputDispatcher 就像一个快递中转站，窗口就像是收件人，InputChannel 就像是快递员。所有快递都会经过中转站中处理，中转站需要知道每一个快递的收件人是谁，通过快递员将快递发送到具体的收件人。这其中有很多场景导致快递不能及时送到：譬如联系不到收件人;快递很多，快递员会忙不过来;快递员受伤休假了等等…这时候快递员就需要告知中转站：有快递无法及时送到了。中转站在收到快递员的通知后，一边继续派发其他快递，一边报告上级。</code></pre><h3 id="检测输入事件处理超时"><a href="#检测输入事件处理超时" class="headerlink" title="检测输入事件处理超时"></a>检测输入事件处理超时</h3><p>在了解输入事件分发模型之后，我们可以见识一下ANR机制了。在派发事件时，<font color="#FF00FF">dispatchKeyLocked()</font> 和 <font color="#FF00FF">dispatchMotionLocked()</font>，需要找到当前的焦点窗口，焦点窗口才是最终接收事件的地方，找窗口的过程就会判断是否已经发生了ANR：</p><pre><code>InputDispatcher::findFocusedWindowTargetsLocked()InputDispatcher::findTouchedWindowTargetsLocked()└── InputDispatcher::handleTargetsNotReadyLocked()    └── InputDispatcher::onANRLocked()        └── InputDispatcher::doNotifyANRLockedInterruptible()            └── NativeInputManager::notifyANR()</code></pre><p>（1）首先，会调用 <font color="#FF00FF">findFocusedWindowTargetsLocked()</font> 或 <font color="#FF00FF">findTouchedWindowTargetsLocked()</font> 寻找接收输入事件的窗口。</p><p>在找到窗口以后，会调用 <font color="#FF00FF">checkWindowReadyForMoreInputLocked()</font> 检查窗口是否有能力再接收新的输入事件，会有一系列的场景阻碍事件的继续派发：</p><p><strong><font color="#7FF000" size="3">场景1: 窗口处于paused状态，不能处理输入事件</font></strong></p><p>“Waiting because the [targetType] window is paused.”</p><p><strong><font color="#7FF000" size="3">场景2: 窗口还未向InputDispatcher注册，无法将事件派发到窗口</font></strong></p><p>“Waiting because the [targetType] window’s input channel is not registered with the input dispatcher. The window may be in the process of being removed.”</p><p><strong><font color="#7FF000" size="3">场景3: 窗口和InputDispatcher的连接已经中断，即InputChannel不能正常工作</font></strong></p><p>“Waiting because the [targetType] window’s input connection is [status]. The window may be in the process of being removed.”</p><p><strong><font color="#7FF000" size="3">场景4: InputChannel已经饱和，不能再处理新的事件</font></strong></p><p>“Waiting because the [targetType] window’s input channel is full. Outbound queue length: %d. Wait queue length: %d.”</p><p><strong><font color="#7FF000" size="3">场景5: 对于按键类型(KeyEvent)的输入事件，需要等待上一个事件处理完毕</font></strong></p><p>“Waiting to send key event because the [targetType] window has not finished processing all of the input events that were previously delivered to it. Outbound queue length: %d. Wait queue length: %d.”</p><p><strong><font color="#7FF000" size="3">场景6: 对于触摸类型(TouchEvent)的输入事件，可以立即派发到当前的窗口，因为TouchEvent都是发生在用户当前可见的窗口。但有一种情况， 如果当前应用由于队列有太多的输入事件等待派发，导致发生了ANR，那TouchEvent事件就需要排队等待派发。</font></strong></p><p>“Waiting to send non-key event because the %s window has not finished processing certain input events that were delivered to it over %0.1fms ago. Wait queue length: %d. Wait queue head age: %0.1fms.”</p><p>（2）然后，上述有任何一个场景发生了，则输入事件需要继续等待，紧接着就会调用 <font color="#FF00FF">handleTargetsNotReadyLocked()</font> 来判断是不是已经的等待超时了：</p><pre class=" language-cpp"><code class="language-cpp">int32_t InputDispatcher<span class="token operator">::</span><span class="token function">handleTargetsNotReadyLocked</span><span class="token punctuation">(</span>nsecs_t currentTime<span class="token punctuation">,</span>        <span class="token keyword">const</span> EventEntry<span class="token operator">*</span> entry<span class="token punctuation">,</span>        <span class="token keyword">const</span> sp<span class="token operator">&lt;</span>InputApplicationHandle<span class="token operator">></span><span class="token operator">&amp;</span> applicationHandle<span class="token punctuation">,</span>        <span class="token keyword">const</span> sp<span class="token operator">&lt;</span>InputWindowHandle<span class="token operator">></span><span class="token operator">&amp;</span> windowHandle<span class="token punctuation">,</span>        nsecs_t<span class="token operator">*</span> nextWakeupTime<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentTime <span class="token operator">>=</span> mInputTargetWaitTimeoutTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onANRLocked</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">,</span> applicationHandle<span class="token punctuation">,</span> windowHandle<span class="token punctuation">,</span>            entry<span class="token operator">-</span><span class="token operator">></span>eventTime<span class="token punctuation">,</span> mInputTargetWaitStartTime<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span>nextWakeupTime <span class="token operator">=</span> LONG_LONG_MIN<span class="token punctuation">;</span>        <span class="token keyword">return</span> INPUT_EVENT_INJECTION_PENDING<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>最后，如果当前事件派发已经超时，则说明已经检测到了 ANR ，调用 <font color="#FF00FF">onANRLocked()</font> 方法，然后将 <font color="#FF00FF">nextWakeupTime</font> 设置为最小值，马上开始下一轮调度。在 onANRLocked() 方法中， 会保存 ANR 的一些状态信息，调用 <font color="#FF00FF">doNotifyANRLockedInterruptible()</font> ，进一步会调用到 JNI 层的 <font color="#FF00FF">NativeInputManager::notifyANR()</font> 方法，它的主要功能就是衔接 Native 层和 Java 层，直接调用 Java 层的 <font color="#FF00FF">InputManagerService.notifyANR()</font> 方法。</p><p><strong><font color="#FF0000">至此，ANR的处理逻辑转交到了Java层。</font></strong>底层(Native)发现一旦有输入事件派发超时，就会通知上层(Java)，上层收到ANR通知后，决定是否终止当前输入事件的派发。</p><p>发生ANR时，Java层最开始的入口是 <font color="#FF00FF">InputManagerService.notifyANR()</font> ，它是直接被 Native 层调用的。我们先把 ANR 的Java层调用关系列出来：</p><pre><code>InputManagerService.notifyANR()└── InputMonitor.notifyANR()    ├── IApplicationToken.keyDispatchingTimedOut()    │   └── ActivityRecord.keyDispatchingTimedOut()    │       └── AMS.inputDispatchingTimedOut()    │           └── AMS.appNotResponding()    │    └── AMS.inputDispatchingTimedOut()        └── AMS.appNotResponding()</code></pre><p><font color="#FF00FF">InputManagerService.notifyANR()</font> 只是为 Native层 定义了一个接口，它直接调用 <font color="#FF00FF">InputMonitor.notifyANR()</font>。如果该方法的返回值等于0，则放弃本次输入事件；如果大于0，则表示需要继续等待的时间。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">notifyANR</span><span class="token punctuation">(</span>InputApplicationHandle inputApplicationHandle<span class="token punctuation">,</span>      InputWindowHandle inputWindowHandle<span class="token punctuation">,</span> String reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>appWindowToken <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> appWindowToken<span class="token punctuation">.</span>appToken <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// appToken实际上就是当前的ActivityRecord。</span>        <span class="token comment" spellcheck="true">// 如果发生ANR的Activity还存在，则直接通过ActivityRecord通知事件派发超时</span>        <span class="token keyword">boolean</span> abort <span class="token operator">=</span> appWindowToken<span class="token punctuation">.</span>appToken<span class="token punctuation">.</span><span class="token function">keyDispatchingTimedOut</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> abort<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> appWindowToken<span class="token punctuation">.</span>inputDispatchingTimeoutNanos<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>windowState <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果发生ANR的Activity已经销毁了，则通过AMS通知事件派发超时</span>        <span class="token keyword">long</span> timeout <span class="token operator">=</span> ActivityManagerNative<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inputDispatchingTimedOut</span><span class="token punctuation">(</span>                        windowState<span class="token punctuation">.</span>mSession<span class="token punctuation">.</span>mPid<span class="token punctuation">,</span> aboveSystem<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> timeout<span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// abort dispatching</span><span class="token punctuation">}</span></code></pre><p>上述方法中有两种不同的调用方式，但最终都会交由 <font color="#FF00FF">AMS.inputDispatchingTimedOut()</font> 处理。AMS 有重载的 <font color="#FF00FF">inputDispatchingTimedOut()</font> 方法，他们的参数不一样。ActivityRecord 调用时，可以传入的信息更多一点(当前发生ANR的界面是哪一个)。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">inputDispatchingTimedOut</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> aboveSystem<span class="token punctuation">,</span> String reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 根据进程号获取到ProcessRecord</span>    proc <span class="token operator">=</span> mPidsSelfLocked<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 2. 获取超时时间</span>    <span class="token comment" spellcheck="true">// 测试环境下的超时时间是INSTRUMENTATION_KEY_DISPATCHING_TIMEOUT(60秒)，</span>    <span class="token comment" spellcheck="true">// 正常环境下的超时时间是KEY_DISPATCHING_TIMEOUT(5秒)</span>    timeout <span class="token operator">=</span> <span class="token function">getInputDispatchingTimeoutLocked</span><span class="token punctuation">(</span>proc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用重载的函数，如果返回True，则表示需要中断当前的事件派发;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">inputDispatchingTimedOut</span><span class="token punctuation">(</span>proc<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> aboveSystem<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3. 返回继续等待的时间，这个值会传递到Native层</span>    <span class="token keyword">return</span> timeout<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">inputDispatchingTimedOut</span><span class="token punctuation">(</span><span class="token keyword">final</span> ProcessRecord proc<span class="token punctuation">,</span>        <span class="token keyword">final</span> ActivityRecord activity<span class="token punctuation">,</span> <span class="token keyword">final</span> ActivityRecord parent<span class="token punctuation">,</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> aboveSystem<span class="token punctuation">,</span> String reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 1. 发生ANR进程正处于调试状态，不需要中断事件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>proc<span class="token punctuation">.</span>debugging<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2. 当前正在做dexopt操作，这会比较耗时，不需要中断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mDidDexOpt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Give more time since we were dexopting.</span>        mDidDexOpt <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3. 发生ANR的进程是测试进程，需要中断，但不在UI界面显示ANR信息判断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>proc<span class="token punctuation">.</span>instrumentationClass <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token function">finishInstrumentationLocked</span><span class="token punctuation">(</span>proc<span class="token punctuation">,</span> Activity<span class="token punctuation">.</span>RESULT_CANCELED<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4. 通知UI界面显示ANR信息</span>    mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">appNotResponding</span><span class="token punctuation">(</span>proc<span class="token punctuation">,</span> activity<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> aboveSystem<span class="token punctuation">,</span> annotation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong><font color="#FF0000">至此，我们回答了第二个问题：</font></strong></p><p><strong><font color="#FF7F24">在 InputDispatcher 派发输入事件时，会寻找接收事件的窗口，如果无法正常派发，则可能会导致当前需要派发的事件超时(默认是5秒)。Native层发现超时了，会通知Java层，Java层经过一些处理后，会反馈给Native层，是继续等待还是丢弃当前派发的事件。</font></strong></p><h2 id="3-4-小结"><a href="#3-4-小结" class="headerlink" title="3.4 小结"></a>3.4 小结</h2><p><strong>ANR监测机制包含三种：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;💥 <strong><font color="#7FF000">Service ANR</font></strong>，前台进程中Service生命周期不能超过 <strong><font color="#FF0000">20秒</font></strong>，后台进程中Service的生命周期不能超过<strong><font color="#FF0000"> 200秒</font></strong>。 在启动Service时，抛出定时消息 <strong><font color="#FF34B3">SERVICE_TIMEOUT_MSG</font></strong> 或 <strong><font color="#FF34B3">SERVICE_BACKGOURND_TIMEOUT_MSG</font></strong>，如果定时消息响应了，则说明发生了ANR。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;💥 <strong><font color="#7FF000">Broadcast ANR</font></strong>，前台的“串行广播消息”必须在 <strong><font color="#FF0000">10秒</font></strong> 内处理完毕，后台的“串行广播消息”必须在<strong><font color="#FF0000"> 60秒 </font></strong>处理完毕， 每派发串行广播消息到一个接收器时，都会抛出一个定时消息 <strong><font color="#FF34B3">BROADCAST_TIMEOUT_MSG</font></strong>，如果定时消息响应，则判断是否广播消息处理超时，超时就说明发生了ANR。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;💥 <strong><font color="#7FF000">Input ANR</font></strong>，输入事件必须在 <strong><font color="#FF0000">5秒</font></strong> 内处理完毕。在派发一个输入事件时，会判断当前输入事件是否需要等待，如果需要等待，则判断是否等待已经超时，超时就说明发生了ANR。</p><p>ANR监测机制实际上是对应用程序主线程的要求，要求主线成必须在限定的时间内，完成对几种操作的响应；否则，就可以认为应用程序主线程失去响应能力。</p><p><strong>从ANR的三种监测机制中，我们看到不同超时机制的设计：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;💥 Service 和 Broadcast 都是由 AMS 调度，利用 Handler 和 Looper，设计了一个 TIMEOUT 消息交由 AMS 线程来处理，整个超时机制的实现都是在Java层；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;💥 InputEvent 由 InputDispatcher 调度，待处理的输入事件都会进入队列中等待，设计了一个等待超时的判断，超时机制的实现在Native层。</p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> ANR </tag>
            
            <tag> 无响应 </tag>
            
            <tag> Input </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈 ANR 之 Broadcast 超时</title>
      <link href="/2019/05/10/07.xing-neng-you-hua-xi-lie-tan-tan-ying-yong-anr-zhi-broadcast-chao-shi/"/>
      <url>/2019/05/10/07.xing-neng-you-hua-xi-lie-tan-tan-ying-yong-anr-zhi-broadcast-chao-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-核心源码"><a href="#1-核心源码" class="headerlink" title="1. 核心源码"></a>1. 核心源码</h1><table><thead><tr><th>关键类</th><th>路径（/frameworks/base/）</th></tr></thead><tbody><tr><td><font color="#D15FEE">ActiveServices.java</font></td><td>services/core/java/com/android/server/am/ActiveServices.java</td></tr><tr><td><font color="#D15FEE">ActivityManagerService.java</font></td><td>services/core/java/com/android/server/am/ActivityManagerService.java</td></tr><tr><td><font color="#D15FEE">AppErrors.java</font></td><td>services/core/java/com/android/server/am/AppErrors.java</td></tr><tr><td><font color="#D15FEE">BroadcastQueue.java</font></td><td>services/core/java/com/android/server/am/BroadcastQueue.java</td></tr></tbody></table><p><br></p><hr><h1 id="2-ANR-基础认知"><a href="#2-ANR-基础认知" class="headerlink" title="2. ANR 基础认知"></a>2. ANR 基础认知</h1><h2 id="2-1-ANR-是什么？"><a href="#2-1-ANR-是什么？" class="headerlink" title="2.1 ANR 是什么？"></a>2.1 ANR 是什么？</h2><p><strong><font color="#FF00FF">ANR(Application Not Responding)</font></strong>，应用程序无响应，简单一个定义，却涵盖了很多 Android 系统的设计思想。</p><p>首先，<font color="#0000FF">ANR 属于应用程序的范畴</font>，这不同于 SNR(System Not Respoding)，SNR 反映的问题是系统进程(system_server)失去了响应能力，而 ANR 明确将问题圈定在应用程序。<strong><code>SNR 由 Watchdog 机制保证，ANR 由消息处理机制保证</code></strong>，Android 在系统层实现了一套精密的机制来发现 ANR，核心原理是<strong><code>消息调度</code></strong>和<strong><code>超时处理</code></strong>。</p><p>其次，ANR 机制<strong><code>主体实现在系统层</code></strong>。所有与 ANR 相关的消息，都会经过系统进程(system_server)调度，然后派发到应用进程完成对消息的实际处理，同时，系统进程设计了不同的超时限制来跟踪消息的处理。一旦应用程序处理消息不当，超时限制就起作用了，它收集一些系统状态，例如：CPU/IO使用情况、进程函数调用栈，并且报告用户有进程<strong><code>无响应了（ANR 对话框）</code></strong>。</p><p>然后，ANR 问题<strong><code>本质是一个性能问题</code></strong>。ANR 机制实际上对应用程序主线程的限制，要求主线程在限定的时间内处理完一些最常见的操作(启动服务、处理广播、处理输入)，如果处理超时，则认为主线程已经失去了响应其他操作的能力。主线程中的<strong><code>耗时操作</code></strong>，例如：密集CPU运算、大量IO、复杂界面布局等，都会降低应用程序的响应能力。</p><p>最后，部分 ANR 问题是很难分析的，有时候由于系统底层的一些影响，导致消息调度失败，出现问题的场景又难以复现。这类 ANR 问题往往需要花费大量的时间去了解系统的一些行为，超出了 ANR 机制本身的范畴。</p><h2 id="2-2-ANR-机制"><a href="#2-2-ANR-机制" class="headerlink" title="2.2 ANR 机制"></a>2.2 ANR 机制</h2><p>分析一些初级的 ANR 问题，只需要简单理解最终输出的日志即可，但对于一些由系统问题(例如：CPU 负载过高、进程卡死)引发的 ANR，就需要对整个 ANR 机制有所了解，才能定位出问题的原因。</p><p><strong><font color="#FF0000" size="3">ANR 机制可以分为两部分：</font></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ &nbsp;<strong>ANR的监测</strong>：Android 对于不同的 ANR 类型(Broadcast，Service，InputEvent)都有一套监测机制。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ &nbsp;<strong>ANR的报告</strong>：在监测到 ANR 以后，需要显示 ANR 对话框、输出日志(发生 ANR 时的进程函数调用栈、CPU 使用情况等)。</p><h2 id="2-3-ANR-的触发原因"><a href="#2-3-ANR-的触发原因" class="headerlink" title="2.3 ANR 的触发原因"></a>2.3 ANR 的触发原因</h2><p>前面我们说过，出现 ANR 之后一个直观现象就是系统会展示出一个 ANR 对话框。</p><p><strong><font color="#FF0000" size="3">谷歌文档中对 ANR 产生的原因是这么描述的：</font></strong></p><p>Android 系统中的应用被 <code>ActivityManagerService</code> 及 <code>WindowManagerService</code> 两个系统服务监控着，系统会在如下两种情况展示出 ANR 的对话框！</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ &nbsp;<font color="#ff00ff" size="3">KeyDispatchTimeout</font>&nbsp;(<font color="#FF0000"> 5 seconds</font> ) ：按键或触摸事件在特定时间内无响应<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ &nbsp;<font color="#ff00ff" size="3">BroadcastTimeout</font>&nbsp;(<font color="#FF0000"> 10 seconds</font> )：BroadcastReceiver 在特定时间内无法处理完成<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ &nbsp;<font color="#ff00ff" size="3">ServiceTimeout</font>&nbsp;(<font color="#FF0000"> 20 seconds</font> ) ：Service 在特定的时间内无法处理完成</p><h1 id="3-ANR-的监测机制"><a href="#3-ANR-的监测机制" class="headerlink" title="3. ANR 的监测机制"></a>3. ANR 的监测机制</h1><h2 id="3-1-Broadcast-超时处理"><a href="#3-1-Broadcast-超时处理" class="headerlink" title="3.1 Broadcast 超时处理"></a>3.1 Broadcast 超时处理</h2><p>应用程序可以注册广播接收器，实现 BroadcastReceiver.onReceive() 方法来完成对广播的处理。通常，这个方法是在主线程执行的，Android 限定它执行时间不能超过10秒，否则，就会引发 ANR。</p><p>onReceive() 也可以调度在其他线程执行，通过 Context.registerReceiver(BroadcastReceiver, IntentFilter, String, Handler) 这个方法注册广播接收器，可以指定一个处理的 Handler，将 onReceive() 调度在非主线程执行。</p><p><strong><font color="#ff0000" size="3">这边我们先抛出两个问题：</font></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ Android 如何将广播投递给各个应用程序？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ Android 如何检测广播处理超时？</p><h3 id="3-1-1-广播消息的调度"><a href="#3-1-1-广播消息的调度" class="headerlink" title="3.1.1 广播消息的调度"></a>3.1.1 广播消息的调度</h3><p>AMS 维护了两个广播队列 BroadcastQueue:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ <font color="#ff00ff" size="3">foreground queue</font>，前台队列的超时时间是 10 秒。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ <font color="#ff00ff" size="3">background queue</font>，后台队列的超时时间是 60 秒。</p><p>之所以有两个，就是因为要区分不同超时时间。所有发送的广播都会进入到队列中等待调度，在发送广播时，可以通过 <code>Intent.FLAG_RECEIVER_FOREGROUND</code> 参数将广播投递到前台队列。</p><p>AMS 会不断地从队列中取出广播消息派发到各个 BroadcastReceiver。当要派发广播时，AMS 会调用 <code>BroadcastQueue.scheduleBroadcastsLocked()</code> 方法！</p><h4 id="3-1-1-1-scheduleBroadcastsLocked"><a href="#3-1-1-1-scheduleBroadcastsLocked" class="headerlink" title="3.1.1.1 scheduleBroadcastsLocked"></a>3.1.1.1 scheduleBroadcastsLocked</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">BroadcastQueue</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduleBroadcastsLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mBroadcastsScheduled<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>BROADCAST_INTENT_MSG<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mBroadcastsScheduled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上述方法中，往 AMS 的消息队列发送 BROADCAST_INTENT_MSG 消息，由此也可以看到真正派发广播的是 AMS 线程。由于上述方法可能被并发调用，所以通过 <code>mBroadcastsScheduled</code> 这个变量来标识 <code>BROADCAST_INTENT_MSG</code> 是不是已经被 <code>AMS</code> 接收了，当已经抛出的消息还未被接受时，不需要重新抛出。 </p><p>我们看看该消息的处理逻辑！</p><h4 id="3-1-1-2-BroadcastHandler"><a href="#3-1-1-2-BroadcastHandler" class="headerlink" title="3.1.1.2 BroadcastHandler"></a>3.1.1.2 BroadcastHandler</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">BroadcastQueue</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">BroadcastHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">BroadcastHandler</span><span class="token punctuation">(</span>Looper looper<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>looper<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> BROADCAST_INTENT_MSG<span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token function">processNextBroadcast</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> BROADCAST_TIMEOUT_MSG<span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mService<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">broadcastTimeoutLocked</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接下来调用 <code>BroadcastQueue.processNextBroadcast()</code> 方法，参数为 true 表示这是一次来自 <code>BROADCAST_INTENT_MSG</code> 消息的派发请求。</p><p><code>processNextBroadcast()</code> 是派发广播消息最为核心的函数，代码量自然也不小，我们分成几个部分来分析！</p><blockquote><p>阶段 1：处理并行广播信息</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">processNextBroadcast</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fromMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>mService<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BroadcastRecord r<span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁 阶段一：处理非串行广播消息 🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁            ✨ <span class="token comment" spellcheck="true">// ① 设置mBroadcastsScheduled</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fromMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// fromMsg 参数为 true 表示这是一次来自 BROADCAST_INTENT_MSG 消息的派发请求              </span>                mBroadcastsScheduled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ✨ <span class="token comment" spellcheck="true">// ② 处理“并行广播消息”</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>mParallelBroadcasts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> N <span class="token operator">=</span> r<span class="token punctuation">.</span>receivers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Object target <span class="token operator">=</span> r<span class="token punctuation">.</span>receivers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token function">deliverToRegisteredReceiverLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token punctuation">(</span>BroadcastFilter<span class="token punctuation">)</span>target<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">addBroadcastToHistoryLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>            ✨ <span class="token comment" spellcheck="true">// ③ 处理阻塞的广播消息</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingBroadcast <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isDead<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// It's still alive, so keep waiting</span>                    <span class="token comment" spellcheck="true">// isDead表示当前广播消息的进程的存活状态</span>                    <span class="token comment" spellcheck="true">// 如果还活着，则返回该函数，继续等待下次派发</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span></code></pre><p>接下来我们详细分析这三部分的函数所做工作：</p><p><strong><font color="#7FF000" size="3">1、设置mBroadcastsScheduled</font></strong></p><p>该变量在前文说过，是对 BROADCAST_INTENT_MSG 进行控制。 如果是响应 BROADCAST_INTENT_MSG 的派发调用，则将 mBroadcastsScheduled 设为false， 表示本次 BROADCAST_INTENT_MSG 已经处理完毕，可以继续抛出下一次 BROADCAST_INTENT_MSG 消息了。</p><p><strong><font color="#7FF000" size="3">2、处理“并行广播消息”</font></strong></p><p>我们知道广播接收器有“动态”和“静态”之分，通过 Context.registerReceiver() 注册的广播接收器为“动态”的，通过 AndroidManifest.xml 注册的广播接收器为“静态”的。</p><p>广播消息有“并行”和“串行”之分，“并行广播消息”都会派发到“动态”接收器，“串行广播消息”则会根据实际情况派发到两种接收器。我们先不去探究 Android 为什么这么设计，只关注这两种广播消息派发的区别。</p><p><strong>在BroadcastQueue维护着两个队列：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;💥 <strong><font color="#FF0000">mParallelBroadcasts</font></strong>：“并行广播消息”都会进入到此队列中排队。“并行广播消息”可以一次性派发完毕，即在一个循环中将广播派发到所有的“动态”接收器。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;💥 <strong><font color="#FF0000">mOrderedBroadcasts</font></strong>：“串行广播消息”都会进入到此队列中排队。“串行广播消息”需要轮侯派发，当一个接收器处理完毕后，会再抛出 BROADCAST_INTENT_MSG 消息，再次进入 BroadcastQueue.processNextBroadcast() 处理下一个。</p><p><strong><font color="#7FF000" size="3">3、处理阻塞的广播消息</font></strong></p><p>有时候会存在一个广播消息派发不出去的情况，这个广播消息会保存在 mPendingBroadcast 变量中。新一轮的派发启动时，会判断接收该消息的进程是否还活着，如果接收进程还活着，那么就继续等待。否则，就放弃这个广播消息。</p><blockquote><p>阶段 2：处理串行广播信息</p></blockquote><p>接下来是最为复杂的一部分，<strong><font color="#FF7F24">处理“串行广播消息”，ANR 监测机制只在这一类广播消息中才发挥作用</font></strong>，也就是说<strong><font color="#FF0000">“并行广播消息”是不会发生ANR的</font></strong>。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">processNextBroadcast</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fromMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>mService<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BroadcastRecord r<span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁 阶段一：处理并行广播消息 🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁            🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁 阶段二：处理串行广播消息 🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁            <span class="token keyword">boolean</span> looped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">do</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                r <span class="token operator">=</span> mOrderedBroadcasts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> forceReceive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> numReceivers <span class="token operator">=</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>receivers <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> r<span class="token punctuation">.</span>receivers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                ✨ <span class="token comment" spellcheck="true">// ① 广播消息的第一个ANR监测机制</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mService<span class="token punctuation">.</span>mProcessesReady <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">.</span>dispatchTime <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">long</span> now <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>numReceivers <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                            <span class="token punctuation">(</span>now <span class="token operator">></span> r<span class="token punctuation">.</span>dispatchTime <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>mTimeoutPeriod<span class="token operator">*</span>numReceivers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                            <span class="token comment" spellcheck="true">/// M: ANR Debug Mechanism</span>                            <span class="token operator">!</span>mService<span class="token punctuation">.</span>mAnrManager<span class="token punctuation">.</span><span class="token function">isAnrDeferrable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">broadcastTimeoutLocked</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// forcibly finish this broadcast</span>                        forceReceive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        r<span class="token punctuation">.</span>state <span class="token operator">=</span> BroadcastRecord<span class="token punctuation">.</span>IDLE<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                ✨ <span class="token comment" spellcheck="true">// ② 判断该广播消息是否处理完毕</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>receivers <span class="token operator">==</span> null <span class="token operator">||</span> r<span class="token punctuation">.</span>nextReceiver <span class="token operator">>=</span> numReceivers                        <span class="token operator">||</span> r<span class="token punctuation">.</span>resultAbort <span class="token operator">||</span> forceReceive<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token function">cancelBroadcastTimeoutLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    mOrderedBroadcasts<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    r <span class="token operator">=</span> null<span class="token punctuation">;</span>                    looped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这部分是一个 <font color="#FF00FF">do-while</font> 循环，每次都从 <font color="#FF00FF">mOrderedBroadcasts</font> 队列中取出第一条广播消息进行处理。第一个 <font color="#FF00FF">Broadcast ANR</font> 监测机制千呼万唤总算是出现了：</p><p><strong><font color="#7FF000" size="3">1、判定当前时间是否已经超过了 r.dispatchTime + 2×mTimeoutPeriod×numReceivers。</font></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;💥 dispatchTime 表示这一系列广播消息开始派发的时间。“串行广播消息”是逐个接收器派发的，一个接收器处理完毕后，才开始处理下一个消息派发。开始派发到第一个接收器的时间就是 dispatchTime。 dispatchTime 需要开始等广播消息派发以后才会设定，也就是说，第一次进入processNextBroadcast()时，dispatchTime=0,并不会进入该条件判断。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;💥 mTimeoutPeriod 由当前 BroadcastQueue 的类型决定(forground为10秒，background为60秒)。这个时间在初始化 BroadcastQueue 的时候就设置好了，本意是限定每一个 Receiver 处理广播的时间，这里利用它做了一个超时计算。</p><p><strong><font color="#7FF000" size="3">2、如果广播消息已经处理完毕，则从mOrderedBroadcasts中移除，重新循环，处理下一条;否则，就会跳出循环。</font></strong></p><blockquote><p>阶段 3：设定定时消息</p></blockquote><p>以上代码块完成的主要任务是从队列中取一条“串行广播消息”，接下来就准备派发了。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">processNextBroadcast</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fromMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>mService<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BroadcastRecord r<span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁 阶段一：处理并行广播消息 🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁            🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁 阶段二：处理串行广播消息 🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁            🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁 阶段三：设定定时消息 🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">// 串行广播消息的第二个ANR监测机制</span>            r<span class="token punctuation">.</span>receiverTime <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> mPendingBroadcastTimeoutMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">long</span> timeoutTime <span class="token operator">=</span> r<span class="token punctuation">.</span>receiverTime <span class="token operator">+</span> mTimeoutPeriod<span class="token punctuation">;</span>                <span class="token function">setBroadcastTimeoutLocked</span><span class="token punctuation">(</span>timeoutTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre><p>取出“串行广播消息”后，一旦要开始派发，第二个ANR检测机制就出现了。</p><p><font color="#FF00FF">mPendingBroadcastTimeoutMessage</font> 变量用于标识当前是否有阻塞的超时消息，如果没有则调用 <font color="#FF00FF">BroadcastQueue.setBroadcastTimeoutLocked()</font>：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setBroadcastTimeoutLocked</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeoutTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> mPendingBroadcastTimeoutMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Message msg <span class="token operator">=</span> mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>BROADCAST_TIMEOUT_MSG<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mHandler<span class="token punctuation">.</span><span class="token function">sendMessageAtTime</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> timeoutTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            mPendingBroadcastTimeoutMessage <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            mService<span class="token punctuation">.</span>mAnrManager<span class="token punctuation">.</span><span class="token function">sendBroadcastMonitorMessage</span><span class="token punctuation">(</span>timeoutTime<span class="token punctuation">,</span> mTimeoutPeriod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>通过设置一个定时消息 <font color="#FF00FF">BROADCAST_TIMEOUT_MSG </font>来跟踪当前广播消息的执行情况，这种超时监测机制跟 Service ANR 很类似，也是抛到 AMS 线程的消息队列。如果所有的接收器都处理完毕了，则会调用 <font color="#FF00FF">cancelBroadcastTimeoutLocked()</font> 清除该消息；否则，该消息就会响应，并调用 <font color="#FF00FF">broadcastTimeoutLocked()</font>，这个方法在第一种 ANR 监测机制的时候调用过，第二种 ANR 监测机制也会调用。</p><blockquote><p>阶段 4：向“动态”接收器派发广播消息</p></blockquote><p>设置完定时消息后，就开始派发广播消息了，首先是“动态”接收器：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">processNextBroadcast</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fromMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>mService<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BroadcastRecord r<span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁 阶段一：处理并行广播消息 🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁            🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁 阶段二：处理串行广播消息 🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁            🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁 阶段三：设定定时消息 🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁            🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁 阶段四：向“动态”接收器派发广播消息 🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁            <span class="token keyword">final</span> BroadcastOptions brOptions <span class="token operator">=</span> r<span class="token punctuation">.</span>options<span class="token punctuation">;</span>            <span class="token keyword">final</span> Object nextReceiver <span class="token operator">=</span> r<span class="token punctuation">.</span>receivers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>recIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 动态接收器的类型都是BroadcastFilter</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextReceiver <span class="token keyword">instanceof</span> <span class="token class-name">BroadcastFilter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                BroadcastFilter filter <span class="token operator">=</span> <span class="token punctuation">(</span>BroadcastFilter<span class="token punctuation">)</span>nextReceiver<span class="token punctuation">;</span>                <span class="token function">deliverToRegisteredReceiverLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> r<span class="token punctuation">.</span>ordered<span class="token punctuation">,</span> recIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre><p>“动态”接收器的载体进程一般是处于运行状态的，所以向这种类型的接收器派发消息相对简单，调用 <font color="#FF00FF">BroadcastQueue.deliverToRegisteredReceiverLocked()</font> 完成接下来的工作。</p><blockquote><p>阶段 5：向“静态”接收器派发广播消息</p></blockquote><p>“静态”接收器是在AndroidManifest.xml中注册的，派发的时候，可能广播接收器的载体进程还没有启动，所以，这种场景会复杂很多。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">processNextBroadcast</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fromMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>mService<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BroadcastRecord r<span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁 阶段一：处理并行广播消息 🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁            🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁 阶段二：处理串行广播消息 🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁            🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁 阶段三：设定定时消息 🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁            🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁 阶段四：向“动态”接收器派发广播消息 🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁            🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁 阶段五：向“静态”接收器派发广播消息 🍁🍁🍁🍁🍁🍁🍁🍁🍁🍁            <span class="token comment" spellcheck="true">// 静态接收器的类型都是 ResolveInfo</span>            ResolveInfo info <span class="token operator">=</span>                <span class="token punctuation">(</span>ResolveInfo<span class="token punctuation">)</span>nextReceiver<span class="token punctuation">;</span>            ✨ <span class="token comment" spellcheck="true">// ① 权限检查</span>            ComponentName component <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span>                    info<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                    info<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            String targetProcess <span class="token operator">=</span> info<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span>processName<span class="token punctuation">;</span>            ✨ <span class="token comment" spellcheck="true">// ② 获取接收器所在的进程</span>            ProcessRecord app <span class="token operator">=</span> mService<span class="token punctuation">.</span><span class="token function">getProcessRecordLocked</span><span class="token punctuation">(</span>targetProcess<span class="token punctuation">,</span>                    info<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>uid<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            ✨ <span class="token comment" spellcheck="true">// ③ 进程已经启动</span>            <span class="token comment" spellcheck="true">// Is this receiver's application already running?</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>app <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> app<span class="token punctuation">.</span>thread <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>app<span class="token punctuation">.</span>killed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    app<span class="token punctuation">.</span><span class="token function">addPackage</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                            info<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>versionCode<span class="token punctuation">,</span> mService<span class="token punctuation">.</span>mProcessStats<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">processCurBroadcastLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            ✨ <span class="token comment" spellcheck="true">// ④ 进程还未启动</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>curApp<span class="token operator">=</span>mService<span class="token punctuation">.</span><span class="token function">startProcessLocked</span><span class="token punctuation">(</span>targetProcess<span class="token punctuation">,</span>                    info<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">getFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> Intent<span class="token punctuation">.</span>FLAG_FROM_BACKGROUND<span class="token punctuation">,</span>                    <span class="token string">"broadcast"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>curComponent<span class="token punctuation">,</span>                    <span class="token punctuation">(</span>r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">getFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>Intent<span class="token punctuation">.</span>FLAG_RECEIVER_BOOT_UPGRADE<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">logBroadcastReceiverDiscardLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">finishReceiverLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> r<span class="token punctuation">.</span>resultCode<span class="token punctuation">,</span> r<span class="token punctuation">.</span>resultData<span class="token punctuation">,</span>                        r<span class="token punctuation">.</span>resultExtras<span class="token punctuation">,</span> r<span class="token punctuation">.</span>resultAbort<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">scheduleBroadcastsLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                r<span class="token punctuation">.</span>state <span class="token operator">=</span> BroadcastRecord<span class="token punctuation">.</span>IDLE<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ✨ <span class="token comment" spellcheck="true">// ⑤ 进程启动失败</span>            mPendingBroadcast <span class="token operator">=</span> r<span class="token punctuation">;</span>            mPendingBroadcastRecvIndex <span class="token operator">=</span> recIdx<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    </code></pre><p>我们分别看下：</p><p><strong><font color="#7FF000" size="3">1、权限检查</font></strong></p><p>“静态”接收器是 ResolveInfo ，需要通过 PackageManager 获取包信息，进行权限检查。</p><p><strong><font color="#7FF000" size="3">2、获取接收器所在的进程</font></strong></p><p>经过一系列复杂的权限检查后，终于可以向目标接收器派发了。通过 AMS.getProcessRecordLocked() 获取广播接收器的进程信息。</p><p><strong><font color="#7FF000" size="3">3、进程已经启动</font></strong></p><p>如果 app.thread ！= null ，则进程已经启动，就可以调用 BroadcastQueue.processCurBroadcastLocked() 进行接下来的派发处理了。</p><p><strong><font color="#7FF000" size="3">4、进程还未启动</font></strong></p><p>如果进程还没有启动，则需要通过 AMS.startProcessLocked() 来启动进程，当前消息并未派发，调用 BroadcastQueue.scheduleBroadcastsLocked() 进入下一次的调度。</p><p><strong><font color="#7FF000" size="3">5、进程启动失败</font></strong></p><p>如果进程启动失败了，则当前消息记录成 mPendingBroadcast ，即阻塞的广播消息，等待下一次调度时处理。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><strong><font color="#FF7F24">庞大的 processNextBroadcast()终于完结了，它的功能就是对广播消息进行调度，该方法被设计得十分复杂而精巧，用于应对不同的广播消息和接收器的处理。<font></font></font></strong></p><h3 id="广播消息的跨进程传递"><a href="#广播消息的跨进程传递" class="headerlink" title="广播消息的跨进程传递"></a>广播消息的跨进程传递</h3><p>调度是完成了，接下来，我们就来分析被调度广播消息如何到达应用程序。上文的分析中，最终有两个方法将广播消息派发出去： <font color="#FF00FF">BroadcastQueue.deliverToRegisteredReceiverLocked()</font> 和 <font color="#FF00FF">BroadcastQueue.processCurBroadcastLocked()</font>。</p><p>抛开这两个函数的逻辑，试想要将广播消息从 AMS 所在的 system_server 进程传递到应用程序的进程，该怎么实现？</p><p>自然需要用到跨进程调用，Android中最常规的手段就是 <strong><font color="#FF7F24">Binder机制</font></strong>（关于Binder机制，我在别的博文中讲过）。没错，广播消息派发到应用进程就是这么玩的。</p><h4 id="应用程序已启动"><a href="#应用程序已启动" class="headerlink" title="应用程序已启动"></a>应用程序已启动</h4><p>我们在上面分析过，对于应用程序已经启动(app.thread != null)的情况，会通过 <font color="#FF00FF">IApplicationThread</font> 发起跨进程调用：</p><pre class=" language-java"><code class="language-java">            <span class="token comment" spellcheck="true">// Is this receiver's application already running?</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>app <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> app<span class="token punctuation">.</span>thread <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>app<span class="token punctuation">.</span>killed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    app<span class="token punctuation">.</span><span class="token function">addPackage</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                            info<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>versionCode<span class="token punctuation">,</span> mService<span class="token punctuation">.</span>mProcessStats<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">processCurBroadcastLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们查看 <font color="#FF00FF">processCurBroadcastLocked</font> 方法：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">processCurBroadcastLocked</span><span class="token punctuation">(</span>BroadcastRecord r<span class="token punctuation">,</span>            ProcessRecord app<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            mService<span class="token punctuation">.</span><span class="token function">notifyPackageUse</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                      PackageManager<span class="token punctuation">.</span>NOTIFY_PACKAGE_USE_BROADCAST_RECEIVER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 通过 IApplicationThread 发起跨进程调用</span>            app<span class="token punctuation">.</span>thread<span class="token punctuation">.</span><span class="token function">scheduleReceiver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>intent<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>curReceiver<span class="token punctuation">,</span>                    mService<span class="token punctuation">.</span><span class="token function">compatibilityInfoForPackageLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>curReceiver<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>                    r<span class="token punctuation">.</span>resultCode<span class="token punctuation">,</span> r<span class="token punctuation">.</span>resultData<span class="token punctuation">,</span> r<span class="token punctuation">.</span>resultExtras<span class="token punctuation">,</span> r<span class="token punctuation">.</span>ordered<span class="token punctuation">,</span> r<span class="token punctuation">.</span>userId<span class="token punctuation">,</span>                    app<span class="token punctuation">.</span>repProcState<span class="token punctuation">)</span><span class="token punctuation">;</span>            started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>调用关系如下：</p><pre><code>ActivityThread.ApplicationThread.scheduleReceiver()└── ActivityThread.handleReceiver()    └── BroadcastReceiver.onReceive()</code></pre><h4 id="应用程序未启动"><a href="#应用程序未启动" class="headerlink" title="应用程序未启动"></a>应用程序未启动</h4><p>对于应用程序还未启动的情况，会调用 <font color="#FF00FF">IIntentReceiver</font> 发起跨进程调用，应用进程的实现在LoadedApk.ReceiverDispatcher.IntentReceiver中，调用关系如下：</p><pre><code>LoadedApk.ReceiverDispatcher.IntentReceiver.performReceive()└── LoadedApk.ReceiverDispatcher.performReceiver()    └── LoadedApk.ReceiverDispatcher.Args.run()        └── BroadcastReceiver.onReceive()</code></pre><p>发现没？最终都会调用到 <font color="#FF00FF">BroadcastReceiver.onReceive()</font> ，在应用进程执行接收广播消息的具体动作。</p><p>对于“串行广播消息”而言，执行完了以后，还需要通知 system_server 进程，才能继续将广播消息派发到下一个接收器，这又需要跨进程调用了。 </p><p>应用进程在处理完广播消息后，即在 BroadcastReceiver.onReceive() 执行完毕后，会调用 <font color="#FF00FF">BroadcastReceiver.PendingResult.finish()</font> ， 接下来的调用关系如下：</p><pre><code>BroadcastReceiver.PendingResult.finish()└── BroadcastReceiver.PendingResult.sendFinished()    └── IActivityManager.finishReceiver()        └── ActivityManagerService.finishReceiver()            └── BroadcastQueue.processNextBroadcat()</code></pre><p>通过IActivityManager发起了一个从应用进程到 system_server 进程的调用，最终在AMS线程中，又走到了 <font color="#FF00FF">BroadcastQueue.processNextBroadcat()</font>, 开始下一轮的调度。</p><h4 id="broadcastTimeoutLocked"><a href="#broadcastTimeoutLocked" class="headerlink" title="broadcastTimeoutLocked()"></a>broadcastTimeoutLocked()</h4><p>前文说过，两种 ANR 机制最终都会调用 <font color="#FF00FF">BroadcastQueue.broadcastTimeoutLocked()</font> 方法， 第一种 ANR 监测生效时，会将 fromMsg 设置为 false ；第二种 ANR 监测生效时，会将 fromMsg 参数为 true 时，表示当前正在响应 <font color="#FF00FF">BROADCAST_TIMEOUT_MSG</font> 消息。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">broadcastTimeoutLocked</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fromMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ✨ <span class="token comment" spellcheck="true">// ① 设置mPendingBroadcastTimeoutMessage</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fromMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mPendingBroadcastTimeoutMessage <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            mService<span class="token punctuation">.</span>mAnrManager<span class="token punctuation">.</span><span class="token function">removeBroadcastMonitorMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">long</span> now <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ✨ <span class="token comment" spellcheck="true">// ② 判断第二种ANR机制是否超时</span>        BroadcastRecord r <span class="token operator">=</span> mOrderedBroadcasts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fromMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">long</span> timeoutTime <span class="token operator">=</span> r<span class="token punctuation">.</span>receiverTime <span class="token operator">+</span> mTimeoutPeriod<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeoutTime <span class="token operator">></span> now<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token function">setBroadcastTimeoutLocked</span><span class="token punctuation">(</span>timeoutTime<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        ✨ <span class="token comment" spellcheck="true">// ③ 已经超时，则结束对当前接收器，开始新一轮调度</span>        <span class="token function">finishReceiverLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> r<span class="token punctuation">.</span>resultCode<span class="token punctuation">,</span> r<span class="token punctuation">.</span>resultData<span class="token punctuation">,</span>                r<span class="token punctuation">.</span>resultExtras<span class="token punctuation">,</span> r<span class="token punctuation">.</span>resultAbort<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scheduleBroadcastsLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ✨ <span class="token comment" spellcheck="true">// ④ 抛出绘制ANR对话框的消息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>anrMessage <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Post the ANR to the handler since we do not want to process ANRs while</span>            <span class="token comment" spellcheck="true">// potentially holding our lock.</span>            mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AppNotResponding</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> anrMessage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong><font color="#7FF000" size="3">1、设置mPendingBroadcastTimeoutMessage</font></strong></p><p>mPendingBroadcastTimeoutMessage 标识是否存在未处理的 BROADCAST_TIMEOUT_MSG 消息，将其设置成false，允许继续抛出BROADCAST_TIMEOUT_MSG消息。</p><p><strong><font color="#7FF000" size="3">2、判断第二种ANR机制是否超时</font></strong></p><p>每次将广播派发到接收器，都会将 r.receiverTime 更新，如果判断当前还未超时，则又抛出一个 BROADCAST_TIMEOUT_MSG 消息。 正常情况下，所有接收器处理完毕后，才会清除 BROADCAST_TIMEOUT_MSG ；否则，每进行一次广播消息的调度，都会抛出 BROADCAST_TIMEOUT_MSG 消息。</p><p><strong><font color="#7FF000" size="3">3、已经超时，则结束对当前接收器，开始新一轮调度</font></strong></p><p>判断已经超时了，说明当前的广播接收器还未处理完毕，则结束掉当前的接收器，开始新一轮广播调度。</p><p><strong><font color="#7FF000" size="3">4、抛出绘制ANR对话框的消息</font></strong></p><p>最终，发出绘制 ANR 对话框的消息。</p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p><strong><font color="#FF0000">至此，我们回答了前文提出的两个问题:</font></strong></p><p><strong><font color="#FF7F24">AMS 维护着广播队列 BroadcastQueue ，AMS 线程不断从队列中取出消息进行调度，完成广播消息的派发。在派发“串行广播消息”时，会抛出一个定时消息 BROADCAST_TIMEOUT_MSG ，在广播接收器处理完毕后，AMS 会将定时消息清除。如果 BROADCAST_TIMEOUT_MSG 得到了响应，就会判断是否广播消息处理超时，最终通知ANR的发生。</font></strong></p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> Broadcast </tag>
            
            <tag> ANR </tag>
            
            <tag> 无响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈 ANR 之 Service 超时</title>
      <link href="/2019/04/29/07.xing-neng-you-hua-xi-lie-tan-tan-ying-yong-anr-zhi-service-chao-shi/"/>
      <url>/2019/04/29/07.xing-neng-you-hua-xi-lie-tan-tan-ying-yong-anr-zhi-service-chao-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-核心源码"><a href="#1-核心源码" class="headerlink" title="1. 核心源码"></a>1. 核心源码</h1><table><thead><tr><th>关键类</th><th>路径（/frameworks/base/）</th></tr></thead><tbody><tr><td><font color="#D15FEE">ActiveServices.java</font></td><td>services/core/java/com/android/server/am/ActiveServices.java</td></tr><tr><td><font color="#D15FEE">ActivityManagerService.java</font></td><td>services/core/java/com/android/server/am/ActivityManagerService.java</td></tr><tr><td><font color="#D15FEE">AppErrors.java</font></td><td>services/core/java/com/android/server/am/AppErrors.java</td></tr></tbody></table><p><br></p><hr><h1 id="2-ANR-基础认知"><a href="#2-ANR-基础认知" class="headerlink" title="2. ANR 基础认知"></a>2. ANR 基础认知</h1><h2 id="2-1-ANR-是什么？"><a href="#2-1-ANR-是什么？" class="headerlink" title="2.1 ANR 是什么？"></a>2.1 ANR 是什么？</h2><p><strong><font color="#FF00FF">ANR(Application Not Responding)</font></strong>，应用程序无响应，简单一个定义，却涵盖了很多 Android 系统的设计思想。</p><p>首先，<font color="#0000FF">ANR 属于应用程序的范畴</font>，这不同于 SNR(System Not Respoding)，SNR 反映的问题是系统进程(system_server)失去了响应能力，而 ANR 明确将问题圈定在应用程序。<strong><code>SNR 由 Watchdog 机制保证，ANR 由消息处理机制保证</code></strong>，Android 在系统层实现了一套精密的机制来发现 ANR，核心原理是<strong><code>消息调度</code></strong>和<strong><code>超时处理</code></strong>。</p><p>其次，ANR 机制<strong><code>主体实现在系统层</code></strong>。所有与 ANR 相关的消息，都会经过系统进程(system_server)调度，然后派发到应用进程完成对消息的实际处理，同时，系统进程设计了不同的超时限制来跟踪消息的处理。一旦应用程序处理消息不当，超时限制就起作用了，它收集一些系统状态，例如：CPU/IO使用情况、进程函数调用栈，并且报告用户有进程<strong><code>无响应了（ANR 对话框）</code></strong>。</p><p>然后，ANR 问题<strong><code>本质是一个性能问题</code></strong>。ANR 机制实际上对应用程序主线程的限制，要求主线程在限定的时间内处理完一些最常见的操作(启动服务、处理广播、处理输入)，如果处理超时，则认为主线程已经失去了响应其他操作的能力。主线程中的<strong><code>耗时操作</code></strong>，例如：密集CPU运算、大量IO、复杂界面布局等，都会降低应用程序的响应能力。</p><p>最后，部分 ANR 问题是很难分析的，有时候由于系统底层的一些影响，导致消息调度失败，出现问题的场景又难以复现。这类 ANR 问题往往需要花费大量的时间去了解系统的一些行为，超出了 ANR 机制本身的范畴。</p><h2 id="2-2-ANR-机制"><a href="#2-2-ANR-机制" class="headerlink" title="2.2 ANR 机制"></a>2.2 ANR 机制</h2><p>分析一些初级的 ANR 问题，只需要简单理解最终输出的日志即可，但对于一些由系统问题(例如：CPU 负载过高、进程卡死)引发的 ANR，就需要对整个 ANR 机制有所了解，才能定位出问题的原因。</p><p><strong><font color="#FF0000" size="3">ANR 机制可以分为两部分：</font></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ &nbsp;<strong>ANR的监测</strong>：Android 对于不同的 ANR 类型(Broadcast，Service，InputEvent)都有一套监测机制。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ &nbsp;<strong>ANR的报告</strong>：在监测到 ANR 以后，需要显示 ANR 对话框、输出日志(发生 ANR 时的进程函数调用栈、CPU 使用情况等)。</p><h2 id="2-3-ANR-的触发原因"><a href="#2-3-ANR-的触发原因" class="headerlink" title="2.3 ANR 的触发原因"></a>2.3 ANR 的触发原因</h2><p>前面我们说过，出现 ANR 之后一个直观现象就是系统会展示出一个 ANR 对话框。</p><p><strong><font color="#FF0000" size="3">谷歌文档中对 ANR 产生的原因是这么描述的：</font></strong></p><p>Android 系统中的应用被 <code>ActivityManagerService</code> 及 <code>WindowManagerService</code> 两个系统服务监控着，系统会在如下两种情况展示出 ANR 的对话框！</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ &nbsp;<font color="#ff00ff" size="3">KeyDispatchTimeout</font>&nbsp;(<font color="#FF0000"> 5 seconds</font> ) ：按键或触摸事件在特定时间内无响应<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ &nbsp;<font color="#ff00ff" size="3">BroadcastTimeout</font>&nbsp;(<font color="#FF0000"> 10 seconds</font> )：BroadcastReceiver 在特定时间内无法处理完成<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ &nbsp;<font color="#ff00ff" size="3">ServiceTimeout</font>&nbsp;(<font color="#FF0000"> 20 seconds</font> ) ：Service 在特定的时间内无法处理完成</p><p>本篇博文重点谈谈 <strong><font color="#0000ff" size="3">Service 超时处理的相关内容</font></strong>，关于 <strong><font color="#0000ff" size="3">Broadcast</font></strong> 和 <strong><font color="#0000ff" size="3">KeyDispatchTimeout</font></strong> 可以查看：</p><p><a href="https://superandroid.pro/2019/05/10/07.xing-neng-you-hua-xi-lie-tan-tan-ying-yong-anr-zhi-broadcast-chao-shi/">【谈谈 ANR 之 Broadcast 超时】</a> 和 <a href="https://superandroid.pro/2019/05/26/07.xing-neng-you-hua-xi-lie-tan-tan-ying-yong-anr-zhi-input-chao-shi/">【谈谈 ANR 之 Input 超时】</a> 两篇文章。</p><h1 id="3-Service-超时监测机制"><a href="#3-Service-超时监测机制" class="headerlink" title="3. Service 超时监测机制"></a>3. Service 超时监测机制</h1><p>Service 运行在应用程序的主线程，如果 Service 的执行时间超过 20 秒，则会引发 ANR。</p><p>当发生 Service ANR 时，一般可以先排查一下在 Service 的生命周期函数中有没有做<strong><code>耗时的操作</code></strong>，例如复杂的运算、IO 操作等。如果应用程序的代码逻辑查不出问题，就需要深入检查当前系统的状态：CPU 的使用情况、系统服务的状态等，判断当时发生 ANR 进程是否受到<strong><code>系统运行异常</code></strong>的影响。</p><p>那么，系统是如何检测 Service 超时的呢？<strong><font color="#ff0000">Android 是通过设置定时消息实现的</font></strong>。定时消息是由 AMS 的消息队列处理的，AMS 有 Service 运行的上下文信息，所以在 AMS 中设置一套超时检测机制也是合情合理的。</p><p>Service ANR 机制相对最为简单，主体实现在<code>ActiveServices</code>中。</p><p>在 Service 的启动流程中，Service 进程 attach 到 system_server 进程后会调用 <code>realStartServiceLocked()</code> 方法。</p><h2 id="3-1-realStartServiceLocked"><a href="#3-1-realStartServiceLocked" class="headerlink" title="3.1 realStartServiceLocked"></a>3.1 realStartServiceLocked</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// frameworks/base/services/core/java/com/android/server/am/ActiveServices.java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ActiveServices</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">realStartServiceLocked</span><span class="token punctuation">(</span>ServiceRecord r<span class="token punctuation">,</span>            ProcessRecord app<span class="token punctuation">,</span> <span class="token keyword">boolean</span> execInFg<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 发送 delay 消息（SERVICE_TIMEOUT_MSG）</span>        <span class="token function">bumpServiceExecutingLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> execInFg<span class="token punctuation">,</span> <span class="token string">"create"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> created <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 最终执行服务的 onCreate() 方法</span>            app<span class="token punctuation">.</span>thread<span class="token punctuation">.</span><span class="token function">scheduleCreateService</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> r<span class="token punctuation">.</span>serviceInfo<span class="token punctuation">,</span> mAm<span class="token punctuation">.</span>                <span class="token function">compatibilityInfoForPackageLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>serviceInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>                app<span class="token punctuation">.</span>repProcState<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-2-bumpServiceExecutingLocked"><a href="#3-2-bumpServiceExecutingLocked" class="headerlink" title="3.2 bumpServiceExecutingLocked"></a>3.2 bumpServiceExecutingLocked</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">bumpServiceExecutingLocked</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scheduleServiceTimeoutLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-3-scheduleServiceTimeoutLocked"><a href="#3-3-scheduleServiceTimeoutLocked" class="headerlink" title="3.3 scheduleServiceTimeoutLocked"></a>3.3 scheduleServiceTimeoutLocked</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">scheduleServiceTimeoutLocked</span><span class="token punctuation">(</span>ProcessRecord proc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>proc<span class="token punctuation">.</span>executingServices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> proc<span class="token punctuation">.</span>thread <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Message msg <span class="token operator">=</span> mAm<span class="token punctuation">.</span>mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>            ActivityManagerService<span class="token punctuation">.</span>SERVICE_TIMEOUT_MSG<span class="token punctuation">)</span><span class="token punctuation">;</span>    msg<span class="token punctuation">.</span>obj <span class="token operator">=</span> proc<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当超时后仍没有 remove 该 SERVICE_TIMEOUT_MSG 消息，</span>    <span class="token comment" spellcheck="true">// 通过 AMS.MainHandler 抛出一个定时消息。</span>    mAm<span class="token punctuation">.</span>mHandler<span class="token punctuation">.</span><span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span>            proc<span class="token punctuation">.</span>execServicesFg <span class="token operator">?</span> SERVICE_TIMEOUT <span class="token operator">:</span> SERVICE_BACKGROUND_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上述方法通过 <code>AMS.MainHandler</code> 抛出一个定时消息 <code>SERVICE_TIMEOUT_MSG</code>。</p><h2 id="3-4-serviceDoneExecutingLocked"><a href="#3-4-serviceDoneExecutingLocked" class="headerlink" title="3.4 serviceDoneExecutingLocked"></a>3.4 serviceDoneExecutingLocked</h2><font color="#0000ff" size="3">前台进程中执行 Service，超时时间是 SERVICE_TIMEOUT（20 秒）</font><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// How long we wait for a service to finish executing.</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SERVICE_TIMEOUT <span class="token operator">=</span> <span class="token number">20</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">;</span></code></pre><font color="#0000ff" size="3">后台进程中执行 Service，超时时间是 SERVICE_BACKGROUND_TIMEOUT（200 秒）</font><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// How long we wait for a service to finish executing.</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SERVICE_BACKGROUND_TIMEOUT <span class="token operator">=</span> SERVICE_TIMEOUT <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre><p>当 Service 的生命周期结束时（不会 ANR），会调用 <code>serviceDoneExecutingLocked()</code> 方法，之前抛出的 <code>SERVICE_TIMEOUT_MSG</code> 消息在这个方法中会被清除。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">serviceDoneExecutingLocked</span><span class="token punctuation">(</span>ServiceRecord r<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">,</span> <span class="token keyword">int</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> inDestroying <span class="token operator">=</span> mDestroyingServices<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token function">serviceDoneExecutingLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> inDestroying<span class="token punctuation">,</span> inDestroying<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">serviceDoneExecutingLocked</span><span class="token punctuation">(</span>ServiceRecord r<span class="token punctuation">,</span> <span class="token keyword">boolean</span> inDestroying<span class="token punctuation">,</span>          <span class="token keyword">boolean</span> finishing<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>executeNesting <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>app <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">// 当前服务所在进程中没有正在执行的service，清除 SERVICE_TIMEOUT_MSG 消息</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>app<span class="token punctuation">.</span>executingServices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mAm<span class="token punctuation">.</span>mHandler<span class="token punctuation">.</span><span class="token function">removeMessages</span><span class="token punctuation">(</span>                             ActivityManagerService<span class="token punctuation">.</span>SERVICE_TIMEOUT_MSG<span class="token punctuation">,</span> r<span class="token punctuation">.</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="3-5-handleMessage"><a href="#3-5-handleMessage" class="headerlink" title="3.5 handleMessage"></a>3.5 handleMessage</h2><p>如果没有 Remove 掉 SERVICE_TIMEOUT_MSG 呢？接下来我们看看对于 ANR 的处理逻辑。</p><p>在 system_server 进程中有一个 Handler 线程，名叫 <code>ActivityManager</code>。</p><p>如果在超时时间内，<code>SERVICE_TIMEOUT_MSG</code> 没有被清除，便会向该 <code>Handler</code> 线程发送一条信息 <code>SERVICE_TIMEOUT_MSG</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MainHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">case</span> SERVICE_TIMEOUT_MSG<span class="token operator">:</span> <span class="token punctuation">{</span>                mServices<span class="token punctuation">.</span><span class="token function">serviceTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ProcessRecord<span class="token punctuation">)</span>msg<span class="token punctuation">.</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-serviceTimeout"><a href="#3-6-serviceTimeout" class="headerlink" title="3.6 serviceTimeout"></a>3.6 serviceTimeout</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">serviceTimeout</span><span class="token punctuation">(</span>ProcessRecord proc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String anrMessage <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>mAm<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">long</span> nextTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 寻找运行超时的 Service</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> proc<span class="token punctuation">.</span>executingServices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ServiceRecord sr <span class="token operator">=</span> proc<span class="token punctuation">.</span>executingServices<span class="token punctuation">.</span><span class="token function">valueAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sr<span class="token punctuation">.</span>executingStart <span class="token operator">&lt;</span> maxTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>                timeout <span class="token operator">=</span> sr<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sr<span class="token punctuation">.</span>executingStart <span class="token operator">></span> nextTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nextTime <span class="token operator">=</span> sr<span class="token punctuation">.</span>executingStart<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断执行 Service 超时的进程是否在最近运行进程列表，如果不在，则忽略这个 ANR</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> mAm<span class="token punctuation">.</span>mLruProcesses<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>proc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Timeout executing service: "</span> <span class="token operator">+</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            StringWriter sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            PrintWriter pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastPrintWriter</span><span class="token punctuation">(</span>sw<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            timeout<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span>pw<span class="token punctuation">,</span> <span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mLastAnrDump <span class="token operator">=</span> sw<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mAm<span class="token punctuation">.</span>mHandler<span class="token punctuation">.</span><span class="token function">removeCallbacks</span><span class="token punctuation">(</span>mLastAnrDumpClearer<span class="token punctuation">)</span><span class="token punctuation">;</span>            mAm<span class="token punctuation">.</span>mHandler<span class="token punctuation">.</span><span class="token function">postDelayed</span><span class="token punctuation">(</span>mLastAnrDumpClearer<span class="token punctuation">,</span>                                            LAST_ANR_LIFETIME_DURATION_MSECS<span class="token punctuation">)</span><span class="token punctuation">;</span>            anrMessage <span class="token operator">=</span> <span class="token string">"executing service "</span> <span class="token operator">+</span> timeout<span class="token punctuation">.</span>shortName<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>anrMessage <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当存在 timeout 的 service，则执行 appNotResponding</span>        mAm<span class="token punctuation">.</span>mAppErrors<span class="token punctuation">.</span><span class="token function">appNotResponding</span><span class="token punctuation">(</span>proc<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> anrMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上述方法会找到当前进程已经超时的 Service，经过一些判定后，决定要报告 ANR，最终调用 <code>AMS.appNotResponding()</code> 方法。</p><p>走到这一步，ANR 机制已经完成了监测报告任务，剩下的任务就是 ANR 结果的输出，我们称之为 ANR 的报告机制。ANR 的报告机制是通过 <code>AMS.appNotResponding()</code> 完成的，Broadcast 和 InputEvent 类型的 ANR 最终也都会调用这个方法。</p><h1 id="4-ANR-信息收集过程"><a href="#4-ANR-信息收集过程" class="headerlink" title="4. ANR 信息收集过程"></a>4. ANR 信息收集过程</h1><p>接下来我们看看 Android ANR 的信息收集过程！</p><h2 id="4-1-appNotResponding"><a href="#4-1-appNotResponding" class="headerlink" title="4.1 appNotResponding"></a>4.1 appNotResponding</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// frameworks/base/services/core/java/com/android/server/am/AppErrors.java</span><span class="token keyword">class</span> <span class="token class-name">AppErrors</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">appNotResponding</span><span class="token punctuation">(</span>ProcessRecord app<span class="token punctuation">,</span> ActivityRecord activity<span class="token punctuation">,</span>            ActivityRecord parent<span class="token punctuation">,</span> <span class="token keyword">boolean</span> aboveSystem<span class="token punctuation">,</span> <span class="token keyword">final</span> String annotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">long</span> anrTime <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ActivityManagerService<span class="token punctuation">.</span>MONITOR_CPU_USAGE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mService<span class="token punctuation">.</span><span class="token function">updateCpuStatsNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 更新 cpu 统计信息</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> showBackground <span class="token operator">=</span> Settings<span class="token punctuation">.</span>Secure<span class="token punctuation">.</span>                <span class="token function">getInt</span><span class="token punctuation">(</span>mContext<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           Settings<span class="token punctuation">.</span>Secure<span class="token punctuation">.</span>ANR_SHOW_BACKGROUND<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isSilentANR<span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mService<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mService<span class="token punctuation">.</span>mShuttingDown<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>notResponding<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>crashing<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>killedByAm<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>killed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// In case we come through here for the same app before completing</span>            <span class="token comment" spellcheck="true">// this one, mark as anring now so we will bail out.</span>            app<span class="token punctuation">.</span>notResponding <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 记录 ANR 到 EventLog</span>            EventLog<span class="token punctuation">.</span><span class="token function">writeEvent</span><span class="token punctuation">(</span>EventLogTags<span class="token punctuation">.</span>AM_ANR<span class="token punctuation">,</span> app<span class="token punctuation">.</span>userId<span class="token punctuation">,</span> app<span class="token punctuation">.</span>pid<span class="token punctuation">,</span>                    app<span class="token punctuation">.</span>processName<span class="token punctuation">,</span> app<span class="token punctuation">.</span>info<span class="token punctuation">.</span>flags<span class="token punctuation">,</span> annotation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将当前进程添加到 firstPids</span>            firstPids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Don't dump other PIDs if it's a background ANR</span>            isSilentANR <span class="token operator">=</span> <span class="token operator">!</span>showBackground                                   <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isInterestingForBackgroundTraces</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isSilentANR<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> parentPid <span class="token operator">=</span> app<span class="token punctuation">.</span>pid<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>app <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>app<span class="token punctuation">.</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    parentPid <span class="token operator">=</span> parent<span class="token punctuation">.</span>app<span class="token punctuation">.</span>pid<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parentPid <span class="token operator">!=</span> app<span class="token punctuation">.</span>pid<span class="token punctuation">)</span> firstPids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parentPid<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 将 system_server 进程添加到 firstPids</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>MY_PID <span class="token operator">!=</span> app<span class="token punctuation">.</span>pid                                 <span class="token operator">&amp;&amp;</span> MY_PID <span class="token operator">!=</span> parentPid<span class="token punctuation">)</span> firstPids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>MY_PID<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> mService<span class="token punctuation">.</span>mLruProcesses<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ProcessRecord r <span class="token operator">=</span> mService<span class="token punctuation">.</span>mLruProcesses<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">.</span>thread <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> pid <span class="token operator">=</span> r<span class="token punctuation">.</span>pid<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> pid <span class="token operator">!=</span> app<span class="token punctuation">.</span>pid                                        <span class="token operator">&amp;&amp;</span> pid <span class="token operator">!=</span> parentPid <span class="token operator">&amp;&amp;</span> pid <span class="token operator">!=</span> MY_PID<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>persistent<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// 将 persistent 进程添加到 firstPids</span>                                firstPids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>treatLikeActivity<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                firstPids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// 其他进程添加到 lastPids</span>                                lastPids<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 记录 ANR 输出到 main log</span>        StringBuilder info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"ANR in "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>processName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>activity <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> activity<span class="token punctuation">.</span>shortComponentName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            info<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" ("</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span>shortComponentName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        info<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"PID: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            info<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Reason: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> parent <span class="token operator">!=</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>            info<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Parent: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>shortComponentName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建 CPU tracker 对象 </span>        ProcessCpuTracker processCpuTracker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessCpuTracker</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 输出 traces 信息</span>        File tracesFile <span class="token operator">=</span> ActivityManagerService<span class="token punctuation">.</span><span class="token function">dumpStackTraces</span><span class="token punctuation">(</span>                <span class="token boolean">true</span><span class="token punctuation">,</span> firstPids<span class="token punctuation">,</span>                <span class="token punctuation">(</span>isSilentANR<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> processCpuTracker<span class="token punctuation">,</span>                <span class="token punctuation">(</span>isSilentANR<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> lastPids<span class="token punctuation">,</span>                nativePids<span class="token punctuation">)</span><span class="token punctuation">;</span>        String cpuInfo <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ActivityManagerService<span class="token punctuation">.</span>MONITOR_CPU_USAGE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mService<span class="token punctuation">.</span><span class="token function">updateCpuStatsNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mService<span class="token punctuation">.</span>mProcessCpuTracker<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cpuInfo <span class="token operator">=</span> mService<span class="token punctuation">.</span>mProcessCpuTracker<span class="token punctuation">.</span><span class="token function">printCurrentState</span><span class="token punctuation">(</span>anrTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 记录当前 CPU 负载情况</span>            info<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>processCpuTracker<span class="token punctuation">.</span><span class="token function">printCurrentLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>cpuInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 记录从 anr 时间开始的 Cpu 使用情况</span>        info<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>processCpuTracker<span class="token punctuation">.</span><span class="token function">printCurrentState</span><span class="token punctuation">(</span>anrTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出当前 ANR 的 reason，以及 CPU 使用率、负载信息</span>        Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tracesFile <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Process<span class="token punctuation">.</span><span class="token function">sendSignal</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>pid<span class="token punctuation">,</span> Process<span class="token punctuation">.</span>SIGNAL_QUIT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 将 traces 文件和 CPU 使用率信息保存到 dropbox，即 data/system/dropbox 目录</span>        mService<span class="token punctuation">.</span><span class="token function">addErrorToDropBox</span><span class="token punctuation">(</span><span class="token string">"anr"</span><span class="token punctuation">,</span> app<span class="token punctuation">,</span> app<span class="token punctuation">.</span>processName<span class="token punctuation">,</span>                          activity<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> annotation<span class="token punctuation">,</span> cpuInfo<span class="token punctuation">,</span> tracesFile<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mService<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mService<span class="token punctuation">.</span>mBatteryStatsService<span class="token punctuation">.</span><span class="token function">noteProcessAnr</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>processName<span class="token punctuation">,</span> app<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 后台 ANR 的情况, 直接杀掉</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isSilentANR<span class="token punctuation">)</span> <span class="token punctuation">{</span>                app<span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token string">"bg anr"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 设置 app 的 ANR 状态，病查询错误报告 receiver</span>            <span class="token function">makeAppNotRespondingLocked</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span>                    activity <span class="token operator">!=</span> null <span class="token operator">?</span> activity<span class="token punctuation">.</span>shortComponentName <span class="token operator">:</span> null<span class="token punctuation">,</span>                    annotation <span class="token operator">!=</span> null <span class="token operator">?</span> <span class="token string">"ANR "</span> <span class="token operator">+</span> annotation <span class="token operator">:</span> <span class="token string">"ANR"</span><span class="token punctuation">,</span>                    info<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 弹出 ANR 对话框</span>            Message msg <span class="token operator">=</span> Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            msg<span class="token punctuation">.</span>what <span class="token operator">=</span> ActivityManagerService<span class="token punctuation">.</span>SHOW_NOT_RESPONDING_UI_MSG<span class="token punctuation">;</span>            msg<span class="token punctuation">.</span>obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppNotRespondingDialog<span class="token punctuation">.</span>Data</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> activity<span class="token punctuation">,</span> aboveSystem<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 向 ui 线程发送，内容为 SHOW_NOT_RESPONDING_MSG 的消息</span>            mService<span class="token punctuation">.</span>mUiHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>当发生 ANR 时, 会按顺序依次执行：</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;1、输出 <code>ANR Reason</code> 信息到 <code>EventLog</code>，也就是说 ANR 触发的时间点最接近的就是 <code>EventLog</code> 中输出的 <code>am_anr</code> 信息;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;2、收集并输出重要进程列表中的各个线程的 <code>traces</code> 信息，该方法较耗时；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;3、输出当前各个进程的 <code>CPU 使用情况</code>以及 <code>CPU 负载情况</code>；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;4、将 <code>traces 文件</code>和 <code>CPU 使用情况信息</code>保存到 <code>dropbox</code>，即 <code>data/system/dropbox</code> 目录；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;5、根据进程类型，来决定<code>直接后台杀掉</code>，还是<code>弹框告知用户</code>。</p><blockquote><p>ANR输出重要进程的traces信息，这些进程包含：</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;1、<strong>firstPids 队列</strong>：第一个是 <code>ANR</code> 进程，第二个是 <code>system_server</code>，剩余是所有 <code>persistent</code> 进程；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;2、<strong>Native 队列</strong>：是指 <code>/system/bin/</code> 目录的 <code>mediaserver</code>、<code>sdcard</code> 以及 <code>surfaceflinger</code> 进程；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;3、<strong>lastPids 队列</strong>: 是指 <code>mLruProcesses</code> 中的<code>不属于 firstPids</code> 的所有进程。</p><h2 id="4-2-dumpStackTraces"><a href="#4-2-dumpStackTraces" class="headerlink" title="4.2 dumpStackTraces"></a>4.2 dumpStackTraces</h2><p>继续看看 dump 出 trace 信息的流程：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ActivityManagerService.java</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> File <span class="token function">dumpStackTraces</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> clearTraces<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">,</span>nativePids<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tracesDirProp<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 默认为 data/anr/traces.txt</span>            String globalTracesPath <span class="token operator">=</span>                           SystemProperties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"dalvik.vm.stack-trace-file"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            tracesFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>globalTracesPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>clearTraces <span class="token operator">&amp;&amp;</span> tracesFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    tracesFile<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 删除已存在的 traces 文件</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 这里会保证 data/anr/traces.txt 文件内容是全新的方式，而非追加</span>                tracesFile<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 创建 traces 文件</span>                FileUtils<span class="token punctuation">.</span><span class="token function">setPermissions</span><span class="token punctuation">(</span>globalTracesPath<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Unable to prepare ANR traces file: "</span> <span class="token operator">+</span> tracesFile<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 输出 trace 内容</span>        <span class="token function">dumpStackTraces</span><span class="token punctuation">(</span>tracesFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> firstPids<span class="token punctuation">,</span> nativePids<span class="token punctuation">,</span>                                         extraPids<span class="token punctuation">,</span> useTombstonedForJavaTraces<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tracesFile<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="4-3-dumpStackTraces"><a href="#4-3-dumpStackTraces" class="headerlink" title="4.3 dumpStackTraces"></a>4.3 dumpStackTraces</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ActivityManagerService.java</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dumpStackTraces</span><span class="token punctuation">(</span>String tracesFile<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> DumpStackFileObserver observer<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>useTombstonedForJavaTraces<span class="token punctuation">)</span> <span class="token punctuation">{</span>            observer <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DumpStackFileObserver</span><span class="token punctuation">(</span>tracesFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// We must complete all stack dumps within 20 seconds.</span>        <span class="token keyword">long</span> remainingTime <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>observer <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                observer<span class="token punctuation">.</span><span class="token function">startWatching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 首先，获取 firstPids 进程的 stacks</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>firstPids <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> num <span class="token operator">=</span> firstPids<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> <span class="token keyword">long</span> timeTaken<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>useTombstonedForJavaTraces<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        timeTaken <span class="token operator">=</span> <span class="token function">dumpJavaTracesTombstoned</span><span class="token punctuation">(</span>firstPids<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>                                                   tracesFile<span class="token punctuation">,</span> remainingTime<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        timeTaken <span class="token operator">=</span> observer<span class="token punctuation">.</span><span class="token function">dumpWithTimeout</span><span class="token punctuation">(</span>firstPids<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>                                                               remainingTime<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 下一步，获取 native 进程的 stacks</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nativePids <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> pid <span class="token operator">:</span> nativePids<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token comment" spellcheck="true">// 输出 native 进程的 trace</span>                    Debug<span class="token punctuation">.</span><span class="token function">dumpNativeBacktraceToFileTimeout</span><span class="token punctuation">(</span>                            pid<span class="token punctuation">,</span> tracesFile<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nativeDumpTimeoutMs <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">final</span> <span class="token keyword">long</span> timeTaken <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">elapsedRealtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">;</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Lastly, dump stacks for all extra PIDs from the CPU tracker.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>extraPids <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>observer <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                observer<span class="token punctuation">.</span><span class="token function">stopWatching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="4-4-小结"><a href="#4-4-小结" class="headerlink" title="4.4 小结"></a>4.4 小结</h2><blockquote><p>触发 ANR 时系统会输出关键信息：</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;1、将 <code>am_anr</code> 信息，输出到 <code>EventLog</code>；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;2、获取重要进程 <code>trace</code> 信息，保存到 <code>/data/anr/traces.txt</code>；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;3、<code>ANR reason</code> 以及 <code>CPU</code> 使用情况信息，输出到 <code>main log</code>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;4、再将 <code>CPU使用情况</code> 和进程 <code>trace 文件</code>信息，再保存到 <code>/data/system/dropbox</code>。</p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>当 Service 出现 ANR 时，最终调用到 <code>AMS.appNotResponding()</code>方法。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;1、对于<code>前台服务</code>，则超时为 <code>SERVICE_TIMEOUT = 20s</code>；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;2、对于<code>后台服务</code>，则超时为 <code>SERVICE_BACKGROUND_TIMEOUT = 200s</code>；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;3、Service 超时检测机制：<code>超过一定时间没有执行完相应操作</code>来触发<code>延时消息</code>，则会触发 <code>ANR</code>;</p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> ANR </tag>
            
            <tag> 无响应 </tag>
            
            <tag> Service </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用 ANR 分析实录</title>
      <link href="/2019/04/24/07.xing-neng-you-hua-xi-lie-ying-yong-anr-fen-xi-shi-lu/"/>
      <url>/2019/04/24/07.xing-neng-you-hua-xi-lie-ying-yong-anr-fen-xi-shi-lu/</url>
      
        <content type="html"><![CDATA[<p>分析 ANR 问题，有三大利器：<strong><font color="#ff0000">Logcat</font></strong>，<strong><font color="#ff0000">traces</font></strong> 和 <strong><font color="#ff0000">StrictMode</font></strong>（不作讨论）。需要经过 <strong><font color="#ff00ff">日志获取</font></strong>、<strong><font color="#ff00ff">问题定位</font></strong> 和 <strong><font color="#ff00ff">场景还原</font></strong> 三个步骤。</p><h2 id="1-日志获取"><a href="#1-日志获取" class="headerlink" title="1. 日志获取"></a>1. 日志获取</h2><p>如何获取日志，我们暂时不去详细分析，后面打算通过 Watchdog 机制加以详解，这边我们以拿到的测试 Log 为准来进行分析。</p><h2 id="2-问题定位"><a href="#2-问题定位" class="headerlink" title="2. 问题定位"></a>2. 问题定位</h2><p>我们现在以一份 ANR 日志为例，分析如何定位 ANR。</p><p>1、通过在 <code>event log</code> 中检索 <code>am_anr</code> 关键字，就可以找到发生 ANR 的进程：</p><pre class=" language-log"><code class="language-log">04-24 00:48:27 820 907 I am_anr: [0,29533,com.android.systemui,1082670605,Broadcast of Intent { act=android.intent.action.TIME_TICK flg=0x50000114 (has extras) }]</code></pre><p>2、接下来可以在 <code>system log</code> 检索 <code>ANR in</code> 关键字，找到发生 <code>ANR 前后</code>的 <code>CPU</code> 使用情况：</p><pre class=" language-log"><code class="language-log">04-24 00:50:10 820 907 E ActivityManager: ANR in com.android.systemui, time=13009069504-24 00:50:10 820 907 E ActivityManager: Reason: Broadcast of Intent { act=android.intent.action.TIME_TICK flg=0x50000114 (has extras) }04-24 00:50:10 820 907 E ActivityManager: Load: 30.4 / 22.34 / 19.9404-24 00:50:10 820 907 E ActivityManager: Android time :[2015-04-24 00:50:05.76] [130191,266]04-24 00:50:10 820 907 E ActivityManager: CPU usage from 6753ms to -4ms ago:04-24 00:50:10 820 907 E ActivityManager:   47% 320/netd: 3.1% user + 44% kernel / faults: 14886 minor 3 major04-24 00:50:10 820 907 E ActivityManager:   15% 10007/com.sohu.sohuvideo: 2.8% user + 12% kernel / faults: 1144 minor04-24 00:50:10 820 907 E ActivityManager:   13% 10654/hif_thread: 0% user + 13% kernel04-24 00:50:10 820 907 E ActivityManager:   11% 175/mmcqd/0: 0% user + 11% kernel04-24 00:50:10 820 907 E ActivityManager:   5.1% 12165/app_process: 1.6% user + 3.5% kernel / faults: 9703 minor 540 major04-24 00:50:10 820 907 E ActivityManager:   3.3% 29533/com.android.systemui: 2.6% user + 0.7% kernel / faults: 8402 minor 343 major04-24 00:50:10 820 907 E ActivityManager:   3.2% 820/system_server: 0.8% user + 2.3% kernel / faults: 5120 minor 523 major04-24 00:50:10 820 907 E ActivityManager:   2.5% 11817/com.netease.pomelo.push.l.messageservice_V2: 0.7% user + 1.7% kernel / faults: 7728 minor 687 major04-24 00:50:10 820 907 E ActivityManager:   1.6% 11887/com.android.email: 0.5% user + 1% kernel / faults: 6259 minor 587 major04-24 00:50:10 820 907 E ActivityManager:   1.4% 11854/com.android.settings: 0.7% user + 0.7% kernel / faults: 5404 minor 471 major04-24 00:50:10 820 907 E ActivityManager:   1.4% 11869/android.process.acore: 0.7% user + 0.7% kernel / faults: 6131 minor 561 major04-24 00:50:10 820 907 E ActivityManager:   1.3% 11860/com.tencent.mobileqq: 0.1% user + 1.1% kernel / faults: 5542 minor 470 major...04-24 00:50:10 820 907 E ActivityManager:  +0% 12832/cat: 0% user + 0% kernel04-24 00:50:10 820 907 E ActivityManager:  +0% 13211/zygote64: 0% user + 0% kernel04-24 00:50:10 820 907 E ActivityManager: 87% TOTAL: 3% user + 18% kernel + 64% iowait + 0.5% softirq</code></pre><p>以上日志的信息量就很大了：</p><p>✎&nbsp;<strong><font color="#0000ff" size="3">发生 ANR 的时间：</font></strong>event log 中，ANR 的时间是 00:48:27，因为 AMS.appNotResponding() 首先会打印 event log，然后再打印 system log，所以在 system log 中，找到 ANR 的时间是 00:50:10。可以从这个时间点之前的日志中，还原 ANR 出现时系统的运行状态。</p><p>✎&nbsp;<strong><font color="#0000ff" size="3">打印 ANR 的进程：</font></strong>ANR 日志都是在 system_server 进程中的 AMS 打印的，在 event log 和 system log 中，都能看到 820和 907，所以 system_server 的 PID 是 802，AMS 线程的 TID 是 907。ANR 的监测机制实现在 AMS 线程，分析一些受系统影响的 ANR，需要知道 system_server 进程的运行状态。</p><p>✎&nbsp;<strong><font color="#0000ff" size="3">发生 ANR 的进程：</font></strong>ANR in 关键字就表明了当前 ANR 的进程是 com.android.system.ui，通过 event log，知道进程的 PID 是 29533。</p><p>✎&nbsp;<strong><font color="#0000ff" size="3">发生 ANR 的原因：</font></strong>Reason 关键字表明了当前发生 ANR 的原因：处理 TIME_TICK 广播消息超时。隐含的意思是 TIME_TICK 是一个串行广播消息，在 29533 的主线程中，执行 BroadcastReceiver.onReceive() 方法已经超过 10 秒。</p><p>✎&nbsp;<strong><font color="#0000ff" size="3">CPU 负载：</font></strong>Load 关键字表明了最近1分钟、5分钟、15分钟内的 CPU 负载分别是 30.4、22.3、19.94。CPU 最近1分钟的负载最具参考价值，因为 ANR 的超时限制基本都是 1 分钟以内，这可以近似的理解为 CPU 最近1分钟平均有 30.4 个任务要处理，这个负载值是比较高的。</p><p>✎&nbsp;<strong><font color="#0000ff" size="3">CPU 使用统计时间段：</font></strong>CPU usage from XX to XX ago 关键字表明了这是在 ANR 发生之前一段时间内的 CPU 统计。类似的还有 CPU usage from XX to XX after 关键字，表明是 ANR 发生之后一段时间内的 CPU 统计。</p><p>✎&nbsp;<strong><font color="#0000ff" size="3">各进程的 CPU 使用率：</font></strong>我们以 com.android.systemui 进程的 CPU 使用率为例，它包含以下信息：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✦ 总的CPU使用率: 3.3%，其中 systemui 进程在用户态的 CPU 使用率是2.6%，在内核态的使用率是0.7%；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✦ 缺页次数fault：8402 minor 表示高速缓存中的缺页次数，343 major 表示内存的缺页次数。minor 可以理解为进程在做内存访问，major 可以理解为进程在做 IO 操作。当前 minor 和 major 值都是比较高的，从侧面反映了发生 ANR 之前，systemui 进程有较多的内存访问操作，引发的 IO 次数也会较多；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✦ CPU 使用率前面的 “+”：部分进程的 CPU 使用率前面有 “+” 号，例如：cat 和 zygote64，表示在上一次 CPU 统计的时间片段内，还没有这些进程，而这一次 CPU 统计的时间片段内，运行了这些进程。类似的还有 “-” 号，表示两次 CPU 统计时间片段时，这些进程消亡了。</p><p>✎&nbsp;<strong><font color="#ff0000" size="3">CPU 总使用率：</font></strong>TOTAL 关键字表明了 CPU 使用的汇总，87% 是总的 CPU 使用率，其中有一项 iowait 表明 CPU 在等待 IO 的时间，占到64%，说明发生 ANR 以前，有大量的 IO 操作。app_process、system_server、com.android.systemui 这几个进程的 major 值都比较大，说明这些进程的 IO 操作较为频繁，从而拉升了整个 iowait 的时间。</p><p>信息量是如此的庞大，以致于我们都要下结论了：CPU 大量的时间都在等待 IO，导致 systemui 进程分配不到 CPU 时间，从而主线程处理广播消息超时，发生了 ANR。</p><p><strong><font color="#FF0000">对于一个严谨的开发人员而言，这种结论下得有点早，因为还有太多的疑问，比如：</font></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;﹖ systemui 进程也分到了一些 CPU 时间(3.3%)，难道 BroadcastReceiver.onReceive() 方法就一直无法执行吗？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;﹖ 为什么 iowait 的时间会这么多，而且多个进程的 major 值都很高？</p><h2 id="3-场景还原"><a href="#3-场景还原" class="headerlink" title="3. 场景还原"></a>3. 场景还原</h2><p>针对以上两个疑问点，我们进一步分析！</p><h3 id="3-1-第一个疑点"><a href="#3-1-第一个疑点" class="headerlink" title="3.1 第一个疑点"></a>3.1 第一个疑点</h3><p>我们先来做一个假设：如果 systemui 进程正在执行 BroadcatReceiver.onReceive() 方法，那么从 traces.txt 文件中，应该可以看到主线程的函数调用栈正在执行这个方法。</p><p>接下来，我们首先从 traces 文件中，找到发生 ANR 时（00:48:27），sysemtui 进程的函数调用栈信息。</p><pre class=" language-log"><code class="language-log">----- pid 29533 at 2018-04-24 00:48:06 -----Cmd line: com.android.systemuiDALVIK THREADS (53):"main" prio=5 tid=1 Native  | group="main" sCount=1 dsCount=0 obj=0x75bd5818 self=0x7f8549a000  | sysTid=29533 nice=0 cgrp=bg_non_interactive sched=0/0 handle=0x7f894bbe58  | state=S schedstat=( 288625433917 93454573244 903419 ) utm=20570 stm=8292 core=3 HZ=100  | stack=0x7fdffda000-0x7fdffdc000 stackSize=8MB  | held mutexes=  native: #00 pc 00060b0c  /system/lib64/libc.so (__epoll_pwait+8)  native: #01 pc 0001bb54  /system/lib64/libc.so (epoll_pwait+32)  native: #02 pc 0001b3d8  /system/lib64/libutils.so (android::Looper::pollInner(int)+144)  native: #03 pc 0001b75c  /system/lib64/libutils.so (android::Looper::pollOnce(int, int*, int*, void**)+76)  native: #04 pc 000d7194  /system/lib64/libandroid_runtime.so (android::NativeMessageQueue::pollOnce(_JNIEnv*, int)+48)  at android.os.MessageQueue.nativePollOnce(Native method)  at android.os.MessageQueue.next(MessageQueue.java:148)  at android.os.Looper.loop(Looper.java:151)  at android.app.ActivityThread.main(ActivityThread.java:5718)  at java.lang.reflect.Method.invoke!(Native method)  at java.lang.reflect.Method.invoke(Method.java:372)  at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:975)  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:770)----- pid 29533 at 2018-04-24 00:48:29 -----Cmd line: com.android.systemuiDALVIK THREADS (54):"main" prio=5 tid=1 Blocked  | group="main" sCount=1 dsCount=0 obj=0x75bd5818 self=0x7f8549a000  | sysTid=29533 nice=0 cgrp=bg_non_interactive sched=0/0 handle=0x7f894bbe58  | state=S schedstat=( 289080040422 93461978317 904874 ) utm=20599 stm=8309 core=0 HZ=100  | stack=0x7fdffda000-0x7fdffdc000 stackSize=8MB  | held mutexes=  at com.mediatek.anrappmanager.MessageLogger.println(SourceFile:77)  - waiting to lock <0x26b337a3> (a com.mediatek.anrappmanager.MessageLogger) held by thread 49  at android.os.Looper.loop(Looper.java:195)  at android.app.ActivityThread.main(ActivityThread.java:5718)  at java.lang.reflect.Method.invoke!(Native method)  at java.lang.reflect.Method.invoke(Method.java:372)  at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:975)  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:770)..."Binder_5" prio=5 tid=49 Native  | group="main" sCount=1 dsCount=0 obj=0x136760a0 self=0x7f7e453000  | sysTid=6945 nice=0 cgrp=default sched=0/0 handle=0x7f6e3ce000  | state=S schedstat=( 5505571091 4567508913 30743 ) utm=264 stm=286 core=4 HZ=100  | stack=0x7f6b83f000-0x7f6b841000 stackSize=1008KB  | held mutexes=  native: #00 pc 00019d14  /system/lib64/libc.so (syscall+28)  native: #01 pc 0005b5d8  /system/lib64/libaoc.so (???)  native: #02 pc 002c6f18  /system/lib64/libaoc.so (???)  native: #03 pc 00032c40  /system/lib64/libaoc.so (???)  at libcore.io.Posix.getpid(Native method)  at libcore.io.ForwardingOs.getpid(ForwardingOs.java:83)  at android.system.Os.getpid(Os.java:176)  at android.os.Process.myPid(Process.java:754)  at com.mediatek.anrappmanager.MessageLogger.dump(SourceFile:219)  - locked <0x26b337a3> (a com.mediatek.anrappmanager.MessageLogger)  at com.mediatek.anrappmanager.ANRAppManager.dumpMessageHistory(SourceFile:65)  at android.app.ActivityThread$ApplicationThread.dumpMessageHistory(ActivityThread.java:1302)  at android.app.ApplicationThreadNative.onTransact(ApplicationThreadNative.java:682)  at android.os.Binder.execTransact(Binder.java:451)</code></pre><p>最终，我们找到 systemui 进程 ANR 时刻（00:48:27）附近的两个函数调用栈：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ 在 ANR 发生之前（00:48:06），主线程的函数调用栈处于正常状态：消息队列中，循环处理消息</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✎ 在 ANR 发生之后2秒（00:48:29），主线程处于 Blocked 状态，在等待一个被 49 号线程持有的锁。而 49 号线程是一个 Binder 线程，anrappmanager 正在做 dump 操作。</p><p><font color="#ff0000">至此，systemui 进程发生 ANR 的直接原因我们已经找到了，systemui 进程正在打印 traces，存在较长时间的 IO 操作，导致主线程阻塞，从而无法处理 TIME_TICK 广播消息，所以发生了 ANR。</font><br></p><p>要避免这种场景下的 ANR，我们就需要打破主线程中 Blocked 的逻辑。其实本例是由于 MTK 在 AOSP 的 android.os.Looper.loop() 扩展了打印消息队列的功能，该功能存在设计缺陷，会导致锁等待的情况。</p><h3 id="3-2-第二个疑点"><a href="#3-2-第二个疑点" class="headerlink" title="3.2 第二个疑点"></a>3.2 第二个疑点</h3><p>我们进一步挖掘在 systemui 还没有发生 ANR 时，就在打印 traces 的原因。带着上文提出的第二个疑问，我们来做另一个假设：iowait 较高，而且多个进程的 major 都很高，可能是由于当前正在调用 AMS.dumpStackTraces() 方法，很多进程都需要将自己的函数调用栈写到 traces 文件，所以 IO 就会较高。如果当前正在调用 AMS.dumpStackTraces() 方法，那说明当时系统已经发生了异常，要么已经有 ANR 发生，要么有 SNR 发生。</p><p>是什么导致已经开始 dump 信息了呢？难道还有别的 ANR 或者 SNR？果然，从 event log 中，我们检索到了另一个 ANR：</p><pre class=" language-log"><code class="language-log">04-24 00:47:58 820 907 I am_anr  : [0,10464,com.android.settings,1086864965,Input dispatching timed out (Waiting to send key event because the focused window has not finished processing all of the input events that were previously delivered to it.  Outbound queue length: 0.  Wait queue length: 1.)]</code></pre><p>在 00:47:58 这个时刻，com.android.settings 进程发生了 ANR，而且 ANR 的时间在 systemui 之前(00:48:27)。这一下，我们就找到佐证了，正是因为 settings 进程先发生了 ANR，调用 AMS.dumpStackTraces()，从而很多进程都开始了打印 traces 的操作，所以系统的整个 iowait 比较高，大量进程的 major 值也比较高，systemui 就在其列。在 MTK 逻辑的影响下，打印 ANR 日志会导致主线程阻塞，从而就连带引发了其他应用的 ANR。</p><p>在 system log 中，我们检索到了 settings 进程 ANR 的 CPU 使用信息：</p><pre class=" language-log"><code class="language-log">04-24 00:48:12 820 907 E ActivityManager: ANR in com.android.settings (com.android.settings/.SubSettings), time=13006371804-24 00:48:12 820 907 E ActivityManager: Reason: Input dispatching timed out (Waiting to send key event because the focused window has not finished processing all of the input events that were previously delivered to it.  Outbound queue length: 0.  Wait queue length: 1.)04-24 00:48:12 820 907 E ActivityManager: Load: 21.37 / 19.25 / 18.8404-24 00:48:12 820 907 E ActivityManager: Android time :[2015-04-24 00:48:12.24] [130077,742]04-24 00:48:12 820 907 E ActivityManager: CPU usage from 0ms to 7676ms later:04-24 00:48:12 820 907 E ActivityManager:   91% 820/system_server: 16% user + 75% kernel / faults: 13192 minor 167 major04-24 00:48:12 820 907 E ActivityManager:   3.2% 175/mmcqd/0: 0% user + 3.2% kernel04-24 00:48:12 820 907 E ActivityManager:   2.9% 29533/com.android.systemui: 2.3% user + 0.6% kernel / faults: 1352 minor 10 major04-24 00:48:12 820 907 E ActivityManager:   2.2% 1736/com.android.phone: 0.9% user + 1.3% kernel / faults: 1225 minor 1 major04-24 00:48:12 820 907 E ActivityManager:   2.2% 10464/com.android.settings: 0.7% user + 1.4% kernel / faults: 2801 minor 105 major04-24 00:48:12 820 907 E ActivityManager:   0% 1785/com.meizu.experiencedatasync: 0% user + 0% kernel / faults: 3478 minor 2 major04-24 00:48:12 820 907 E ActivityManager:   1.8% 11333/com.meizu.media.video: 1% user + 0.7% kernel / faults: 3843 minor 89 major04-24 00:48:12 820 907 E ActivityManager:   1.5% 332/mobile_log_d: 0.5% user + 1% kernel / faults: 94 minor 1 major04-24 00:48:12 820 907 E ActivityManager:   1% 11306/com.meizu.media.gallery: 0.7% user + 0.2% kernel / faults: 2204 minor 55 major...04-24 00:48:12 820 907 E ActivityManager:  +0% 11397/sh: 0% user + 0% kernel04-24 00:48:12 820 907 E ActivityManager:  +0% 11398/app_process: 0% user + 0% kernel04-24 00:48:12 820 907 E ActivityManager: 29% TOTAL: 5.1% user + 15% kernel + 9.5% iowait + 0% softirq</code></pre><p>具体的涵义我们不再赘述了，只关注一下 ANR 的原因:</p><pre class=" language-log"><code class="language-log">Reason: Input dispatching timed out (Waiting to send key event because the focused window has not finished processing all of the input events that were previously delivered to it.  Outbound queue length: 0.  Wait queue length: 1.)</code></pre><p>我们在 <a href>【深入钻研 Android 应用 ANR 之 Input 超时】</a> 中探讨过 Input ANR 的情况。<code>Wait queue length：1</code>：表示之前的输入事件已经派发到 Settings 进程了，但 Settings 进程还没有处理完毕，新来的 KeyEvent 事件已经等待超过了5秒，所以 ANR 产生了。</p><p>接下来，我们只需要按照 systemui 的分析逻辑查看 Settings 的 traces，分析 Settings 主线程处理输入事件超时的原因，这边不再详细分析。</p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> ANR </tag>
            
            <tag> 无响应 </tag>
            
            <tag> 应用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“事件分发机制” - 面试题集</title>
      <link href="/2019/04/23/10.jing-yan-zong-jie-xi-lie-guan-yu-shi-jian-fen-fa-ji-zhi-de-mian-shi-ti-ji/"/>
      <url>/2019/04/23/10.jing-yan-zong-jie-xi-lie-guan-yu-shi-jian-fen-fa-ji-zhi-de-mian-shi-ti-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="1-为什么会有事件分发机制？"><a href="#1-为什么会有事件分发机制？" class="headerlink" title="1. 为什么会有事件分发机制？"></a><center>1. 为什么会有事件分发机制？</center></h3><p><br></p><p>安卓上面的 View 是树形结构的，View 可能会重叠在一起，当点击的地方有多个 View 可以响应的时候，这个点击事件应该给谁呢？为了解决这个问题，就有了事件分发机制。</p><p><strong><font color="#0000ff">PhoneWindow：</font></strong>是抽象类 Window 的实现类，抽象类 Window 是所有视图最顶层的容器，包括 View 视图的外观和行为都归Window管。</p><p><strong><font color="#0000ff">DecorView：</font></strong>PhoneWindow 的内部类，通过 DecorView 传递信息给下面的 View，下面的 View 也通过 DecorView 返回消息给 PhoneWindow。</p><h3 id="2-onTouch-和-onTouchEvent-有什么区别，又该如何使用？"><a href="#2-onTouch-和-onTouchEvent-有什么区别，又该如何使用？" class="headerlink" title="2. onTouch 和 onTouchEvent 有什么区别，又该如何使用？"></a><center>2. onTouch 和 onTouchEvent 有什么区别，又该如何使用？</center></h3><p><br></p><p>我们看下源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// frameworks/base/core/java/android/view/View.java</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">onFilterTouchEventForSecurity</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListenerInfo li <span class="token operator">=</span> mListenerInfo<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>li <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> li<span class="token punctuation">.</span>mOnTouchListener <span class="token operator">!=</span> null                    <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mViewFlags <span class="token operator">&amp;</span> ENABLED_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> ENABLED                    <span class="token operator">&amp;&amp;</span> li<span class="token punctuation">.</span>mOnTouchListener<span class="token punctuation">.</span><span class="token function">onTouch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 1</span>                result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result <span class="token operator">&amp;&amp;</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 2</span>                result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这两个方法都是在 View 的 <code>dispatchTouchEvent</code> 中调用的，<code>onTouch</code> 优先于 <code>onTouchEvent</code> 执行。如果在 <code>onTouch</code> 方法中通过返回 <code>true</code> 将事件消费掉，<code>onTouchEvent</code> 将不会再执行。</p><p>另外需要注意的是，onTouch 能够得到执行需要两个前提条件：</p><p>1、<code>mOnTouchListener</code> 的值不能为空！这个我们知道，只要我们给控件注册了 <code>Touch 事件</code>，<code>mOnTouchListener</code> 就一定被赋值（不为空）！</p><p>2、当前点击的控件必须是 <code>enable</code> 的。因此如果你有一个控件是<code>非enable</code>的（比如：ImageView），那么给它注册 <code>onTouch</code> 事件将永远得不到执行。对于这一类控件，如果我们想要监听它的 <code>touch事件</code>，就必须通过在该控件中重写 <code>onTouchEvent</code> 方法来实现。</p><p><br></p><h3 id="3-事件分发、拦截与消费（三个重要的事件分发的方法）"><a href="#3-事件分发、拦截与消费（三个重要的事件分发的方法）" class="headerlink" title="3. 事件分发、拦截与消费（三个重要的事件分发的方法）"></a><center>3. 事件分发、拦截与消费（三个重要的事件分发的方法）</center></h3><p><br></p><p>✒&nbsp;<strong><font color="#0000ff">dispatchTouchEvent：</font></strong>处在链首，用于分发事件，该方法决定是由当前 View 自己的 onTouchEvent 来处理，还是分发给子 View 递归调用其自身的 dispatchTouchEvent 来处理。</p><p>✒&nbsp;<strong><font color="#0000ff">onInterceptTouchEvent：</font></strong>是用来拦截事件的，当父控件下发事件给子控件进行拦截处理的时候，如果子控件需要对事件进行处理，就要在 onInterceptTouchEvent 方法中进行拦截，然后到子控件的 onTouchEvent 方法中进行事件的监听以及逻辑的判断。</p><p>✒&nbsp;<strong><font color="#0000ff">onTouchEvent：</font></strong>用于处理传递到 View 的手势事件。</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-971a1d903f18bc14.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="事件分发、拦截与消费.jpg"></center><p><strong>其中，Activity 与 View 没有事件拦截，主要原因是：</strong></p><p>Activity 作为原始的事件分发者，如果 Activity 拦截了事件会导致整个屏幕无法响应事件，不是我们想要的效果；View 作为事件传递的最末端，要么消费事件，要么不处理事件进行回传，根本没必要拦截。</p><p><br></p><h3 id="4-事件分发流程"><a href="#4-事件分发流程" class="headerlink" title="4. 事件分发流程"></a><center>4. 事件分发流程</center></h3><p><br></p><p>Android View 是树形结构，事件分发流程采用的是责任链模式。</p><p>事件传递：</p><blockquote><p>Activity －&gt; PhoneWindow －&gt; DecorView －&gt; ViewGroup －&gt; … －&gt; View</p></blockquote><p>事件回传：</p><blockquote><p>Activity &lt;－ PhoneWindow &lt;－ DecorView &lt;－ ViewGroup &lt;－ … &lt;－ View</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术细节 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题集 </tag>
            
            <tag> 事件分发 </tag>
            
            <tag> 经验总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 日常开发问题总结</title>
      <link href="/2019/04/15/10.jing-yan-zong-jie-xi-lie-android-ri-chang-kai-fa-wen-ti-zong-jie/"/>
      <url>/2019/04/15/10.jing-yan-zong-jie-xi-lie-android-ri-chang-kai-fa-wen-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="1-访客模式-PC-端不显示盘符"><a href="#1-访客模式-PC-端不显示盘符" class="headerlink" title="1. 访客模式 PC 端不显示盘符"></a><center>1. 访客模式 PC 端不显示盘符</center></h3><p><br></p><p>在之前 Android 系统开发的 Bug 库中，遇到一个访客模式下 PC 端不显示盘符的问题，如果你也有此问题，这边给您提供一种方案！</p><p><strong><font color="#FF0000" size="4">✒ 问题现象</font></strong>（这个问题主要是针对 MTK 平台）</p><p>Device 切换到访客模式下，连接电脑 USB ，打开传输模式，却发现在 PC 端无法显示内部存储的盘符。</p><p><strong><font color="#FF0000" size="4">✒ 问题原因</font></strong></p><p>这个现象是不合理的，原生代码逻辑（或者说 Pixel）是不存在这个问题的，Bug 的原因是 MTK 合入了一个 patch 所导致。</p><p>导致问题的修改如下：<strong><font color="#0099ff" size="4">MtpService.java</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">onStartCommand</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    UserHandle user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserHandle</span><span class="token punctuation">(</span>ActivityManager<span class="token punctuation">.</span><span class="token function">getCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sServerHolder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"MTP server is still running."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mVolumeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mStorageMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mStorageManager<span class="token punctuation">.</span><span class="token function">registerListener</span><span class="token punctuation">(</span>mStorageEventListener<span class="token punctuation">)</span><span class="token punctuation">;</span>            mVolumes <span class="token operator">=</span> StorageManager<span class="token punctuation">.</span><span class="token function">getVolumeList</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>StorageVolume volume <span class="token operator">:</span> mVolumes<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>MEDIA_MOUNTED<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>volume<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 跟踪 volumeMountedLocked() 函数</span>                    <span class="token function">volumeMountedLocked</span><span class="token punctuation">(</span>volume<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"StorageVolume not mounted "</span> <span class="token operator">+</span> volume<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">volumeMountedLocked</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// For update storage</span>    <span class="token comment" spellcheck="true">/*     * 问题就出在这里！     * MTK 为了修改一个 Bug：偶现显示两个内部存储盘符，所以在这边重新     * 获取一遍 StroageVolume ，但是没有考虑多用户模式！     *     */</span>    StorageVolume<span class="token punctuation">[</span><span class="token punctuation">]</span> volumes <span class="token operator">=</span> mStorageManager<span class="token punctuation">.</span><span class="token function">getVolumeList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mVolumes <span class="token operator">=</span> volumes<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mVolumes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StorageVolume volume <span class="token operator">=</span> mVolumes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>volume<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mVolumeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mMtpDisabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// In PTP mode we support only primary storage</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>volume<span class="token punctuation">.</span><span class="token function">isPrimary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>mPtpMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">addStorageLocked</span><span class="token punctuation">(</span>volume<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong><font color="#FF0000" size="4">✒ 解决方案</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">volumeMountedLocked</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// For update storage, support multi-user mode</span>    <span class="token comment" spellcheck="true">/*     * 博主发现原生设计对多用户读取盘符是这么操作的：     *     mVolumes = StorageManager.getVolumeList(user.getIdentifier(), 0);     * 直接进行如下修改：添加多用户模式判断逻辑     *     */</span>    <span class="token comment" spellcheck="true">// 修改方案</span>    StorageVolume<span class="token punctuation">[</span><span class="token punctuation">]</span> volumes <span class="token operator">=</span> mStorageManager<span class="token punctuation">.</span><span class="token function">getVolumeList</span><span class="token punctuation">(</span>             <span class="token keyword">new</span> <span class="token class-name">UserHandle</span><span class="token punctuation">(</span>ActivityManager<span class="token punctuation">.</span><span class="token function">getCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mVolumes <span class="token operator">=</span> volumes<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mVolumes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StorageVolume volume <span class="token operator">=</span> mVolumes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>volume<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mVolumeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mMtpDisabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// In PTP mode we support only primary storage</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>volume<span class="token punctuation">.</span><span class="token function">isPrimary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>mPtpMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">addStorageLocked</span><span class="token punctuation">(</span>volume<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><br></p><h3 id="2-快速点击打开两个重复的-Activity"><a href="#2-快速点击打开两个重复的-Activity" class="headerlink" title="2. 快速点击打开两个重复的 Activity"></a><center>2. 快速点击打开两个重复的 Activity</center></h3><p><br></p><p><strong><font color="#FF0000" size="4">✒ 问题现象</font></strong></p><p>如果你经常遇到一种情况：快速点击按钮（比如 Settings 界面），弹出两个重复的目标 Activity ！解决方法看这里！</p><p><strong><font color="#FF0000" size="4">✒ 问题原因</font></strong></p><p>其实这是一个系统原生自带的 Bug，强迫症受不了，直接提供解决方案！</p><p><strong><font color="#FF0000" size="4">✒ 解决方案</font></strong></p><p>1、找到你的控件所在类，然后添加一个变量，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">long</span> mStartTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 定义一个初始判断时间变量</span></code></pre><p>2、然后在点击处理事件中，找到目标 Activity 点，添加如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>AdapterView<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> parent<span class="token punctuation">,</span> View view<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">,</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> interval <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> mStartTime<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 两次点击时间间隔</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interval <span class="token operator">>=</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mStartTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showConfirmDialog</span><span class="token punctuation">(</span>infoItem<span class="token punctuation">,</span> isChecked<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// target Activity</span>    <span class="token punctuation">}</span></code></pre><p>就这么简单，不需要按照网上众说纷纭，无需设置 SingerTop、SingerTask ，更没必要单独设置个 onclickListen 监听，试试看，效果很好！</p><p><br></p><h3 id="3-判断当前是否为机主模式"><a href="#3-判断当前是否为机主模式" class="headerlink" title="3. 判断当前是否为机主模式"></a><center>3. 判断当前是否为机主模式</center></h3><p><br></p><p>我们在维护和修改 Android 系统或 Bug 的时候，有时候需要区分机主模式和访客模式，针对不同模式，需要添加和修改不同的代码逻辑！</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>ActivityManager<span class="token punctuation">;</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 目标逻辑代码中添加，非机主模式</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ActivityManager<span class="token punctuation">.</span><span class="token function">getCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> UserHandle<span class="token punctuation">.</span>USER_OWNER<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span></code></pre><h3 id="4-判断应用是否已安装"><a href="#4-判断应用是否已安装" class="headerlink" title="4. 判断应用是否已安装"></a><center>4. 判断应用是否已安装</center></h3><p><br></p><p>在 Android 系统开发过程中，有时候我们需要判断应用（Package）是否已存在于 Device 中。判断方法很多，我们提供一种方案！</p><p>源码中加入如下代码即可判断某 Apk 是否安装：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">boolean</span> <span class="token function">isPkgInstalled</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> String packageName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>packageName <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>ApplicationInfo info <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        info <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getApplicationInfo</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> info <span class="token operator">!=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NameNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><br></p><h3 id="5-Android-P-蓝牙开关状态栏无图标显示"><a href="#5-Android-P-蓝牙开关状态栏无图标显示" class="headerlink" title="5. Android P 蓝牙开关状态栏无图标显示"></a><center>5. Android P 蓝牙开关状态栏无图标显示</center></h3><p><br></p><p>这是个原生设计，为了节约状态栏图标空间（刘海屏导致状态栏空间进一步缩小），只在蓝牙连接设备后才显示相应图标。</p><p>如果你的项目需求是需要显示蓝牙图标，按照如下方式改动：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// frameworks/base/.../PhoneStatusBarPolicy.java</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">updateBluetooth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> iconId <span class="token operator">=</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>stat_sys_data_bluetooth<span class="token punctuation">;</span>    String contentDescription <span class="token operator">=</span> mContext<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>                                string<span class="token punctuation">.</span>accessibility_quick_settings_bluetooth_on<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> bluetoothVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mBluetooth <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// added by marco, begin</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mBluetooth<span class="token punctuation">.</span><span class="token function">isBluetoothEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            iconId <span class="token operator">=</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>stat_sys_data_bluetooth<span class="token punctuation">;</span>            contentDescription <span class="token operator">=</span> mContext<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>                                 string<span class="token punctuation">.</span>accessibility_quick_settings_bluetooth_on<span class="token punctuation">)</span><span class="token punctuation">;</span>            bluetoothVisible <span class="token operator">=</span> mBluetooth<span class="token punctuation">.</span><span class="token function">isBluetoothEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// added by marco, end</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mBluetooth<span class="token punctuation">.</span><span class="token function">isBluetoothConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            iconId <span class="token operator">=</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>stat_sys_data_bluetooth_connected<span class="token punctuation">;</span>            contentDescription <span class="token operator">=</span> mContext<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>                                 string<span class="token punctuation">.</span>accessibility_bluetooth_connected<span class="token punctuation">)</span><span class="token punctuation">;</span>            bluetoothVisible <span class="token operator">=</span> mBluetooth<span class="token punctuation">.</span><span class="token function">isBluetoothEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    mIconController<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>mSlotBluetooth<span class="token punctuation">,</span> iconId<span class="token punctuation">,</span> contentDescription<span class="token punctuation">)</span><span class="token punctuation">;</span>    mIconController<span class="token punctuation">.</span><span class="token function">setIconVisibility</span><span class="token punctuation">(</span>mSlotBluetooth<span class="token punctuation">,</span> bluetoothVisible<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><br></p><h3 id="6-Menu-键导致屏幕亮屏"><a href="#6-Menu-键导致屏幕亮屏" class="headerlink" title="6. Menu 键导致屏幕亮屏"></a><center>6. Menu 键导致屏幕亮屏</center></h3><p><br></p><p>项目中遇到的一个问题，测试反馈 power 键灭屏之后，快速点击 Menu 键，屏幕会被重新激活亮起。其实从源码的流程来看，事件处理机制没有问题，但测试个人觉得是个问题，本着测试自己觉得是问题你开发就必须改的“精神”，那就看看怎么改吧。</p><p>这边，我直接给你解决方案：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneWindowManager</span> <span class="token keyword">implements</span> <span class="token class-name">WindowManagerPolicy</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isWakeKeyWhenScreenOff</span><span class="token punctuation">(</span><span class="token keyword">int</span> keyCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>keyCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ignore volume keys unless docked</span>            <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>KEYCODE_VOLUME_UP<span class="token operator">:</span>            <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>KEYCODE_VOLUME_DOWN<span class="token operator">:</span>            <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>KEYCODE_VOLUME_MUTE<span class="token operator">:</span>                <span class="token keyword">return</span> mDockMode <span class="token operator">!=</span> Intent<span class="token punctuation">.</span>EXTRA_DOCK_STATE_UNDOCKED<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// ignore media and camera keys</span>            <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>KEYCODE_MUTE<span class="token operator">:</span>            <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>KEYCODE_HEADSETHOOK<span class="token operator">:</span>            <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>KEYCODE_MEDIA_PLAY<span class="token operator">:</span>            <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>KEYCODE_MEDIA_PAUSE<span class="token operator">:</span>            <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>KEYCODE_MEDIA_PLAY_PAUSE<span class="token operator">:</span>            <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>KEYCODE_MEDIA_STOP<span class="token operator">:</span>            <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>KEYCODE_MEDIA_NEXT<span class="token operator">:</span>            <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>KEYCODE_MEDIA_PREVIOUS<span class="token operator">:</span>            <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>KEYCODE_MEDIA_REWIND<span class="token operator">:</span>            <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>KEYCODE_MEDIA_RECORD<span class="token operator">:</span>            <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>KEYCODE_MEDIA_FAST_FORWARD<span class="token operator">:</span>            <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>KEYCODE_MEDIA_AUDIO_TRACK<span class="token operator">:</span>            <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>KEYCODE_CAMERA<span class="token operator">:</span>            <span class="token comment" spellcheck="true">// added by marco, begin</span>            <span class="token comment" spellcheck="true">// ignore menu key</span>            <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>KEYCODE_MENU<span class="token operator">:</span>   <span class="token comment" spellcheck="true">// 屏幕 Menu 键激活屏幕亮度</span>            <span class="token comment" spellcheck="true">// added by marco, end</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><br></p>]]></content>
      
      
      <categories>
          
          <category> 技术细节 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验总结 </tag>
            
            <tag> 整机开发 </tag>
            
            <tag> Bug/需求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 “GMS 认证”</title>
      <link href="/2019/04/01/09.gu-ge-ren-zheng-xi-lie-guan-yu-gms-ren-zheng/"/>
      <url>/2019/04/01/09.gu-ge-ren-zheng-xi-lie-guan-yu-gms-ren-zheng/</url>
      
        <content type="html"><![CDATA[<h1 id="1-CTS"><a href="#1-CTS" class="headerlink" title="1. CTS"></a>1. CTS</h1><p>关于何为 CTS，不再展开来描述，你可以直接参阅官方文档：<a href="https://source.android.com/compatibility/cts/setup" target="_blank" rel="noopener">CTS官方资料</a>。</p><h2 id="1-1-Compatibility-Test-Suite"><a href="#1-1-Compatibility-Test-Suite" class="headerlink" title="1.1 Compatibility Test Suite"></a>1.1 Compatibility Test Suite</h2><h2 id="1-2-CTS-Verifier"><a href="#1-2-CTS-Verifier" class="headerlink" title="1.2 CTS Verifier"></a>1.2 CTS Verifier</h2><h1 id="2-GTS"><a href="#2-GTS" class="headerlink" title="2. GTS"></a>2. GTS</h1>]]></content>
      
      
      <categories>
          
          <category> GMS 认证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTS </tag>
            
            <tag> GTS </tag>
            
            <tag> VTS </tag>
            
            <tag> STS </tag>
            
            <tag> GMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈 “时间复杂度”</title>
      <link href="/2019/03/01/11.suan-fa-zhuan-lan-xi-lie-tan-tan-shi-jian-fu-za-du/"/>
      <url>/2019/03/01/11.suan-fa-zhuan-lan-xi-lie-tan-tan-shi-jian-fu-za-du/</url>
      
        <content type="html"><![CDATA[<h2 id="1、算法效率"><a href="#1、算法效率" class="headerlink" title="1、算法效率"></a>1、算法效率</h2><p>虽然随着计算机硬件的迭代更新，运算处理的性能越来越强，但实际上，它也需要根据输入数据的大小和算法效率来消耗一定的处理器资源。要想编写出能高效运行的程序，我们就需要考虑到 <strong><font color="#9932CC">“算法的效率”</font></strong>。</p><p>衡量算法的 <strong>“好坏”</strong> 和 <strong>“效率”</strong> 主要由以下两个指标（复杂度）来评估：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong><font color="#FF0000">时间复杂度（运行时间）：</font></strong>评估执行程序所需的时间，可以估算出程序对处理器的使用程度。<strong><font color="#0000CD">（本篇博文我们重点探讨时间复杂度）</font></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong><font color="#FF0000">空间复杂度（占用空间）：</font></strong>评估执行程序所需的存储空间，可以估算出程序对计算机内存的使用程度。</p><h2 id="2、算法事例"><a href="#2、算法事例" class="headerlink" title="2、算法事例"></a>2、算法事例</h2><p>我们通过几个场景引出时间复杂度的概念，以及常见的几种时间复杂度，最后再总结比较它们的优劣！</p><blockquote><p><strong>场景一</strong></p></blockquote><p><strong><font color="#FFA500">生活场景：</font></strong> <strong>你买了一箱“牛栏山二锅头”（16瓶），2 天喝一瓶，全部喝完需要几天？</strong></p><p>这是一道很简单的算术问题，2 ✖ 16 = 32 天。那如果一箱有 n 瓶，则需要 2 ✖ n = 2n 天，如果我们用一个函数来表达这个相对时间，可以记作 <strong><font color="#FF0000">T(n) = 2n</font></strong> 。</p><p><strong><font color="#FFA500">代码场景：</font></strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 执行次数是线性的</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喝一瓶酒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待一天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p><strong>场景二</strong></p></blockquote><p><strong><font color="#FFA500">生活场景：</font></strong> <strong>你又买了一箱“牛栏山二锅头”（16瓶），5 天为一个周期，每次喝剩下酒的一半，于是第一次喝 8 瓶，第二次喝 4 瓶，那么喝到最后一瓶需要几天？</strong></p><p>这个问题也很简单，16/2 = 8，8/2 = 4，4/2 = 2，2/2 = 1（还剩一瓶），这不就是对数函数吗？以 2 为底数，16为真数，得到的对数就是我们需要的答案，我们可以简写为：5log16。如果一箱有 n 瓶，则需要 5logn 天，如果我们用一个函数来表达这个相对时间，可以记作 <strong><font color="#FF0000">T(n) = 5logn</font></strong> 。</p><p><strong><font color="#FFA500">代码场景：</font></strong></p><pre class=" language-java"><code class="language-java">   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喝一瓶酒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待一天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待一天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待一天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待一天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>场景三</strong></p></blockquote><p><strong><font color="#FFA500">生活场景：</font></strong> <strong>酒喝多了，买了一瓶枸杞，3 天喝一瓶，请问喝完枸杞要几天？</strong></p><p>是的，你没听错，我确实是问你喝完枸杞要多久？答案很简单：3天！如果我们用一个函数来表达这个相对时间，可以记作：<strong><font color="#FF0000">T(n) = 3</font></strong> 。</p><p><strong><font color="#FFA500">代码场景：</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">drink</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喝一瓶枸杞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待一天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待一天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>场景四</strong></p></blockquote><p><strong><font color="#FFA500">生活场景：</font></strong> <strong>酒瘾难戒，又买了一箱好酒（6瓶），但是又不能多喝，于是第一瓶喝了1天，第二瓶喝了2天，第三瓶喝了3天，这样下去全部喝完需要几天？</strong></p><p>不用我说，其实这就是一个 1 + 2 + 3 … + 6 的算术问题，我们知道有个公式：6(6+1)/2 = 21 天，那如果有 n 瓶，就需要 n(n+1)/2 天，如果我们用一个函数来表达这个相对时间，可以记作 <strong><font color="#FF0000">T(n) = n²/2 + n/2</font></strong> 。</p><p><strong><font color="#FFA500">代码场景：</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">drink</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待一天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喝一瓶酒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、渐进时间复杂度"><a href="#3、渐进时间复杂度" class="headerlink" title="3、渐进时间复杂度"></a>3、渐进时间复杂度</h2><p>有了基本操作执行次数的函数 T(n)，是否就可以分析和比较一段代码的运行时间了呢？还是有一定的困难。比如算法 A 的相对时间是 <strong><font color="#0000CD">T(n) = 100n</font></strong> ，算法 B 的相对时间是 <strong><font color="#0000CD">T(n) = 5n²</font></strong> ，这两个到底谁的运行时间更长一些？<strong><font color="#0000CD">这就要看 n 的取值了！</font></strong></p><p>所以，这时候有了 <strong><font color="#FF0000">“渐进时间复杂度”</font></strong>（asymptotic time complectiy）的概念。</p><blockquote><p><strong><font color="#8470FF">我们看看官方的定义：</font></strong><br>若存在函数 f(n)，使得当 n 趋近于无穷大时，T(n) / f(n) 的极限值为不等于零的常数，则称 f(n) 是 T(n) 的同数量级函数。记作 T(n)= O(f(n))，称 O(f(n)) 为算法的 <strong><font color="#FF0000">“渐进时间复杂度”</font></strong>，简称 <strong><font color="#FF0000">“时间复杂度”</font></strong>。渐进时间复杂度用大写 O 来表示，所以也被称为 <strong><font color="#FF0000">“大O表示法”</font></strong>。</p></blockquote><h2 id="4、推导原则"><a href="#4、推导原则" class="headerlink" title="4、推导原则"></a>4、推导原则</h2><p><strong><font color="#FF0000">如何推导出时间复杂度呢？有如下几个原则：</font></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;⚫&nbsp;1、如果运行时间是常数量级，用常数 1 表示；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;⚫&nbsp;2、只保留时间函数中的最高阶项；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;⚫&nbsp;3、如果最高阶项存在，则省去最高阶项前面的系数。</p><h2 id="5、事例再分析"><a href="#5、事例再分析" class="headerlink" title="5、事例再分析"></a>5、事例再分析</h2><blockquote><p><strong>场景一</strong></p></blockquote><p>相对时间：<strong><font color="#0000FF">T(n) = 2n</font></strong> ，根据推导原则 3：最高阶数为 2n ，省去系数 2 ，转换后的时间复杂度为：<strong><font color="#FF0000">T(n) = O(n)</font></strong> 。</p><blockquote><p><strong>场景二</strong></p></blockquote><p>相对时间：<strong><font color="#0000FF">T(n) = 5logn</font></strong> ，根据推导原则 3：最高阶数为 5logn ，省去系数 5 ，转换后的时间复杂度为：<strong><font color="#FF0000">T(n) = O(logn)</font></strong> 。</p><blockquote><p><strong>场景三</strong></p></blockquote><p>相对时间：<strong><font color="#0000FF">T(n) = 3</font></strong> ，根据推导原则 1：只有常数量级 ，用常数 1 表示 ，转换后的时间复杂度为：<strong><font color="#FF0000">T(n) = O(1)</font></strong> 。</p><blockquote><p><strong>场景四</strong></p></blockquote><p>相对时间：<strong><font color="#0000FF">T(n) = n²/2 + n/2</font></strong> ，根据推导原则 2：最高阶数为 n²/2 ，省去系数 0.5 ，转换后的时间复杂度为：<strong><font color="#FF0000">T(n) = O(n²)</font></strong> 。</p><p>这四种时间复杂度究竟谁用时更长，谁节省时间呢？<strong><font color="#FF00FF">O(1) &lt; O(logn) &lt; O(n) &lt; O(n²)</font></strong></p><h2 id="6、其他常见复杂度"><a href="#6、其他常见复杂度" class="headerlink" title="6、其他常见复杂度"></a>6、其他常见复杂度</h2><p>除了常数阶、线性阶、平方阶、对数阶，还有如下时间复杂度：</p><table><thead><tr><th style="text-align:center">f(n)</th><th style="text-align:center">时间复杂度</th><th style="text-align:center">阶</th></tr></thead><tbody><tr><td style="text-align:center">nlogn</td><td style="text-align:center">O(nlogn)</td><td style="text-align:center">nlogn 阶</td></tr><tr><td style="text-align:center">n³</td><td style="text-align:center">O(n³)</td><td style="text-align:center">立方阶</td></tr><tr><td style="text-align:center">2ⁿ</td><td style="text-align:center">O(2ⁿ)</td><td style="text-align:center">指数阶</td></tr><tr><td style="text-align:center">n!</td><td style="text-align:center">O(n!)</td><td style="text-align:center">阶乘阶</td></tr><tr><td style="text-align:center">(√n)</td><td style="text-align:center">O(√n)</td><td style="text-align:center">平方根阶</td></tr></tbody></table><h2 id="7、复杂度比较"><a href="#7、复杂度比较" class="headerlink" title="7、复杂度比较"></a>7、复杂度比较</h2><table><thead><tr><th style="text-align:center">n</th><th style="text-align:center">logn</th><th style="text-align:center">√n</th><th style="text-align:center">nlogn</th><th style="text-align:center">n²</th><th style="text-align:center">2ⁿ</th><th style="text-align:center">n!</th></tr></thead><tbody><tr><td style="text-align:center">5</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">10</td><td style="text-align:center">25</td><td style="text-align:center">32</td><td style="text-align:center">120</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">3</td><td style="text-align:center">3</td><td style="text-align:center">30</td><td style="text-align:center">100</td><td style="text-align:center">1024</td><td style="text-align:center">3628800</td></tr><tr><td style="text-align:center">50</td><td style="text-align:center">5</td><td style="text-align:center">7</td><td style="text-align:center">250</td><td style="text-align:center">2500</td><td style="text-align:center">约10^15</td><td style="text-align:center">约3.0*10^64</td></tr><tr><td style="text-align:center">100</td><td style="text-align:center">6</td><td style="text-align:center">10</td><td style="text-align:center">600</td><td style="text-align:center">10000</td><td style="text-align:center">约10^30</td><td style="text-align:center">约9.3*10^157</td></tr><tr><td style="text-align:center">1000</td><td style="text-align:center">9</td><td style="text-align:center">31</td><td style="text-align:center">9000</td><td style="text-align:center">1000 000</td><td style="text-align:center">约10^300</td><td style="text-align:center">约4.0*10^2567</td></tr></tbody></table><p><br></p><p>从上表可以看出，O(n)、O(logn)、O(√n)、O(nlogn) 随着 n 的增加，复杂度提升不大，因此这些复杂度属于效率比较高的算法，反观 O(2ⁿ) 和 O(n!) 当 n 增加到 50 时，复杂度就突破十位数了，这种效率极差的复杂度最好不要出现在程序中，因此在动手编程时要评估所写算法的最坏情况的复杂度。</p><p>这些时间复杂度究竟谁用时更长，谁节省时间呢？</p><p><strong><font color="#FF00FF">O(1) &lt; O(logn) &lt; O(√n) &lt; O(n) &lt; O(nlogn) &lt; O(n²) &lt; O(n³) &lt; O(2ⁿ) &lt; O(n!)</font></strong></p><h2 id="8、再举一例"><a href="#8、再举一例" class="headerlink" title="8、再举一例"></a>8、再举一例</h2><p><strong><font color="#FF0000">【疑问】：现在计算机硬件性能越来越强，算法真的体验那么明显吗？算法时间复杂度真的需要那么重视吗？</font></strong></p><p>我相信你肯定存在这样的疑问，虽然我们知道算法这个东西是很重要的，但是我们平常可能接触不多，很多时候计算机的性能已经能满足我们的需求，但是我还是要举个例子让你更直观的看到不同算法之间的巨大差异！</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#FF00FF">算法 A 的相对时间规模是 T(n) = 100n，时间复杂度是 O(n)，算法 A 运行在老旧电脑上。</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#FF00FF">算法 B 的相对时间规模是 T(n) = 5n²，时间复杂度是 O(n²)，算法 B 运行在某台超级计算机上，运行速度是老旧电脑的 100 倍。</font></p><p>当随着 n 的增大，我们通过表格看看 T(n) 的变化：</p><table><thead><tr><th style="text-align:center">n</th><th style="text-align:center">T(n) = 100n ✖ 100</th><th style="text-align:center">T(n) = 5n²</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">10000</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">50000</td><td style="text-align:center">125</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">10 0000</td><td style="text-align:center">500</td></tr><tr><td style="text-align:center">100</td><td style="text-align:center">100 0000</td><td style="text-align:center">50000</td></tr><tr><td style="text-align:center">1000</td><td style="text-align:center">1000 0000</td><td style="text-align:center">500 0000</td></tr><tr><td style="text-align:center">2000</td><td style="text-align:center"><font color="#FF0000">2000 0000</font></td><td style="text-align:center"><font color="#FF0000">2000 0000</font></td></tr><tr><td style="text-align:center">10000</td><td style="text-align:center">1 0000 0000</td><td style="text-align:center">5 0000 0000</td></tr><tr><td style="text-align:center">100000</td><td style="text-align:center">10 0000 0000</td><td style="text-align:center">500 0000 0000</td></tr><tr><td style="text-align:center">1000000</td><td style="text-align:center">100 0000 0000</td><td style="text-align:center">50000 0000 0000</td></tr></tbody></table><p><br></p><p>从表格中可以看出，当 n 的值很小的时候，算法 A 的运行用时要远大于算法 B；当 n 的值达到 1000 左右，算法 A 和算法 B 的运行时间已经接近；当 n 的值达到 2000 左右，算法 A 和 算法 B 的运行时间一致；当 n 的值越来越大，达到十万、百万时，算法 A 的优势开始显现，算法 B 则越来越慢，差距越来越明显。这就是不同时间复杂度带来的差距，即便你的计算机很牛X！</p><p><br></p><p><strong><font color="#FF00FF" size="5">参考博客</font></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://blog.csdn.net/qq_41523096/article/details/82142747" target="_blank" rel="noopener">一套图 搞懂“时间复杂度”</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 时间复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PackageManagerService 钻研（8）- APK 安装（下）</title>
      <link href="/2019/02/06/02.kuang-jia-he-xin-fu-wu-android-kuang-jia-fu-wu-pian-packagemanagerservice-zuan-yan-8-apk-an-zhuang-xia/"/>
      <url>/2019/02/06/02.kuang-jia-he-xin-fu-wu-android-kuang-jia-fu-wu-pian-packagemanagerservice-zuan-yan-8-apk-an-zhuang-xia/</url>
      
        <content type="html"><![CDATA[<p><br></p><p><strong><center><font color="#3A5FCD" size="4">PackageManagerService 系列文章如下（基于 Android 9.0 源码）</font><center></center></center></strong><br></p><table><thead><tr><th style="text-align:center">&nbsp;</th><th style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（1）- 启动流程</font></a></th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（2）- 构造函数</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（3）- PackageManager</font></a></td></tr><tr><td style="text-align:center"><strong><font color="#EE2C2C" size="3">PackageManagerService</font></strong></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（4）- PackageInstaller</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（5）- APK 安装流程（1）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（6）- APK 安装流程（2）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（7）- PackageParser</font></a></td></tr></tbody></table><p><br></p><p><strong><font color="#3A5FCD" size="4">修订日志</font></strong><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">1、重新梳理 PackageManagerService 安装 APK 的流程（Android 9.0）；</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">2、博文格式，文章排版优化；</font></p><hr><h1 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h1><h2 id="1-1-核心源码"><a href="#1-1-核心源码" class="headerlink" title="1.1 核心源码"></a>1.1 核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">PackageInstallerSession.java</font></td><td>/frameworks/base/services/core/java/com/android/server/pm/PackageInstallerSession.java</td></tr><tr><td><font color="#D15FEE">PackageManagerService.java</font></td><td>/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</td></tr></tbody></table><p><br></p><h2 id="1-2-前言"><a href="#1-2-前言" class="headerlink" title="1.2 前言"></a>1.2 前言</h2><p>在本系列上一篇文章 <a href="https://superandroid.pro/2018/11/15/B_05.%20Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%885%EF%BC%89%E4%B9%8B%20APK%20%E5%AE%89%E8%A3%85%EF%BC%88PI%EF%BC%89/">Framework 核心服务之 PMS 钻研（7）- APK 安装（中）</a> 中，我们了解了 PackageInstaller 安装 APK 的流程，最后会将 APK 的信息交由 PMS 处理。那么 PMS 是如何处理的？这就是我们这篇文章需要分析的。<br><br></p><h1 id="一、安装-APK"><a href="#一、安装-APK" class="headerlink" title="一、安装 APK"></a>一、安装 APK</h1><h2 id="1-1-handleReturnCode"><a href="#1-1-handleReturnCode" class="headerlink" title="1.1 handleReturnCode"></a>1.1 handleReturnCode</h2><p>我们回到 APK 的复制调用链的头部方法：HandlerParams 的 startCopy 方法，在最后 调用了 handleReturnCode 方法，进行 APK 的安装。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HandlerParams</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_RETRIES <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> mRetries <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">startCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> res<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>mRetries <span class="token operator">></span> MAX_RETRIES<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">handleStartCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           res <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 处理复制 APK 后的安装 APK 逻辑</span>            <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 💥 💥 💥 💥 💥 💥 </span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>handleReturnCode 也是一个抽象方法，那么在哪里实现？同样，它的实现在 InstallParams 中。</p><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">void</span> <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// If mArgs is null, then MCS couldn't be reached. When it</span>            <span class="token comment" spellcheck="true">// reconnects, it will try again to install. At that point, this</span>            <span class="token comment" spellcheck="true">// will succeed.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mArgs <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// "装载代码"的入口是 processPendingInstall(InstallArgs,int) 方法</span>                <span class="token function">processPendingInstall</span><span class="token punctuation">(</span>mArgs<span class="token punctuation">,</span> mRet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>我们发现调用了 processPendingInstall 方法，继续跟！</p><h2 id="1-2-processPendingInstall"><a href="#1-2-processPendingInstall" class="headerlink" title="1.2 processPendingInstall"></a>1.2 processPendingInstall</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processPendingInstall</span><span class="token punctuation">(</span><span class="token keyword">final</span> InstallArgs args<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> currentStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mHandler<span class="token punctuation">.</span><span class="token function">removeCallbacks</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                PackageInstalledInfo res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageInstalledInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">setReturnCode</span><span class="token punctuation">(</span>currentStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span>uid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span>pkg <span class="token operator">=</span> null<span class="token punctuation">;</span>                res<span class="token punctuation">.</span>removedInfo <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>returnCode <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>                     <span class="token operator">*</span> 安装前处理                     <span class="token operator">*</span> 用于检查 APK 的状态的，在安装前确保安装环境的可靠，如果不可靠会清除复制的 APK 文件                    args<span class="token punctuation">.</span><span class="token function">doPreInstall</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>returnCode<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mInstallLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">installPackageTracedLI</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 💥 💥 💥 💥 💥 💥 </span>                    <span class="token punctuation">}</span>                    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>                     <span class="token operator">*</span> 安装后收尾                     <span class="token operator">*</span> 用于处理安装后的收尾操作，如果安装不成功，删除掉安装相关的目录与文件                    args<span class="token punctuation">.</span><span class="token function">doPostInstall</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>returnCode<span class="token punctuation">,</span> res<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="1-3-installPackageTracedLI"><a href="#1-3-installPackageTracedLI" class="headerlink" title="1.3 installPackageTracedLI"></a>1.3 installPackageTracedLI</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">installPackageTracedLI</span><span class="token punctuation">(</span>InstallArgs args<span class="token punctuation">,</span> PackageInstalledInfo res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"installPackage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">installPackageLI</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="1-4-installPackageLI"><a href="#1-4-installPackageLI" class="headerlink" title="1.4 installPackageLI"></a>1.4 installPackageLI</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">installPackageLI</span><span class="token punctuation">(</span>InstallArgs args<span class="token punctuation">,</span> PackageInstalledInfo res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        PackageParser pp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setSeparateProcesses</span><span class="token punctuation">(</span>mSeparateProcesses<span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setDisplayMetrics</span><span class="token punctuation">(</span>mMetrics<span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span>mPackageParserCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>        Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"parsePackage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> PackageParser<span class="token punctuation">.</span>Package pkg<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 解析 APK</span>            pkg <span class="token operator">=</span> pp<span class="token punctuation">.</span><span class="token function">parsePackage</span><span class="token punctuation">(</span>tmpPackageFile<span class="token punctuation">,</span> parseFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageParserException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"Failed parse during installPackageLI"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// Get rid of all references to package scan path via parser.</span>        pp <span class="token operator">=</span> null<span class="token punctuation">;</span>        String oldCodePath <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> systemApp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 检查 APK 是否存在</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>installFlags <span class="token operator">&amp;</span> PackageManager<span class="token punctuation">.</span>INSTALL_REPLACE_EXISTING<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 获取没被改名前的包名</span>                String oldName <span class="token operator">=</span> mSettings<span class="token punctuation">.</span><span class="token function">getRenamedPackageLPr</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>mOriginalPackages <span class="token operator">!=</span> null                        <span class="token operator">&amp;&amp;</span> pkg<span class="token punctuation">.</span>mOriginalPackages<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>oldName<span class="token punctuation">)</span>                        <span class="token operator">&amp;&amp;</span> mPackages<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>oldName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    pkg<span class="token punctuation">.</span><span class="token function">setPackageName</span><span class="token punctuation">(</span>oldName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    pkgName <span class="token operator">=</span> pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 设置标志位表示是替换安装</span>                    replace <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Replacing existing renamed package: oldName="</span>                            <span class="token operator">+</span> oldName <span class="token operator">+</span> <span class="token string">" pkgName="</span> <span class="token operator">+</span> pkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>            PackageSetting ps <span class="token operator">=</span> mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 查看 Settings 中是否存有要安装的 APK 的信息，如果有就获取签名信息</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ps <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Existing package: "</span> <span class="token operator">+</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span>                PackageSetting signatureCheckPs <span class="token operator">=</span> ps<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span><span class="token function">isStaticSharedLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    SharedLibraryEntry libraryEntry <span class="token operator">=</span> <span class="token function">getLatestSharedLibraVersionLPr</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>libraryEntry <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        signatureCheckPs <span class="token operator">=</span> mSettings<span class="token punctuation">.</span><span class="token function">getPackageLPr</span><span class="token punctuation">(</span>libraryEntry<span class="token punctuation">.</span>apk<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 检查签名的正确性</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldCheckUpgradeKeySetLP</span><span class="token punctuation">(</span>signatureCheckPs<span class="token punctuation">,</span> scanFlags<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkUpgradeKeySetLP</span><span class="token punctuation">(</span>signatureCheckPs<span class="token punctuation">,</span> pkg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>INSTALL_FAILED_UPDATE_INCOMPATIBLE<span class="token punctuation">,</span> <span class="token string">"Package "</span>                                <span class="token operator">+</span> pkg<span class="token punctuation">.</span>packageName <span class="token operator">+</span> <span class="token string">" upgrade keys do not match the "</span>                                <span class="token operator">+</span> <span class="token string">"previously installed version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> N <span class="token operator">=</span> pkg<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 遍历每个权限，对权限进行处理</span>                PackageParser<span class="token punctuation">.</span>Permission perm <span class="token operator">=</span> pkg<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                BasePermission bp <span class="token operator">=</span> mSettings<span class="token punctuation">.</span>mPermissions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>perm<span class="token punctuation">.</span>info<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>systemApp <span class="token operator">||</span> sPmsExt<span class="token punctuation">.</span><span class="token function">isOperatorApp</span><span class="token punctuation">(</span>mPackages<span class="token punctuation">,</span> mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">,</span> pkgName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>onExternal<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 系统APP不能在SD卡上替换安装</span>                res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>INSTALL_FAILED_INVALID_INSTALL_LOCATION<span class="token punctuation">,</span>                        <span class="token string">"Cannot install updates to system apps on sdcard"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>instantApp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 系统 APP 不能被 Instant App 替换</span>                res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>INSTALL_FAILED_INSTANT_APP_INVALID<span class="token punctuation">,</span>                        <span class="token string">"Cannot update a system app with an instant app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 重命名临时文件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>args<span class="token punctuation">.</span><span class="token function">doRename</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>returnCode<span class="token punctuation">,</span> pkg<span class="token punctuation">,</span> oldCodePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>INSTALL_FAILED_INSUFFICIENT_STORAGE<span class="token punctuation">,</span> <span class="token string">"Failed rename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instantApp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">startIntentFilterVerifications</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> replace<span class="token punctuation">,</span> pkg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_DOMAIN_VERIFICATION<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Not verifying instant app install for app links: "</span> <span class="token operator">+</span> pkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>PackageFreezer freezer <span class="token operator">=</span> <span class="token function">freezePackageForInstall</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">,</span> installFlags<span class="token punctuation">,</span>                <span class="token string">"installPackageLI"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>replace<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 替换安装</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span><span class="token function">isStaticSharedLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    PackageParser<span class="token punctuation">.</span>Package existingPkg <span class="token operator">=</span> mPackages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>existingPkg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> existingPkg<span class="token punctuation">.</span>mVersionCode <span class="token operator">!=</span> pkg<span class="token punctuation">.</span>mVersionCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>INSTALL_FAILED_DUPLICATE_PACKAGE<span class="token punctuation">,</span> <span class="token string">"Packages declaring "</span>                                <span class="token operator">+</span> <span class="token string">"static-shared libs cannot be updated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token function">replacePackageLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags <span class="token operator">|</span> SCAN_REPLACING<span class="token punctuation">,</span> args<span class="token punctuation">.</span>user<span class="token punctuation">,</span>                        installerPackageName<span class="token punctuation">,</span> res<span class="token punctuation">,</span> args<span class="token punctuation">.</span>installReason<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 安装新的 APK</span>                <span class="token function">installNewPackageLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags <span class="token operator">|</span> SCAN_DELETE_DATA_ON_FAILURES<span class="token punctuation">,</span>                        args<span class="token punctuation">.</span>user<span class="token punctuation">,</span> installerPackageName<span class="token punctuation">,</span> volumeUuid<span class="token punctuation">,</span> res<span class="token punctuation">,</span> args<span class="token punctuation">.</span>installReason<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 更新应用程序所属的用户</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> PackageSetting ps <span class="token operator">=</span> mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ps <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span>newUsers <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">queryInstalledUsers</span><span class="token punctuation">(</span>sUserManager<span class="token punctuation">.</span><span class="token function">getUserIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">setUpdateAvailable</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token comment" spellcheck="true">/*updateAvailable*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>installPackageLI 方法的代码很长，这里截取主要的部分，主要做了几件事：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;1、创建 PackageParser 解析 APK 。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;2、检查 APK 是否存在，如果存在就获取此前没被改名前的包名，赋值给 PackageParser.Package 类型的 pkg ，将标志位 replace 置为 true 表示是替换安装。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;3、如果 Settings 中保存有要安装的 APK 的信息，说明此前安装过该 APK ，则需要校验 APK 的签名信息，确保安全的进行替换。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;4、将临时文件重新命名，比如前面提到的 /data/app/vmdl18300388.tmp/base.apk ，重命名为 /data/app/包名-1/base.apk 。这个新命名的包名会带上一个数字后缀 1，每次升级一个已有的 App ，这个数字会不断的累加。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;5、系统 APP 的更新安装会有两个限制，一个是系统 APP 不能在 SD 卡上替换安装，另一个是系统 APP 不能被 Instant App 替换。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;6、根据 replace 来做区分，如果是替换安装就会调用 replacePackageLIF 方法，其方法内部还会对系统 APP 和非系统 APP 进行区分处理，如果是新安装 APK 会调用 installNewPackageLIF 方法。</p><h2 id="1-5-installNewPackageLIF"><a href="#1-5-installNewPackageLIF" class="headerlink" title="1.5 installNewPackageLIF"></a>1.5 installNewPackageLIF</h2><p>我们以安装新 APK 为例，查看 installNewPackageLIF 的源码：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*     * Install a non-existing package.     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">installNewPackageLIF</span><span class="token punctuation">(</span>PackageParser<span class="token punctuation">.</span>Package pkg<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> policyFlags<span class="token punctuation">,</span>            <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> UserHandle user<span class="token punctuation">,</span> String installerPackageName<span class="token punctuation">,</span> String volumeUuid<span class="token punctuation">,</span>            PackageInstalledInfo res<span class="token punctuation">,</span> <span class="token keyword">int</span> installReason<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"installNewPackage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 扫描 APK</span>            PackageParser<span class="token punctuation">.</span>Package newPackage <span class="token operator">=</span> <span class="token function">scanPackageTracedLI</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> policyFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span>                    System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 更新 Settings 信息</span>            <span class="token function">updateSettingsLI</span><span class="token punctuation">(</span>newPackage<span class="token punctuation">,</span> installerPackageName<span class="token punctuation">,</span> null<span class="token punctuation">,</span> res<span class="token punctuation">,</span> user<span class="token punctuation">,</span> installReason<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>returnCode <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 安装成功后，为新安装的应用程序准备数据</span>                <span class="token function">prepareAppDataAfterInstallLIF</span><span class="token punctuation">(</span>newPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 安装失败则删除 APK</span>                <span class="token function">deletePackageLIF</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span>                        PackageManager<span class="token punctuation">.</span>DELETE_KEEP_DATA<span class="token punctuation">,</span> res<span class="token punctuation">.</span>removedInfo<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageManagerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"Package couldn't be installed in "</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span>codePath<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>installNewPackageLIF 主要做了以下 3 件事：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;1、扫描 APK，将 APK 的信息存储在 PackageParser.Package 类型的 newPackage 中，一个 Package 的信息包含了 1 个 base APK 以及 0 个或者多个 split APK 。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;2、更新该 APK 对应的 Settings 信息，Settings 用于保存所有包的动态设置。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;3、如果安装成功就为新安装的应用程序准备数据，安装失败就删除APK。</p><h2 id="1-6-scanPackageTracedLI"><a href="#1-6-scanPackageTracedLI" class="headerlink" title="1.6 scanPackageTracedLI"></a>1.6 scanPackageTracedLI</h2><p>调用 scanPackageTracedLI() 进行安装 ：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> PackageParser<span class="token punctuation">.</span>Package <span class="token function">scanPackageTracedLI</span><span class="token punctuation">(</span>File scanFile<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> parseFlags<span class="token punctuation">,</span>            <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> <span class="token keyword">long</span> currentTime<span class="token punctuation">,</span> UserHandle user<span class="token punctuation">)</span> <span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>        Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"scanPackage ["</span> <span class="token operator">+</span> scanFile<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">scanPackageLI</span><span class="token punctuation">(</span>scanFile<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span> currentTime<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="1-7-scanPackageLI-01"><a href="#1-7-scanPackageLI-01" class="headerlink" title="1.7 scanPackageLI - 01"></a>1.7 scanPackageLI - 01</h2><p>scanPackageTracedLI() 调用了 scanPackageLI() 方法：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     *  Scans a package and returns the newly parsed package.     *  Returns {@code null} in case of errors and the error code is stored in mLastScanError     */</span>    <span class="token keyword">private</span> PackageParser<span class="token punctuation">.</span>Package <span class="token function">scanPackageLI</span><span class="token punctuation">(</span>File scanFile<span class="token punctuation">,</span> <span class="token keyword">int</span> parseFlags<span class="token punctuation">,</span> <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span>            <span class="token keyword">long</span> currentTime<span class="token punctuation">,</span> UserHandle user<span class="token punctuation">)</span> <span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Parsing: "</span> <span class="token operator">+</span> scanFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        PackageParser pp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setSeparateProcesses</span><span class="token punctuation">(</span>mSeparateProcesses<span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setOnlyCoreApps</span><span class="token punctuation">(</span>mOnlyCore<span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setDisplayMetrics</span><span class="token punctuation">(</span>mMetrics<span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span>mPackageParserCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> <span class="token function">scanPackageLI</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> scanFile<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span> currentTime<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="1-8-scanPackageLI-02"><a href="#1-8-scanPackageLI-02" class="headerlink" title="1.8 scanPackageLI - 02"></a>1.8 scanPackageLI - 02</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> PackageParser<span class="token punctuation">.</span>Package <span class="token function">scanPackageLI</span><span class="token punctuation">(</span>PackageParser<span class="token punctuation">.</span>Package pkg<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> policyFlags<span class="token punctuation">,</span>            <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> <span class="token keyword">long</span> currentTime<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> UserHandle user<span class="token punctuation">)</span>                    <span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// scanPackageDirtyLI 实际安装 package 的方法</span>            <span class="token keyword">final</span> PackageParser<span class="token punctuation">.</span>Package res <span class="token operator">=</span> <span class="token function">scanPackageDirtyLI</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> policyFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span>                    currentTime<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>scanFlags <span class="token operator">&amp;</span> SCAN_DELETE_DATA_ON_FAILURES<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// DELETE_DATA_ON_FAILURES is only used by frozen paths</span>                <span class="token function">destroyAppDataLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>USER_ALL<span class="token punctuation">,</span>                        StorageManager<span class="token punctuation">.</span>FLAG_STORAGE_DE <span class="token operator">|</span> StorageManager<span class="token punctuation">.</span>FLAG_STORAGE_CE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">destroyAppProfilesLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>USER_ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>最终调用 scanPackageLI 方法！</p><h1 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h1><p>本文主要讲解了 PMS 是如何处理 APK 安装的流程，主要有几个步骤：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;PackageInstaller 安装 APK 时会将 APK 的信息交由 PMS 处理，PMS 通过向 PackageHandler 发送消息来驱动 APK 的复制和安装工作。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;PMS 发送 INIT_COPY 和 MCS_BOUND 类型的消息，控制 PackageHandler 来绑定 DefaultContainerService ，完成复制 APK 等工作。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;复制 APK 完成后，会开始进行安装 APK 的流程，包括安装前的检查、安装 APK 和安装后的收尾工作。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>&nbsp;📕 01. <a href="http://liuwangshu.cn/framework/pms/3-pms-install.html" target="_blank" rel="noopener">Android包管理机制（三）PMS处理APK的安装</a><br>&nbsp;📕 02. <a href="https://www.jianshu.com/p/c4333c7eb409" target="_blank" rel="noopener">APK安装流程详解12——PMS中的新安装流程上(拷贝)</a></p><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>推荐跳转：<a href="https://superandroid.pro/2019/12/31/%E3%80%8AThinking%20in%20Android%E3%80%8B%20--%2001.%20%E5%8D%9A%E5%AE%A2%E7%B4%A2%E5%BC%95/">博客索引（Android 9.0）</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://superandroid.pro/2019/01/27/%E3%80%90%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1%E3%80%91Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%887%EF%BC%89%E4%B9%8B%20APK%20%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%AD%EF%BC%89/">Framework 核心服务之 PMS 钻研（7）- APK 安装流程（中）</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PackageManagerService </tag>
            
            <tag> APK 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PackageManagerService 钻研（7）- APK 安装（中）</title>
      <link href="/2019/02/01/02.kuang-jia-he-xin-fu-wu-android-kuang-jia-fu-wu-pian-packagemanagerservice-zuan-yan-7-apk-an-zhuang-zhong/"/>
      <url>/2019/02/01/02.kuang-jia-he-xin-fu-wu-android-kuang-jia-fu-wu-pian-packagemanagerservice-zuan-yan-7-apk-an-zhuang-zhong/</url>
      
        <content type="html"><![CDATA[<p><br></p><p><strong><center><font color="#3A5FCD" size="4">PackageManagerService 系列文章如下（基于 Android 9.0 源码）</font><center></center></center></strong><br></p><table><thead><tr><th style="text-align:center">&nbsp;</th><th style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（1）- 启动流程</font></a></th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（2）- 构造函数</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（3）- PackageManager</font></a></td></tr><tr><td style="text-align:center"><strong><font color="#EE2C2C" size="3">PackageManagerService</font></strong></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（4）- PackageInstaller</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（5）- APK 安装流程（1）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（6）- APK 安装流程（2）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（7）- PackageParser</font></a></td></tr></tbody></table><p><br></p><p><strong><font color="#3A5FCD" size="4">修订日志</font></strong><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">1、重新梳理 PackageManagerService 安装 APK 的流程（Android 9.0）；</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">2、博文格式，文章排版优化；</font></p><hr><h1 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h1><h2 id="1-1-核心源码"><a href="#1-1-核心源码" class="headerlink" title="1.1 核心源码"></a>1.1 核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">PackageInstallerSession.java</font></td><td>/frameworks/base/services/core/java/com/android/server/pm/PackageInstallerSession.java</td></tr><tr><td><font color="#D15FEE">PackageManagerService.java</font></td><td>/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</td></tr></tbody></table><p><br></p><h2 id="1-2-前言"><a href="#1-2-前言" class="headerlink" title="1.2 前言"></a>1.2 前言</h2><p>在本系列上一篇文章 <a href="https://superandroid.pro/2018/11/15/B_05.%20Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%885%EF%BC%89%E4%B9%8B%20APK%20%E5%AE%89%E8%A3%85%EF%BC%88PI%EF%BC%89/">Framework 核心服务之 PMS 钻研（5）- APK 安装（上）</a> 中，我们了解了 PackageInstaller 安装 APK 的流程，最后会将 APK 的信息交由 PMS 处理。那么 PMS 是如何处理的？这就是我们这篇文章需要分析的。<br><br></p><h1 id="二、PackageManagerService"><a href="#二、PackageManagerService" class="headerlink" title="二、PackageManagerService"></a>二、PackageManagerService</h1><h2 id="2-1-commitLocked"><a href="#2-1-commitLocked" class="headerlink" title="2.1 commitLocked"></a>2.1 commitLocked</h2><p>在前一篇文章末尾，我们研究过 <code>commitLocked</code> 方法，回顾下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageInstallerSession</span> <span class="token keyword">extends</span> <span class="token class-name">IPackageInstallerSession<span class="token punctuation">.</span>Stub</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> PackageManagerService mPm<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">commitLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        mPm<span class="token punctuation">.</span><span class="token function">installStage</span><span class="token punctuation">(</span>mPackageName<span class="token punctuation">,</span> stageDir<span class="token punctuation">,</span> stageCid<span class="token punctuation">,</span> localObserver<span class="token punctuation">,</span> params<span class="token punctuation">,</span>                mInstallerPackageName<span class="token punctuation">,</span> mInstallerUid<span class="token punctuation">,</span> user<span class="token punctuation">,</span> mCertificates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><br></p><h2 id="2-2-installStage"><a href="#2-2-installStage" class="headerlink" title="2.2 installStage"></a>2.2 installStage</h2><p>接下来正式进入 PMS 源码的分析流程，看看 <code>installStage</code> 方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageManagerService</span> <span class="token keyword">extends</span> <span class="token class-name">IPackageManager<span class="token punctuation">.</span>Stub</span> <span class="token keyword">implements</span> <span class="token class-name">PackageSender</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">final</span> PackageHandler mHandler<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">installStage</span><span class="token punctuation">(</span>String packageName<span class="token punctuation">,</span> File stagedDir<span class="token punctuation">,</span> String stagedCid<span class="token punctuation">,</span>            IPackageInstallObserver2 observer<span class="token punctuation">,</span> PackageInstaller<span class="token punctuation">.</span>SessionParams sessionParams<span class="token punctuation">,</span>            String installerPackageName<span class="token punctuation">,</span> <span class="token keyword">int</span> installerUid<span class="token punctuation">,</span> UserHandle user<span class="token punctuation">,</span>            Certificate<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> certificates<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 创建类型为 INIT_COPY 的消息</span>        <span class="token keyword">final</span> Message msg <span class="token operator">=</span> mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>INIT_COPY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> installReason <span class="token operator">=</span> <span class="token function">fixUpInstallReason</span><span class="token punctuation">(</span>installerPackageName<span class="token punctuation">,</span> installerUid<span class="token punctuation">,</span>                sessionParams<span class="token punctuation">.</span>installReason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建 InstallParams，它对应于包的安装数据</span>        <span class="token keyword">final</span> InstallParams params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstallParams</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> null<span class="token punctuation">,</span> observer<span class="token punctuation">,</span>                sessionParams<span class="token punctuation">.</span>installFlags<span class="token punctuation">,</span> installerPackageName<span class="token punctuation">,</span> sessionParams<span class="token punctuation">.</span>volumeUuid<span class="token punctuation">,</span>                verificationInfo<span class="token punctuation">,</span> user<span class="token punctuation">,</span> sessionParams<span class="token punctuation">.</span>abiOverride<span class="token punctuation">,</span>                sessionParams<span class="token punctuation">.</span>grantedRuntimePermissions<span class="token punctuation">,</span> certificates<span class="token punctuation">,</span> installReason<span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">setTraceMethod</span><span class="token punctuation">(</span><span class="token string">"installStage"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTraceCookie</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>obj <span class="token operator">=</span> params<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 将 InstallParams 通过消息发送出去</span>        mHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><br></p><h2 id="2-3-PackageHandler"><a href="#2-3-PackageHandler" class="headerlink" title="2.3 PackageHandler"></a>2.3 PackageHandler</h2><p>因为 <code>PackageHandler</code> 继承 <code>Handler</code> ，所以我们来看下 <code>PackageHandler</code> 的 <code>HandlerMessage</code> 方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageManagerService</span> <span class="token keyword">extends</span> <span class="token class-name">IPackageManager<span class="token punctuation">.</span>Stub</span> <span class="token keyword">implements</span> <span class="token class-name">PackageSender</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">class</span> <span class="token class-name">PackageHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">doHandleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 设置了线程的优先级为后台线程</span>                Process<span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span>Process<span class="token punctuation">.</span>THREAD_PRIORITY_BACKGROUND<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><br></p><h3 id="2-3-1-INIT-COPY"><a href="#2-3-1-INIT-COPY" class="headerlink" title="2.3.1 INIT_COPY"></a>2.3.1 INIT_COPY</h3><p>接下来看下 INIT_COPY 消息的处理流程：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageManagerService</span> <span class="token keyword">extends</span> <span class="token class-name">IPackageManager<span class="token punctuation">.</span>Stub</span> <span class="token keyword">implements</span> <span class="token class-name">PackageSender</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">class</span> <span class="token class-name">PackageHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> <span class="token keyword">boolean</span> mBound <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>HandlerParams<span class="token operator">></span> mPendingInstalls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>HandlerParams<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 用于处理各个类型的消息</span>        <span class="token keyword">void</span> <span class="token function">doHandleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token keyword">case</span> INIT_COPY<span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 取出 InstallParams，继承自 HandlerParams，</span>                    HandlerParams params <span class="token operator">=</span> <span class="token punctuation">(</span>HandlerParams<span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// idx 为当前需要安装的 APK 个数，mPendingInstalls 里面保存所有需要</span>                    <span class="token comment" spellcheck="true">// 安装的 APK 解析出来的 HandlerParams 参数</span>                    <span class="token keyword">int</span> idx <span class="token operator">=</span> mPendingInstalls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// mBound 用于标识是否绑定了服务（DefaultContainerService），如果已经绑定了，</span>                    <span class="token comment" spellcheck="true">// 则 mBound 为true，如果是第一次调用 mBound 为 false，默认值为 false</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mBound<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 如果没有绑定服务，则进行绑定工作，connectToService 方法内部进行绑定，</span>                        <span class="token comment" spellcheck="true">// 如果绑定成功会将 mBound 置为 true</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">connectToService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 错误输出</span>                            <span class="token comment" spellcheck="true">// 绑定服务失败则 return</span>                            <span class="token keyword">return</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 绑定服务成功，将请求添加到 ArrayList 类型的 mPendingInstalls 中，</span>                            <span class="token comment" spellcheck="true">// 等待处理</span>                            mPendingInstalls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 已经绑定服务</span>                        mPendingInstalls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 如果是第一个安装请求，则直接发送事件 MCS_BOUND 触发处理流程</span>                            mHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span>MCS_BOUND<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><br></p><h3 id="2-3-2-connectToService"><a href="#2-3-2-connectToService" class="headerlink" title="2.3.2 connectToService"></a>2.3.2 connectToService</h3><p>假设我们是第一次走流程，还没有绑定服务，则会调用 <code>connectToService()</code> 方法，看下流程：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageManagerService</span> <span class="token keyword">extends</span> <span class="token class-name">IPackageManager<span class="token punctuation">.</span>Stub</span> <span class="token keyword">implements</span> <span class="token class-name">PackageSender</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">class</span> <span class="token class-name">PackageHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">connectToService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Intent service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span>DEFAULT_CONTAINER_COMPONENT<span class="token punctuation">)</span><span class="token punctuation">;</span>            Process<span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span>Process<span class="token punctuation">.</span>THREAD_PRIORITY_DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * bindServiceAsUser 方法会传入 mDefContainerConn，             * bindServiceAsUser 方法的处理逻辑和我们调用 bindService 是类似的，             * 服务建立连接后，会调用 onServiceConnected             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mContext<span class="token punctuation">.</span><span class="token function">bindServiceAsUser</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> mDefContainerConn<span class="token punctuation">,</span>                    Context<span class="token punctuation">.</span>BIND_AUTO_CREATE<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>SYSTEM<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Process<span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span>Process<span class="token punctuation">.</span>THREAD_PRIORITY_BACKGROUND<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果绑定 DefaultContainerService 成功，mBound 会置为 ture</span>                mBound <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Process<span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span>Process<span class="token punctuation">.</span>THREAD_PRIORITY_BACKGROUND<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>这里可以看到 <code>bind</code> 了一个 <code>service</code> ，这个 <code>service</code> 的 <code>ComponentName</code> 是 <code>&quot;DEFAULT_CONTAINER_COMPONENT&quot;</code> 这个常量，那我们就来看下这个 <code>ComponentName</code> 是什么？</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> ComponentName DEFAULT_CONTAINER_COMPONENT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span>        DEFAULT_CONTAINER_PACKAGE<span class="token punctuation">,</span>        <span class="token string">"com.android.defcontainer.DefaultContainerService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>现在我们知道 bind 的 service 是 <code>DefaultContainerService</code> 。绑定 <code>DefaultContainerService</code> 之后，设定进程的优先级为 <code>THREAD_PRIORITY_DEFAULT</code>。</p><p>然后等 <code>bindServiceAsUser</code> 这个方法执行完则又把线程的优先级设为 <code>THREAD_PRIORITY_BACKGROUND</code>。</p><p>这边要重点提到一个<font color="#0000CD"> <strong>mDefContainerConn</strong></font> 变量，研究一下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">private</span> DefaultContainerConnection mDefContainerConn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultContainerConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>mDefContainerConn</code> 的类型是 <code>DefaultContainerConnection</code> ，那我们来看下 <code>DefaultContainerConnection</code> 这个类。<br><br></p><h3 id="2-3-3-DefaultContainerConnection"><a href="#2-3-3-DefaultContainerConnection" class="headerlink" title="2.3.3 DefaultContainerConnection"></a>2.3.3 DefaultContainerConnection</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageManagerService</span> <span class="token keyword">extends</span> <span class="token class-name">IPackageManager<span class="token punctuation">.</span>Stub</span> <span class="token keyword">implements</span> <span class="token class-name">PackageSender</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// DefaultContainerConnection 实现了 ServiceConnection，</span>    <span class="token comment" spellcheck="true">// 所以在连接成功的时候会调用 onServiceConnected 方法</span>    <span class="token keyword">class</span> <span class="token class-name">DefaultContainerConnection</span> <span class="token keyword">implements</span> <span class="token class-name">ServiceConnection</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span>ComponentName name<span class="token punctuation">,</span> IBinder service<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_SD_INSTALL<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onServiceConnected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> IMediaContainerService imcs <span class="token operator">=</span> IMediaContainerService<span class="token punctuation">.</span>Stub                    <span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>Binder<span class="token punctuation">.</span><span class="token function">allowBlocking</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 发送了 MCS_BOUND 类型的消息</span>            mHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>MCS_BOUND<span class="token punctuation">,</span> imcs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span>ComponentName name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_SD_INSTALL<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onServiceDisconnected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>上文提及到 <code>mContext.bindServiceAsUser</code>() 方法，其实就是<code>&quot;绑定&quot;</code> <code>DefaultContainerService</code>。我们知道 bind 一个 Service ，其中负责通信的是 <code>ServiceConnection</code>，所以，本方法中负责通信的就是 <code>mDefContainerConn</code>。</p><p>一旦绑定成功会执行 <code>mDefContainerConn</code> 的 <code>onServiceConnected</code> 方法。</p><p>从源码中可以看到：当绑定成功后在 <code>onServiceConnected</code> 中将一个 <code>IBinder</code> 转换成了一个 <code>IMediaContainerService</code>。</p><p>这个就是 <code>onServiceConnected</code> 回调函数中根据参数传进来的 <code>IMediaContainerService.Stub</code> 的对象引用创建的一个<code>远程代理对象</code>，后面 <code>PacakgeManagerService</code> 将通过该代理对象访问 <code>DefaultContainerService</code> 服务。<br><br></p><h3 id="2-3-4-小结"><a href="#2-3-4-小结" class="headerlink" title="2.3.4 小结"></a>2.3.4 小结</h3><p><strong>我们简单梳理一下以上代码所做的工作：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;（1）<code>mBound</code> 用于标识是否绑定了 <code>DefaultContainerService</code>，默认值为 <code>false</code>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;（2）<code>DefaultContainerService</code> 是用于检查和复制可移动文件的服务，这是一个比较耗时的操作，因此 <code>DefaultContainerService</code> 没有和 <code>PackageManagerService</code> 运行在同一进程中，它运行在 <code>com.android.defcontainer</code> 进程，通过 <code>IMediaContainerService</code> 和 <code>PackageManagerService</code> 进行 <code>IPC</code> 通信。</p><p>彼此之间的 IPC 通信如下图所示：<br><br></p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-fc2af2fd9ed961c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/680" alt="IPC 通信原理图.png"></center><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;（3）<code>connectToService</code> 方法用来绑定 <code>DefaultContainerService</code>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;（4）<code>mHandler.sendEmptyMessage(MCS_BOUND)</code>：发送 <code>MCS_BOUND</code> 类型的消息，触发处理<code>第一个安装请求</code>。</p><p>不知道你是否发现，在我们上面研究的源码中，有两处发送了 <code>MCS_BOUND</code> 类型消息的方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// PackageHandler.doHandleMessage（已绑定服务）</span>mHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span>MCS_BOUND<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">// 不带参数</span><span class="token comment" spellcheck="true">// DefaultContainerConnection（未绑定服务 - 绑定服务）</span>mHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>MCS_BOUND<span class="token punctuation">,</span> imcs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 带参数</span></code></pre><p><br></p><h2 id="2-4-MCS-BOUND-分析"><a href="#2-4-MCS-BOUND-分析" class="headerlink" title="2.4 MCS_BOUND 分析"></a>2.4 MCS_BOUND 分析</h2><p><strong>接下来，我们重点讨论这两个方法！</strong><br><br></p><h3 id="2-4-1-不带参数"><a href="#2-4-1-不带参数" class="headerlink" title="2.4.1 不带参数"></a>2.4.1 不带参数</h3><p>首先研究不带参数的源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">PackageHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">void</span> <span class="token function">doHandleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">case</span> MCS_BOUND<span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"mcs_bound"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 不带参数，则此条件不满足</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>obj <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mContainerService <span class="token operator">=</span> <span class="token punctuation">(</span>IMediaContainerService<span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>                    Trace<span class="token punctuation">.</span><span class="token function">asyncTraceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"bindingMCS"</span><span class="token punctuation">,</span>                            System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>mHandler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 走这边的逻辑</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mContainerService <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 服务没有绑定，则走这边，但是之前我们讲解过，发送不带参数的 MCS_BOUND 时，</span>                    <span class="token comment" spellcheck="true">// 已经绑定了服务，这显然是不正常的</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mBound<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>HandlerParams params <span class="token operator">:</span> mPendingInstalls<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 负责处理服务发生错误的情况</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">// 绑定失败，清空安装请求队列</span>                        mPendingInstalls<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 继续等待绑定服务</span>                        Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Waiting to connect to media container service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingInstalls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Should never happen ideally.</span>                   Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Empty queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><br></p><h3 id="2-4-2-带参数"><a href="#2-4-2-带参数" class="headerlink" title="2.4.2 带参数"></a>2.4.2 带参数</h3><p>接下来研究不带参数的源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">PackageHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">void</span> <span class="token function">doHandleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">case</span> MCS_BOUND<span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"mcs_bound"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>obj <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mContainerService <span class="token operator">=</span> <span class="token punctuation">(</span>IMediaContainerService<span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>                    Trace<span class="token punctuation">.</span><span class="token function">asyncTraceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"bindingMCS"</span><span class="token punctuation">,</span>                            System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>mHandler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 带参数，此条件不满足</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mContainerService <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token comment" spellcheck="true">// 走这边的逻辑，安装请求队列不为空</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingInstalls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token comment" spellcheck="true">// 得到安装请求队列第一个请求 HandlerParams</span>                    HandlerParams params <span class="token operator">=</span> mPendingInstalls<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>params <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 如果 HandlerParams 不为 null 就会调用 HandlerParams 的 </span>                        <span class="token comment" spellcheck="true">// startCopy 方法，用于开始复制 APK 的流程</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">startCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 如果 APK 安装成功，删除本次安装请求</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingInstalls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                mPendingInstalls<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingInstalls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>mBound<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token comment" spellcheck="true">// 如果没有安装请求了，发送解绑服务的请求</span>                                    <span class="token function">removeMessages</span><span class="token punctuation">(</span>MCS_UNBIND<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    Message ubmsg <span class="token operator">=</span> <span class="token function">obtainMessage</span><span class="token punctuation">(</span>MCS_UNBIND<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span>ubmsg<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// 如果还有其他的安装请求，接着发送 MCS_BOUND 消息</span>                                <span class="token comment" spellcheck="true">// 继续处理剩余的安装请求</span>                                mHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span>MCS_BOUND<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 如果安装请求数不大于 0 就会打印 “Empty queue”</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Should never happen ideally.</span>                Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Empty queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>上面的流程其实很简单，我们根据是否传入了 <code>ims</code> 这个参数，走两条流程，核心的方法就是最终的 <code>startCopy()</code>。<br><br></p><h1 id="三、复制-APK"><a href="#三、复制-APK" class="headerlink" title="三、复制 APK"></a>三、复制 APK</h1><p>上面我们提过，复制 <code>APK</code> 的操作是调用 <code>HandlerParams</code> 的 <code>startCopy</code> 方法。<code>HandlerParams</code> 是 PMS 中的<code>抽象类</code>，它的实现类为 <code>PMS</code> 的内部类 <code>InstallParams</code>。<br><br></p><h2 id="3-1-startCopy"><a href="#3-1-startCopy" class="headerlink" title="3.1 startCopy"></a>3.1 startCopy</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageManagerService</span> <span class="token keyword">extends</span> <span class="token class-name">IPackageManager<span class="token punctuation">.</span>Stub</span> <span class="token keyword">implements</span> <span class="token class-name">PackageSender</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HandlerParams</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_RETRIES <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * Number of times startCopy() has been attempted and had a non-fatal         * error.         */</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> mRetries <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">startCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> res<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/**                 * mRetries 用于记录 startCopy 方法调用的次数，调用 startCopy 方法时会先自动加 1                 * startCopy 方法尝试的次数超过了 4 次，就放弃这个安装请求                 */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>mRetries <span class="token operator">></span> MAX_RETRIES<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 发送 MCS_GIVE_UP 类型消息，将第一个安装请求（本次安装请求）从安装请求队列</span>                    <span class="token comment" spellcheck="true">// mPendingInstalls 中移除掉</span>                    mHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span>MCS_GIVE_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Message 1</span>                    <span class="token function">handleServiceError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">handleStartCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 💥 💥 💥 重点方法 💥 💥 💥 </span>                    res <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Posting install MCS_RECONNECT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span>MCS_RECONNECT<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Message 2</span>                res <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 调用 handleReturnCode 抽象方法，这个方法会在 handleStartCopy 执行完拷贝相关行为之后，</span>            <span class="token comment" spellcheck="true">// 根据 handleStartCopy 做进一步的处理，主要返回状态码</span>            <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleStartCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException<span class="token punctuation">;</span>        <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleServiceError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>我们在分析 <code>handleStartCopy()</code> 之前，简单的看一下 <code>MCS_GIVE_UP</code> 和 <code>MCS_RECONNECT</code> 两种 message 的处理流程，逻辑相当简单！</p><blockquote><p><strong>MCS_RECONNECT</strong></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">PackageHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">void</span> <span class="token function">doHandleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">case</span> MCS_RECONNECT<span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"mcs_reconnect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingInstalls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>mBound<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">disconnectService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">connectToService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to bind to media container service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>HandlerParams params <span class="token operator">:</span> mPendingInstalls<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// Indicate service bind error</span>                            params<span class="token punctuation">.</span><span class="token function">serviceError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            Trace<span class="token punctuation">.</span><span class="token function">asyncTraceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"queueInstall"</span><span class="token punctuation">,</span>                                    System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        mPendingInstalls<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>判断安装请求队列 <code>mPendingInstalls</code> 是否还有元素，如果有元素先断开绑定，则再次重新调用 <code>connectToService</code> 方法，我们知道 connectToService() 内部会再次执行绑定 <code>DefaultContainerService</code>，而在绑定成功后会再次发送一个 <code>what</code> 值为 <code>MCS_BOUND</code> 的 <code>Message</code>，从而又回到了 <code>startCopy</code> 里面。</p><blockquote><p>3.1.2 <strong>MCS_GIVE_UP</strong></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">PackageHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">void</span> <span class="token function">doHandleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">case</span> MCS_GIVE_UP<span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"mcs_giveup too many retries"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                HandlerParams params <span class="token operator">=</span> mPendingInstalls<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Trace<span class="token punctuation">.</span><span class="token function">asyncTraceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"queueInstall"</span><span class="token punctuation">,</span>                        System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>直接删除了安装请求队列 <code>mPendingInstalls</code> 里面下标为 0 的元素，即取消本次安装请求。<br><br></p><h2 id="3-2-handleStartCopy"><a href="#3-2-handleStartCopy" class="headerlink" title="3.2 handleStartCopy"></a>3.2 handleStartCopy</h2><p>我们发现 <code>handleStartCopy</code> 也是一个<code>抽象方法</code>，那么它在哪实现？前面我们说过：<code>HandlerParams</code> 是 <code>PMS</code> 中的<code>抽象类</code>，它的实现类为 <code>PMS</code> 的内部类 <code>InstallParams</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageManagerService</span> <span class="token keyword">extends</span> <span class="token class-name">IPackageManager<span class="token punctuation">.</span>Stub</span> <span class="token keyword">implements</span> <span class="token class-name">PackageSender</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">class</span> <span class="token class-name">InstallParams</span> <span class="token keyword">extends</span> <span class="token class-name">HandlerParams</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleStartCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>            <span class="token keyword">int</span> ret <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">/**             * 确定 APK 的安装位置             *     onSd：     安装到 SD 卡             *     onInt：    内部存储即 Data 分区             *     ephemeral：安装到临时存储             */</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> onSd <span class="token operator">=</span> <span class="token punctuation">(</span>installFlags <span class="token operator">&amp;</span> PackageManager<span class="token punctuation">.</span>INSTALL_EXTERNAL<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> onInt <span class="token operator">=</span> <span class="token punctuation">(</span>installFlags <span class="token operator">&amp;</span> PackageManager<span class="token punctuation">.</span>INSTALL_INTERNAL<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> ephemeral <span class="token operator">=</span> <span class="token punctuation">(</span>installFlags <span class="token operator">&amp;</span> PackageManager<span class="token punctuation">.</span>INSTALL_INSTANT_APP<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>            PackageInfoLite pkgLite <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// APK 不能同时安装在 SD 卡和 Data 分区</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>onInt <span class="token operator">&amp;&amp;</span> onSd<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Check if both bits are set.</span>                Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Conflicting flags specified for installing ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ret <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INVALID_INSTALL_LOCATION<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 安装标志冲突，Instant Apps 不能安装到 SD 卡中</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>onSd <span class="token operator">&amp;&amp;</span> ephemeral<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span>  <span class="token string">"Conflicting flags specified for installing ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ret <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INVALID_INSTALL_LOCATION<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/**                 * 获取 APK 的少量的信息                 * 通过 IMediaContainerService 跨进程调用 DefaultContainerService 的                 * getMinimalPackageInfo 方法，该方法轻量解析 APK 并得到 APK 的少量信息，                 * 轻量解析的原因是这里不需要得到 APK 的全部信息，APK 的少量信息会封装到                 * PackageInfoLite 中。                 */</span>                pkgLite <span class="token operator">=</span> mContainerService<span class="token punctuation">.</span><span class="token function">getMinimalPackageInfo</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span>resolvedPath<span class="token punctuation">,</span>                                                         installFlags<span class="token punctuation">,</span> packageAbiOverride<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_EPHEMERAL <span class="token operator">&amp;&amp;</span> ephemeral<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Slog<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"pkgLite for install: "</span> <span class="token operator">+</span> pkgLite<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 判断安装的位置</span>                <span class="token keyword">int</span> loc <span class="token operator">=</span> pkgLite<span class="token punctuation">.</span>recommendedInstallLocation<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>loc <span class="token operator">==</span> PackageHelper<span class="token punctuation">.</span>RECOMMEND_FAILED_INVALID_LOCATION<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ret <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INVALID_INSTALL_LOCATION<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>loc <span class="token operator">==</span> PackageHelper<span class="token punctuation">.</span>RECOMMEND_FAILED_ALREADY_EXISTS<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    installFlags <span class="token operator">=</span> sPmsExt<span class="token punctuation">.</span><span class="token function">customizeInstallPkgFlags</span><span class="token punctuation">(</span>installFlags<span class="token punctuation">,</span> pkgLite<span class="token punctuation">,</span>                            mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">,</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    loc <span class="token operator">=</span> <span class="token function">installLocationPolicy</span><span class="token punctuation">(</span>pkgLite<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/**             * 根据 InstallParams 创建 InstallArgs 对象             * InstallArgs 是一个抽象类，定义了 APK 的安装逻辑，比如"复制"和"重命名" APK 等             * InstallArgs 有 3 个子类，都被定义在 PMS 中：             *     FileInstallArgs：用于处理安装到非 ASEC 的存储空间的 APK ，也就是内部存储空间             *     AsecInstallArgs：用于处理安装到 ASEC 中（mnt/asec）即 SD 卡中的 APK             *     MoveInstallArgs：用于处理已安装 APK 移动的逻辑             */</span>            <span class="token keyword">final</span> InstallArgs args <span class="token operator">=</span> <span class="token function">createInstallArgs</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mArgs <span class="token operator">=</span> args<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>origin<span class="token punctuation">.</span>existing <span class="token operator">&amp;&amp;</span> requiredUid <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span>                        <span class="token operator">&amp;&amp;</span> <span class="token function">isVerificationEnabled</span><span class="token punctuation">(</span>                                verifierUser<span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> installFlags<span class="token punctuation">,</span> installerUid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 对 APK 进行检查后就会调用 InstallArgs 的 copyApk 方法进行安装</span>                    ret <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">copyApk</span><span class="token punctuation">(</span>mContainerService<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            mRet <span class="token operator">=</span> ret<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><br></p><h2 id="3-3-FileInstallArgs"><a href="#3-3-FileInstallArgs" class="headerlink" title="3.3 FileInstallArgs"></a>3.3 FileInstallArgs</h2><p>现在，我们知道 <code>InstallParams</code> 有三个子类，不同的 <code>InstallArgs</code> 子类会有着不同的处理，那我们现在以 <code>FileInstallArgs</code> 为例跟踪研究具体的流程：<br><br></p><h3 id="3-3-1-copyApk"><a href="#3-3-1-copyApk" class="headerlink" title="3.3.1 copyApk"></a>3.3.1 copyApk</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageManagerService</span> <span class="token keyword">extends</span> <span class="token class-name">IPackageManager<span class="token punctuation">.</span>Stub</span> <span class="token keyword">implements</span> <span class="token class-name">PackageSender</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">class</span> <span class="token class-name">FileInstallArgs</span> <span class="token keyword">extends</span> <span class="token class-name">InstallArgs</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> File codeFile<span class="token punctuation">;</span>        <span class="token keyword">private</span> File resourceFile<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">int</span> <span class="token function">copyApk</span><span class="token punctuation">(</span>IMediaContainerService imcs<span class="token punctuation">,</span> <span class="token keyword">boolean</span> temp<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"copyApk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">doCopyApk</span><span class="token punctuation">(</span>imcs<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调转 doCopyApk 方法</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><br></p><h3 id="3-3-2-doCopyApk"><a href="#3-3-2-doCopyApk" class="headerlink" title="3.3.2 doCopyApk"></a>3.3.2 doCopyApk</h3><p>调用了 <code>doCopyApk</code> 方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FileInstallArgs</span> <span class="token keyword">extends</span> <span class="token class-name">InstallArgs</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> File codeFile<span class="token punctuation">;</span>    <span class="token keyword">private</span> File resourceFile<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">doCopyApk</span><span class="token punctuation">(</span>IMediaContainerService imcs<span class="token punctuation">,</span> <span class="token keyword">boolean</span> temp<span class="token punctuation">)</span>                                                                <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> isEphemeral <span class="token operator">=</span> <span class="token punctuation">(</span>installFlags <span class="token operator">&amp;</span> PackageManager<span class="token punctuation">.</span>INSTALL_INSTANT_APP<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 用于创建临时存储目录，比如 /data/app/vmdl18300388.tmp，</span>            <span class="token comment" spellcheck="true">// 其中 18300388 是安装的 sessionId</span>            <span class="token keyword">final</span> File tempDir <span class="token operator">=</span>                    mInstallerService<span class="token punctuation">.</span><span class="token function">allocateStageDirLegacy</span><span class="token punctuation">(</span>volumeUuid<span class="token punctuation">,</span> isEphemeral<span class="token punctuation">)</span><span class="token punctuation">;</span>            codeFile <span class="token operator">=</span> tempDir<span class="token punctuation">;</span>            resourceFile <span class="token operator">=</span> tempDir<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to create copy file: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INSUFFICIENT_STORAGE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 通过 IMediaContainerService 跨进程调用 DefaultContainerService 的 copyPackage 方法，         * 这个方法会在 DefaultContainerService 所在的进程中将 APK 复制到临时存储目录，         * 比如 /data/app/vmdl18300388.tmp/base.apk 。         */</span>        ret <span class="token operator">=</span> imcs<span class="token punctuation">.</span><span class="token function">copyPackage</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 真正的文件拷贝</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><br></p><h1 id="四、安装-APK"><a href="#四、安装-APK" class="headerlink" title="四、安装 APK"></a>四、安装 APK</h1><h2 id="4-1-handleReturnCode"><a href="#4-1-handleReturnCode" class="headerlink" title="4.1 handleReturnCode"></a>4.1 handleReturnCode</h2><p>我们回到 APK 的复制调用链的头部方法：HandlerParams 的 startCopy 方法，在最后 调用了 handleReturnCode 方法，进行 APK 的安装。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HandlerParams</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_RETRIES <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> mRetries <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">startCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> res<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>mRetries <span class="token operator">></span> MAX_RETRIES<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">handleStartCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           res <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 处理复制 APK 后的安装 APK 逻辑</span>            <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 💥 💥 💥 💥 💥 💥 </span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>handleReturnCode 也是一个抽象方法，那么在哪里实现？同样，它的实现在 InstallParams 中。</p><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">void</span> <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// If mArgs is null, then MCS couldn't be reached. When it</span>            <span class="token comment" spellcheck="true">// reconnects, it will try again to install. At that point, this</span>            <span class="token comment" spellcheck="true">// will succeed.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mArgs <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// "装载代码"的入口是 processPendingInstall(InstallArgs,int) 方法</span>                <span class="token function">processPendingInstall</span><span class="token punctuation">(</span>mArgs<span class="token punctuation">,</span> mRet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>我们发现调用了 processPendingInstall 方法，继续跟！</p><h2 id="4-2-processPendingInstall"><a href="#4-2-processPendingInstall" class="headerlink" title="4.2 processPendingInstall"></a>4.2 processPendingInstall</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processPendingInstall</span><span class="token punctuation">(</span><span class="token keyword">final</span> InstallArgs args<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> currentStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mHandler<span class="token punctuation">.</span><span class="token function">removeCallbacks</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                PackageInstalledInfo res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageInstalledInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">setReturnCode</span><span class="token punctuation">(</span>currentStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span>uid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span>pkg <span class="token operator">=</span> null<span class="token punctuation">;</span>                res<span class="token punctuation">.</span>removedInfo <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>returnCode <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>                     <span class="token operator">*</span> 安装前处理                     <span class="token operator">*</span> 用于检查 APK 的状态的，在安装前确保安装环境的可靠，如果不可靠会清除复制的 APK 文件                    args<span class="token punctuation">.</span><span class="token function">doPreInstall</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>returnCode<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mInstallLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">installPackageTracedLI</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 💥 💥 💥 💥 💥 💥 </span>                    <span class="token punctuation">}</span>                    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>                     <span class="token operator">*</span> 安装后收尾                     <span class="token operator">*</span> 用于处理安装后的收尾操作，如果安装不成功，删除掉安装相关的目录与文件                    args<span class="token punctuation">.</span><span class="token function">doPostInstall</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>returnCode<span class="token punctuation">,</span> res<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="4-3-installPackageTracedLI"><a href="#4-3-installPackageTracedLI" class="headerlink" title="4.3 installPackageTracedLI"></a>4.3 installPackageTracedLI</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">installPackageTracedLI</span><span class="token punctuation">(</span>InstallArgs args<span class="token punctuation">,</span> PackageInstalledInfo res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"installPackage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">installPackageLI</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="4-4-installPackageLI"><a href="#4-4-installPackageLI" class="headerlink" title="4.4 installPackageLI"></a>4.4 installPackageLI</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">installPackageLI</span><span class="token punctuation">(</span>InstallArgs args<span class="token punctuation">,</span> PackageInstalledInfo res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        PackageParser pp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setSeparateProcesses</span><span class="token punctuation">(</span>mSeparateProcesses<span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setDisplayMetrics</span><span class="token punctuation">(</span>mMetrics<span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span>mPackageParserCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>        Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"parsePackage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> PackageParser<span class="token punctuation">.</span>Package pkg<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 解析 APK</span>            pkg <span class="token operator">=</span> pp<span class="token punctuation">.</span><span class="token function">parsePackage</span><span class="token punctuation">(</span>tmpPackageFile<span class="token punctuation">,</span> parseFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageParserException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"Failed parse during installPackageLI"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// Get rid of all references to package scan path via parser.</span>        pp <span class="token operator">=</span> null<span class="token punctuation">;</span>        String oldCodePath <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> systemApp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 检查 APK 是否存在</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>installFlags <span class="token operator">&amp;</span> PackageManager<span class="token punctuation">.</span>INSTALL_REPLACE_EXISTING<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 获取没被改名前的包名</span>                String oldName <span class="token operator">=</span> mSettings<span class="token punctuation">.</span><span class="token function">getRenamedPackageLPr</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>mOriginalPackages <span class="token operator">!=</span> null                        <span class="token operator">&amp;&amp;</span> pkg<span class="token punctuation">.</span>mOriginalPackages<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>oldName<span class="token punctuation">)</span>                        <span class="token operator">&amp;&amp;</span> mPackages<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>oldName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    pkg<span class="token punctuation">.</span><span class="token function">setPackageName</span><span class="token punctuation">(</span>oldName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    pkgName <span class="token operator">=</span> pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 设置标志位表示是替换安装</span>                    replace <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Replacing existing renamed package: oldName="</span>                            <span class="token operator">+</span> oldName <span class="token operator">+</span> <span class="token string">" pkgName="</span> <span class="token operator">+</span> pkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>            PackageSetting ps <span class="token operator">=</span> mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 查看 Settings 中是否存有要安装的 APK 的信息，如果有就获取签名信息</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ps <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Existing package: "</span> <span class="token operator">+</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span>                PackageSetting signatureCheckPs <span class="token operator">=</span> ps<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span><span class="token function">isStaticSharedLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    SharedLibraryEntry libraryEntry <span class="token operator">=</span> <span class="token function">getLatestSharedLibraVersionLPr</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>libraryEntry <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        signatureCheckPs <span class="token operator">=</span> mSettings<span class="token punctuation">.</span><span class="token function">getPackageLPr</span><span class="token punctuation">(</span>libraryEntry<span class="token punctuation">.</span>apk<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 检查签名的正确性</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldCheckUpgradeKeySetLP</span><span class="token punctuation">(</span>signatureCheckPs<span class="token punctuation">,</span> scanFlags<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkUpgradeKeySetLP</span><span class="token punctuation">(</span>signatureCheckPs<span class="token punctuation">,</span> pkg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>INSTALL_FAILED_UPDATE_INCOMPATIBLE<span class="token punctuation">,</span> <span class="token string">"Package "</span>                                <span class="token operator">+</span> pkg<span class="token punctuation">.</span>packageName <span class="token operator">+</span> <span class="token string">" upgrade keys do not match the "</span>                                <span class="token operator">+</span> <span class="token string">"previously installed version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> N <span class="token operator">=</span> pkg<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 遍历每个权限，对权限进行处理</span>                PackageParser<span class="token punctuation">.</span>Permission perm <span class="token operator">=</span> pkg<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                BasePermission bp <span class="token operator">=</span> mSettings<span class="token punctuation">.</span>mPermissions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>perm<span class="token punctuation">.</span>info<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>systemApp <span class="token operator">||</span> sPmsExt<span class="token punctuation">.</span><span class="token function">isOperatorApp</span><span class="token punctuation">(</span>mPackages<span class="token punctuation">,</span> mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">,</span> pkgName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>onExternal<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 系统APP不能在SD卡上替换安装</span>                res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>INSTALL_FAILED_INVALID_INSTALL_LOCATION<span class="token punctuation">,</span>                        <span class="token string">"Cannot install updates to system apps on sdcard"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>instantApp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 系统 APP 不能被 Instant App 替换</span>                res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>INSTALL_FAILED_INSTANT_APP_INVALID<span class="token punctuation">,</span>                        <span class="token string">"Cannot update a system app with an instant app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 重命名临时文件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>args<span class="token punctuation">.</span><span class="token function">doRename</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>returnCode<span class="token punctuation">,</span> pkg<span class="token punctuation">,</span> oldCodePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>INSTALL_FAILED_INSUFFICIENT_STORAGE<span class="token punctuation">,</span> <span class="token string">"Failed rename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instantApp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">startIntentFilterVerifications</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> replace<span class="token punctuation">,</span> pkg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_DOMAIN_VERIFICATION<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Not verifying instant app install for app links: "</span> <span class="token operator">+</span> pkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>PackageFreezer freezer <span class="token operator">=</span> <span class="token function">freezePackageForInstall</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">,</span> installFlags<span class="token punctuation">,</span>                <span class="token string">"installPackageLI"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>replace<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 替换安装</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span><span class="token function">isStaticSharedLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    PackageParser<span class="token punctuation">.</span>Package existingPkg <span class="token operator">=</span> mPackages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>existingPkg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> existingPkg<span class="token punctuation">.</span>mVersionCode <span class="token operator">!=</span> pkg<span class="token punctuation">.</span>mVersionCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>INSTALL_FAILED_DUPLICATE_PACKAGE<span class="token punctuation">,</span> <span class="token string">"Packages declaring "</span>                                <span class="token operator">+</span> <span class="token string">"static-shared libs cannot be updated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token function">replacePackageLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags <span class="token operator">|</span> SCAN_REPLACING<span class="token punctuation">,</span> args<span class="token punctuation">.</span>user<span class="token punctuation">,</span>                        installerPackageName<span class="token punctuation">,</span> res<span class="token punctuation">,</span> args<span class="token punctuation">.</span>installReason<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 安装新的 APK</span>                <span class="token function">installNewPackageLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags <span class="token operator">|</span> SCAN_DELETE_DATA_ON_FAILURES<span class="token punctuation">,</span>                        args<span class="token punctuation">.</span>user<span class="token punctuation">,</span> installerPackageName<span class="token punctuation">,</span> volumeUuid<span class="token punctuation">,</span> res<span class="token punctuation">,</span> args<span class="token punctuation">.</span>installReason<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 更新应用程序所属的用户</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> PackageSetting ps <span class="token operator">=</span> mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ps <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span>newUsers <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">queryInstalledUsers</span><span class="token punctuation">(</span>sUserManager<span class="token punctuation">.</span><span class="token function">getUserIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">setUpdateAvailable</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token comment" spellcheck="true">/*updateAvailable*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>installPackageLI 方法的代码很长，这里截取主要的部分，主要做了几件事：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;1、创建 PackageParser 解析 APK 。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;2、检查 APK 是否存在，如果存在就获取此前没被改名前的包名，赋值给 PackageParser.Package 类型的 pkg ，将标志位 replace 置为 true 表示是替换安装。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;3、如果 Settings 中保存有要安装的 APK 的信息，说明此前安装过该 APK ，则需要校验 APK 的签名信息，确保安全的进行替换。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;4、将临时文件重新命名，比如前面提到的 /data/app/vmdl18300388.tmp/base.apk ，重命名为 /data/app/包名-1/base.apk 。这个新命名的包名会带上一个数字后缀 1，每次升级一个已有的 App ，这个数字会不断的累加。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;5、系统 APP 的更新安装会有两个限制，一个是系统 APP 不能在 SD 卡上替换安装，另一个是系统 APP 不能被 Instant App 替换。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;6、根据 replace 来做区分，如果是替换安装就会调用 replacePackageLIF 方法，其方法内部还会对系统 APP 和非系统 APP 进行区分处理，如果是新安装 APK 会调用 installNewPackageLIF 方法。</p><h2 id="4-5-installNewPackageLIF"><a href="#4-5-installNewPackageLIF" class="headerlink" title="4.5 installNewPackageLIF"></a>4.5 installNewPackageLIF</h2><p>我们以安装新 APK 为例，查看 installNewPackageLIF 的源码：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*     * Install a non-existing package.     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">installNewPackageLIF</span><span class="token punctuation">(</span>PackageParser<span class="token punctuation">.</span>Package pkg<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> policyFlags<span class="token punctuation">,</span>            <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> UserHandle user<span class="token punctuation">,</span> String installerPackageName<span class="token punctuation">,</span> String volumeUuid<span class="token punctuation">,</span>            PackageInstalledInfo res<span class="token punctuation">,</span> <span class="token keyword">int</span> installReason<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"installNewPackage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 扫描 APK</span>            PackageParser<span class="token punctuation">.</span>Package newPackage <span class="token operator">=</span> <span class="token function">scanPackageTracedLI</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> policyFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span>                    System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 更新 Settings 信息</span>            <span class="token function">updateSettingsLI</span><span class="token punctuation">(</span>newPackage<span class="token punctuation">,</span> installerPackageName<span class="token punctuation">,</span> null<span class="token punctuation">,</span> res<span class="token punctuation">,</span> user<span class="token punctuation">,</span> installReason<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>returnCode <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 安装成功后，为新安装的应用程序准备数据</span>                <span class="token function">prepareAppDataAfterInstallLIF</span><span class="token punctuation">(</span>newPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 安装失败则删除 APK</span>                <span class="token function">deletePackageLIF</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span>                        PackageManager<span class="token punctuation">.</span>DELETE_KEEP_DATA<span class="token punctuation">,</span> res<span class="token punctuation">.</span>removedInfo<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageManagerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"Package couldn't be installed in "</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span>codePath<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>installNewPackageLIF 主要做了以下 3 件事：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;1、扫描 APK，将 APK 的信息存储在 PackageParser.Package 类型的 newPackage 中，一个 Package 的信息包含了 1 个 base APK 以及 0 个或者多个 split APK 。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;2、更新该 APK 对应的 Settings 信息，Settings 用于保存所有包的动态设置。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;3、如果安装成功就为新安装的应用程序准备数据，安装失败就删除APK。</p><h2 id="4-6-scanPackageTracedLI"><a href="#4-6-scanPackageTracedLI" class="headerlink" title="4.6 scanPackageTracedLI"></a>4.6 scanPackageTracedLI</h2><p>调用 scanPackageTracedLI() 进行安装 ：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> PackageParser<span class="token punctuation">.</span>Package <span class="token function">scanPackageTracedLI</span><span class="token punctuation">(</span>File scanFile<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> parseFlags<span class="token punctuation">,</span>            <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> <span class="token keyword">long</span> currentTime<span class="token punctuation">,</span> UserHandle user<span class="token punctuation">)</span> <span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>        Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"scanPackage ["</span> <span class="token operator">+</span> scanFile<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">scanPackageLI</span><span class="token punctuation">(</span>scanFile<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span> currentTime<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="4-7-scanPackageLI-01"><a href="#4-7-scanPackageLI-01" class="headerlink" title="4.7 scanPackageLI - 01"></a>4.7 scanPackageLI - 01</h2><p>scanPackageTracedLI() 调用了 scanPackageLI() 方法：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     *  Scans a package and returns the newly parsed package.     *  Returns {@code null} in case of errors and the error code is stored in mLastScanError     */</span>    <span class="token keyword">private</span> PackageParser<span class="token punctuation">.</span>Package <span class="token function">scanPackageLI</span><span class="token punctuation">(</span>File scanFile<span class="token punctuation">,</span> <span class="token keyword">int</span> parseFlags<span class="token punctuation">,</span> <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span>            <span class="token keyword">long</span> currentTime<span class="token punctuation">,</span> UserHandle user<span class="token punctuation">)</span> <span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Parsing: "</span> <span class="token operator">+</span> scanFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        PackageParser pp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setSeparateProcesses</span><span class="token punctuation">(</span>mSeparateProcesses<span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setOnlyCoreApps</span><span class="token punctuation">(</span>mOnlyCore<span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setDisplayMetrics</span><span class="token punctuation">(</span>mMetrics<span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span>mPackageParserCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> <span class="token function">scanPackageLI</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> scanFile<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span> currentTime<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="4-8-scanPackageLI-02"><a href="#4-8-scanPackageLI-02" class="headerlink" title="4.8 scanPackageLI - 02"></a>4.8 scanPackageLI - 02</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> PackageParser<span class="token punctuation">.</span>Package <span class="token function">scanPackageLI</span><span class="token punctuation">(</span>PackageParser<span class="token punctuation">.</span>Package pkg<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> policyFlags<span class="token punctuation">,</span>            <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> <span class="token keyword">long</span> currentTime<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> UserHandle user<span class="token punctuation">)</span>                    <span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// scanPackageDirtyLI 实际安装 package 的方法</span>            <span class="token keyword">final</span> PackageParser<span class="token punctuation">.</span>Package res <span class="token operator">=</span> <span class="token function">scanPackageDirtyLI</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> policyFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span>                    currentTime<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>scanFlags <span class="token operator">&amp;</span> SCAN_DELETE_DATA_ON_FAILURES<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// DELETE_DATA_ON_FAILURES is only used by frozen paths</span>                <span class="token function">destroyAppDataLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>USER_ALL<span class="token punctuation">,</span>                        StorageManager<span class="token punctuation">.</span>FLAG_STORAGE_DE <span class="token operator">|</span> StorageManager<span class="token punctuation">.</span>FLAG_STORAGE_CE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">destroyAppProfilesLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>USER_ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>最终调用 scanPackageLI 方法！</p><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>本文主要讲解了 PMS 是如何处理 APK 安装的流程，主要有几个步骤：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;PackageInstaller 安装 APK 时会将 APK 的信息交由 PMS 处理，PMS 通过向 PackageHandler 发送消息来驱动 APK 的复制和安装工作。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;PMS 发送 INIT_COPY 和 MCS_BOUND 类型的消息，控制 PackageHandler 来绑定 DefaultContainerService ，完成复制 APK 等工作。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;复制 APK 完成后，会开始进行安装 APK 的流程，包括安装前的检查、安装 APK 和安装后的收尾工作。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>&nbsp;📕 01. <a href="http://liuwangshu.cn/framework/pms/3-pms-install.html" target="_blank" rel="noopener">Android包管理机制（三）PMS处理APK的安装 </a><br>&nbsp;📕 02. <a href="https://www.jianshu.com/p/c4333c7eb409" target="_blank" rel="noopener">APK安装流程详解12——PMS中的新安装流程上(拷贝)</a></p><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>推荐跳转：<a href="https://superandroid.pro/2019/12/31/%E3%80%8AThinking%20in%20Android%E3%80%8B%20--%2001.%20%E5%8D%9A%E5%AE%A2%E7%B4%A2%E5%BC%95/">博客索引（Android 9.0）</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://superandroid.pro/2019/01/23/%E3%80%90%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1%E3%80%91Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%886%EF%BC%89%E4%B9%8B%20APK%20%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%8A%EF%BC%89/">Framework 核心服务之 PMS 钻研（6）- APK 安装流程（上）</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://superandroid.pro/2019/01/31/%E3%80%90%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1%E3%80%91Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%888%EF%BC%89%E4%B9%8B%20APK%20%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%8B%EF%BC%89/">Framework 核心服务之 PMS 钻研（8）- APK 安装流程（下）</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PackageManagerService </tag>
            
            <tag> APK 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PackageManagerService 钻研（6）- APK 安装（上）</title>
      <link href="/2019/01/26/02.kuang-jia-he-xin-fu-wu-android-kuang-jia-fu-wu-pian-packagemanagerservice-zuan-yan-6-apk-an-zhuang-shang/"/>
      <url>/2019/01/26/02.kuang-jia-he-xin-fu-wu-android-kuang-jia-fu-wu-pian-packagemanagerservice-zuan-yan-6-apk-an-zhuang-shang/</url>
      
        <content type="html"><![CDATA[<p><br></p><p><strong><center><font color="#3A5FCD" size="4">PackageManagerService 系列文章如下（基于 Android 9.0 源码）</font><center></center></center></strong><br></p><table><thead><tr><th style="text-align:center">&nbsp;</th><th style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（1）- 启动流程</font></a></th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（2）- 构造函数</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（3）- PackageManager</font></a></td></tr><tr><td style="text-align:center"><strong><font color="#EE2C2C" size="3">PackageManagerService</font></strong></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（4）- PackageInstaller</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（5）- APK 安装流程（1）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（6）- APK 安装流程（2）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（7）- PackageParser</font></a></td></tr></tbody></table><p><br></p><p><strong><font color="#3A5FCD" size="4">修订日志</font></strong><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">1、重新梳理 PackageInstaller 安装 APK 的流程（Android 9.0）；</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">2、博文格式，文章排版优化；</font></p><hr><h1 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h1><h2 id="1-1-核心源码"><a href="#1-1-核心源码" class="headerlink" title="1.1 核心源码"></a>1.1 核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">PackageInstaller.java</font></td><td>/frameworks/base/core/java/android/content/pm/PackageInstaller.java</td></tr><tr><td><font color="#D15FEE">PackageManagerService.java</font></td><td>/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</td></tr><tr><td><font color="#D15FEE">PackageInstallerSession.java</font></td><td>/frameworks/base/services/core/java/com/android/server/pm/PackageInstallerSession.java</td></tr><tr><td><font color="#D15FEE">InstallInstalling.java</font></td><td>/packages/apps/PackageInstaller/src/com/android/packageinstaller/InstallInstalling.java</td></tr><tr><td><font color="#D15FEE">PackageInstallerActivity.java</font></td><td>/packages/apps/PackageInstaller/src/com/android/packageinstaller/PackageInstallerActivity.java</td></tr></tbody></table><p><br></p><h2 id="1-2-前言"><a href="#1-2-前言" class="headerlink" title="1.2 前言"></a>1.2 前言</h2><p>在本系列上一篇文章 <a href="https://superandroid.pro/2018/11/12/B_04.%20Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%884%EF%BC%89%E4%B9%8B%20PackageInstaller/">Framework 核心服务之 PMS 钻研（4）- PackageInstaller</a> 中，我们知道了 PackageInstaller 是如何初始化的，</p><p>本篇文章我们研究的重点是： <font color="#FF0000"><strong>PackageInstaller 是如何安装 APK 的</strong></font>。<br><br></p><h1 id="二、PackageInstallerActivity"><a href="#二、PackageInstallerActivity" class="headerlink" title="二、PackageInstallerActivity"></a>二、PackageInstallerActivity</h1><p>在上一篇文章的末尾阶段，我们知道 <font color="#0000CD"><strong><code>PackageInstallerActivity</code> 调用 <code>startInstallConfirm</code> 方法<code>初始化安装确认界面</code></strong></font>后，这个安装确认界面就会呈现给用户，用户如果想要安装这个应用程序就会点击确定按钮，就会调用 <strong><code>PackageInstallerActivity</code></strong> 的 <font color="#0000CD"><strong><code>onClick()</code></strong></font> 方法。<br><br></p><h2 id="2-1-onClick"><a href="#2-1-onClick" class="headerlink" title="2.1 onClick"></a>2.1 onClick</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageInstallerActivity</span> <span class="token keyword">extends</span> <span class="token class-name">OverlayTouchActivity</span> <span class="token keyword">implements</span> <span class="token class-name">OnClickListener</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> mOk<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mOk<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mOkCanInstall <span class="token operator">||</span> mScrollView <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>mSessionId <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 如果原本是确认权限请求则赋予安装权限后退出</span>                        mInstaller<span class="token punctuation">.</span><span class="token function">setPermissionsResult</span><span class="token punctuation">(</span>mSessionId<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token function">startInstall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 💥 💥 💥 开始安装 💥 💥 💥 </span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    mScrollView<span class="token punctuation">.</span><span class="token function">pageScroll</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>FOCUS_DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> mCancel<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 取消安装</span>            <span class="token function">setResult</span><span class="token punctuation">(</span>RESULT_CANCELED<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mSessionId <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mInstaller<span class="token punctuation">.</span><span class="token function">setPermissionsResult</span><span class="token punctuation">(</span>mSessionId<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><strong><code>onClick</code></strong> 方法中分别对<strong><code>&quot;确定&quot;</code></strong>和<strong><code>&quot;取消&quot;</code></strong>按钮做了处理，我们主要查看对”确定”按钮的处理，调用 <strong><code>startInstall</code></strong> 方法！<br><br></p><h2 id="2-2-startInstall"><a href="#2-2-startInstall" class="headerlink" title="2.2 startInstall"></a>2.2 startInstall</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageInstallerActivity</span> <span class="token keyword">extends</span> <span class="token class-name">OverlayTouchActivity</span> <span class="token keyword">implements</span> <span class="token class-name">OnClickListener</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startInstall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Intent newIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 带上安装包的 applicationInfo</span>        newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>PackageUtil<span class="token punctuation">.</span>INTENT_ATTR_APPLICATION_INFO<span class="token punctuation">,</span>                                                    mPkgInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 带上安装包的 URI</span>        newIntent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>mPackageURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置目标类</span>        newIntent<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> InstallInstalling<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String installerPackageName <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span>                Intent<span class="token punctuation">.</span>EXTRA_INSTALLER_PACKAGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 带上安装包的 mOriginatingURI</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOriginatingURI <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_ORIGINATING_URI<span class="token punctuation">,</span> mOriginatingURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 带上安装包的 mReferrerURI</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mReferrerURI <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_REFERRER<span class="token punctuation">,</span> mReferrerURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 带上安装包的 mOriginatingUid 这个 uid 不是安装应用的 uid</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOriginatingUid <span class="token operator">!=</span> PackageInstaller<span class="token punctuation">.</span>SessionParams<span class="token punctuation">.</span>UID_UNKNOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_ORIGINATING_UID<span class="token punctuation">,</span> mOriginatingUid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>installerPackageName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_INSTALLER_PACKAGE_NAME<span class="token punctuation">,</span>                    installerPackageName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBooleanExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_RETURN_RESULT<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_RETURN_RESULT<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        newIntent<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_FORWARD_RESULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>localLOGV<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"downloaded app uri="</span><span class="token operator">+</span>mPackageURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// startInstall 方法用于跳转到 InstallInstalling 这个 Activity</span>        <span class="token function">startActivity</span><span class="token punctuation">(</span>newIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 关闭当前的 PackageInstallerActivity</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>可以看到在 <strong><code>startInstall</code></strong> 方法中，主要是构造了一个 <strong><code>intent</code></strong>，并且将<strong><code>安装包信息</code></strong>封装到 intent 中，然后跳转到 <strong><code>InstallInstalling</code></strong> 类。<br><br></p><h1 id="三、InstallInstalling"><a href="#三、InstallInstalling" class="headerlink" title="三、InstallInstalling"></a>三、InstallInstalling</h1><p><strong><font color="#FF0000">InstallInstalling 的主要工作：</font></strong>用于向包管理器发送包的信息并处理包管理的回调。</p><h2 id="3-1-onCreate"><a href="#3-1-onCreate" class="headerlink" title="3.1 onCreate"></a>3.1 onCreate</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstallInstalling</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>install_installing<span class="token punctuation">)</span><span class="token punctuation">;</span>        ApplicationInfo appInfo <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getParcelableExtra</span><span class="token punctuation">(</span>PackageUtil<span class="token punctuation">.</span>INTENT_ATTR_APPLICATION_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPackageURI <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 分别对 package 和 content 协议的 Uri 进行处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"package"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mPackageURI<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">installExistingPackage</span><span class="token punctuation">(</span>appInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">launchSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageManager<span class="token punctuation">.</span>NameNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">launchFailure</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INTERNAL_ERROR<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 根据 mPackageURI 创建一个对应的 File</span>            <span class="token keyword">final</span> File sourceFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mPackageURI<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            PackageUtil<span class="token punctuation">.</span><span class="token function">initSnippetForNewApp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> PackageUtil<span class="token punctuation">.</span><span class="token function">getAppSnippet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> appInfo<span class="token punctuation">,</span>                    sourceFile<span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>app_snippet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果 savedInstanceState 不为 null，获取此前保存的 mSessionId 和 mInstallId</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>savedInstanceState <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// mSessionId 是安装包的会话 id</span>                mSessionId <span class="token operator">=</span> savedInstanceState<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>SESSION_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// mInstallId 是等待的安装事件 id</span>                mInstallId <span class="token operator">=</span> savedInstanceState<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>INSTALL_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/**                 * 根据 mInstallId 向 InstallEventReceiver 注册一个观察者                 * launchFinishBasedOnResult 会接收到安装事件的回调，                 * 无论安装成功或者失败都会关闭当前的 Activity(InstallInstalling)                 */</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    InstallEventReceiver<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> mInstallId<span class="token punctuation">,</span>                            <span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>launchFinishBasedOnResult<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">EventResultPersister<span class="token punctuation">.</span>OutOfIdsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Does not happen</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// savedInstanceState 为 null</span>                PackageInstaller<span class="token punctuation">.</span>SessionParams params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageInstaller<span class="token punctuation">.</span>SessionParams</span><span class="token punctuation">(</span>                        PackageInstaller<span class="token punctuation">.</span>SessionParams<span class="token punctuation">.</span>MODE_FULL_INSTALL<span class="token punctuation">)</span><span class="token punctuation">;</span>                params<span class="token punctuation">.</span>installFlags <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_FULL_APP<span class="token punctuation">;</span>                params<span class="token punctuation">.</span>referrerUri <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParcelableExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_REFERRER<span class="token punctuation">)</span><span class="token punctuation">;</span>                params<span class="token punctuation">.</span>originatingUri <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">getParcelableExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_ORIGINATING_URI<span class="token punctuation">)</span><span class="token punctuation">;</span>                params<span class="token punctuation">.</span>originatingUid <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getIntExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_ORIGINATING_UID<span class="token punctuation">,</span>                        UID_UNKNOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>                params<span class="token punctuation">.</span>installerPackageName <span class="token operator">=</span>                        <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_INSTALLER_PACKAGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>                File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mPackageURI<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    PackageParser<span class="token punctuation">.</span>PackageLite pkg <span class="token operator">=</span> PackageParser<span class="token punctuation">.</span><span class="token function">parsePackageLite</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    params<span class="token punctuation">.</span><span class="token function">setAppPackageName</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    params<span class="token punctuation">.</span><span class="token function">setInstallLocation</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>installLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>                    params<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>PackageHelper<span class="token punctuation">.</span><span class="token function">calculateInstalledSize</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span>                                                                 <span class="token boolean">false</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span>abiOverride<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageParser<span class="token punctuation">.</span>PackageParserException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    mInstallId <span class="token operator">=</span> InstallEventReceiver                            <span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> EventResultPersister<span class="token punctuation">.</span>GENERATE_NEW_ID<span class="token punctuation">,</span>                                    <span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>launchFinishBasedOnResult<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">EventResultPersister<span class="token punctuation">.</span>OutOfIdsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">launchFailure</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INTERNAL_ERROR<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    mSessionId <span class="token operator">=</span>                            <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">launchFailure</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INTERNAL_ERROR<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            mSessionCallback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstallSessionCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><br></p><h2 id="3-2-onResume"><a href="#3-2-onResume" class="headerlink" title="3.2 onResume"></a>3.2 onResume</h2><p>我们查看 <code>InstallInstalling</code> 的 <code>onResume</code> 方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstallInstalling</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// This is the first onResume in a single life of the activity</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mInstallingTask <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            PackageInstaller installer <span class="token operator">=</span> <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 根据 mSessionId 得到 SessionInfo，SessionInfo 代表安装会话的详细信息</span>            PackageInstaller<span class="token punctuation">.</span>SessionInfo sessionInfo <span class="token operator">=</span> installer<span class="token punctuation">.</span><span class="token function">getSessionInfo</span><span class="token punctuation">(</span>mSessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果 sessionInfo 不为 Null 并且不是活动的，就创建并执行 InstallingAsyncTask</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sessionInfo <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>sessionInfo<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mInstallingTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstallingAsyncTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 💥 💥 💥 重点方法 💥 💥 💥</span>                mInstallingTask<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// we will receive a broadcast when the install is finished</span>                mCancelButton<span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setFinishOnTouchOutside</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><br></p><h2 id="3-3-InstallingAsyncTask"><a href="#3-3-InstallingAsyncTask" class="headerlink" title="3.3 InstallingAsyncTask"></a>3.3 InstallingAsyncTask</h2><p>既然启动了 <code>InstallingAsyncTask</code>，那我们就来看看相关的 <code>doInBackground</code> 和 <code>onPostExecute</code> 方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstallInstalling</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">InstallingAsyncTask</span> <span class="token keyword">extends</span> <span class="token class-name">AsyncTask</span><span class="token operator">&lt;</span>Void<span class="token punctuation">,</span> Void<span class="token punctuation">,</span>            PackageInstaller<span class="token punctuation">.</span>Session<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> isDone<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据包(APK)的 Uri，将 APK 的信息通过 IO 流的形式写入到 PackageInstaller.Session 中</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> PackageInstaller<span class="token punctuation">.</span>Session <span class="token function">doInBackground</span><span class="token punctuation">(</span>Void<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>            PackageInstaller<span class="token punctuation">.</span>Session session<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                session <span class="token operator">=</span> <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span>mSessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            session<span class="token punctuation">.</span><span class="token function">setStagingProgress</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mPackageURI<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">(</span>InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">long</span> sizeBytes <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">(</span>OutputStream out <span class="token operator">=</span> session                            <span class="token punctuation">.</span><span class="token function">openWrite</span><span class="token punctuation">(</span><span class="token string">"PackageInstaller"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sizeBytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">int</span> numRead <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>numRead <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                session<span class="token punctuation">.</span><span class="token function">fsync</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> numRead<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>sizeBytes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">float</span> fraction <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> numRead <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> sizeBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                                session<span class="token punctuation">.</span><span class="token function">addProgress</span><span class="token punctuation">(</span>fraction<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> session<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> SecurityException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span> <span class="token string">"Could not write package"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    isDone <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPostExecute</span><span class="token punctuation">(</span>PackageInstaller<span class="token punctuation">.</span>Session session<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Intent broadcastIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>BROADCAST_ACTION<span class="token punctuation">)</span><span class="token punctuation">;</span>                broadcastIntent<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_RECEIVER_FOREGROUND<span class="token punctuation">)</span><span class="token punctuation">;</span>                broadcastIntent<span class="token punctuation">.</span><span class="token function">setPackage</span><span class="token punctuation">(</span>                        <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPermissionControllerPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                broadcastIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>EventResultPersister<span class="token punctuation">.</span>EXTRA_ID<span class="token punctuation">,</span> mInstallId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 创建了一个 PendingIntent</span>                PendingIntent pendingIntent <span class="token operator">=</span> PendingIntent<span class="token punctuation">.</span><span class="token function">getBroadcast</span><span class="token punctuation">(</span>                        InstallInstalling<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>                        mInstallId<span class="token punctuation">,</span>                        broadcastIntent<span class="token punctuation">,</span>                        PendingIntent<span class="token punctuation">.</span>FLAG_UPDATE_CURRENT<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/**                 * 将该 PendingIntent 的 IntentSender 通过                 * PackageInstaller.Session 的 commit 方法发送出去                 */</span>                session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>pendingIntent<span class="token punctuation">.</span><span class="token function">getIntentSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mCancelButton<span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setFinishOnTouchOutside</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">abandonSession</span><span class="token punctuation">(</span>mSessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">launchFailure</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INVALID_APK<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>问题来了，commit 到哪去了？我们不妨来看一下 <code>PackageInstaller.Session</code> 的 <code>commit</code> 方法：<br><br></p><h2 id="3-4-commit"><a href="#3-4-commit" class="headerlink" title="3.4 commit"></a>3.4 commit</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageInstaller</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Session</span> <span class="token keyword">implements</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> IPackageInstallerSession mSession<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> IntentSender statusReceiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                mSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>statusReceiver<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>我们发现，<strong><code>mSession</code></strong> 的类型为 <strong><code>IPackageInstallerSession</code></strong> ，这说明要通过 <strong><code>IPackageInstallerSession</code></strong> 来进行进程间的通信，最终会调用 <strong><code>PackageInstallerSession</code></strong> 的 <strong><code>commit</code></strong> 方法，这样又回到框架层处理了。<br><br></p><h1 id="四、PackageInstallerSession"><a href="#四、PackageInstallerSession" class="headerlink" title="四、PackageInstallerSession"></a>四、PackageInstallerSession</h1><h2 id="4-1-commit"><a href="#4-1-commit" class="headerlink" title="4.1 commit"></a>4.1 commit</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageInstallerSession</span> <span class="token keyword">extends</span> <span class="token class-name">IPackageInstallerSession<span class="token punctuation">.</span>Stub</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> IntentSender statusReceiver<span class="token punctuation">,</span> <span class="token keyword">boolean</span> forTransfer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Preconditions<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>statusReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> wasSealed<span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">assertCallerIsOwnerOrRootLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">assertPreparedAndNotDestroyedLocked</span><span class="token punctuation">(</span><span class="token string">"commit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将包的信息封装为 PackageInstallObserverAdapter</span>            <span class="token keyword">final</span> PackageInstallObserverAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageInstallObserverAdapter</span><span class="token punctuation">(</span>                    mContext<span class="token punctuation">,</span> statusReceiver<span class="token punctuation">,</span> sessionId<span class="token punctuation">,</span>                    <span class="token function">isInstallerDeviceOwnerOrAffiliatedProfileOwnerLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>            mRemoteObserver <span class="token operator">=</span> adapter<span class="token punctuation">.</span><span class="token function">getBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>MSG_COMMIT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><br></p><h2 id="4-2-Handler-Callback"><a href="#4-2-Handler-Callback" class="headerlink" title="4.2 Handler.Callback"></a>4.2 Handler.Callback</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageInstallerSession</span> <span class="token keyword">extends</span> <span class="token class-name">IPackageInstallerSession<span class="token punctuation">.</span>Stub</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Handler<span class="token punctuation">.</span>Callback mHandlerCallback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler<span class="token punctuation">.</span>Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token keyword">case</span> MSG_COMMIT<span class="token operator">:</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 💥 💥 💥 重点方法 💥 💥 💥</span>                            <span class="token function">commitLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageManagerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">final</span> String completeMsg <span class="token operator">=</span> ExceptionUtils<span class="token punctuation">.</span><span class="token function">getCompleteMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">destroyInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 💥 💥 💥 重点方法 💥 💥 💥</span>                            <span class="token function">dispatchSessionFinished</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>error<span class="token punctuation">,</span> completeMsg<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><br></p><h2 id="4-3-commitLocked"><a href="#4-3-commitLocked" class="headerlink" title="4.3 commitLocked"></a>4.3 commitLocked</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageInstallerSession</span> <span class="token keyword">extends</span> <span class="token class-name">IPackageInstallerSession<span class="token punctuation">.</span>Stub</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> PackageManagerService mPm<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">commitLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">/**         * commitLocked 方法很长，我们主要关注其中一行代码         * 调用 PackageManagerService 的 installStage 方法         * 这样安装 APK 的代码逻辑就进入了 PackageManagerService 中         */</span>        mPm<span class="token punctuation">.</span><span class="token function">installStage</span><span class="token punctuation">(</span>mPackageName<span class="token punctuation">,</span> stageDir<span class="token punctuation">,</span> stageCid<span class="token punctuation">,</span> localObserver<span class="token punctuation">,</span> params<span class="token punctuation">,</span>                mInstallerPackageName<span class="token punctuation">,</span> mInstallerUid<span class="token punctuation">,</span> user<span class="token punctuation">,</span> mCertificates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><br></p><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>本篇文章讲解了 PackageInstaller 安装 APK 的过程，简单来说就两步：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp; 1. 将 APK 的信息通过 IO流 的形式写入到 PackageInstaller.Session中。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp; 2. 调用 PackageInstaller.Session 的 commit 方法，将 APK 的信息交由 PMS 处理。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>&nbsp;📕 01. <a href="https://blog.csdn.net/itachi85/article/details/81024903" target="_blank" rel="noopener">Android包管理机制（二）PackageInstaller安装APK（Android 8.0）</a></p><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>推荐跳转：<a href="https://superandroid.pro/2019/12/31/%E3%80%8AThinking%20in%20Android%E3%80%8B%20--%2001.%20%E5%8D%9A%E5%AE%A2%E7%B4%A2%E5%BC%95/">博客索引（Android 9.0）</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://superandroid.pro/2019/01/19/%E3%80%90%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1%E3%80%91Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%885%EF%BC%89%E4%B9%8B%20PackageParser/">Framework 核心服务之 PMS 钻研（5）- PackageParser</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://superandroid.pro/2019/01/27/%E3%80%90%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1%E3%80%91Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%887%EF%BC%89%E4%B9%8B%20APK%20%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%AD%EF%BC%89/">Framework 核心服务之 PMS 钻研（7）- APK 安装流程（中）</a> </p>]]></content>
      
      
      <categories>
          
          <category> 框架服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PackageManagerService </tag>
            
            <tag> APK 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PackageManagerService 钻研（5）- PackageParser</title>
      <link href="/2019/01/22/02.kuang-jia-he-xin-fu-wu-android-kuang-jia-fu-wu-pian-packagemanagerservice-zuan-yan-5-packageparser/"/>
      <url>/2019/01/22/02.kuang-jia-he-xin-fu-wu-android-kuang-jia-fu-wu-pian-packagemanagerservice-zuan-yan-5-packageparser/</url>
      
        <content type="html"><![CDATA[<p><br></p><p><strong><center><font color="#3A5FCD" size="4">PackageManagerService 系列文章如下（基于 Android 9.0 源码）</font><center></center></center></strong><br></p><table><thead><tr><th style="text-align:center">&nbsp;</th><th style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（1）- 启动流程</font></a></th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（2）- 构造函数</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（3）- PackageManager</font></a></td></tr><tr><td style="text-align:center"><strong><font color="#EE2C2C" size="3">PackageManagerService</font></strong></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（4）- PackageInstaller</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（5）- APK 安装流程（1）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（6）- APK 安装流程（2）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（7）- PackageParser</font></a></td></tr></tbody></table><p><br></p><p><strong><font color="#3A5FCD" size="4">修订日志</font></strong><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">1、博文格式，文章排版优化；</font></p><hr><h1 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h1><h2 id="1-1-核心源码"><a href="#1-1-核心源码" class="headerlink" title="1.1 核心源码"></a>1.1 核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">PackageParser.java</font></td><td>frameworks/base/core/java/android/content/pm/PackageParser.java</td></tr><tr><td><font color="#D15FEE">PackageManagerService.java</font></td><td>frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</td></tr></tbody></table><p><br></p><h2 id="1-2-简介"><a href="#1-2-简介" class="headerlink" title="1.2 简介"></a>1.2 简介</h2><p>在分析 <code>PackageManagerService</code> 构造函数的时候，我们知道：Android 安装一个 APK 的时候首先会解析 APK，而解析 APK 则需要用到一个工具类，这个工具类就是我们这篇博文的主角 <code>PackageParser</code>（在我们之前研究的源码中，你已经见过它的身影了）！<br><br></p><h1 id="二、PackageParser"><a href="#二、PackageParser" class="headerlink" title="二、PackageParser"></a>二、PackageParser</h1><h2 id="2-1-官方说明"><a href="#2-1-官方说明" class="headerlink" title="2.1 官方说明"></a>2.1 官方说明</h2><p>首先我们看下官方对 PackageParser 的说明：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Parser for package files (APKs) on disk. This supports apps packaged either * as a single "monolithic" APK, or apps packaged as a "cluster" of multiple * APKs in a single directory. * &lt;p> * Apps packaged as multiple APKs always consist of a single "base" APK (with a * {@code null} split name) and zero or more "split" APKs (with unique split * names). Any subset of those split APKs are a valid install, as long as the * following constraints are met: * &lt;ul> * &lt;li>All APKs must have the exact same package name, version code, and signing * certificates. * &lt;li>All APKs must have unique split names. * &lt;li>All installations must contain a single base APK. * &lt;/ul> * * 翻译如下： * 解析磁盘上的 APK 安装包文件。它既能解析一个"单一" APK 文件，也能解析一个"集群" APK 文件　* (即一个 APK 文件里面包含多个 APK 文件)。一个"集群" APK 有一个"基准" APK (base APK) 组成 * 和其他一些"分割" APK ("split" APKs) 构成，其中这些"分割" APK 用一些数字来分割。 * 这些"分割"的 APK 必须都是有效的安装，同时必须满足下面的几个条件： *     所有的 APK 必须具有完全相同的软件包名称，版本代码和签名证书； *     所有的 APK 必须具有唯一的拆分名称； *     所有安装必须包含一个单一的APK； *  * @hide */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageParser</span> <span class="token punctuation">{</span></code></pre><p><br></p><h2 id="2-2-创建解析器"><a href="#2-2-创建解析器" class="headerlink" title="2.2 创建解析器"></a>2.2 创建解析器</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 具体源码及逻辑流程省略...</span><span class="token comment" spellcheck="true">// 创建解析器</span><span class="token keyword">final</span> PackageParser pp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解析 APK</span>tmpPkg <span class="token operator">=</span> pp<span class="token punctuation">.</span><span class="token function">parsePackage</span><span class="token punctuation">(</span>codePath<span class="token punctuation">,</span> parseFlags<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><br></p><h2 id="2-3-解析-APK"><a href="#2-3-解析-APK" class="headerlink" title="2.3 解析 APK"></a>2.3 解析 APK</h2><p>在分析 PackageParser 解析 APK 之前，我们有必要了解一下 Split APK 机制！<br><br></p><h3 id="2-3-1-Split-APK机制"><a href="#2-3-1-Split-APK机制" class="headerlink" title="2.3.1 Split APK机制"></a>2.3.1 Split APK机制</h3><p>Split APK 是 Google 为解决 65536 上限，以及 APK 安装包越来越大等问题，在 <code>Android L</code> 中引入的机制。 Split APK 可以将一个庞大的 APK，按屏幕密度，ABI 等形式拆分成多个独立的 APK，在应用程序更新时，不必下载整个 APK，只需单独下载某个模块即可安装更新。</p><p>Split APK 将原来一个 APK 中多个模块共享同一份资源的模型分离成多个 APK 使用各自的资源，并且可以继承 Base APK 中的资源，多个 APK 有相同的 data，cache 目录。</p><blockquote><p>在引入了 Split APK 机制后，APK 有两种分类：<br><code>Single APK</code>：安装文件为一个完整的 APK，即 Base APK，源码中定义为 <code>Monolithic</code>。<br><code>Mutiple APK</code>：安装文件在一个文件目录中，其内部有多个被拆分的 APK，这些 APK 由一个 Base APK 和一个或多个 Split APK 组成，源码中定义为 <code>Cluster</code>。</p></blockquote><h3 id="2-3-2-parsePackage"><a href="#2-3-2-parsePackage" class="headerlink" title="2.3.2 parsePackage"></a>2.3.2 parsePackage</h3><p>接下来我们开始正式分析 parsePackage 方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Equivalent to {@link #parsePackage(File, int, boolean)} with {@code useCaches == false}. */</span><span class="token keyword">public</span> Package <span class="token function">parsePackage</span><span class="token punctuation">(</span>File packageFile<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> PackageParserException <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">parsePackage</span><span class="token punctuation">(</span>packageFile<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">/* useCaches */</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>新增一个 <code>useCaches</code> 参数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Package <span class="token function">parsePackage</span><span class="token punctuation">(</span>File packageFile<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">boolean</span> useCaches<span class="token punctuation">)</span>        <span class="token keyword">throws</span> PackageParserException <span class="token punctuation">{</span>    Package parsed <span class="token operator">=</span> useCaches <span class="token operator">?</span> <span class="token function">getCachedResult</span><span class="token punctuation">(</span>packageFile<span class="token punctuation">,</span> flags<span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parsed <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> parsed<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> parseTime <span class="token operator">=</span> LOG_PARSE_TIMINGS <span class="token operator">?</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果解析的 packageFile 是一个目录，则调用 parseClusterPackage 方法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>packageFile<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        parsed <span class="token operator">=</span> <span class="token function">parseClusterPackage</span><span class="token punctuation">(</span>packageFile<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果是单个 APK 文件，则调用 parseMonolithicPackage　方法</span>        parsed <span class="token operator">=</span> <span class="token function">parseMonolithicPackage</span><span class="token punctuation">(</span>packageFile<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> cacheTime <span class="token operator">=</span> LOG_PARSE_TIMINGS <span class="token operator">?</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">cacheResult</span><span class="token punctuation">(</span>packageFile<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> parsed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>LOG_PARSE_TIMINGS<span class="token punctuation">)</span> <span class="token punctuation">{</span>        parseTime <span class="token operator">=</span> cacheTime <span class="token operator">-</span> parseTime<span class="token punctuation">;</span>        cacheTime <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> cacheTime<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parseTime <span class="token operator">+</span> cacheTime <span class="token operator">></span> LOG_PARSE_TIMINGS_THRESHOLD_MS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Parse times for '"</span> <span class="token operator">+</span> packageFile <span class="token operator">+</span> <span class="token string">"': parse="</span> <span class="token operator">+</span> parseTime                    <span class="token operator">+</span> <span class="token string">"ms, update_cache="</span> <span class="token operator">+</span> cacheTime <span class="token operator">+</span> <span class="token string">" ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> parsed<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们这边选取 parseClusterPackage 作为分析的分支，当你搞懂这个方法的具体逻辑，单个 APK 的解析原理就很简单了。</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-702816956a0fec31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"></center><p><br></p><h1 id="三、parseClusterPackage"><a href="#三、parseClusterPackage" class="headerlink" title="三、parseClusterPackage"></a>三、parseClusterPackage</h1><p>我们来看看 <code>parseClusterPackage()</code> 的源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Package <span class="token function">parseClusterPackage</span><span class="token punctuation">(</span>File packageDir<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> PackageParserException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*     * 调用 parseClusterPackageLite 方法用于轻量级解析目录文件，     * 之所以要轻量级解析是因为解析 APK 是一个复杂耗时的操作，这里的逻辑并不需要 APK 所有的信息。     */</span>    <span class="token keyword">final</span> PackageLite lite <span class="token operator">=</span> <span class="token function">parseClusterPackageLite</span><span class="token punctuation">(</span>packageDir<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * mOnlyCoreApps 用来指示 PackageParser 是否只解析“核心”应用，     * “核心”应用指的是 AndroidManifest 中 coreApp 的属性值为 true，     * 只解析“核心”应用是为了创建一个极简的启动环境，     * 我们可以通过 PackageParser 的 setOnlyCoreApps 方法来设置 mOnlyCoreApps 的值。     *     * lite.coreApp 表示当前包是否包含“核心”应用，如果不满足条件就会抛出异常。     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mOnlyCoreApps <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lite<span class="token punctuation">.</span>coreApp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PackageParserException</span><span class="token punctuation">(</span>INSTALL_PARSE_FAILED_MANIFEST_MALFORMED<span class="token punctuation">,</span>                <span class="token string">"Not a coreApp: "</span> <span class="token operator">+</span> packageDir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Build the split dependency tree.</span>    SparseArray<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> splitDependencies <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">final</span> SplitAssetLoader assetLoader<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lite<span class="token punctuation">.</span>isolatedSplits <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ArrayUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>lite<span class="token punctuation">.</span>splitNames<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            splitDependencies <span class="token operator">=</span>                           SplitAssetDependencyLoader<span class="token punctuation">.</span><span class="token function">createDependenciesFromPackage</span><span class="token punctuation">(</span>lite<span class="token punctuation">)</span><span class="token punctuation">;</span>            assetLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SplitAssetDependencyLoader</span><span class="token punctuation">(</span>lite<span class="token punctuation">,</span> splitDependencies<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SplitAssetDependencyLoader<span class="token punctuation">.</span>IllegalDependencyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PackageParserException</span><span class="token punctuation">(</span>INSTALL_PARSE_FAILED_BAD_MANIFEST<span class="token punctuation">,</span>                                              e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        assetLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSplitAssetLoader</span><span class="token punctuation">(</span>lite<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取 AssetManager 对象</span>        <span class="token keyword">final</span> AssetManager assets <span class="token operator">=</span> assetLoader<span class="token punctuation">.</span><span class="token function">getBaseAssetManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> File baseApk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>lite<span class="token punctuation">.</span>baseCodePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析 base APK，获得对应的 Package 对象</span>        <span class="token keyword">final</span> Package pkg <span class="token operator">=</span> <span class="token function">parseBaseApk</span><span class="token punctuation">(</span>baseApk<span class="token punctuation">,</span> assets<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PackageParserException</span><span class="token punctuation">(</span>INSTALL_PARSE_FAILED_NOT_APK<span class="token punctuation">,</span>                    <span class="token string">"Failed to parse base APK: "</span> <span class="token operator">+</span> baseApk<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ArrayUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>lite<span class="token punctuation">.</span>splitNames<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取 split APK 的数量</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> num <span class="token operator">=</span> lite<span class="token punctuation">.</span>splitNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            pkg<span class="token punctuation">.</span>splitNames <span class="token operator">=</span> lite<span class="token punctuation">.</span>splitNames<span class="token punctuation">;</span>            pkg<span class="token punctuation">.</span>splitCodePaths <span class="token operator">=</span> lite<span class="token punctuation">.</span>splitCodePaths<span class="token punctuation">;</span>            pkg<span class="token punctuation">.</span>splitRevisionCodes <span class="token operator">=</span> lite<span class="token punctuation">.</span>splitRevisionCodes<span class="token punctuation">;</span>            pkg<span class="token punctuation">.</span>splitFlags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>            pkg<span class="token punctuation">.</span>splitPrivateFlags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>            pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>splitNames <span class="token operator">=</span> pkg<span class="token punctuation">.</span>splitNames<span class="token punctuation">;</span>            pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>splitDependencies <span class="token operator">=</span> splitDependencies<span class="token punctuation">;</span>            pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>splitClassLoaderNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> AssetManager splitAssets <span class="token operator">=</span> assetLoader<span class="token punctuation">.</span><span class="token function">getSplitAssetManager</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 解析每个 split APK</span>                <span class="token function">parseSplitApk</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> i<span class="token punctuation">,</span> splitAssets<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 设置相应属性</span>        pkg<span class="token punctuation">.</span><span class="token function">setCodePath</span><span class="token punctuation">(</span>packageDir<span class="token punctuation">.</span><span class="token function">getCanonicalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pkg<span class="token punctuation">.</span><span class="token function">setUse32bitAbi</span><span class="token punctuation">(</span>lite<span class="token punctuation">.</span>use32bitAbi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pkg<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PackageParserException</span><span class="token punctuation">(</span>INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION<span class="token punctuation">,</span>                <span class="token string">"Failed to get path: "</span> <span class="token operator">+</span> lite<span class="token punctuation">.</span>baseCodePath<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        IoUtils<span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>assetLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-1-parseClusterPackageLite"><a href="#3-1-parseClusterPackageLite" class="headerlink" title="3.1 parseClusterPackageLite"></a>3.1 parseClusterPackageLite</h2><p>我们来看看轻量级解析函数 <code>parseClusterPackageLite()</code> 的源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> PackageLite <span class="token function">parseClusterPackageLite</span><span class="token punctuation">(</span>File packageDir<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span>                                            <span class="token keyword">throws</span> PackageParserException <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isApkFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 通过 parseApkLite 方法解析每个 Mutiple APK，</span>            <span class="token comment" spellcheck="true">// 得到每个 Mutiple APK 对应的 ApkLite（轻量级 APK 信息）。</span>            <span class="token keyword">final</span> ApkLite lite <span class="token operator">=</span> <span class="token function">parseApkLite</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">final</span> String codePath <span class="token operator">=</span> packageDir<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将这些 ApkLite 封装为一个 PackageLite（轻量级包信息）并返回</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PackageLite</span><span class="token punctuation">(</span>codePath<span class="token punctuation">,</span> baseApk<span class="token punctuation">,</span> splitNames<span class="token punctuation">,</span> isFeatureSplits<span class="token punctuation">,</span> usesSplitNames<span class="token punctuation">,</span>            configForSplits<span class="token punctuation">,</span> splitCodePaths<span class="token punctuation">,</span> splitRevisionCodes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><br></p><h2 id="3-2-parseBaseApk"><a href="#3-2-parseBaseApk" class="headerlink" title="3.2 parseBaseApk"></a>3.2 parseBaseApk</h2><p>我们来看看 Base Apk 的解析函数 <code>parseBaseApk()</code> 的源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String MNT_EXPAND <span class="token operator">=</span> <span class="token string">"/mnt/expand/"</span><span class="token punctuation">;</span><span class="token keyword">private</span> Package <span class="token function">parseBaseApk</span><span class="token punctuation">(</span>File apkFile<span class="token punctuation">,</span> AssetManager assets<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span>                             <span class="token keyword">throws</span> PackageParserException <span class="token punctuation">{</span>    <span class="token keyword">final</span> String apkPath <span class="token operator">=</span> apkFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String volumeUuid <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>apkPath<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>MNT_EXPAND<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> end <span class="token operator">=</span> apkPath<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> MNT_EXPAND<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果 APK 的路径以 /mnt/expand/ 开头，就截取该路径获取 volumeUuid</span>        volumeUuid <span class="token operator">=</span> apkPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>MNT_EXPAND<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mParseError <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">;</span>    mArchiveSourcePath <span class="token operator">=</span> apkFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_JAR<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Scanning base APK: "</span> <span class="token operator">+</span> apkPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    XmlResourceParser parser <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> cookie <span class="token operator">=</span> assets<span class="token punctuation">.</span><span class="token function">findCookieForPath</span><span class="token punctuation">(</span>apkPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookie <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PackageParserException</span><span class="token punctuation">(</span>INSTALL_PARSE_FAILED_BAD_MANIFEST<span class="token punctuation">,</span>                    <span class="token string">"Failed adding asset path: "</span> <span class="token operator">+</span> apkPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        parser <span class="token operator">=</span> assets<span class="token punctuation">.</span><span class="token function">openXmlResourceParser</span><span class="token punctuation">(</span>cookie<span class="token punctuation">,</span> ANDROID_MANIFEST_FILENAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Resources res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resources</span><span class="token punctuation">(</span>assets<span class="token punctuation">,</span> mMetrics<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> outError <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 再次调用 parseBaseApk 方法</span>        <span class="token keyword">final</span> Package pkg <span class="token operator">=</span> <span class="token function">parseBaseApk</span><span class="token punctuation">(</span>apkPath<span class="token punctuation">,</span> res<span class="token punctuation">,</span> parser<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> outError<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PackageParserException</span><span class="token punctuation">(</span>mParseError<span class="token punctuation">,</span>                    apkPath <span class="token operator">+</span> <span class="token string">" (at "</span> <span class="token operator">+</span> parser<span class="token punctuation">.</span><span class="token function">getPositionDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"): "</span> <span class="token operator">+</span> outError<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 用于以后标识这个解析后的 Package</span>        pkg<span class="token punctuation">.</span><span class="token function">setVolumeUuid</span><span class="token punctuation">(</span>volumeUuid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用于标识该 App 所在的存储卷 UUID</span>        pkg<span class="token punctuation">.</span><span class="token function">setApplicationVolumeUuid</span><span class="token punctuation">(</span>volumeUuid<span class="token punctuation">)</span><span class="token punctuation">;</span>        pkg<span class="token punctuation">.</span><span class="token function">setBaseCodePath</span><span class="token punctuation">(</span>apkPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        pkg<span class="token punctuation">.</span><span class="token function">setSigningDetails</span><span class="token punctuation">(</span>SigningDetails<span class="token punctuation">.</span>UNKNOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pkg<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageParserException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PackageParserException</span><span class="token punctuation">(</span>INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION<span class="token punctuation">,</span>                <span class="token string">"Failed to read manifest from "</span> <span class="token operator">+</span> apkPath<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        IoUtils<span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个方法内部主要就是做了两件事：</p><blockquote><p>1、解析 volumeUuid<br>  2、调用 parseBaseApk(res, parser, flags, outError) 来获取 Package 对象 pkg 并返回</p></blockquote><p><br></p><h2 id="3-3-parseBaseApk-重载"><a href="#3-3-parseBaseApk-重载" class="headerlink" title="3.3 parseBaseApk 重载"></a>3.3 parseBaseApk 重载</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Package <span class="token function">parseBaseApk</span><span class="token punctuation">(</span>String apkPath<span class="token punctuation">,</span> Resources res<span class="token punctuation">,</span> XmlResourceParser parser<span class="token punctuation">,</span>            <span class="token keyword">int</span> flags<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> outError<span class="token punctuation">)</span> <span class="token keyword">throws</span> XmlPullParserException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">final</span> String splitName<span class="token punctuation">;</span>    <span class="token keyword">final</span> String pkgName<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 用包名创建一个 Package 对象</span>    <span class="token keyword">final</span> Package pkg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Package</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从资源中提取自定义属性集 com.android.internal.R.styleable.AndroidManifest 得到 TypedArray </span>    TypedArray sa <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">obtainAttributes</span><span class="token punctuation">(</span>parser<span class="token punctuation">,</span>            com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>AndroidManifest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化 pkg 的属性</span>    pkg<span class="token punctuation">.</span>mVersionCode <span class="token operator">=</span> sa<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span>            com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>AndroidManifest_versionCode<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pkg<span class="token punctuation">.</span>mVersionCodeMajor <span class="token operator">=</span> sa<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span>            com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>AndroidManifest_versionCodeMajor<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span><span class="token function">setVersionCode</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span><span class="token function">getLongVersionCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pkg<span class="token punctuation">.</span>baseRevisionCode <span class="token operator">=</span> sa<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span>            com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>AndroidManifest_revisionCode<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pkg<span class="token punctuation">.</span>mVersionName <span class="token operator">=</span> sa<span class="token punctuation">.</span><span class="token function">getNonConfigurationString</span><span class="token punctuation">(</span>            com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>AndroidManifest_versionName<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>mVersionName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pkg<span class="token punctuation">.</span>mVersionName <span class="token operator">=</span> pkg<span class="token punctuation">.</span>mVersionName<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 读取 APK 的 AndroidManifest 中的 coreApp 的值，判断是否为核心 Apk</span>    pkg<span class="token punctuation">.</span>coreApp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getAttributeBooleanValue</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"coreApp"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pkg<span class="token punctuation">.</span>mCompileSdkVersion <span class="token operator">=</span> sa<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span>            com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>AndroidManifest_compileSdkVersion<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>compileSdkVersion <span class="token operator">=</span> pkg<span class="token punctuation">.</span>mCompileSdkVersion<span class="token punctuation">;</span>    pkg<span class="token punctuation">.</span>mCompileSdkVersionCodename <span class="token operator">=</span> sa<span class="token punctuation">.</span><span class="token function">getNonConfigurationString</span><span class="token punctuation">(</span>            com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>AndroidManifest_compileSdkVersionCodename<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>mCompileSdkVersionCodename <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pkg<span class="token punctuation">.</span>mCompileSdkVersionCodename <span class="token operator">=</span> pkg<span class="token punctuation">.</span>mCompileSdkVersionCodename<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>compileSdkVersionCodename <span class="token operator">=</span> pkg<span class="token punctuation">.</span>mCompileSdkVersionCodename<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取资源后要回收</span>    sa<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">parseBaseApkCommon</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> null<span class="token punctuation">,</span> res<span class="token punctuation">,</span> parser<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> outError<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><br></p><h2 id="3-4-parseBaseApkCommon"><a href="#3-4-parseBaseApkCommon" class="headerlink" title="3.4 parseBaseApkCommon"></a>3.4 parseBaseApkCommon</h2><p>最终调用了 <code>parseBaseApkCommon</code> 方法，这个方法主要用来解析 APK 的 <code>AndroidManifest</code> 中的 <code>各个标签</code>，比如 application、permission、uses-sdk、feature-group 等等。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Package <span class="token function">parseBaseApkCommon</span><span class="token punctuation">(</span>Package pkg<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> acceptedTags<span class="token punctuation">,</span> Resources res<span class="token punctuation">,</span>        XmlResourceParser parser<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> outError<span class="token punctuation">)</span> <span class="token keyword">throws</span> XmlPullParserException<span class="token punctuation">,</span>        IOException <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 是否要安装在 SD 卡上</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> PARSE_EXTERNAL_STORAGE<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>flags <span class="token operator">|=</span> ApplicationInfo<span class="token punctuation">.</span>FLAG_EXTERNAL_STORAGE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 开始解析 xml</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>type <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> XmlPullParser<span class="token punctuation">.</span>END_DOCUMENT            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>type <span class="token operator">!=</span> XmlPullParser<span class="token punctuation">.</span>END_TAG <span class="token operator">||</span> parser<span class="token punctuation">.</span><span class="token function">getDepth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> outerDepth<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// private static final String TAG_APPLICATION = "application";</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>TAG_APPLICATION<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>foundApp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>RIGID_PARSER<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    outError<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"&lt;manifest> has more than one &lt;application>"</span><span class="token punctuation">;</span>                    mParseError <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_PARSE_FAILED_MANIFEST_MALFORMED<span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"&lt;manifest> has more than one &lt;application>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    XmlUtils<span class="token punctuation">.</span><span class="token function">skipCurrentTag</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            foundApp <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 其中四大组件的标签在 application 标签下，</span>            <span class="token comment" spellcheck="true">// 解析 application 标签的方法为 parseBaseApplication。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">parseBaseApplication</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> res<span class="token punctuation">,</span> parser<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> outError<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>TAG_OVERLAY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><br></p><h2 id="3-5-parseBaseApplication"><a href="#3-5-parseBaseApplication" class="headerlink" title="3.5 parseBaseApplication"></a>3.5 parseBaseApplication</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// parseBaseApplication 方法很长，我们这里只截取了解析四大组件相关的代码。</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">parseBaseApplication</span><span class="token punctuation">(</span>Package owner<span class="token punctuation">,</span> Resources res<span class="token punctuation">,</span>        XmlResourceParser parser<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> outError<span class="token punctuation">)</span>    <span class="token keyword">throws</span> XmlPullParserException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>type <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> XmlPullParser<span class="token punctuation">.</span>END_DOCUMENT            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>type <span class="token operator">!=</span> XmlPullParser<span class="token punctuation">.</span>END_TAG <span class="token operator">||</span> parser<span class="token punctuation">.</span><span class="token function">getDepth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> innerDepth<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> XmlPullParser<span class="token punctuation">.</span>END_TAG <span class="token operator">||</span> type <span class="token operator">==</span> XmlPullParser<span class="token punctuation">.</span>TEXT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String tagName <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"activity"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用 parseActivity 方法解析 activity 标签，</span>            <span class="token comment" spellcheck="true">// 得到一个 Activity 对象（PackageParser 的静态内部类）</span>            Activity a <span class="token operator">=</span> <span class="token function">parseActivity</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> res<span class="token punctuation">,</span> parser<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> outError<span class="token punctuation">,</span> cachedArgs<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                    owner<span class="token punctuation">.</span>baseHardwareAccelerated<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mParseError <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_PARSE_FAILED_MANIFEST_MALFORMED<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将解析得到的 Activity 对象保存在 Package 的列表 activities 中</span>            owner<span class="token punctuation">.</span>activities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            parsedComponent <span class="token operator">=</span> a<span class="token punctuation">.</span>info<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"receiver"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Activity a <span class="token operator">=</span> <span class="token function">parseActivity</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> res<span class="token punctuation">,</span> parser<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> outError<span class="token punctuation">,</span> cachedArgs<span class="token punctuation">,</span>                    <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mParseError <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_PARSE_FAILED_MANIFEST_MALFORMED<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            owner<span class="token punctuation">.</span>receivers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            parsedComponent <span class="token operator">=</span> a<span class="token punctuation">.</span>info<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Service s <span class="token operator">=</span> <span class="token function">parseService</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> res<span class="token punctuation">,</span> parser<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> outError<span class="token punctuation">,</span> cachedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mParseError <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_PARSE_FAILED_MANIFEST_MALFORMED<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            owner<span class="token punctuation">.</span>services<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            parsedComponent <span class="token operator">=</span> s<span class="token punctuation">.</span>info<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"provider"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Provider p <span class="token operator">=</span> <span class="token function">parseProvider</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> res<span class="token punctuation">,</span> parser<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> outError<span class="token punctuation">,</span> cachedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mParseError <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_PARSE_FAILED_MANIFEST_MALFORMED<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            owner<span class="token punctuation">.</span>providers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            parsedComponent <span class="token operator">=</span> p<span class="token punctuation">.</span>info<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><br></p><h2 id="3-6-总结"><a href="#3-6-总结" class="headerlink" title="3.6 总结"></a>3.6 总结</h2><p>PackageParser 解析 APK 的代码逻辑非常庞大且复杂，基本了解了本文所涉及的逻辑和原理，分析问题基本上足够了，如果有兴趣可以自行深入的研究源码。</p><p>parseBaseApk 方法主要的解析结构可以理解为以下简图：<br><br></p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-f8f66b9d2ba70154.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="1417629-1a9039e0ad81bf21.png"></center><h1 id="四、Package-数据结构"><a href="#四、Package-数据结构" class="headerlink" title="四、Package 数据结构"></a>四、Package 数据结构</h1><p>包被解析后，最终存储在 <code>Package</code> ，它是 <code>PackageParser</code> 的<code>内部类</code>，它的部分成员变量如下所示。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Representation of a full package parsed from APK files on disk. A package * consists of a single base APK, and zero or more split APKs. */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Package</span> <span class="token keyword">implements</span> <span class="token class-name">Parcelable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String packageName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// The package name declared in the manifest as the package can be</span>    <span class="token comment" spellcheck="true">// renamed, for example static shared libs use synthetic package names.</span>    <span class="token keyword">public</span> String manifestPackageName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Names of any split APKs, ordered by parsed splitName */</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> splitNames<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// TODO: work towards making these paths invariant</span>    <span class="token keyword">public</span> String volumeUuid<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Path where this package was found on disk. For monolithic packages     * this is path to single base APK file; for cluster packages this is     * path to the cluster directory.     */</span>    <span class="token keyword">public</span> String codePath<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Path of base APK */</span>    <span class="token keyword">public</span> String baseCodePath<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Paths of any split APKs, ordered by parsed splitName */</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> splitCodePaths<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// For now we only support one application per package.</span>    <span class="token keyword">public</span> ApplicationInfo applicationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>Permission<span class="token operator">></span> permissions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Permission<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>PermissionGroup<span class="token operator">></span> permissionGroups <span class="token operator">=</span>                                                      <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>PermissionGroup<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*      * activities 列表中存储了类型为 Activity 的对象，需要注意的是这个 Acticity 并不是     * 我们常用的那个 Activity ，而是 PackageParser 的静态内部类，Package 中的其他列表也都是如此。     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>Activity<span class="token operator">></span> activities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Activity<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>Activity<span class="token operator">></span> receivers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Activity<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>Provider<span class="token operator">></span> providers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Provider<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>Service<span class="token operator">></span> services <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Service<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>Instrumentation<span class="token operator">></span> instrumentation <span class="token operator">=</span>                                                <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Instrumentation<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>Package 的数据结构简图如下所示：</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-12ea4aeb503246b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"></center><p>从这个简图中可以发现 Package 的数据结构是如何设计的：</p><p>1、Package 中存有许多组件，比如 Acticity、Provider、Permission 等等，它们都继承基类 Component。<br>2、每个组件都包含一个 info 数据，比如 Activity 类中包含了成员变量 ActivityInfo，这个 ActivityInfo 才是真正的 Activity 数据。<br>3、四大组件的标签内可能包含 <intent-filter> 来过滤 Intent 信息，因此需要 IntentInfo 来保存组件的 intent 信息，组件基类 Component 依赖于 IntentInfo，IntentInfo 有三个子类 ActivityIntentInfo、ServiceIntentInfo 和 ProviderIntentInfo，不同组件依赖的 IntentInfo 会有所不同，比如 Activity 继承自Component<activityintentinfo> ，Permission 继承自 Component<intentinfo> 。</intentinfo></activityintentinfo></intent-filter></p><p>最终的解析的数据会封装到 Package 中。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>&nbsp;📕 01. <a href="http://liuwangshu.cn/framework/pms/5-packageparser.html" target="_blank" rel="noopener">Android包管理机制（五）APK是如何被解析的</a><br>&nbsp;📕 02. <a href="https://www.jianshu.com/p/69fb6f9a6ac7" target="_blank" rel="noopener">APK安装流程详解9——PackageParser解析APK(上)</a></p><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>推荐跳转：<a href="https://superandroid.pro/2019/12/31/%E3%80%8AThinking%20in%20Android%E3%80%8B%20--%2001.%20%E5%8D%9A%E5%AE%A2%E7%B4%A2%E5%BC%95/">博客索引（Android 9.0）</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://superandroid.pro/2019/01/15/%E3%80%90%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1%E3%80%91Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%884%EF%BC%89%E4%B9%8B%20PackageInstaller/">Framework 核心服务之 PMS 钻研（4）- PackageInstaller</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://superandroid.pro/2019/01/23/%E3%80%90%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1%E3%80%91Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%886%EF%BC%89%E4%B9%8B%20APK%20%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%8A%EF%BC%89/">Framework 核心服务之 PMS 钻研（6）- APK 安装流程（上）</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PackageManagerService </tag>
            
            <tag> PackageParser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PackageManagerService 钻研（4）- PackageInstaller</title>
      <link href="/2019/01/16/02.kuang-jia-he-xin-fu-wu-android-kuang-jia-fu-wu-pian-packagemanagerservice-zuan-yan-4-packageinstaller/"/>
      <url>/2019/01/16/02.kuang-jia-he-xin-fu-wu-android-kuang-jia-fu-wu-pian-packagemanagerservice-zuan-yan-4-packageinstaller/</url>
      
        <content type="html"><![CDATA[<p><br></p><p><strong><center><font color="#3A5FCD" size="4">PackageManagerService 系列文章如下（基于 Android 9.0 源码）</font><center></center></center></strong><br></p><table><thead><tr><th style="text-align:center">&nbsp;</th><th style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（1）- 启动流程</font></a></th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（2）- 构造函数</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（3）- PackageManager</font></a></td></tr><tr><td style="text-align:center"><strong><font color="#EE2C2C" size="3">PackageManagerService</font></strong></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（4）- PackageInstaller</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（5）- APK 安装流程（1）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（6）- APK 安装流程（2）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（7）- PackageParser</font></a></td></tr></tbody></table><p><br></p><p><strong><font color="#3A5FCD" size="4">修订日志</font></strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">1、重新梳理 PackageInstaller 源码流程（Android 9.0）；</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">2、博文格式，文章排版优化；</font></p><hr><h1 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h1><h2 id="1-1-核心源码"><a href="#1-1-核心源码" class="headerlink" title="1.1 核心源码"></a>1.1 核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">PackageInstaller.java</font></td><td>/frameworks/base/core/java/android/content/pm/PackageInstaller.java</td></tr><tr><td><font color="#D15FEE">PackageManager.java</font></td><td>/frameworks/base/core/java/android/content/pm/PackageManager.java</td></tr><tr><td><font color="#D15FEE">ApplicationPackageManager.java</font></td><td>/frameworks/base/core/java/android/app/ApplicationPackageManager.java</td></tr><tr><td><font color="#D15FEE">PackageUtil.java</font></td><td>/packages/apps/PackageInstaller/src/com/android/packageinstaller/PackageUtil.java</td></tr><tr><td><font color="#D15FEE">InstallStart.java</font></td><td>/packages/apps/PackageInstaller/src/com/android/packageinstaller/InstallStart.java</td></tr><tr><td><font color="#D15FEE">InstallStaging.java</font></td><td>/packages/apps/PackageInstaller/src/com/android/packageinstaller/InstallStaging.java</td></tr><tr><td><font color="#D15FEE">PackageInstallerActivity.java</font></td><td>/packages/apps/PackageInstaller/src/com/android/packageinstaller/PackageInstallerActivity.java</td></tr></tbody></table><h2 id="1-2-PackageManager"><a href="#1-2-PackageManager" class="headerlink" title="1.2 PackageManager"></a>1.2 PackageManager</h2><p>在详细讲解包管理机制如何安装 APK 之前，我们回顾一下前面一篇文章讲解的 <font color="#FF0000"><strong>PackageManager</strong></font>。</p><p><code>PackageManager</code> 是一个<code>抽象类</code>，它的具体实现类为 <code>ApplicationPackageManager</code> 。</p><p><code>ApplicationPackageManager</code> 中的方法会通过 <code>IPackageManager</code> 与 <code>PackageManagerService</code> 进行进程间通信，因此 <code>PackageManager</code> 所提供的功能最终是由 <code>PackageManagerService</code> 来实现的，这么设计的主要用意是为了避免系统服务 PMS 直接被访问。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// PackageManager 是一个抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PackageManager</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ApplicationPackageManager 继承自 PackageManager</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationPackageManager</span> <span class="token keyword">extends</span> <span class="token class-name">PackageManager</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="1-3-关于-APK"><a href="#1-3-关于-APK" class="headerlink" title="1.3 关于 APK"></a>1.3 关于 APK</h2><blockquote><p>文件结构和安装方式</p></blockquote><p><code>APK</code> 是 <code>AndroidPackage</code> 的缩写，即 <code>Android 安装包</code>，它实际上是 <code>zip</code> 格式的压缩文件，一般情况下，解压后的文件结构如下表所示。</p><table><thead><tr><th>目录/文件</th><th>描述</th></tr></thead><tbody><tr><td>assert</td><td>存放的原生资源文件，通过 AssetManager 类访问。</td></tr><tr><td>lib</td><td>存放库文件。</td></tr><tr><td>META-INF</td><td>保存应用的签名信息，签名信息可以验证 APK 文件的完整性。</td></tr><tr><td>res</td><td>存放资源文件。res 中除了 raw 子目录，其他的子目录都参与编译，这些子目录下的资源是通过编译出的 R 类在代码中访问。</td></tr><tr><td>AndroidManifest.xml</td><td>用来声明应用程序的包名称、版本、组件和权限等数据。 apk 中的 AndroidManifest.xml 经过压缩，可以通过 AXMLPrinter2 工具解开。</td></tr><tr><td>classes.dex</td><td>Java 源码编译后生成的 Java 字节码文件。</td></tr><tr><td>resources.arsc</td><td>编译后的二进制资源文件。</td></tr></tbody></table><blockquote><p>安装场景</p></blockquote><p>目前，我们常见的安装 APK 的场景主要分为以下 <font color="#FF0000"><strong>四种</strong></font>：（这四种方式后面都单独进行研究）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;1、通过 adb 命令安装：adb 命令包括 <code>adb push/install</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;2、用户下载的 Apk，通过系统安装器 <code>packageinstaller</code>（系统内置的应用程序，用于安装和卸载应用程序）安装该 Apk。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;3、系统开机时安装系统应用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;4、电脑或者手机上的应用商店自动安装。</p><p>其实，这 4 种方式最终都是由 <code>PackageManagerService</code> 来进行处理，只是在此之前的调用链（逻辑）是不同的。</p><p>我们在接下来的分析中，会优先选择第二种方式，因为对于开发者来说，这是调用链比较长的安装方式，其他三种方式也会再跟一遍逻辑，梳理 4 种逻辑的差异点。</p><p>我们首先看下这种安装方式的<font color="#0000CD"> <strong>实际效果图</strong> </font>：（后面我们分析源码的流程会紧密联系着这几张图，大家可以对比理解！）</p><p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-7404e3513b6871cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/220" alt="未知权限.png">&nbsp;&nbsp;<img src="https://upload-images.jianshu.io/upload_images/3517194-7f3099737f62e7b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/220" alt="开启权限.png">&nbsp;&nbsp;<img src="https://upload-images.jianshu.io/upload_images/3517194-836d60ebb88bea77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/220" alt="确定安装.png">&nbsp;&nbsp;<img src="https://upload-images.jianshu.io/upload_images/3517194-088d3c221086bffb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/220" alt="安装界面.png">&nbsp;&nbsp;<img src="https://upload-images.jianshu.io/upload_images/3517194-6ce997c33e3193a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/220" alt="安装完成.png"></center><br><br></p><blockquote><p>安装目录</p></blockquote><table><thead><tr><th>目录/文件</th><th>描述</th></tr></thead><tbody><tr><td>/system/app</td><td>系统自带的应用程序，获得 adb root 权限才能删除。</td></tr><tr><td>/data/app</td><td>用户程序安装的目录，安装时把 apk 文件复制到此目录。</td></tr><tr><td>/data/data</td><td>存放应用程序的数据。</td></tr><tr><td>/data/dalvik-cache</td><td>将 apk 中的 dex 文件安装到 dalvik-cache 目录下，用于虚拟机安装的可执行文件。</td></tr><tr><td>/data/system</td><td>该目录下的 packages.xml 文件类似于 Window 的注册表，这个文件是解析 apk 时由 writeLP() 创建的，里面记录了系统的 permissons，以及每个 apk 的 name，codePath，flag，ts，version ，userid 等信息，这些信息主要通过 apk 的 AndroidManifest 解析获取，解析完 apk 后将更新信息写入这个文件并保存到 flash，下次开机的时候直接从里面读取相关信息并添加到内存相关列表中。当有 apk 升级，安装或删除时会更新这个文件。</td></tr><tr><td>/data/system/package.xml</td><td>包含了该应用申请的权限、签名和代码所在的位置等信息系，并且两者都有同一个 userld。之所以每个应用都要一个 userId，是因为 Android 在系统设计上把每个应用当做 Linux 系统上的一个用户对待，这样就可以利用已有的 Linux 用户管理机制来设计 Android 应用，比如应用目录，应用权限，应用进程管理等。</td></tr><tr><td>/data/system/package.list</td><td>指定了应用的默认存储位置 /data/data/com.xxx.xxx。</td></tr></tbody></table><h1 id="二、PackageInstaller"><a href="#二、PackageInstaller" class="headerlink" title="二、PackageInstaller"></a>二、PackageInstaller</h1><h2 id="2-1-初始化"><a href="#2-1-初始化" class="headerlink" title="2.1 初始化"></a>2.1 初始化</h2><p>首先，我们需要指出的是：从 Android 8.0 开始系统是通过如下代码安装指定路径中的 APK：</p><pre class=" language-java"><code class="language-java">Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_VIEW<span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">setDataAndType</span><span class="token punctuation">(</span>Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"file://"</span> <span class="token operator">+</span> apkfile<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"application/vnd.android.package-archive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Intent 的 <code>Action</code> 属性为 <code>ACTION_VIEW</code>，Type 属性指定 <code>Intent</code> 的数据类型为 <code>application/vnd.android.package-archive</code>。</p><font color="#0000CD"><strong>“application/vnd.android.package-archive” 是什么？</strong></font><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> MIME_MapTable<span class="token operator">=</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//{后缀名，MIME类型} </span>    <span class="token punctuation">{</span><span class="token string">".3gp"</span><span class="token punctuation">,</span>    <span class="token string">"video/3gpp"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">{</span><span class="token string">".apk"</span><span class="token punctuation">,</span>    <span class="token string">"application/vnd.android.package-archive"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">{</span><span class="token string">".asf"</span><span class="token punctuation">,</span>    <span class="token string">"video/x-ms-asf"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">{</span><span class="token string">".avi"</span><span class="token punctuation">,</span>    <span class="token string">"video/x-msvideo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>我们发现 <code>&quot;application/vnd.android.package-archive&quot;</code> 其实就是<code>文件类型</code>，具体对应 <code>apk</code> 类型。</p><p>那么这个 <code>Intent 隐式匹配的 Activity</code> 是什么？这边我们直接告诉你：<font color="#FF0000"><strong>InstallStart</strong></font> ！为什么？源码为证！</p><p>（源码中，7.0 隐式匹配的 Activity 为 <font color="#FF0000"><strong>PackageInstallerActivity</strong></font> ，两者的区别我们后面会讲解到！）。</p><pre class=" language-xml"><code class="language-xml">// packages/apps/PackageInstaller/AndroidManifest.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.InstallStart<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>excludeFromRecents</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span> <span class="token attr-name"><span class="token namespace">android:</span>priority</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.VIEW<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.INSTALL_PACKAGE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.DEFAULT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>scheme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>scheme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>mimeType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application/vnd.android.package-archive<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>    ... ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span></code></pre><h2 id="2-2-InstallStart"><a href="#2-2-InstallStart" class="headerlink" title="2.2 InstallStart"></a>2.2 InstallStart</h2><p>其实，<code>InstallStart</code> 是 <code>PackageInstaller</code> 的<code>入口</code>。当我们调用 <code>PackageInstaller</code> 来安装应用时会跳转到 <code>InstallStart</code>，并调用它的 <code>onCreate</code> 方法，我们来看看源码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstallStart</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        mIPackageManager <span class="token operator">=</span> AppGlobals<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Intent intent <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String callingPackage <span class="token operator">=</span> <span class="token function">getCallingPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">/**         * public static final String ACTION_CONFIRM_PERMISSIONS =                                      "android.content.pm.action.CONFIRM_PERMISSIONS";         * 判断 Intent 的 Action 是否为 CONFIRM_PERMISSIONS ;         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>PackageInstaller<span class="token punctuation">.</span>ACTION_CONFIRM_PERMISSIONS<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nextActivity<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> PackageInstallerActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 我们探讨的情景会走这边</span>            Uri packageUri <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 保证 packageUri 不为 null，判断 packageUri 的 Scheme 协议是否是 content 或者 File</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>packageUri <span class="token operator">!=</span> null                     <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>packageUri<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ContentResolver<span class="token punctuation">.</span>SCHEME_FILE<span class="token punctuation">)</span>                    <span class="token operator">||</span> packageUri<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ContentResolver<span class="token punctuation">.</span>SCHEME_CONTENT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 跳转到 InstallStaging （Android 8.0 - 9.0）</span>                nextActivity<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> InstallStaging<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>packageUri <span class="token operator">!=</span> null                <span class="token operator">&amp;&amp;</span> packageUri<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>PackageInstallerActivity<span class="token punctuation">.</span>SCHEME_PACKAGE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 跳转到 PackageInstallerActivity（Android 7.0）</span>                nextActivity<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> PackageInstallerActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                Intent result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                result<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_INSTALL_RESULT<span class="token punctuation">,</span>                        PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INVALID_URI<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setResult</span><span class="token punctuation">(</span>RESULT_FIRST_USER<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>                nextActivity <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextActivity <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 启动相应的 Activity（InstallStaging 或者 PackageInstallerActivity）</span>            <span class="token function">startActivity</span><span class="token punctuation">(</span>nextActivity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="2-3-InstallStaging"><a href="#2-3-InstallStaging" class="headerlink" title="2.3 InstallStaging"></a>2.3 InstallStaging</h2><p>我们是基于 Android 9.0 的代码进行的分析，所以会走到 <code>InstallStaging</code> 分支，继续看源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstallStaging</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// This is the first onResume in a single life of the activity</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mStagingTask <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// File does not exist, or became invalid</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mStagedFile <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Create file delayed to be able to show error</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 如果 File 类型的 mStagedFile 为 null，</span>                    <span class="token comment" spellcheck="true">// 则创建 mStagedFile，mStagedFile 用于存储临时数据</span>                    mStagedFile <span class="token operator">=</span> TemporaryFileManager<span class="token punctuation">.</span><span class="token function">getStagedFile</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">showError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            mStagingTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StagingAsyncTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 启动 StagingAsyncTask 线程，并传入了 content 协议的 Uri</span>            mStagingTask<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>我们可以看到，<font color="#0000CD"><strong>InstallStaging 主要做了两部分工作</strong></font>：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;1、判断 <code>mStagingTask</code> 是否为空，主要用于存储临时数据；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;2、创建并启动 <code>StagingAsyncTask</code> 线程。</p><h2 id="2-4-StagingAsyncTask"><a href="#2-4-StagingAsyncTask" class="headerlink" title="2.4 StagingAsyncTask"></a>2.4 StagingAsyncTask</h2><p>接下来，我们看看这个线程所做的工作：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// /packages/apps/PackageInstaller/src/com/android/packageinstaller/InstallStaging.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstallStaging</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">StagingAsyncTask</span> <span class="token keyword">extends</span> <span class="token class-name">AsyncTask</span><span class="token operator">&lt;</span>Uri<span class="token punctuation">,</span> Void<span class="token punctuation">,</span> Boolean<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> Boolean <span class="token function">doInBackground</span><span class="token punctuation">(</span>Uri<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>params <span class="token operator">==</span> null <span class="token operator">||</span> params<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Uri packageUri <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">(</span>InputStream in <span class="token operator">=</span> <span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openInputStream</span><span class="token punctuation">(</span>packageUri<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 将 packageUri（content协议的Uri）的内容写入到 mStagedFile 中                 </span>                <span class="token keyword">try</span> <span class="token punctuation">(</span>OutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>mStagedFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> bytesRead<span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bytesRead <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> SecurityException <span class="token operator">|</span> IllegalStateException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span> <span class="token string">"Error staging apk from content URI"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPostExecute</span><span class="token punctuation">(</span>Boolean success<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Intent installIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果写入成功，跳转到 DeleteStagedFileOnResult            </span>                installIntent<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span>InstallStaging<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> DeleteStagedFileOnResult<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 并将 mStagedFile 传进去</span>                installIntent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>Uri<span class="token punctuation">.</span><span class="token function">fromFile</span><span class="token punctuation">(</span>mStagedFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>installIntent<span class="token punctuation">.</span><span class="token function">getBooleanExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_RETURN_RESULT<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    installIntent<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_FORWARD_RESULT<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                installIntent<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_NO_ANIMATION<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>installIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>                InstallStaging<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">showError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="2-5-DeleteStagedFileOnResult"><a href="#2-5-DeleteStagedFileOnResult" class="headerlink" title="2.5 DeleteStagedFileOnResult"></a>2.5 DeleteStagedFileOnResult</h2><p><code>doInBackground</code> 方法中将 <code>packageUri</code>（content 协议的 Uri）的内容写入到 <code>mStagedFile</code> 中，如果写入成功，<code>onPostExecute</code> 方法中会跳转到 <code>DeleteStagedFileOnResult</code> 中，并将 <code>mStagedFile</code> 传进去。</p><p>直接看下源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeleteStagedFileOnResult</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>savedInstanceState <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Intent installIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 跳转到 PackageInstallerActivity</span>            installIntent<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> PackageInstallerActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            installIntent<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_NO_ANIMATION<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">startActivityForResult</span><span class="token punctuation">(</span>installIntent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onActivityResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> requestCode<span class="token punctuation">,</span> <span class="token keyword">int</span> resultCode<span class="token punctuation">,</span> Intent data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File sourceFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceFile<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setResult</span><span class="token punctuation">(</span>resultCode<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-6-小结"><a href="#2-6-小结" class="headerlink" title="2.6 小结"></a>2.6 小结</h2><p><font color="#0000CD"><strong>绕了一圈又回到了 PackageInstallerActivity</strong></font>，这里可以看出 <code>InstallStaging</code> 主要起了转换的作用，将 <code>content</code> 协议的 <code>Uri</code> 转换为 <code>File</code> 协议，然后跳转到 <code>PackageInstallerActivity</code>，接下来的安装流程就和 Android 7.0 一样了。</p><h1 id="三、PackageInstallerActivity"><a href="#三、PackageInstallerActivity" class="headerlink" title="三、PackageInstallerActivity"></a>三、PackageInstallerActivity</h1><p>接下来，我们就要重点分析 <code>PackageInstallerActivity</code> ！从功能上来说，<font color="#FF0000"><strong>PackageInstallerActivity 才是应用安装器 PackageInstaller 真正的入口 Activity</strong></font>。</p><p>我们看下官方对于这个类的说明：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * This activity is launched when a new application is installed via side loading * The package is first parsed and the user is notified of parse errors via a dialog. * If the package is successfully parsed, the user is notified to turn on the install unknown * applications setting. A memory check is made at this point and the user is notified of out * of memory conditions if any. If the package is already existing on the device, * a confirmation dialog (to replace the existing package) is presented to the user. * Based on the user response the package is then installed by launching InstallAppConfirm * sub activity. All state transitions are handled in this activity. */</span><span class="token comment" spellcheck="true">/** * 当通过渠道安装一个应用程序的时候，会启动这个 Activity。 * 如果在首次解析这个安装包的时候出现解析错误，会通过对话框的形式告诉用户。 * 如果首次解析安装包的时候，成功解析了，则会通知用户去打开"安装未知应用程序设置"。 * 在启动 Activity 的时候会进行内存检查，如果内存不足会通知用户。 * 如果这个应用程序已经在这个设备安装过了，则会向用户弹出一个对话框询问用户是否"替换现有应用程序的安装包"。 * 基于用户的回应，然后通过 InstallAppConfirm 的子类来安装应用程序。 * 所有状态的转换都是在这 Activity 中处理。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageInstallerActivity</span> <span class="token keyword">extends</span> <span class="token class-name">OverlayTouchActivity</span> <span class="token keyword">implements</span> <span class="token class-name">OnClickListener</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>了解完了官方说明，接下来我们查看它的 <code>onCreate()</code> 方法！</p><h2 id="3-1-onCreate"><a href="#3-1-onCreate" class="headerlink" title="3.1 onCreate"></a>3.1 onCreate</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageInstallerActivity</span> <span class="token keyword">extends</span> <span class="token class-name">OverlayTouchActivity</span> <span class="token keyword">implements</span> <span class="token class-name">OnClickListener</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    PackageManager mPm<span class="token punctuation">;</span>    IPackageManager mIpm<span class="token punctuation">;</span>    AppOpsManager mAppOpsManager<span class="token punctuation">;</span>    PackageInstaller mInstaller<span class="token punctuation">;</span>    UserManager mUserManager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle icicle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>icicle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>icicle <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mAllowUnknownSources <span class="token operator">=</span> icicle<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span>ALLOW_UNKNOWN_SOURCES_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 初始话 PackageManager 对象：具体用来执行安装操作，最终的功能由 PMS 来实现；</span>        mPm <span class="token operator">=</span> <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 初始话 IPackageManager 对象：一个 AIDL 的接口，用于和 PMS 进行进程间通信；</span>        mIpm <span class="token operator">=</span> AppGlobals<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 初始化 AppOpsManager 对象：用于权限动态检测，在，Android 4.3 中被引入；</span>        mAppOpsManager <span class="token operator">=</span> <span class="token punctuation">(</span>AppOpsManager<span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>APP_OPS_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 初始化 PackageInstaller 对象：在该对象中包含了安装 APK 的基本信息；</span>        mInstaller <span class="token operator">=</span> mPm<span class="token punctuation">.</span><span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 初始化 UserManager 对象：用于多用户管理；</span>        mUserManager <span class="token operator">=</span> <span class="token punctuation">(</span>UserManager<span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>USER_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Intent intent <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">final</span> Uri packageUri<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>PackageInstaller<span class="token punctuation">.</span>ACTION_CONFIRM_PERMISSIONS<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 可能是系统级别的应用安装时，需要授权走这个流程</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> sessionId <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getIntExtra</span><span class="token punctuation">(</span>PackageInstaller<span class="token punctuation">.</span>EXTRA_SESSION_ID<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> PackageInstaller<span class="token punctuation">.</span>SessionInfo info <span class="token operator">=</span> mInstaller<span class="token punctuation">.</span><span class="token function">getSessionInfo</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            mSessionId <span class="token operator">=</span> sessionId<span class="token punctuation">;</span>            packageUri <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">fromFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>resolvedBaseCodePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mOriginatingURI <span class="token operator">=</span> null<span class="token punctuation">;</span>            mReferrerURI <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果是用户自己拉起来的安装，则默认 sessionId 为 -1，并且获取 packageUri</span>            mSessionId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            packageUri <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mOriginatingURI <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getParcelableExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_ORIGINATING_URI<span class="token punctuation">)</span><span class="token punctuation">;</span>            mReferrerURI <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getParcelableExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_REFERRER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 返回 URI 解析错误</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>packageUri <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Unspecified source"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setPmResult</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INVALID_URI<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果设备为手表，则不支持</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>DeviceUtils<span class="token punctuation">.</span><span class="token function">isWear</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">showDialogInner</span><span class="token punctuation">(</span>DLG_NOT_SUPPORTED_ON_WEAR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 根据 Uri 的 Scheme 进行预处理</span>        <span class="token comment" spellcheck="true">// 💥 💥 💥 重点方法 1 💥 💥 💥 </span>        <span class="token keyword">boolean</span> wasSetUp <span class="token operator">=</span> <span class="token function">processPackageUri</span><span class="token punctuation">(</span>packageUri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wasSetUp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">bindUi</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>install_confirm<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断是否是未知来源的应用，如果开启允许安装未知来源选项则直接初始化安装</span>        <span class="token comment" spellcheck="true">// 💥 💥 💥 重点方法 2 💥 💥 💥</span>        <span class="token function">checkIfAllowedAndInitiateInstall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="3-2-processPackageUri"><a href="#3-2-processPackageUri" class="headerlink" title="3.2 processPackageUri"></a>3.2 processPackageUri</h2><p>我们首先来看看 <code>processPackageUri</code> 所做的工作：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageInstallerActivity</span> <span class="token keyword">extends</span> <span class="token class-name">OverlayTouchActivity</span> <span class="token keyword">implements</span> <span class="token class-name">OnClickListener</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">processPackageUri</span><span class="token punctuation">(</span><span class="token keyword">final</span> Uri packageUri<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPackageURI <span class="token operator">=</span> packageUri<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 得到 packageUri 的 Scheme 协议</span>        <span class="token keyword">final</span> String scheme <span class="token operator">=</span> packageUri<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据这个 Scheme 协议分别对 package 协议和 file 协议进行处理</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>scheme<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 处理 scheme 为 package 的情况</span>            <span class="token keyword">case</span> SCHEME_PACKAGE<span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 获取 package 对应的 Android 应用信息 PackageInfo</span>                    <span class="token comment" spellcheck="true">// 如：应用名称，权限列表等...</span>                    mPkgInfo <span class="token operator">=</span> mPm<span class="token punctuation">.</span><span class="token function">getPackageInfo</span><span class="token punctuation">(</span>packageUri<span class="token punctuation">.</span><span class="token function">getSchemeSpecificPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                        PackageManager<span class="token punctuation">.</span>GET_PERMISSIONS                                        <span class="token operator">|</span> PackageManager<span class="token punctuation">.</span>MATCH_UNINSTALLED_PACKAGES<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NameNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 如果无法获取 PackageInfo ，弹出一个错误的对话框，然后直接退出安装</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mPkgInfo <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Requested package "</span> <span class="token operator">+</span> packageUri<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token operator">+</span> <span class="token string">" not available. Discontinuing installation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">showDialogInner</span><span class="token punctuation">(</span>DLG_PACKAGE_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">setPmResult</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INVALID_APK<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 创建 AppSnipet 对象，该对象封装了待安装 Android 应用的标题和图标</span>                mAppSnippet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageUtil<span class="token punctuation">.</span>AppSnippet</span><span class="token punctuation">(</span>                                  mPm<span class="token punctuation">.</span><span class="token function">getApplicationLabel</span><span class="token punctuation">(</span>mPkgInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>                                  mPm<span class="token punctuation">.</span><span class="token function">getApplicationIcon</span><span class="token punctuation">(</span>mPkgInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 处理 scheme 为 file 的情况</span>            <span class="token keyword">case</span> ContentResolver<span class="token punctuation">.</span>SCHEME_FILE<span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 根据 packageUri 创建一个新的 File</span>                File sourceFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>packageUri<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 创建 APK 文件的分析器 parsed，💥 💥 💥 重点方法 💥 💥 💥 </span>                PackageParser<span class="token punctuation">.</span>Package parsed <span class="token operator">=</span> PackageUtil<span class="token punctuation">.</span><span class="token function">getPackageInfo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> sourceFile<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 说明解析错误，则弹出对话框，并退出安装</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parsed <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Parse error when parsing manifest..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">showDialogInner</span><span class="token punctuation">(</span>DLG_PACKAGE_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">setPmResult</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INVALID_APK<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 走到这边，说明解析成功，对 parsed 进一步处理得到包信息 PackageInfo，获取权限部分</span>                mPkgInfo <span class="token operator">=</span> PackageParser<span class="token punctuation">.</span><span class="token function">generatePackageInfo</span><span class="token punctuation">(</span>parsed<span class="token punctuation">,</span> null<span class="token punctuation">,</span>                        PackageManager<span class="token punctuation">.</span>GET_PERMISSIONS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PackageUserState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// private PackageUtil.AppSnippet mAppSnippet; 获取 PackageUtil.AppSnippet，</span>                <span class="token comment" spellcheck="true">// AppSnippet 是 PackageUtil 的静态内部类，内部封装了icon和label；</span>                <span class="token comment" spellcheck="true">// AppSnippet 中只有两个属性：lable（应用名称）、icon（应用图标）;</span>                <span class="token comment" spellcheck="true">// return new PackageUtil.AppSnippet(label, icon); 返回的是 label 和 icon.</span>                mAppSnippet <span class="token operator">=</span> PackageUtil<span class="token punctuation">.</span><span class="token function">getAppSnippet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>                                                     mPkgInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">,</span> sourceFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果不是这两个协议就会抛出异常</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Unexpected URI scheme "</span> <span class="token operator">+</span> packageUri<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-1-PackageUtil-getPackageInfo"><a href="#3-2-1-PackageUtil-getPackageInfo" class="headerlink" title="3.2.1 PackageUtil.getPackageInfo"></a>3.2.1 PackageUtil.getPackageInfo</h3><p>上面源码中创建 <code>APK</code> 文件的分析器 <code>parsed</code> 时，涉及一个重要的方法 <code>getPackageInfo()</code>，我们看下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// packages/apps/PackageInstaller/src/com/android/packageinstaller/PackageUtil.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageUtil</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> PackageParser<span class="token punctuation">.</span>Package <span class="token function">getPackageInfo</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> File sourceFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个 PackageParser 对象</span>        <span class="token keyword">final</span> PackageParser parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parser<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PackageParser<span class="token punctuation">.</span>CallbackImpl</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> parser<span class="token punctuation">.</span><span class="token function">parsePackage</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageParserException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="3-3-checkIfAllowedAndInitiateInstall"><a href="#3-3-checkIfAllowedAndInitiateInstall" class="headerlink" title="3.3 checkIfAllowedAndInitiateInstall"></a>3.3 checkIfAllowedAndInitiateInstall</h2><p>接下来我们看看 <code>checkIfAllowedAndInitiateInstall</code> 做所工作：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageInstallerActivity</span> <span class="token keyword">extends</span> <span class="token class-name">OverlayTouchActivity</span> <span class="token keyword">implements</span> <span class="token class-name">OnClickListener</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkIfAllowedAndInitiateInstall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> installAppsRestrictionSource <span class="token operator">=</span> mUserManager<span class="token punctuation">.</span><span class="token function">getUserRestrictionSource</span><span class="token punctuation">(</span>                UserManager<span class="token punctuation">.</span>DISALLOW_INSTALL_APPS<span class="token punctuation">,</span> Process<span class="token punctuation">.</span><span class="token function">myUserHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>installAppsRestrictionSource <span class="token operator">&amp;</span> UserManager<span class="token punctuation">.</span>RESTRICTION_SOURCE_SYSTEM<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">showDialogInner</span><span class="token punctuation">(</span>DLG_INSTALL_APPS_RESTRICTED_FOR_USER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>installAppsRestrictionSource <span class="token operator">!=</span> UserManager<span class="token punctuation">.</span>RESTRICTION_NOT_SET<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>ACTION_SHOW_ADMIN_SUPPORT_DETAILS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// isInstallRequestFromUnknownSource  -->  安装请求是否来自一个未知的源</span>        <span class="token comment" spellcheck="true">// 判断如果允许安装未知来源或者根据 Intent 判断得出该 APK 不是未知来源</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mAllowUnknownSources <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isInstallRequestFromUnknownSource</span><span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 初始化安装</span>            <span class="token function">initiateInstall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 💥 💥 💥 重点方法 1 💥 💥 💥 </span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> unknownSourcesRestrictionSource <span class="token operator">=</span> mUserManager<span class="token punctuation">.</span>                            <span class="token function">getUserRestrictionSource</span><span class="token punctuation">(</span>                                          UserManager<span class="token punctuation">.</span>DISALLOW_INSTALL_UNKNOWN_SOURCES<span class="token punctuation">,</span>                                           Process<span class="token punctuation">.</span><span class="token function">myUserHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果管理员限制来自未知源的安装, 就弹出提示 Dialog</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>unknownSourcesRestrictionSource <span class="token operator">&amp;</span>                                               UserManager<span class="token punctuation">.</span>RESTRICTION_SOURCE_SYSTEM<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">showDialogInner</span><span class="token punctuation">(</span>DLG_UNKNOWN_SOURCES_RESTRICTED_FOR_USER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>unknownSourcesRestrictionSource <span class="token operator">!=</span> UserManager<span class="token punctuation">.</span>RESTRICTION_NOT_SET<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>ACTION_SHOW_ADMIN_SUPPORT_DETAILS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">handleUnknownSources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 💥 💥 💥 重点方法 2 💥 💥 💥 </span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="3-4-handleUnknownSources"><a href="#3-4-handleUnknownSources" class="headerlink" title="3.4 handleUnknownSources"></a>3.4 handleUnknownSources</h2><p>我们先来看看 <code>handleUnknownSources()</code> 的源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageInstallerActivity</span> <span class="token keyword">extends</span> <span class="token class-name">OverlayTouchActivity</span> <span class="token keyword">implements</span> <span class="token class-name">OnClickListener</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleUnknownSources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOriginatingPackage <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"No source found for package "</span> <span class="token operator">+</span> mPkgInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">showDialogInner</span><span class="token punctuation">(</span>DLG_ANONYMOUS_SOURCE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> appOpCode <span class="token operator">=</span>             AppOpsManager<span class="token punctuation">.</span><span class="token function">permissionToOpCode</span><span class="token punctuation">(</span>Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>REQUEST_INSTALL_PACKAGES<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> appOpMode <span class="token operator">=</span> mAppOpsManager<span class="token punctuation">.</span><span class="token function">noteOpNoThrow</span><span class="token punctuation">(</span>appOpCode<span class="token punctuation">,</span>                                                     mOriginatingUid<span class="token punctuation">,</span> mOriginatingPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>appOpMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> AppOpsManager<span class="token punctuation">.</span>MODE_DEFAULT<span class="token operator">:</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> result <span class="token operator">=</span> mIpm<span class="token punctuation">.</span><span class="token function">checkUidPermission</span><span class="token punctuation">(</span>                            Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>REQUEST_INSTALL_PACKAGES<span class="token punctuation">,</span> mOriginatingUid<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>PERMISSION_GRANTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">initiateInstall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> exc<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Unable to talk to package manager"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                mAppOpsManager<span class="token punctuation">.</span><span class="token function">setMode</span><span class="token punctuation">(</span>appOpCode<span class="token punctuation">,</span> mOriginatingUid<span class="token punctuation">,</span>                        mOriginatingPackage<span class="token punctuation">,</span> AppOpsManager<span class="token punctuation">.</span>MODE_ERRORED<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// fall through</span>            <span class="token comment" spellcheck="true">// 我们看下这边，当系统默认不允许安装位置来源的应用时，会弹出一个 Dialog 等待用户确认</span>            <span class="token keyword">case</span> AppOpsManager<span class="token punctuation">.</span>MODE_ERRORED<span class="token operator">:</span>                <span class="token function">showDialogInner</span><span class="token punctuation">(</span>DLG_EXTERNAL_SOURCE_BLOCKED<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> AppOpsManager<span class="token punctuation">.</span>MODE_ALLOWED<span class="token operator">:</span>                <span class="token function">initiateInstall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-1-showDialogInner"><a href="#3-4-1-showDialogInner" class="headerlink" title="3.4.1 showDialogInner"></a>3.4.1 showDialogInner</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageInstallerActivity</span> <span class="token keyword">extends</span> <span class="token class-name">OverlayTouchActivity</span> <span class="token keyword">implements</span> <span class="token class-name">OnClickListener</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">showDialogInner</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DialogFragment currentDialog <span class="token operator">=</span>                <span class="token punctuation">(</span>DialogFragment<span class="token punctuation">)</span> <span class="token function">getFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFragmentByTag</span><span class="token punctuation">(</span><span class="token string">"dialog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentDialog <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            currentDialog<span class="token punctuation">.</span><span class="token function">dismissAllowingStateLoss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建一个 Dialog</span>        DialogFragment newDialog <span class="token operator">=</span> <span class="token function">createDialog</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newDialog <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newDialog<span class="token punctuation">.</span><span class="token function">showAllowingStateLoss</span><span class="token punctuation">(</span><span class="token function">getFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"dialog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-2-createDialog"><a href="#3-4-2-createDialog" class="headerlink" title="3.4.2 createDialog"></a>3.4.2 createDialog</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageInstallerActivity</span> <span class="token keyword">extends</span> <span class="token class-name">OverlayTouchActivity</span> <span class="token keyword">implements</span> <span class="token class-name">OnClickListener</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> DialogFragment <span class="token function">createDialog</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">case</span> DLG_EXTERNAL_SOURCE_BLOCKED<span class="token operator">:</span>                <span class="token keyword">return</span> ExternalSourcesBlockedDialog<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>mOriginatingPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> DLG_ANONYMOUS_SOURCE<span class="token operator">:</span>                <span class="token keyword">return</span> AnonymousSourceDialog<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-3-ExternalSourcesBlockedDialog"><a href="#3-4-3-ExternalSourcesBlockedDialog" class="headerlink" title="3.4.3 ExternalSourcesBlockedDialog"></a>3.4.3 ExternalSourcesBlockedDialog</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageInstallerActivity</span> <span class="token keyword">extends</span> <span class="token class-name">OverlayTouchActivity</span> <span class="token keyword">implements</span> <span class="token class-name">OnClickListener</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * An error dialog shown when external sources are not allowed     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ExternalSourcesBlockedDialog</span> <span class="token keyword">extends</span> <span class="token class-name">AppErrorDialog</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> AppErrorDialog <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String originationPkg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ExternalSourcesBlockedDialog dialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExternalSourcesBlockedDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dialog<span class="token punctuation">.</span><span class="token function">setArgument</span><span class="token punctuation">(</span>originationPkg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> dialog<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> Dialog <span class="token function">createDialog</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> CharSequence argument<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                PackageManager pm <span class="token operator">=</span> <span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ApplicationInfo sourceInfo <span class="token operator">=</span> pm<span class="token punctuation">.</span><span class="token function">getApplicationInfo</span><span class="token punctuation">(</span>argument<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span><span class="token function">getApplicationLabel</span><span class="token punctuation">(</span>sourceInfo<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span><span class="token function">getApplicationIcon</span><span class="token punctuation">(</span>sourceInfo<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">// untrusted_external_source_warning：出于安全考虑，已禁止您的手机安装</span>                        <span class="token comment" spellcheck="true">// 来自此来源的未知应用，对应文章开头的操作图</span>                        <span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>untrusted_external_source_warning<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>external_sources_settings<span class="token punctuation">,</span>                                <span class="token punctuation">(</span>dialog<span class="token punctuation">,</span> which<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                                    Intent settingsIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    settingsIntent<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>                                            Settings<span class="token punctuation">.</span>ACTION_MANAGE_UNKNOWN_APP_SOURCES<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">final</span> Uri packageUri <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"package:"</span> <span class="token operator">+</span> argument<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    settingsIntent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>packageUri<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                                        <span class="token comment" spellcheck="true">// ExternalSourcesDetails.java</span>                                        <span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startActivityForResult</span><span class="token punctuation">(</span>settingsIntent<span class="token punctuation">,</span>                                                REQUEST_TRUST_EXTERNAL_SOURCE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ActivityNotFoundException</span> exc<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                                    <span class="token punctuation">}</span>                                <span class="token punctuation">}</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setNegativeButton</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>cancel<span class="token punctuation">,</span>                                <span class="token punctuation">(</span>dialog<span class="token punctuation">,</span> which<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NameNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Did not find app info for "</span> <span class="token operator">+</span> argument<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="3-5-initiateInstall"><a href="#3-5-initiateInstall" class="headerlink" title="3.5 initiateInstall"></a>3.5 initiateInstall</h2><p>解决了 <code>handleUnknownSources</code> 方法，我们再来看下遗留的 <code>initiateInstall</code> 方法的源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageInstallerActivity</span> <span class="token keyword">extends</span> <span class="token class-name">OverlayTouchActivity</span> <span class="token keyword">implements</span> <span class="token class-name">OnClickListener</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 判断如果允许安装未知来源或者根据 Intent 判断得出该 APK 不是未知来源</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initiateInstall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 得到包名</span>        String pkgName <span class="token operator">=</span> mPkgInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 是否有同名应用已经安装上去了，在此安装则被认为是替换安装</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> oldName <span class="token operator">=</span> mPm<span class="token punctuation">.</span><span class="token function">canonicalToCurrentPackageNames</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> pkgName <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldName <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> oldName<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> oldName<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            pkgName <span class="token operator">=</span> oldName<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            mPkgInfo<span class="token punctuation">.</span>packageName <span class="token operator">=</span> pkgName<span class="token punctuation">;</span>            mPkgInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>packageName <span class="token operator">=</span> pkgName<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 检查这个包是否已安装，如果要替换，则显示替换对话框</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取设备上的残存数据，并且标记为 “installed” 的，实际上已经被卸载的应用</span>            mAppInfo <span class="token operator">=</span> mPm<span class="token punctuation">.</span><span class="token function">getApplicationInfo</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">,</span>                    PackageManager<span class="token punctuation">.</span>MATCH_UNINSTALLED_PACKAGES<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mAppInfo<span class="token punctuation">.</span>flags<span class="token operator">&amp;</span>ApplicationInfo<span class="token punctuation">.</span>FLAG_INSTALLED<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果应用是被卸载的，但是又是被标识成安装过的，则认为是新安装</span>                mAppInfo <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NameNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mAppInfo <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 列出权限列表，等待用户确认安装</span>        <span class="token function">startInstallConfirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>我们可以看到，<font color="#0000CD"><strong>initiateInstall 主要做了三件事</strong></font>：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;1、检查设备是否是同名安装，如果是则后续是替换安装。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;2、检查设备上是否已经安装了这个安装包，如果是，后面是替换安装。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;3、调用 <code>startInstallConfirm()</code> ，这个方法是安装的核心代码。</p><h2 id="3-6-startInstallConfirm"><a href="#3-6-startInstallConfirm" class="headerlink" title="3.6 startInstallConfirm"></a>3.6 startInstallConfirm</h2><p>下面我们就来看下 <code>startInstallConfirm()</code> 方法里面的具体实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageInstallerActivity</span> <span class="token keyword">extends</span> <span class="token class-name">OverlayTouchActivity</span> <span class="token keyword">implements</span> <span class="token class-name">OnClickListener</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startInstallConfirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// We might need to show permissions, load layout with permissions</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mAppInfo <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">bindUi</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>install_confirm_perm_update<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">bindUi</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>install_confirm_perm<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>install_confirm_question<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>install_confirm_question<span class="token punctuation">)</span><span class="token punctuation">;</span>        TabHost tabHost <span class="token operator">=</span> <span class="token punctuation">(</span>TabHost<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tabhost<span class="token punctuation">)</span><span class="token punctuation">;</span>        tabHost<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ViewPager viewPager <span class="token operator">=</span> <span class="token punctuation">(</span>ViewPager<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>pager<span class="token punctuation">)</span><span class="token punctuation">;</span>        TabsAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TabsAdapter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tabHost<span class="token punctuation">,</span> viewPager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据 sdk 版本来判断 app 是否支持运行时权限</span>        <span class="token comment" spellcheck="true">// 如果 app 支持运行时权限，这里会显示新的运行时权限</span>        <span class="token keyword">boolean</span> supportsRuntimePermissions <span class="token operator">=</span> mPkgInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>targetSdkVersion                <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>M<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 显示权限列表的变量，true：显示权限列表，false：未显示权限列表</span>        <span class="token keyword">boolean</span> permVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        mScrollView <span class="token operator">=</span> null<span class="token punctuation">;</span>        mOkCanInstall <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> msg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// perms 这个对象包括了该应用的用户的 uid 以及相应的一些权限，以及权限组信息</span>        AppSecurityPermissions perms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppSecurityPermissions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> mPkgInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取隐私相关权限的数量</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> N <span class="token operator">=</span> perms<span class="token punctuation">.</span><span class="token function">getPermissionCount</span><span class="token punctuation">(</span>AppSecurityPermissions<span class="token punctuation">.</span>WHICH_ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断是否为已经安装过的应用</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mAppInfo <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果已经安装过则继续判断是否为系统应用</span>            msg <span class="token operator">=</span> <span class="token punctuation">(</span>mAppInfo<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span>                    <span class="token operator">?</span> R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>install_confirm_question_update_system                    <span class="token operator">:</span> R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>install_confirm_question_update<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 用来显示权限列表的 scrollview</span>            mScrollView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CaffeinatedScrollView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果显示的内容超过了 mScrollView ，则就会折叠可以滚动</span>            mScrollView<span class="token punctuation">.</span><span class="token function">setFillViewport</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> newPermissionsFound <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>supportsRuntimePermissions<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 针对更新应用程序相对于旧版本而判断是否加入新的权限</span>                <span class="token comment" spellcheck="true">// AppSecurityPermissions.WHICH_NEW  -->  新加入的权限</span>                newPermissionsFound <span class="token operator">=</span>                        <span class="token punctuation">(</span>perms<span class="token punctuation">.</span><span class="token function">getPermissionCount</span><span class="token punctuation">(</span>AppSecurityPermissions<span class="token punctuation">.</span>WHICH_NEW<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>newPermissionsFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 将新的权限列表视频添加到滚动视图中</span>                    permVisible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 调用 AppSecurityPermissions 的 getPermissionsView 方法来获取</span>                    <span class="token comment" spellcheck="true">// PermissionItemView，将 PermissionItemView 添加到 </span>                    <span class="token comment" spellcheck="true">// CaffeinatedScrollView，这样安装该 APK 需要访问的</span>                    <span class="token comment" spellcheck="true">// 系统权限就可以全部的展示出来了</span>                    mScrollView<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>perms<span class="token punctuation">.</span><span class="token function">getPermissionsView</span><span class="token punctuation">(</span>                            AppSecurityPermissions<span class="token punctuation">.</span>WHICH_NEW<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>supportsRuntimePermissions <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>newPermissionsFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果既不支持可运行权限项也没有新权限发现，</span>                <span class="token comment" spellcheck="true">// 则提示没有新权限（没有设置任何权限，只显示应用程序名称和图标）</span>                LayoutInflater inflater <span class="token operator">=</span> <span class="token punctuation">(</span>LayoutInflater<span class="token punctuation">)</span><span class="token function">getSystemService</span><span class="token punctuation">(</span>                        Context<span class="token punctuation">.</span>LAYOUT_INFLATER_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>                TextView label <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span>inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>label<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                label<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>no_new_perms<span class="token punctuation">)</span><span class="token punctuation">;</span>                mScrollView<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            adapter<span class="token punctuation">.</span><span class="token function">addTab</span><span class="token punctuation">(</span>tabHost<span class="token punctuation">.</span><span class="token function">newTabSpec</span><span class="token punctuation">(</span>TAB_ID_NEW<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIndicator</span><span class="token punctuation">(</span>                    <span class="token function">getText</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>newPerms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mScrollView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果至少设置了一个权限</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>supportsRuntimePermissions <span class="token operator">&amp;&amp;</span> N <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            permVisible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            LayoutInflater inflater <span class="token operator">=</span> <span class="token punctuation">(</span>LayoutInflater<span class="token punctuation">)</span><span class="token function">getSystemService</span><span class="token punctuation">(</span>                    Context<span class="token punctuation">.</span>LAYOUT_INFLATER_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析权限列表的视图</span>            View root <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>permissions_list<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mScrollView <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mScrollView <span class="token operator">=</span> <span class="token punctuation">(</span>CaffeinatedScrollView<span class="token punctuation">)</span>root<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>scrollview<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 添加到权限列表的视图</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>ViewGroup<span class="token punctuation">)</span>root<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>permission_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>                        perms<span class="token punctuation">.</span><span class="token function">getPermissionsView</span><span class="token punctuation">(</span>AppSecurityPermissions<span class="token punctuation">.</span>WHICH_ALL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            adapter<span class="token punctuation">.</span><span class="token function">addTab</span><span class="token punctuation">(</span>tabHost<span class="token punctuation">.</span><span class="token function">newTabSpec</span><span class="token punctuation">(</span>TAB_ID_ALL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIndicator</span><span class="token punctuation">(</span>                    <span class="token function">getText</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>allPerms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 默认为 false，如果有新的权限会置为 true</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>permVisible<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mAppInfo <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*                 * 更新安装包，并且没有任何权限要求，会走这边的逻辑                 * 根据是否为内置应用，做不同的字串提醒                 * install_confirm_question_update_system_no_perms：系统应用                 * install_confirm_question_update_no_perms：非系统应用                 */</span>                msg <span class="token operator">=</span> <span class="token punctuation">(</span>mAppInfo<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span>                        <span class="token operator">?</span> R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>install_confirm_question_update_system_no_perms                        <span class="token operator">:</span> R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>install_confirm_question_update_no_perms<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 是新安装的 app 并且没有权限列表</span>                msg <span class="token operator">=</span> R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>install_confirm_question_no_perms<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 设置相应的 UI</span>            <span class="token function">bindUi</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>install_confirm<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mScrollView <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>TextView<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>install_confirm_question<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mScrollView <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// There is nothing to scroll view, so the ok button is immediately</span>            <span class="token comment" spellcheck="true">// set to install.</span>            mOk<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>install<span class="token punctuation">)</span><span class="token punctuation">;</span>            mOkCanInstall <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mScrollView<span class="token punctuation">.</span><span class="token function">setFullScrollAction</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mOk<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>install<span class="token punctuation">)</span><span class="token punctuation">;</span>                    mOkCanInstall <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>这个方法其实主要是根据不同的情况来设置相应的 <code>UI</code>，主要是将安装包分为<code>新安装</code>和<code>更新安装</code>，在更新安装里面又分为<code>系统应用</code>和<code>非系统应用</code>，然后根据不同的情况来显示不同的 <code>UI</code>，<code>UI</code> 这块主要是通过 <code>getPermissionsView</code> 方法来获取不同的权限 <code>View</code>。</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p><strong>PackageInstaller 初始化的过程：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;1、根据 <code>Uri</code> 的 <code>Scheme</code> 协议不同，跳转到不同的界面，<code>content</code> 协议跳转到 <code>InstallStart</code>，其他的跳转到 <code>PackageInstallerActivity</code>。本文应用场景中，如果是 <code>Android 7.0</code> 以及更高版本会跳转到 <code>InstallStart</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;2、<code>InstallStart</code> 将 <code>content</code> 协议的 <code>Uri 转换</code>为 <code>File 协议</code>，然后跳转到 <code>PackageInstallerActivity</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;3、<code>PackageInstallerActivity</code> 会分别对 <code>package 协议</code> 和 <code>file 协议</code> 的 <code>Uri</code> 进行处理，如果是 <code>file 协议</code>会解析 <code>APK</code> 文件得到包信息 <code>PackageInfo</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;4、<code>PackageInstallerActivity</code> 中会对<code>未知来源</code>进行处理，如果<code>允许安装未知来源</code>或者根据 <code>Intent</code> 判断得出该 <code>APK 不是未知来源</code>，就会<code>初始化安装确认界面</code>，如果管理员<code>限制来自未知源的安装</code>, 就弹出提示 <code>Dialog</code> 或者跳转到设置界面。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>&nbsp;📕 01. <a href="http://liuwangshu.cn/framework/pms/1-packageinstaller-initialize.html" target="_blank" rel="noopener">Android包管理机制（一）PackageInstaller的初始化</a><br>&nbsp;📕 02. <a href="https://www.cnblogs.com/ouyanliu/articles/7100682.html" target="_blank" rel="noopener">android 7.0 安装器安装过程分析</a><br>&nbsp;📕 03. <a href="https://www.jianshu.com/p/cbf8e73f41ed" target="_blank" rel="noopener">APK安装流程详解11——普通应用安装简介</a></p><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>推荐跳转：<a href="https://superandroid.pro/2019/12/31/%E3%80%8AThinking%20in%20Android%E3%80%8B%20--%2001.%20%E5%8D%9A%E5%AE%A2%E7%B4%A2%E5%BC%95/">博客索引（Android 9.0）</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://superandroid.pro/2019/01/10/%E3%80%90%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1%E3%80%91Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%883%EF%BC%89%E4%B9%8B%20PackageManager/">Framework 核心服务之 PMS 钻研（3）- PackageManager</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://superandroid.pro/2019/01/19/%E3%80%90%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1%E3%80%91Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%885%EF%BC%89%E4%B9%8B%20PackageParser/">Framework 核心服务之 PMS 钻研（5）- PackageParser</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PackageManagerService </tag>
            
            <tag> PackageInstaller </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PackageManagerService 钻研（3）- PackageManager</title>
      <link href="/2019/01/12/02.kuang-jia-he-xin-fu-wu-android-kuang-jia-fu-wu-pian-packagemanagerservice-zuan-yan-3-packagemanager/"/>
      <url>/2019/01/12/02.kuang-jia-he-xin-fu-wu-android-kuang-jia-fu-wu-pian-packagemanagerservice-zuan-yan-3-packagemanager/</url>
      
        <content type="html"><![CDATA[<p><br></p><p><strong><center><font color="#3A5FCD" size="4">PackageManagerService 系列文章如下（基于 Android 9.0 源码）</font><center></center></center></strong><br></p><table><thead><tr><th style="text-align:center">&nbsp;</th><th style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（1）- 启动流程</font></a></th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（2）- 构造函数</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（3）- PackageManager</font></a></td></tr><tr><td style="text-align:center"><strong><font color="#EE2C2C" size="3">PackageManagerService</font></strong></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（4）- PackageInstaller</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（5）- APK 安装流程（1）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（6）- APK 安装流程（2）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（7）- PackageParser</font></a></td></tr></tbody></table><p><br></p><p><strong><font color="#3A5FCD" size="4">修订日志</font></strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">1、重新梳理 PackageManager 原理；</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">2、细化源码，添加更为详细的注释说明；</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">3、博文格式，文章排版优化；</font></p><hr><h1 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h1><h2 id="1-1-核心源码"><a href="#1-1-核心源码" class="headerlink" title="1.1 核心源码"></a>1.1 核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">Context.java</font></td><td>frameworks/base/core/java/android/content/Context.java</td></tr><tr><td><font color="#D15FEE">ContextImpl.java</font></td><td>frameworks/base/core/java/android/app/ContextImpl.java</td></tr><tr><td><font color="#D15FEE">ActivityThread.java</font></td><td>frameworks/base/core/java/android/app/ActivityThread.java</td></tr><tr><td><font color="#D15FEE">PackageManager.java</font></td><td>frameworks/base/core/java/android/content/pm/PackageManager.java</td></tr><tr><td><font color="#D15FEE">ApplicationPackageManager.java</font></td><td>frameworks/base/core/java/android/app/ApplicationPackageManager.java</td></tr></tbody></table><h1 id="二、PackageManager"><a href="#二、PackageManager" class="headerlink" title="二、PackageManager"></a>二、PackageManager</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h2><p>PackageManager 是一个抽象类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Class for retrieving various kinds of information related to the application * packages that are currently installed on the device. * * You can find this class through {@link Context#getPackageManager}. */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PackageManager</span> <span class="token punctuation">{</span></code></pre><p>从注释可以看出：<code>PackageManager</code> 这个类是检测当前已经安装在当前设备上的应用程序包的信息。你可以调用 Context 类的 <code>getPackageManager()</code>方法来获取 <code>PackageManager</code>。</p><h2 id="2-2-安装原理"><a href="#2-2-安装原理" class="headerlink" title="2.2 安装原理"></a>2.2 安装原理</h2><p><strong>PackageManager 是一个实际上管理应用程序安装、卸载和升级的 API</strong>。</p><p>当我们安装 APK 文件时，PackageManager 会解析 APK 包文件和显示确认信息。</p><p>当我们点击 OK 按钮后，PackageManager 会调用一个叫 “InstallPackage” 的方法，这个方法有 4 个参数，也就是 uri、installFlags、observer、installPackagename。</p><p>PackageManager 会启动一个叫 “package” 的 servcie 服务，现在所有模糊的东西会发生在这个 service 中。</p><p>（<strong>从 Android 8.1 之后的源码中已经弃用这个方法，具体细节往下看！</strong>）</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-f195e3a3c47103fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装原理图（Android 8.0）(流程图后期重新更新).png"></center><p><br></p><h2 id="2-3-实现功能"><a href="#2-3-实现功能" class="headerlink" title="2.3 实现功能"></a>2.3 实现功能</h2><p><strong>抽象类 PackageManager 提供了的功能，主要有以下几点：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;1、安装、卸载应用<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;2、查询 permission 相关信息<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;3、查询 Application 相关信息(application、activity、receiver、service、provider 及相应属性等)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;4、查询已安装应用<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;5、增加、删除 permission<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;6、清除用户数据、缓存、代码等</p><h2 id="2-4-抽象方法"><a href="#2-4-抽象方法" class="headerlink" title="2.4 抽象方法"></a>2.4 抽象方法</h2><p><strong>我们来看几个比较重要的抽象方法：</strong></p><blockquote><p>getPackageInfo()</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 通过包名获取该包名对应的应用程序的 PackageInfo 对象， * PackageInfo 类包含了从 AndroidManifest.xml 文件中收集的所有信息。 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> PackageInfo <span class="token function">getPackageInfo</span><span class="token punctuation">(</span>String packageName<span class="token punctuation">,</span>                                 <span class="token annotation punctuation">@PackageInfoFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> NameNotFoundException<span class="token punctuation">;</span></code></pre><blockquote><p>getApplicationInfo()</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 根据包名返回其对应的 ApplicationInfo 信息。 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> ApplicationInfo <span class="token function">getApplicationInfo</span><span class="token punctuation">(</span>String packageName<span class="token punctuation">,</span>                            <span class="token annotation punctuation">@ApplicationInfoFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> NameNotFoundException<span class="token punctuation">;</span></code></pre><blockquote><p>getActivityInfo()</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 检索出一个特定的 Activity 类的所有信息。 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> ActivityInfo <span class="token function">getActivityInfo</span><span class="token punctuation">(</span>ComponentName component<span class="token punctuation">,</span>                              <span class="token annotation punctuation">@ComponentInfoFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> NameNotFoundException<span class="token punctuation">;</span></code></pre><blockquote><p>getReceiverInfo()</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 检索出一个特定的 Receiver 类的所有信息(这里主要指 ActivityInfo)。 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> ActivityInfo <span class="token function">getReceiverInfo</span><span class="token punctuation">(</span>ComponentName component<span class="token punctuation">,</span>                              <span class="token annotation punctuation">@ComponentInfoFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> NameNotFoundException<span class="token punctuation">;</span></code></pre><blockquote><p>getServiceInfo()</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 检索出一个特定的 Service 类的所有信息(这里主要指 ServiceInfo)。 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> ServiceInfo <span class="token function">getServiceInfo</span><span class="token punctuation">(</span>ComponentName component<span class="token punctuation">,</span>                              <span class="token annotation punctuation">@ComponentInfoFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> NameNotFoundException<span class="token punctuation">;</span></code></pre><blockquote><p>getProviderInfo()</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 检索出一个特定的 content provider 类的所有信息(这里主要指 ProviderInfo)。 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> ProviderInfo <span class="token function">getProviderInfo</span><span class="token punctuation">(</span>ComponentName component<span class="token punctuation">,</span>                              <span class="token annotation punctuation">@ComponentInfoFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> NameNotFoundException<span class="token punctuation">;</span></code></pre><blockquote><p>getInstalledPackages()</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 获取设备上安装的所有软件包。 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> List<span class="token operator">&lt;</span>PackageInfo<span class="token operator">></span> <span class="token function">getInstalledPackages</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PackageInfoFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>currentToCanonicalPackageNames()</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 从设备上使用当前包名映射到该软件包名的当前规范名称， * 如果修改包名会用到，没有修改过包名一般不会用到。 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">currentToCanonicalPackageNames</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> names<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>canonicalToCurrentPackageNames()</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 将软件包规范名称映射到设备上正在使用的当前名称， * canonicalToCurrentPackageNames() 和 currentToCanonicalPackageNames() 方法是相反的两个方法 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">canonicalToCurrentPackageNames</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> names<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>getPermissionInfo()</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 检测出我们想要知道的所有关于权限的信息。 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> PermissionInfo <span class="token function">getPermissionInfo</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@PermissionInfoFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span>                                                             <span class="token keyword">throws</span> NameNotFoundException<span class="token punctuation">;</span></code></pre><blockquote><p>queryPermissionsByGroup()</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 查询与特定组相关的所有权限。 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> List<span class="token operator">&lt;</span>PermissionInfo<span class="token operator">></span> <span class="token function">queryPermissionsByGroup</span><span class="token punctuation">(</span>String group<span class="token punctuation">,</span>                             <span class="token annotation punctuation">@PermissionInfoFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> NameNotFoundException<span class="token punctuation">;</span></code></pre><blockquote><p>getAllPermissionGroups()</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 检索出系统中所有已知的权限。 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> List<span class="token operator">&lt;</span>PermissionGroupInfo<span class="token operator">></span> <span class="token function">getAllPermissionGroups</span><span class="token punctuation">(</span>                             <span class="token annotation punctuation">@PermissionGroupInfoFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>除了上面列举出来的方法以外，还有很多其他抽象方法，这边不再一一列举出来，如果后面分析遇到会再单独拿出来分析！</p><h2 id="2-5-安装方法"><a href="#2-5-安装方法" class="headerlink" title="2.5 安装方法"></a>2.5 安装方法</h2><p>接下来我们来看看 PackageManager 中关于安装的几个方法！</p><blockquote><p>InstallPackage（弃用）</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * packageURI：表示安装的路径，可以是 "file:" 或者 "content:" 的 URI * observer：  一个回调的观察者，有了这个观察者，就可以在软件包安装完成后得到安装结果的通知。 *             如果安装完成会调用这个观察者 IPackageInstallObserver 的 packageInstalled(String，int)方法，observer这个入参不能为空。 * flags：     标志位参数 * nstallerPackageName：正在进行安装的安装包包名 */</span><span class="token comment" spellcheck="true">/** * @deprecated replaced by {@link PackageInstaller} * @hide */</span><span class="token annotation punctuation">@Deprecated</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">installPackage</span><span class="token punctuation">(</span>      <span class="token comment" spellcheck="true">// 弃用</span>        Uri packageURI<span class="token punctuation">,</span>        IPackageInstallObserver observer<span class="token punctuation">,</span>        <span class="token annotation punctuation">@InstallFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>        String installerPackageName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @deprecated replaced by {@link PackageInstaller} * @hide */</span><span class="token annotation punctuation">@Deprecated</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">installPackage</span><span class="token punctuation">(</span>      <span class="token comment" spellcheck="true">// 弃用</span>        Uri packageURI<span class="token punctuation">,</span>        PackageInstallObserver observer<span class="token punctuation">,</span>        <span class="token annotation punctuation">@InstallFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>        String installerPackageName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>从 8.1 开始，已经弃用了 <code>installPackage()</code> 方法</strong>（源码中已经去除），而是<strong>使用 <code>PackageInstaller</code> 执行应用的安装、升级和删除操作</strong>。</p><blockquote><p>getPackageInstaller</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Return interface that offers the ability to install, upgrade, and remove * applications on the device. */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token annotation punctuation">@NonNull</span> PackageInstaller <span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>installExistingPackage</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * If there is already an application with the given package name installed * on the system for other users, also install it for the calling user. * @hide */</span><span class="token annotation punctuation">@SystemApi</span>   <span class="token comment" spellcheck="true">// 系统 API</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">installExistingPackage</span><span class="token punctuation">(</span>String packageName<span class="token punctuation">)</span> <span class="token keyword">throws</span> NameNotFoundException<span class="token punctuation">;</span></code></pre><p>通过注释可以看出这个方法的用途：如果系统上已经安装相同包名的应用程序，则重新安装。</p><h2 id="2-6-具体实现类"><a href="#2-6-具体实现类" class="headerlink" title="2.6 具体实现类"></a>2.6 具体实现类</h2><p>我们知道 PackageManager 是一个<code>抽象类</code>，定义了很多抽象方法，所以在具体执行的时候，肯定是由它的子类去实现，它的子类是什么？</p><p>前面我们讲解 PackageManager 类的时候，官方推荐通过 <code>Context#getPackageManager()</code> 方法获取 <code>PackageManager</code> 对象：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// frameworks/base/core/java/android/content/Context.java</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/** Return PackageManager instance to find global package information. */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> PackageManager <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><code>Context</code> 也是一个<code>抽象类</code>，而它的 <code>getPackageManager()</code> 也是抽象方法，<code>Context</code> 的具体实现类是 <code>ContextImpl</code>，那我们就去 <code>ContextImpl</code> 里面看下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// frameworks/base/core/java/android/app/ContextImpl.java</span><span class="token keyword">class</span> <span class="token class-name">ContextImpl</span> <span class="token keyword">extends</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> PackageManager mPackageManager<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PackageManager <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断 mPackageManager 是否为空，如果为空，则说明是第一次调用</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mPackageManager <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mPackageManager<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 调用 ActivityThread 的静态方法 getPackageManager() 获取一个 IPackageManager 对象</span>        IPackageManager pm <span class="token operator">=</span> ActivityThread<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果获取的 IPackageManager 对象不为空，则构造一个 ApplicationPackageManager 对</span>        <span class="token comment" spellcheck="true">// 象，ApplicationPackageManager 是 PackageManager 的子类</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pm <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Doesn't matter if we make more than one instance.</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>mPackageManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationPackageManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> pm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>到这边就很清楚了，我们平时调用 Context 的 <code>getPackageManager()</code> 方法后，其实返回的是 <code>ApplicationPackageManager</code> 这个类。</p><h1 id="三、ApplicationPackageManager"><a href="#三、ApplicationPackageManager" class="headerlink" title="三、ApplicationPackageManager"></a>三、ApplicationPackageManager</h1><p>我们先来看下 ApplicationPackageManager 的源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// frameworks/base/core/java/android/app/ApplicationPackageManager.java</span><span class="token comment" spellcheck="true">/** @hide */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationPackageManager</span> <span class="token keyword">extends</span> <span class="token class-name">PackageManager</span> <span class="token punctuation">{</span></code></pre><p><code>ApplicationPackageManager</code> 继承自 <code>PackageManager</code>，而且 <code>ApplicationPackageManager 类不是抽象的</code>，所以 <code>ApplicationPackageManager</code> 必然实现了 <code>PackageManager</code> 的<code>所有抽象方法</code>。</p><h2 id="3-1-构造函数"><a href="#3-1-构造函数" class="headerlink" title="3.1 构造函数"></a>3.1 构造函数</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationPackageManager</span> <span class="token keyword">extends</span> <span class="token class-name">PackageManager</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ContextImpl mContext<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> IPackageManager mPM<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token function">ApplicationPackageManager</span><span class="token punctuation">(</span>ContextImpl context<span class="token punctuation">,</span> IPackageManager pm<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mContext <span class="token operator">=</span> context<span class="token punctuation">;</span>        mPM <span class="token operator">=</span> pm<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="3-2-InstallPackage-弃用"><a href="#3-2-InstallPackage-弃用" class="headerlink" title="3.2 InstallPackage(弃用)"></a>3.2 InstallPackage(弃用)</h2><p>在讲解 <code>PackageManager</code> 的时候，我们提到过安装 <code>APK</code> 会调用 <code>InstallPackage</code> 方法（Android 8.1，9.0 已弃用），我们看下在 <code>ApplicationPackageManager</code> 中的具体实现：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">installPackage</span><span class="token punctuation">(</span>Uri packageURI<span class="token punctuation">,</span> IPackageInstallObserver observer<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>                               String installerPackageName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">installCommon</span><span class="token punctuation">(</span>packageURI<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LegacyPackageInstallObserver</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">,</span> flags<span class="token punctuation">,</span>            installerPackageName<span class="token punctuation">,</span> mContext<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-3-installCommon-弃用"><a href="#3-3-installCommon-弃用" class="headerlink" title="3.3 installCommon(弃用)"></a>3.3 installCommon(弃用)</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码来自：Android 8.1，9.0 已弃用</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">installCommon</span><span class="token punctuation">(</span>Uri packageURI<span class="token punctuation">,</span>        PackageInstallObserver observer<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> String installerPackageName<span class="token punctuation">,</span>        <span class="token keyword">int</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// scheme 判断，如果非 "file" 则抛异常，因为只支持 file 格式的 URI</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"file"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>packageURI<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"Only file:// URIs are supported"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取相应的路径</span>    <span class="token keyword">final</span> String originPath <span class="token operator">=</span> packageURI<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用 installPackageAsUser 方法</span>        mPM<span class="token punctuation">.</span><span class="token function">installPackageAsUser</span><span class="token punctuation">(</span>originPath<span class="token punctuation">,</span> observer<span class="token punctuation">.</span><span class="token function">getBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                               flags<span class="token punctuation">,</span> installerPackageName<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以发现，<code>installPackage()</code> 方法其内部本质是调用的 <code>IPackageManager</code> 的 <code>installPackageAsUser()</code> 方法，因为方法已经弃用，我们这边不再跟下去。</p><h2 id="3-4-getPackageInstaller-8-1-9-0"><a href="#3-4-getPackageInstaller-8-1-9-0" class="headerlink" title="3.4 getPackageInstaller(8.1-9.0)"></a>3.4 getPackageInstaller(8.1-9.0)</h2><p>之前我们说过，从 8.1 开始调用 <code>getPackageInstaller</code> 方法，那么我们来看看源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationPackageManager</span> <span class="token keyword">extends</span> <span class="token class-name">PackageManager</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PackageInstaller <span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mInstaller <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    mInstaller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageInstaller</span><span class="token punctuation">(</span>mPM<span class="token punctuation">.</span><span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            mContext<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mContext<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> mInstaller<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>到这边，一切都明朗了，<code>PackageManager</code> 中创建了 <code>PackageInstaller</code> 对象，关于 <code>PackageInstaller</code> 的具体内容，我们这边不再继续分析。</p><p>具体内容，请查看下一篇博文：<a href="https://superandroid.pro/2019/01/15/%E3%80%90%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1%E3%80%91Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%884%EF%BC%89%E4%B9%8B%20PackageInstaller/">Framework 核心服务之 PMS 钻研（4）- PackageInstaller</a>。</p><h1 id="四、IPackageManager"><a href="#四、IPackageManager" class="headerlink" title="四、IPackageManager"></a>四、IPackageManager</h1><h2 id="4-1-ActivityThread"><a href="#4-1-ActivityThread" class="headerlink" title="4.1 ActivityThread"></a>4.1 ActivityThread</h2><p>在上面分析 <code>ContextImpl</code> 的 <code>getPackageManager()</code> 方法的时候，我们看到如下源码（回顾）：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// frameworks/base/core/java/android/app/ContextImpl.java</span><span class="token keyword">class</span> <span class="token class-name">ContextImpl</span> <span class="token keyword">extends</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> PackageManager mPackageManager<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PackageManager <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断 mPackageManager 是否为空，如果为空，则说明是第一次调用</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mPackageManager <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mPackageManager<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 调用 ActivityThread 的静态方法 getPackageManager() 获取一个 IPackageManager 对象</span>        IPackageManager pm <span class="token operator">=</span> ActivityThread<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果获取的 IPackageManager 对象不为空，则构造一个 ApplicationPackageManager 对</span>        <span class="token comment" spellcheck="true">// 象，ApplicationPackageManager 是 PackageManager 的子类</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pm <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Doesn't matter if we make more than one instance.</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>mPackageManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationPackageManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> pm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>这边，我们重点看下 <code>ActivityThread</code> 的静态方法 <code>getPackageManager()</code>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ActivityThread</span> <span class="token keyword">extends</span> <span class="token class-name">ClientTransactionHandler</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">static</span> <span class="token keyword">volatile</span> IPackageManager sPackageManager<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> IPackageManager <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断 sPackageManager 是否为空，如果为空，则说明是的第一次调用，走第二步，</span>        <span class="token comment" spellcheck="true">// 如果不为空，则直接返回 sPackageManager</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sPackageManager <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> sPackageManager<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 能走到第二步，说明这是第一次调用，</span>        <span class="token comment" spellcheck="true">// 则调用 ServiceManager 的 getService(String) 方法获取一个 IBinder 对象</span>        IBinder b <span class="token operator">=</span> ServiceManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token string">"package"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用 IPackageManager.Stub.asInterface(IBinder) 获取一个 sPackageManager 对象</span>        sPackageManager <span class="token operator">=</span> IPackageManager<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sPackageManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="4-2-ApplicationPackageManager"><a href="#4-2-ApplicationPackageManager" class="headerlink" title="4.2 ApplicationPackageManager"></a>4.2 ApplicationPackageManager</h2><p>再回顾下 <code>ApplicationPackageManager</code> 的构造函数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationPackageManager</span> <span class="token keyword">extends</span> <span class="token class-name">PackageManager</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ContextImpl mContext<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> IPackageManager mPM<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token function">ApplicationPackageManager</span><span class="token punctuation">(</span>ContextImpl context<span class="token punctuation">,</span> IPackageManager pm<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mContext <span class="token operator">=</span> context<span class="token punctuation">;</span>        mPM <span class="token operator">=</span> pm<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="4-3-IPackageManager"><a href="#4-3-IPackageManager" class="headerlink" title="4.3 IPackageManager"></a>4.3 IPackageManager</h2><p>再回顾下我们在第一篇文章中所说的　<code>IPackageManager</code>　源码：</p><p><strong><font color="#0000FF">IPackageManager.java：</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPackageManager</span> <span class="token keyword">extends</span> <span class="token class-name">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IInterface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** Local-side IPC implementation stub class. */</span>    <span class="token comment" spellcheck="true">// 定义内部类 Stub，派生自 Binder，实现 IPackageManager 接口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Stub</span> <span class="token keyword">extends</span> <span class="token class-name">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Binder</span>                                      <span class="token keyword">implements</span> <span class="token class-name">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>IPackageManager</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String DESCRIPTOR <span class="token operator">=</span>                                       <span class="token string">"android.content.pm.IPackageManager"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** Construct the stub at attach it to the interface. */</span>        <span class="token keyword">public</span> <span class="token function">Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachInterface</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 定义 Stub 的内部类 Proxy，实现 IPackageManager 接口</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>IPackageManager</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder mRemote<span class="token punctuation">;</span>            <span class="token function">Proxy</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder remote<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mRemote <span class="token operator">=</span> remote<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>所以在 <code>ApplicationPackageManager</code> 里面的 <code>mPM</code> 其实就是 <code>IPackageManager.Stub</code> 内部类 <code>Proxy 对象</code>。</p><p>那对应的 <code>IPackageManager.Stub</code> 是什么？其实就是 <strong><font color="#FF0000">PackageManagerService.java</font></strong> 。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageManagerService</span> <span class="token keyword">extends</span> <span class="token class-name">IPackageManager<span class="token punctuation">.</span>Stub</span> <span class="token keyword">implements</span> <span class="token class-name">PackageSender</span> <span class="token punctuation">{</span></code></pre><p>如下图所示：</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-74ae1197e39297b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原理图.png"></center><h2 id="4-4-小结"><a href="#4-4-小结" class="headerlink" title="4.4 小结"></a>4.4 小结</h2><p>结合上面的知识，再结合 PackageManager、ApplicationPackageManager 和 PackageManagerService ，我们作个小结：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ <strong>&nbsp;IPackageManager 负责通信</strong>：IPackageManager 接口类中定义了很多业务方法，但是由于安全等方面的考虑，Android 对外(即SDK)提供的仅仅是一个子集，该子集被封装在抽象类 PackageManager 中。客户端一般通过 Context 的 getPackageManager 函数返回一个类型为 PackageManager 的对象，该对象的实际类型是 PackageManager 的子类 ApplicationPackageManager 。ApplicationPackageManager 并没有直接参与 Binder 通信，而是通过 mPM 成员变量指向了一个 IPackageManager.Stub.Proxy 类型的对象。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ &nbsp;<strong>AIDL中 的 Binder 服务端是 PackageManagerService</strong>，因为 PackageManagerService 继承自 IPackageManager.Stub 。由于 IPackageManager.Stub 类从 Binder 派生，所以 PackageManagerService 将作为服务端参与 Binder 通信。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ &nbsp;<strong>AIDL中 的 Binder 客户端是 ApplicationPackageManager 中成员变量 mPM</strong>，因为mPM内部指向的是 IPackageManager.Stub.Proxy。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>&nbsp;📕 01. <a href="https://www.jianshu.com/p/c56376916d5e" target="_blank" rel="noopener">APK安装流程详解2——PackageManager简介</a><br>&nbsp;📕 02. <a href="https://www.jianshu.com/p/a301291ca845" target="_blank" rel="noopener">APK安装流程详解3——PackageManager与PackageManagerService</a></p><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>推荐跳转：<a href="https://superandroid.pro/2019/12/31/%E3%80%8AThinking%20in%20Android%E3%80%8B%20--%2001.%20%E5%8D%9A%E5%AE%A2%E7%B4%A2%E5%BC%95/">博客索引（Android 9.0）</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://superandroid.pro/2019/01/05/%E3%80%90%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1%E3%80%91Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%882%EF%BC%89%E4%B9%8B%20%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/">Framework 核心服务之 PMS 钻研（2）- 构造函数</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://superandroid.pro/2019/01/15/%E3%80%90%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1%E3%80%91Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%884%EF%BC%89%E4%B9%8B%20PackageInstaller/">Framework 核心服务之 PMS 钻研（4）- PackageInstaller</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PackageManagerService </tag>
            
            <tag> PackageManager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PackageManagerService 钻研（2）- 构造函数</title>
      <link href="/2019/01/05/02.kuang-jia-he-xin-fu-wu-android-kuang-jia-fu-wu-pian-packagemanagerservice-zuan-yan-2-gou-zao-han-shu/"/>
      <url>/2019/01/05/02.kuang-jia-he-xin-fu-wu-android-kuang-jia-fu-wu-pian-packagemanagerservice-zuan-yan-2-gou-zao-han-shu/</url>
      
        <content type="html"><![CDATA[<p><br></p><p><strong><center><font color="#3A5FCD" size="4">PackageManagerService 系列文章如下（基于 Android 9.0 源码）</font><center></center></center></strong><br></p><table><thead><tr><th style="text-align:center">&nbsp;</th><th style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（1）- 启动流程</font></a></th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（2）- 构造函数</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（3）- PackageManager</font></a></td></tr><tr><td style="text-align:center"><strong><font color="#EE2C2C" size="3">PackageManagerService</font></strong></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（4）- PackageInstaller</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（5）- APK 安装流程（1）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（6）- APK 安装流程（2）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（7）- PackageParser</font></a></td></tr></tbody></table><p><br></p><p><strong><font color="#3A5FCD" size="4">修订日志</font></strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">1、重新梳理 Android 9.0 源码中扫描系统 Apk 及非系统 Apk 的代码逻辑；</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">2、细化源码，添加更为详细的注释说明；</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">3、新增流程图及时序图；</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">4、博文格式，文章排版优化；</font><br><br></p><hr><h1 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h1><h2 id="1-1-核心源码"><a href="#1-1-核心源码" class="headerlink" title="1.1 核心源码"></a>1.1 核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">Process.java</font></td><td>frameworks/base/core/java/android/os/Process.java</td></tr><tr><td><font color="#D15FEE">Settings.java</font></td><td>frameworks/base/services/core/java/com/android/server/pm/Settings.java</td></tr><tr><td><font color="#D15FEE">SystemConfig.java</font></td><td>frameworks/base/core/java/com/android/server/SystemConfig.java</td></tr><tr><td><font color="#D15FEE">SystemServer.java</font></td><td>frameworks/base/services/java/com/android/server/SystemServer.java</td></tr><tr><td><font color="#D15FEE">PackageManagerService.java</font></td><td>frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</td></tr></tbody></table><h2 id="1-2-回顾"><a href="#1-2-回顾" class="headerlink" title="1.2 回顾"></a>1.2 回顾</h2><p>在 PackageManagerService 系列第一篇中，我们将 <strong>“构造函数”</strong> 分成了两部分研究，如下：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong><font color="#551A8B">🍁 &nbsp;构造函数（1） - 前期准备工作</font></strong>&nbsp;<strong><font color="#FF0000">（分析完）</font></strong><a href="https://superandroid.pro/2019/01/01/%E3%80%90%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1%E3%80%91Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89%E4%B9%8B%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/">《Framework 核心服务之 PMS 钻研（1）- 启动流程》</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong><font color="#551A8B">🍁 &nbsp;构造函数（2） - 扫描 Package 和 扫尾工作</font></strong>&nbsp;<strong><font color="#FF0000">（本篇文章要讨论的内容）</font></strong><br><br></p><hr><h1 id="二、扫描-Package"><a href="#二、扫描-Package" class="headerlink" title="二、扫描 Package"></a>二、扫描 Package</h1><p>PMS 构造函数第二阶段（我们前面分析的 Settings 和 XML 解析作为构造函数的第一部分）的工作就是 <code>扫描系统中的 APK</code>了。由于需要逐个扫描文件，因此手机上装的程序越多，PMS 的工作量就越大，系统启动速度也就越慢，这就是为什么你的手机启动速度有快慢的原因<strong><font color="#0000FF">（所以优化开机启动速度，了解 PMS 也是很关键的）</font></strong>。</p><h2 id="2-1-第一阶段（剩余工作）"><a href="#2-1-第一阶段（剩余工作）" class="headerlink" title="2.1 第一阶段（剩余工作）"></a>2.1 第一阶段（剩余工作）</h2><p>接着前面的 PMS 构造函数继续分析源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">PackageManagerService</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Installer installer<span class="token punctuation">,</span>        <span class="token keyword">boolean</span> factoryTest<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyCore<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mInstallLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// writer </span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        mFirstBoot <span class="token operator">=</span> <span class="token operator">!</span>mSettings<span class="token punctuation">.</span><span class="token function">readLPw</span><span class="token punctuation">(</span>sUserManager<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> packageSettingCount <span class="token operator">=</span> mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 清理那些代码路径不存在的异常 package</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> packageSettingCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            PackageSetting ps <span class="token operator">=</span> mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">.</span><span class="token function">valueAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isExternal</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ps<span class="token punctuation">.</span>codePath <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>ps<span class="token punctuation">.</span>codePath<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token operator">&amp;&amp;</span> mSettings<span class="token punctuation">.</span><span class="token function">getDisabledSystemPkgLPr</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                mSettings<span class="token punctuation">.</span><span class="token function">enableSystemPackageLPw</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mFirstBoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">requestCopyPreoptedFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 设置模块来代替 framework-res.apk 中缺省的 ResolverActivity</span>        String customResolverActivity <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>                R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>config_customResolverActivity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>TextUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>customResolverActivity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            customResolverActivity <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mCustomResolverComponentName <span class="token operator">=</span> ComponentName<span class="token punctuation">.</span><span class="token function">unflattenFromString</span><span class="token punctuation">(</span>                    customResolverActivity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 记录扫描开始的时间</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 需要系统提前加载的一些 jar</span>        <span class="token keyword">final</span> String bootClassPath <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"BOOTCLASSPATH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String systemServerClassPath <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"SYSTEMSERVERCLASSPATH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 至此，第一阶段代码全部结束！</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="2-2-扫描系统-Package"><a href="#2-2-扫描系统-Package" class="headerlink" title="2.2 扫描系统 Package"></a>2.2 扫描系统 Package</h2><p>接下来看 PMS 第二阶段工作的核心内容，即 <code>扫描 Package</code>，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">PackageManagerService</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Installer installer<span class="token punctuation">,</span>        <span class="token keyword">boolean</span> factoryTest<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyCore<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>　　　　<span class="token comment" spellcheck="true">// 第一阶段分析结束！</span>    <span class="token comment" spellcheck="true">// 定义 frameworkDir 指向 /system/frameworks 目录</span>    File frameworkDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getRootDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"framework"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> VersionInfo ver <span class="token operator">=</span> mSettings<span class="token punctuation">.</span><span class="token function">getInternalVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mIsUpgrade <span class="token operator">=</span> <span class="token operator">!</span>Build<span class="token punctuation">.</span>FINGERPRINT<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ver<span class="token punctuation">.</span>fingerprint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mIsUpgrade<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">logCriticalInfo</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token string">"Upgrading from "</span> <span class="token operator">+</span>                         ver<span class="token punctuation">.</span>fingerprint <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> Build<span class="token punctuation">.</span>FINGERPRINT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mPromoteSystemApps <span class="token operator">=</span> mIsUpgrade <span class="token operator">&amp;&amp;</span> ver<span class="token punctuation">.</span>sdkVersion <span class="token operator">&lt;=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>LOLLIPOP_MR1<span class="token punctuation">;</span>    mIsPreNUpgrade <span class="token operator">=</span> mIsUpgrade <span class="token operator">&amp;&amp;</span> ver<span class="token punctuation">.</span>sdkVersion <span class="token operator">&lt;</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>N<span class="token punctuation">;</span>    mIsPreNMR1Upgrade <span class="token operator">=</span> mIsUpgrade <span class="token operator">&amp;&amp;</span> ver<span class="token punctuation">.</span>sdkVersion <span class="token operator">&lt;</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>N_MR1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否需要提升权限</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mPromoteSystemApps<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Iterator<span class="token operator">&lt;</span>PackageSetting<span class="token operator">></span> pkgSettingIter <span class="token operator">=</span> mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pkgSettingIter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            PackageSetting ps <span class="token operator">=</span> pkgSettingIter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSystemApp</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 遍历 Settings::mPackages 集合，将系统 APP 加入到</span>                <span class="token comment" spellcheck="true">// PackageManagerService::mExistingSystemPackages</span>                mExistingSystemPackages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    mCacheDir <span class="token operator">=</span> <span class="token function">preparePackageParserCache</span><span class="token punctuation">(</span>mIsUpgrade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义扫描参数</span>    <span class="token keyword">int</span> scanFlags <span class="token operator">=</span> SCAN_BOOTING <span class="token operator">|</span> SCAN_INITIAL<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mIsUpgrade <span class="token operator">||</span> mFirstBoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        scanFlags <span class="token operator">=</span> scanFlags <span class="token operator">|</span> SCAN_FIRST_BOOT_OR_UPGRADE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// private static final String VENDOR_OVERLAY_DIR = "/vendor/overlay";</span>    <span class="token function">scanDirTracedLI</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>VENDOR_OVERLAY_DIR<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 扫描 /vendor/overlay 目录</span>                    mDefParseFlags                    <span class="token operator">|</span> PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">,</span>                     scanFlags                    <span class="token operator">|</span> SCAN_AS_SYSTEM                    <span class="token operator">|</span> SCAN_AS_VENDOR<span class="token punctuation">,</span>                    <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// private static final String PRODUCT_OVERLAY_DIR = "/product/overlay";</span>    <span class="token function">scanDirTracedLI</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>PRODUCT_OVERLAY_DIR<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 扫描 /product/overlay 目录</span>                    mDefParseFlags                    <span class="token operator">|</span> PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">,</span>                     scanFlags                    <span class="token operator">|</span> SCAN_AS_SYSTEM                    <span class="token operator">|</span> SCAN_AS_PRODUCT<span class="token punctuation">,</span>                    <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mParallelPackageParserCallback<span class="token punctuation">.</span><span class="token function">findStaticOverlayPackages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Find base frameworks (resource packages without code).</span>    <span class="token function">scanDirTracedLI</span><span class="token punctuation">(</span>frameworkDir<span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true">// 扫描 /system/frameworks 目录</span>                    mDefParseFlags                    <span class="token operator">|</span> PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">,</span>                     scanFlags                    <span class="token operator">|</span> SCAN_NO_DEX                    <span class="token operator">|</span> SCAN_AS_SYSTEM                    <span class="token operator">|</span> SCAN_AS_PRIVILEGED<span class="token punctuation">,</span>                    <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Collected privileged system packages.</span>    <span class="token keyword">final</span> File privilegedAppDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getRootDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"priv-app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanDirTracedLI</span><span class="token punctuation">(</span>privilegedAppDir<span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true">// 扫描 /system/priv-app 目录</span>                    mDefParseFlags                    <span class="token operator">|</span> PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">,</span>                     scanFlags                    <span class="token operator">|</span> SCAN_AS_SYSTEM                    <span class="token operator">|</span> SCAN_AS_PRIVILEGED<span class="token punctuation">,</span>                    <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Collect ordinary system packages.</span>    <span class="token keyword">final</span> File systemAppDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getRootDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanDirTracedLI</span><span class="token punctuation">(</span>systemAppDir<span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true">// 扫描 /system/app 目录</span>                    mDefParseFlags                    <span class="token operator">|</span> PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">,</span>                     scanFlags                    <span class="token operator">|</span> SCAN_AS_SYSTEM<span class="token punctuation">,</span>                    <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// Collect ordinary vendor packages.</span>    File vendorAppDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getVendorDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        vendorAppDir <span class="token operator">=</span> vendorAppDir<span class="token punctuation">.</span><span class="token function">getCanonicalFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// failed to look up canonical path, continue with original one</span>    <span class="token punctuation">}</span>    <span class="token function">scanDirTracedLI</span><span class="token punctuation">(</span>vendorAppDir<span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true">// 扫描 /vendor/app 目录</span>                    mDefParseFlags                    <span class="token operator">|</span> PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">,</span>                    scanFlags                    <span class="token operator">|</span> SCAN_AS_SYSTEM                    <span class="token operator">|</span> SCAN_AS_VENDOR<span class="token punctuation">,</span>                    <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// Collect all OEM packages.</span>    <span class="token keyword">final</span> File oemAppDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getOemDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanDirTracedLI</span><span class="token punctuation">(</span>oemAppDir<span class="token punctuation">,</span>                         <span class="token comment" spellcheck="true">// 扫描 /oem/app 目录</span>                    mDefParseFlags                    <span class="token operator">|</span> PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">,</span>                     scanFlags                    <span class="token operator">|</span> SCAN_AS_SYSTEM                    <span class="token operator">|</span> SCAN_AS_OEM<span class="token punctuation">,</span>                    <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>｝</code></pre><p>我们发现 PMS 扫描了很多目录，我们列举几个重点说明：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;<strong><code>/system/frameworks</code></strong> ：该目录中的文件都是系统库，例如：framework.jar、services.jar、framework-res.apk。不过 scanDirTracedLI 只扫描 APK 文件，所以 <code>framework-res.apk</code> 是该目录中唯一被扫描的文件。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;<strong><code>/system/app</code></strong> ：该目录下全是默认的系统应用。例如：Browser.apk、SettingsProvider.apk 等。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;<strong><code>/vendor/app</code></strong> ：该目录中的文件由厂商提供，即全是厂商定制的 APK 文件。</p><h3 id="2-2-1-scanDirTracedLI"><a href="#2-2-1-scanDirTracedLI" class="headerlink" title="2.2.1 scanDirTracedLI"></a>2.2.1 scanDirTracedLI</h3><p>PMS 扫描目录统一调用 <code>scanDirTracedLI()</code> 方法（出现次数最多的也是最重要的函数），我们深入跟踪源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scanDirTracedLI</span><span class="token punctuation">(</span>File scanDir<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> parseFlags<span class="token punctuation">,</span>                                           <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> <span class="token keyword">long</span> currentTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 跳转至 scanDirLI 方法</span>        <span class="token function">scanDirLI</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span> currentTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-2-scanDirLI"><a href="#2-2-2-scanDirLI" class="headerlink" title="2.2.2 scanDirLI"></a>2.2.2 scanDirLI</h3><p>下面的重点就转移到 <code>scanDirLI()</code> 方法了：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">scanDirLI</span><span class="token punctuation">(</span>File scanDir<span class="token punctuation">,</span> <span class="token keyword">int</span> parseFlags<span class="token punctuation">,</span> <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> <span class="token keyword">long</span> currentTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 扫描该目录下所有后缀为 .apk 的文件</span>    <span class="token keyword">final</span> File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> scanDir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ArrayUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"No files in app dir "</span> <span class="token operator">+</span> scanDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ParallelPackageParser 是 Android 9.0　新增的一个类，我们可以理解它其实就是一个队列，</span>    <span class="token comment" spellcheck="true">// 收集系统 apk 文件，然后从这个队列里面一个个取出 apk ，调用 PackageParser　解析！</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span>ParallelPackageParser parallelPackageParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParallelPackageParser</span><span class="token punctuation">(</span>            mSeparateProcesses<span class="token punctuation">,</span> mOnlyCore<span class="token punctuation">,</span> mMetrics<span class="token punctuation">,</span> mCacheDir<span class="token punctuation">,</span>            mParallelPackageParserCallback<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Submit files for parsing in parallel    -->    收集 apk</span>        <span class="token keyword">int</span> fileCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> isPackage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">isApkFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">||</span> file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                       <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>PackageInstallerService<span class="token punctuation">.</span><span class="token function">isStageName</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 过滤掉非 apk 文件，如果不是则跳过继续扫描</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isPackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Ignore entries which are not packages</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            parallelPackageParser<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> parseFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>            fileCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Process results one by one              -->    解析 apk</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> fileCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> fileCount<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ParallelPackageParser<span class="token punctuation">.</span>ParseResult parseResult <span class="token operator">=</span> parallelPackageParser<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Throwable throwable <span class="token operator">=</span> parseResult<span class="token punctuation">.</span>throwable<span class="token punctuation">;</span>            <span class="token keyword">int</span> errorCode <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>throwable <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Static shared libraries have synthetic package names</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parseResult<span class="token punctuation">.</span>pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span><span class="token function">isStaticSharedLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">renameStaticSharedLibraryPackage</span><span class="token punctuation">(</span>parseResult<span class="token punctuation">.</span>pkg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>errorCode <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">/*                         * Android 9.0 调用 scanPackageChildLI，                         * Android 8.0 调用 scanPackageLI，                         * Android 7.0 调用 scanPackageTracedLI，                         *                          * 调用 scanPackageChildLI 函数扫描一个特定的 apk 文件，                         * 返回值是 PackageParser 的内部类 Package，                         * 该类的实例代表一个 APK 文件，所以它就是和 apk 文件对应的数据结构。                         */</span>                        <span class="token function">scanPackageChildLI</span><span class="token punctuation">(</span>parseResult<span class="token punctuation">.</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span>                                currentTime<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 扫描 APK 过程中发生异常</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageManagerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    errorCode <span class="token operator">=</span> e<span class="token punctuation">.</span>error<span class="token punctuation">;</span>                    Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to scan "</span> <span class="token operator">+</span> parseResult<span class="token punctuation">.</span>scanFile <span class="token operator">+</span> <span class="token string">": "</span>                                                               <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>throwable <span class="token keyword">instanceof</span> <span class="token class-name">PackageParser<span class="token punctuation">.</span>PackageParserException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Delete invalid userdata apps -- 如果解析失败，并且是非系统 apk</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>scanFlags <span class="token operator">&amp;</span> SCAN_AS_SYSTEM<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>                    errorCode <span class="token operator">!=</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 非系统 Package 扫描失败，删除文件</span>                <span class="token function">removeCodePathLI</span><span class="token punctuation">(</span>parseResult<span class="token punctuation">.</span>scanFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>继续分析 <code>scanPackageChildLI()</code> 方法之前，我们看看 9.0 新增的 <code>ParallelPackageParser</code> 这个类。</p><h4 id="2-2-2-1-ParallelPackageParser"><a href="#2-2-2-1-ParallelPackageParser" class="headerlink" title="2.2.2.1 ParallelPackageParser"></a>2.2.2.1 ParallelPackageParser</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Helper class for parallel parsing of packages using {@link PackageParser}. * &lt;p>Parsing requests are processed by a thread-pool of {@link #MAX_THREADS}. * At any time, at most {@link #QUEUE_CAPACITY} results are kept in RAM&lt;/p> */</span><span class="token keyword">class</span> <span class="token class-name">ParallelPackageParser</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> BlockingQueue<span class="token operator">&lt;</span>ParseResult<span class="token operator">></span> mQueue <span class="token operator">=</span>                                              <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>QUEUE_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ParallelPackageParser</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> separateProcesses<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyCoreApps<span class="token punctuation">,</span>            DisplayMetrics metrics<span class="token punctuation">,</span> File cacheDir<span class="token punctuation">,</span> PackageParser<span class="token punctuation">.</span>Callback callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mSeparateProcesses <span class="token operator">=</span> separateProcesses<span class="token punctuation">;</span>        mOnlyCore <span class="token operator">=</span> onlyCoreApps<span class="token punctuation">;</span>        mMetrics <span class="token operator">=</span> metrics<span class="token punctuation">;</span>        mCacheDir <span class="token operator">=</span> cacheDir<span class="token punctuation">;</span>        mPackageParserCallback <span class="token operator">=</span> callback<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * Submits the file for parsing     * @param scanFile file to scan     * @param parseFlags parse falgs     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submit</span><span class="token punctuation">(</span>File scanFile<span class="token punctuation">,</span> <span class="token keyword">int</span> parseFlags<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            ParseResult pr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParseResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                PackageParser pp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pp<span class="token punctuation">.</span><span class="token function">setSeparateProcesses</span><span class="token punctuation">(</span>mSeparateProcesses<span class="token punctuation">)</span><span class="token punctuation">;</span>                pp<span class="token punctuation">.</span><span class="token function">setOnlyCoreApps</span><span class="token punctuation">(</span>mOnlyCore<span class="token punctuation">)</span><span class="token punctuation">;</span>                pp<span class="token punctuation">.</span><span class="token function">setDisplayMetrics</span><span class="token punctuation">(</span>mMetrics<span class="token punctuation">)</span><span class="token punctuation">;</span>                pp<span class="token punctuation">.</span><span class="token function">setCacheDir</span><span class="token punctuation">(</span>mCacheDir<span class="token punctuation">)</span><span class="token punctuation">;</span>                pp<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span>mPackageParserCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>                pr<span class="token punctuation">.</span>scanFile <span class="token operator">=</span> scanFile<span class="token punctuation">;</span>                pr<span class="token punctuation">.</span>pkg <span class="token operator">=</span> <span class="token function">parsePackage</span><span class="token punctuation">(</span>pp<span class="token punctuation">,</span> scanFile<span class="token punctuation">,</span> parseFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                pr<span class="token punctuation">.</span>throwable <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                mQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>pr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mInterruptedInThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>我们再看下 <code>ParallelPackageParser</code> 的内部类 <code>ParseResult</code>。</p><h4 id="2-2-2-2-ParseResult"><a href="#2-2-2-2-ParseResult" class="headerlink" title="2.2.2.2 ParseResult"></a>2.2.2.2 ParseResult</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Helper class for parallel parsing of packages using {@link PackageParser}. * &lt;p>Parsing requests are processed by a thread-pool of {@link #MAX_THREADS}. * At any time, at most {@link #QUEUE_CAPACITY} results are kept in RAM&lt;/p> */</span><span class="token keyword">class</span> <span class="token class-name">ParallelPackageParser</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">{</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ParseResult</span> <span class="token punctuation">{</span>        PackageParser<span class="token punctuation">.</span>Package pkg<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Parsed package</span>        File scanFile<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// File that was parsed</span>        Throwable throwable<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Set if an error occurs during parsing</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"ParseResult{"</span> <span class="token operator">+</span>　<span class="token string">"pkg="</span> <span class="token operator">+</span> pkg <span class="token operator">+</span>　<span class="token string">", scanFile="</span> <span class="token operator">+</span> scanFile <span class="token operator">+</span>                    <span class="token string">", throwable="</span> <span class="token operator">+</span> throwable <span class="token operator">+</span>　<span class="token string">'}'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Take the parsed package from the parsing queue, waiting if necessary until the element     * appears in the queue.     * @return parsed package     */</span>    <span class="token keyword">public</span> ParseResult <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mInterruptedInThread <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token string">"Interrupted in "</span> <span class="token operator">+</span> mInterruptedInThread<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> mQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// We cannot recover from interrupt here</span>            Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-3-scanPackageChildLI"><a href="#2-2-3-scanPackageChildLI" class="headerlink" title="2.2.3 scanPackageChildLI"></a>2.2.3 scanPackageChildLI</h3><p>源码中，如果 apk 文件没有问题，会走如下流程：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>errorCode <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*         * Android 9.0 调用 scanPackageChildLI，         * Android 8.0 调用 scanPackageLI，         * Android 7.0 调用 scanPackageTracedLI，         *          * 调用 scanPackageChildLI 函数扫描一个特定的 apk 文件，         * 返回值是 PackageParser 的内部类 Package，         * 该类的实例代表一个 APK 文件，所以它就是和 apk 文件对应的数据结构。         *         * PackageParser.Package pkg;    // Parsed package         */</span>        <span class="token function">scanPackageChildLI</span><span class="token punctuation">(</span>parseResult<span class="token punctuation">.</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span>　currentTime<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接下来的重点就是分析 <code>scanPackageChildLI()</code> 方法！</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  Scans a package and returns the newly parsed package.  *  扫描一个 apk 文件并返回 package！ *  @throws PackageManagerException on a parse error. */</span><span class="token keyword">private</span> PackageParser<span class="token punctuation">.</span>Package <span class="token function">scanPackageChildLI</span><span class="token punctuation">(</span>PackageParser<span class="token punctuation">.</span>Package pkg<span class="token punctuation">,</span>        <span class="token keyword">final</span> <span class="token annotation punctuation">@ParseFlags</span> <span class="token keyword">int</span> parseFlags<span class="token punctuation">,</span> <span class="token annotation punctuation">@ScanFlags</span> <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> <span class="token keyword">long</span> currentTime<span class="token punctuation">,</span>        <span class="token annotation punctuation">@Nullable</span> UserHandle user<span class="token punctuation">)</span> <span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>scanFlags <span class="token operator">&amp;</span> SCAN_CHECK_ONLY<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>childPackages <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> pkg<span class="token punctuation">.</span>childPackages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            scanFlags <span class="token operator">|=</span> SCAN_CHECK_ONLY<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        scanFlags <span class="token operator">&amp;=</span> <span class="token operator">~</span>SCAN_CHECK_ONLY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Scan the parent</span>    PackageParser<span class="token punctuation">.</span>Package scannedPkg <span class="token operator">=</span> <span class="token function">addForInitLI</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span>            scanFlags<span class="token punctuation">,</span> currentTime<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Scan the children</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> childCount <span class="token operator">=</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>childPackages <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> pkg<span class="token punctuation">.</span>childPackages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        PackageParser<span class="token punctuation">.</span>Package childPackage <span class="token operator">=</span> pkg<span class="token punctuation">.</span>childPackages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addForInitLI</span><span class="token punctuation">(</span>childPackage<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span>                currentTime<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>scanFlags <span class="token operator">&amp;</span> SCAN_CHECK_ONLY<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">scanPackageChildLI</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span> currentTime<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> scannedPkg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-4-addForInitLI"><a href="#2-2-4-addForInitLI" class="headerlink" title="2.2.4 addForInitLI"></a>2.2.4 addForInitLI</h3><p>继续跟踪源码，调用 <code>addForInitLI()</code> 方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> PackageParser<span class="token punctuation">.</span>Package <span class="token function">addForInitLI</span><span class="token punctuation">(</span>PackageParser<span class="token punctuation">.</span>Package pkg<span class="token punctuation">,</span>        <span class="token annotation punctuation">@ParseFlags</span> <span class="token keyword">int</span> parseFlags<span class="token punctuation">,</span> <span class="token annotation punctuation">@ScanFlags</span> <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> <span class="token keyword">long</span> currentTime<span class="token punctuation">,</span>        <span class="token annotation punctuation">@Nullable</span> UserHandle user<span class="token punctuation">)</span>　<span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> scanSystemPartition <span class="token operator">=</span> <span class="token punctuation">(</span>parseFlags <span class="token operator">&amp;</span>                                          PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> String renamedPkgName<span class="token punctuation">;</span>    <span class="token keyword">final</span> PackageSetting disabledPkgSetting<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> isSystemPkgUpdated<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> pkgAlreadyExists<span class="token punctuation">;</span>    PackageSetting pkgSetting<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/*      * 判断系统 APK 是否需要更新     * final ArrayMap&lt;String, PackageParser.Package> mPackages =      *                                      new ArrayMap&lt;String, PackageParser.Package>();     */</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        renamedPkgName <span class="token operator">=</span> mSettings<span class="token punctuation">.</span><span class="token function">getRenamedPackageLPr</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>mRealPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String realPkgName <span class="token operator">=</span> <span class="token function">getRealPackageName</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> renamedPkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>realPkgName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ensurePackageRenamed</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> renamedPkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> PackageSetting originalPkgSetting <span class="token operator">=</span>                                            <span class="token function">getOriginalPackageLocked</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> renamedPkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> PackageSetting installedPkgSetting <span class="token operator">=</span> mSettings<span class="token punctuation">.</span><span class="token function">getPackageLPr</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>        pkgSetting <span class="token operator">=</span> originalPkgSetting <span class="token operator">==</span> null <span class="token operator">?</span> installedPkgSetting <span class="token operator">:</span> originalPkgSetting<span class="token punctuation">;</span>        pkgAlreadyExists <span class="token operator">=</span> pkgSetting <span class="token operator">!=</span> null<span class="token punctuation">;</span>        <span class="token keyword">final</span> String disabledPkgName <span class="token operator">=</span> pkgAlreadyExists <span class="token operator">?</span> pkgSetting<span class="token punctuation">.</span>name <span class="token operator">:</span> pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">;</span>        disabledPkgSetting <span class="token operator">=</span> mSettings<span class="token punctuation">.</span><span class="token function">getDisabledSystemPkgLPr</span><span class="token punctuation">(</span>disabledPkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>        isSystemPkgUpdated <span class="token operator">=</span> disabledPkgSetting <span class="token operator">!=</span> null<span class="token punctuation">;</span>        <span class="token keyword">final</span> SharedUserSetting sharedUserSetting <span class="token operator">=</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>mSharedUserId <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token operator">?</span> mSettings<span class="token punctuation">.</span><span class="token function">getSharedUserLPw</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>mSharedUserId<span class="token punctuation">,</span>                        <span class="token number">0</span> <span class="token comment" spellcheck="true">/*pkgFlags*/</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">/*pkgPrivateFlags*/</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token operator">:</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scanSystemPartition<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isSystemPkgUpdated<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> scannedChildCount <span class="token operator">=</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>childPackages <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        <span class="token operator">?</span> pkg<span class="token punctuation">.</span>childPackages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> disabledChildCount <span class="token operator">=</span> disabledPkgSetting<span class="token punctuation">.</span>childPackageNames <span class="token operator">!=</span> null                        <span class="token operator">?</span> disabledPkgSetting<span class="token punctuation">.</span>childPackageNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> disabledChildCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　                String disabledChildPackageName <span class="token operator">=</span>                            disabledPkgSetting<span class="token punctuation">.</span>childPackageNames<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">boolean</span> disabledPackageAvailable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> scannedChildCount<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        PackageParser<span class="token punctuation">.</span>Package childPkg <span class="token operator">=</span> pkg<span class="token punctuation">.</span>childPackages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>childPkg<span class="token punctuation">.</span>packageName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>disabledChildPackageName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            disabledPackageAvailable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>disabledPackageAvailable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mSettings<span class="token punctuation">.</span><span class="token function">removeDisabledSystemPackageLPw</span><span class="token punctuation">(</span>disabledChildPackageName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// we're updating the disabled package, so, scan it as the package setting</span>                <span class="token keyword">final</span> ScanRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScanRequest</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> sharedUserSetting<span class="token punctuation">,</span> null<span class="token punctuation">,</span>                        disabledPkgSetting <span class="token comment" spellcheck="true">/* pkgSetting */</span><span class="token punctuation">,</span> null <span class="token comment" spellcheck="true">/* disabledPkgSetting */</span><span class="token punctuation">,</span>                        null <span class="token comment" spellcheck="true">/* originalPkgSetting */</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span>                        <span class="token punctuation">(</span>pkg <span class="token operator">==</span> mPlatformPackage<span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">applyPolicy</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span> mPlatformPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">scanPackageOnlyLI</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> mFactoryTest<span class="token punctuation">,</span> <span class="token operator">-</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> newPkgChangedPaths <span class="token operator">=</span>            pkgAlreadyExists <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>pkgSetting<span class="token punctuation">.</span>codePathString<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>codePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> newPkgVersionGreater <span class="token operator">=</span>            pkgAlreadyExists <span class="token operator">&amp;&amp;</span> pkg<span class="token punctuation">.</span><span class="token function">getLongVersionCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> pkgSetting<span class="token punctuation">.</span>versionCode<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> isSystemPkgBetter <span class="token operator">=</span> scanSystemPartition <span class="token operator">&amp;&amp;</span> isSystemPkgUpdated            <span class="token operator">&amp;&amp;</span> newPkgChangedPaths <span class="token operator">&amp;&amp;</span> newPkgVersionGreater<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isSystemPkgBetter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 更新安装包到系统分区中</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 从 PackageManagerService 的安装包列表中删除该包</span>            mPackages<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>pkgSetting<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建安装参数 InstallArgs</span>        <span class="token keyword">final</span> InstallArgs args <span class="token operator">=</span> <span class="token function">createInstallArgsForExisting</span><span class="token punctuation">(</span>                <span class="token function">packageFlagsToInstallFlags</span><span class="token punctuation">(</span>pkgSetting<span class="token punctuation">)</span><span class="token punctuation">,</span> pkgSetting<span class="token punctuation">.</span>codePathString<span class="token punctuation">,</span>                pkgSetting<span class="token punctuation">.</span>resourcePathString<span class="token punctuation">,</span> <span class="token function">getAppDexInstructionSets</span><span class="token punctuation">(</span>pkgSetting<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        args<span class="token punctuation">.</span><span class="token function">cleanUpResourcesLI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mSettings<span class="token punctuation">.</span><span class="token function">enableSystemPackageLPw</span><span class="token punctuation">(</span>pkgSetting<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 安装包校验</span>    <span class="token function">collectCertificatesLI</span><span class="token punctuation">(</span>pkgSetting<span class="token punctuation">,</span> pkg<span class="token punctuation">,</span> forceCollect<span class="token punctuation">,</span> skipVerify<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * A new system app appeared, but we already had a non-system one of the     * same name installed earlier.     *     * 当我们安装一个系统 apk 的时候，发现已经有了一个相同包名的 apk，     * 而且这个相同包名 apk 是在非系统的分区中     */</span>    <span class="token keyword">boolean</span> shouldHideSystemApp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// A new application appeared on /system, but, we already have a copy of</span>    <span class="token comment" spellcheck="true">// the application installed on /data.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>scanSystemPartition <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isSystemPkgUpdated <span class="token operator">&amp;&amp;</span> pkgAlreadyExists            <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>pkgSetting<span class="token punctuation">.</span><span class="token function">isSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pkg<span class="token punctuation">.</span>mSigningDetails<span class="token punctuation">.</span><span class="token function">checkCapability</span><span class="token punctuation">(</span>pkgSetting<span class="token punctuation">.</span>signatures<span class="token punctuation">.</span>mSigningDetails<span class="token punctuation">,</span>                PackageParser<span class="token punctuation">.</span>SigningDetails<span class="token punctuation">.</span>CertCapabilities<span class="token punctuation">.</span>INSTALLED_DATA<span class="token punctuation">)</span>                        <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>pkgSetting<span class="token punctuation">.</span>signatures<span class="token punctuation">.</span>mSigningDetails<span class="token punctuation">.</span><span class="token function">checkCapability</span><span class="token punctuation">(</span>                                pkg<span class="token punctuation">.</span>mSigningDetails<span class="token punctuation">,</span>                                PackageParser<span class="token punctuation">.</span>SigningDetails<span class="token punctuation">.</span>CertCapabilities<span class="token punctuation">.</span>ROLLBACK<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">logCriticalInfo</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>WARN<span class="token punctuation">,</span> <span class="token string">"System package signature mismatch;"</span>                                           <span class="token operator">+</span> <span class="token string">" name: "</span> <span class="token operator">+</span> pkgSetting<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">(</span>PackageFreezer freezer <span class="token operator">=</span> <span class="token function">freezePackage</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                    <span class="token string">"scanPackageInternalLI"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果两个 apk 签名不匹配，则调用 deletePackageLI 方法清除 apk 文件及其数据</span>                <span class="token function">deletePackageLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            pkgSetting <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newPkgVersionGreater<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// The application on /system is newer than the application on /data.</span>            <span class="token comment" spellcheck="true">// Simply remove the application on /data [keeping application data]</span>            <span class="token comment" spellcheck="true">// and replace it with the version on /system.</span>            <span class="token function">logCriticalInfo</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>WARN<span class="token punctuation">,</span> <span class="token string">"System package enabled;"</span> <span class="token operator">+</span> <span class="token string">" name: "</span> <span class="token operator">+</span> pkgSetting<span class="token punctuation">.</span>name                    <span class="token operator">+</span> <span class="token string">"; "</span> <span class="token operator">+</span> pkgSetting<span class="token punctuation">.</span>versionCode <span class="token operator">+</span> <span class="token string">" --> "</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span><span class="token function">getLongVersionCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">+</span> <span class="token string">"; "</span> <span class="token operator">+</span> pkgSetting<span class="token punctuation">.</span>codePathString <span class="token operator">+</span> <span class="token string">" --> "</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span>codePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 更新系统 apk 程序</span>            InstallArgs args <span class="token operator">=</span> <span class="token function">createInstallArgsForExisting</span><span class="token punctuation">(</span>                    <span class="token function">packageFlagsToInstallFlags</span><span class="token punctuation">(</span>pkgSetting<span class="token punctuation">)</span><span class="token punctuation">,</span> pkgSetting<span class="token punctuation">.</span>codePathString<span class="token punctuation">,</span>                    pkgSetting<span class="token punctuation">.</span>resourcePathString<span class="token punctuation">,</span> <span class="token function">getAppDexInstructionSets</span><span class="token punctuation">(</span>pkgSetting<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mInstallLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                args<span class="token punctuation">.</span><span class="token function">cleanUpResourcesLI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// The application on /system is older than the application on /data. Hide</span>            <span class="token comment" spellcheck="true">// the application on /system and the version on /data will be scanned later</span>            <span class="token comment" spellcheck="true">// and re-added like an update.</span>            shouldHideSystemApp <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">logCriticalInfo</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span>                    <span class="token string">"System package disabled;"</span>                    <span class="token operator">+</span> <span class="token string">" name: "</span> <span class="token operator">+</span> pkgSetting<span class="token punctuation">.</span>name                    <span class="token operator">+</span> <span class="token string">"; old: "</span> <span class="token operator">+</span> pkgSetting<span class="token punctuation">.</span>codePathString <span class="token operator">+</span> <span class="token string">" @ "</span> <span class="token operator">+</span> pkgSetting<span class="token punctuation">.</span>versionCode                    <span class="token operator">+</span> <span class="token string">"; new: "</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span>codePath <span class="token operator">+</span> <span class="token string">" @ "</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span>codePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 🔥 🔥 🔥 🔥 🔥 🔥 重点方法 🔥 🔥 🔥 🔥 🔥 🔥</span>    <span class="token keyword">final</span> PackageParser<span class="token punctuation">.</span>Package scannedPkg <span class="token operator">=</span> <span class="token function">scanPackageNewLI</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags            <span class="token operator">|</span> SCAN_UPDATE_SIGNATURE<span class="token punctuation">,</span> currentTime<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果新安装的系统 APK 会被旧的 APK 数据覆盖，</span>    <span class="token comment" spellcheck="true">// 所以需要隐藏隐藏系统应用程序，并重新扫描 /data/app 目录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldHideSystemApp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mSettings<span class="token punctuation">.</span><span class="token function">disableSystemPackageLPw</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> scannedPkg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-5-scanPackageNewLI"><a href="#2-2-5-scanPackageNewLI" class="headerlink" title="2.2.5 scanPackageNewLI"></a>2.2.5 scanPackageNewLI</h3><p>我们再来看看 <code>scanPackageNewLI()</code> 方法源码！</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> PackageParser<span class="token punctuation">.</span>Package <span class="token function">scanPackageNewLI</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> PackageParser<span class="token punctuation">.</span>Package pkg<span class="token punctuation">,</span>        <span class="token keyword">final</span> <span class="token annotation punctuation">@ParseFlags</span> <span class="token keyword">int</span> parseFlags<span class="token punctuation">,</span> <span class="token annotation punctuation">@ScanFlags</span> <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> <span class="token keyword">long</span> currentTime<span class="token punctuation">,</span>        <span class="token annotation punctuation">@Nullable</span> UserHandle user<span class="token punctuation">)</span> <span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>    <span class="token keyword">final</span> String renamedPkgName <span class="token operator">=</span> mSettings<span class="token punctuation">.</span><span class="token function">getRenamedPackageLPr</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>mRealPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> String realPkgName <span class="token operator">=</span> <span class="token function">getRealPackageName</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> renamedPkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>realPkgName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensurePackageRenamed</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> renamedPkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> PackageSetting originalPkgSetting <span class="token operator">=</span>                                            <span class="token function">getOriginalPackageLocked</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> renamedPkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> PackageSetting pkgSetting <span class="token operator">=</span> mSettings<span class="token punctuation">.</span><span class="token function">getPackageLPr</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> PackageSetting disabledPkgSetting <span class="token operator">=</span>                         mSettings<span class="token punctuation">.</span><span class="token function">getDisabledSystemPkgLPr</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mTransferedPackages<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Package "</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span>packageName                <span class="token operator">+</span> <span class="token string">" was transferred to another, but its .apk remains"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    scanFlags <span class="token operator">=</span> <span class="token function">adjustScanFlags</span><span class="token punctuation">(</span>scanFlags<span class="token punctuation">,</span> pkgSetting<span class="token punctuation">,</span> disabledPkgSetting<span class="token punctuation">,</span> user<span class="token punctuation">,</span> pkg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">applyPolicy</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span> mPlatformPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertPackageIsValid</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>        SharedUserSetting sharedUserSetting <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>mSharedUserId <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// SIDE EFFECTS; may potentially allocate a new shared user</span>            sharedUserSetting <span class="token operator">=</span> mSettings<span class="token punctuation">.</span><span class="token function">getSharedUserLPw</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>mSharedUserId<span class="token punctuation">,</span>                            <span class="token number">0</span> <span class="token comment" spellcheck="true">/*pkgFlags*/</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">/*pkgPrivateFlags*/</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/*create*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_PACKAGE_SCANNING<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>parseFlags <span class="token operator">&amp;</span> PackageParser<span class="token punctuation">.</span>PARSE_CHATTY<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Shared UserID "</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span>mSharedUserId                            <span class="token operator">+</span> <span class="token string">" (uid="</span> <span class="token operator">+</span> sharedUserSetting<span class="token punctuation">.</span>userId <span class="token operator">+</span> <span class="token string">"):"</span>                            <span class="token operator">+</span> <span class="token string">" packages="</span> <span class="token operator">+</span> sharedUserSetting<span class="token punctuation">.</span>packages<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> scanSucceeded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> ScanRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScanRequest</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> sharedUserSetting<span class="token punctuation">,</span>                    pkgSetting <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> pkgSetting<span class="token punctuation">.</span>pkg<span class="token punctuation">,</span> pkgSetting<span class="token punctuation">,</span>                     disabledPkgSetting<span class="token punctuation">,</span> originalPkgSetting<span class="token punctuation">,</span> realPkgName<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span>                     scanFlags<span class="token punctuation">,</span> <span class="token punctuation">(</span>pkg <span class="token operator">==</span> mPlatformPackage<span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> ScanResult result <span class="token operator">=</span> <span class="token function">scanPackageOnlyLI</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> mFactoryTest<span class="token punctuation">,</span> currentTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 将 pkg 中的数据保存到对应的 PMS 变量中，用于以后的管理查询调用等</span>                <span class="token comment" spellcheck="true">// 🔥 🔥 🔥 🔥 🔥 🔥 重点方法 🔥 🔥 🔥 🔥 🔥 🔥</span>                <span class="token function">commitScanResultsLocked</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            scanSucceeded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scanSucceeded <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>scanFlags <span class="token operator">&amp;</span> SCAN_DELETE_DATA_ON_FAILURES<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// DELETE_DATA_ON_FAILURES is only used by frozen paths</span>                  <span class="token function">destroyAppDataLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>USER_ALL<span class="token punctuation">,</span>                          StorageManager<span class="token punctuation">.</span>FLAG_STORAGE_DE <span class="token operator">|</span> StorageManager<span class="token punctuation">.</span>FLAG_STORAGE_CE<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">destroyAppProfilesLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>USER_ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pkg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-5-commitScanResultsLocked"><a href="#2-2-5-commitScanResultsLocked" class="headerlink" title="2.2.5 commitScanResultsLocked"></a>2.2.5 commitScanResultsLocked</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">commitScanResultsLocked</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ScanRequest request<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> ScanResult result<span class="token punctuation">)</span>        <span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>scanFlags <span class="token operator">&amp;</span> SCAN_CHECK_ONLY<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldPkgSetting <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>oldPkgSetting<span class="token punctuation">.</span>name<span class="token punctuation">,</span> oldPkgSetting<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> userId <span class="token operator">=</span> user <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> user<span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Modify state for the given package setting</span>        <span class="token comment" spellcheck="true">// 将 pkg 中的数据保存到对应的 PMS 变量中，用于以后的管理查询调用等</span>        <span class="token comment" spellcheck="true">// 🔥 🔥 🔥 🔥 🔥 🔥 重点方法 🔥 🔥 🔥 🔥 🔥 🔥</span>        <span class="token function">commitPackageSettings</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> oldPkg<span class="token punctuation">,</span> pkgSetting<span class="token punctuation">,</span> user<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span>                <span class="token punctuation">(</span>parseFlags <span class="token operator">&amp;</span> PackageParser<span class="token punctuation">.</span>PARSE_CHATTY<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">/*chatty*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pkgSetting<span class="token punctuation">.</span><span class="token function">getInstantApp</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mInstantAppRegistry<span class="token punctuation">.</span><span class="token function">addInstantAppLPw</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> pkgSetting<span class="token punctuation">.</span>appId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-6-commitPackageSettings"><a href="#2-2-6-commitPackageSettings" class="headerlink" title="2.2.6 commitPackageSettings"></a>2.2.6 commitPackageSettings</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Adds a scanned package to the system. When this method is finished, the package will * be available for query, resolution, etc... */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">commitPackageSettings</span><span class="token punctuation">(</span>PackageParser<span class="token punctuation">.</span>Package pkg<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Nullable</span> PackageParser<span class="token punctuation">.</span>Package oldPkg<span class="token punctuation">,</span> PackageSetting pkgSetting<span class="token punctuation">,</span>             UserHandle user<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token annotation punctuation">@ScanFlags</span> <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> <span class="token keyword">boolean</span> chatty<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> String pkgName <span class="token operator">=</span> pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// mCustomResolverComponentName 是从系统资源中读出的，可以配置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mCustomResolverComponentName <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span>                mCustomResolverComponentName<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里的用途和下面判断 packageName 是否为 "android" 有联系，</span>        <span class="token comment" spellcheck="true">// 因为调用 setUpCustomResolverActivity(pkg) 后 mResolverReplaced 为true</span>        <span class="token function">setUpCustomResolverActivity</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 针对包名为 "android" 的 apk 进行处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"android"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>scanFlags <span class="token operator">&amp;</span> SCAN_CHECK_ONLY<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Set up information for our fall-back user intent resolution activity.</span>                <span class="token comment" spellcheck="true">// 为我们回退的页面配置信息</span>                mPlatformPackage <span class="token operator">=</span> pkg<span class="token punctuation">;</span>                pkg<span class="token punctuation">.</span>mVersionCode <span class="token operator">=</span> mSdkVersion<span class="token punctuation">;</span>                pkg<span class="token punctuation">.</span>mVersionCodeMajor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                mAndroidApplication <span class="token operator">=</span> pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果上面的代码中调用了 setUpCustomResolverActivity 方法，</span>                <span class="token comment" spellcheck="true">// 在 setUpCustomResolverActivity 方法里面设置了 mResolverReplaced = true</span>                <span class="token comment" spellcheck="true">// 如果没有调用 setUpCustomResolverActivity 方法，</span>                <span class="token comment" spellcheck="true">// 配置相应 mResolveActivity 的属性</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mResolverReplaced<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mResolveActivity<span class="token punctuation">.</span>applicationInfo <span class="token operator">=</span> mAndroidApplication<span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>name <span class="token operator">=</span> ResolverActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>packageName <span class="token operator">=</span> mAndroidApplication<span class="token punctuation">.</span>packageName<span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>processName <span class="token operator">=</span> <span class="token string">"system:ui"</span><span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>launchMode <span class="token operator">=</span> ActivityInfo<span class="token punctuation">.</span>LAUNCH_MULTIPLE<span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>documentLaunchMode <span class="token operator">=</span> ActivityInfo<span class="token punctuation">.</span>DOCUMENT_LAUNCH_NEVER<span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>flags <span class="token operator">=</span> ActivityInfo<span class="token punctuation">.</span>FLAG_EXCLUDE_FROM_RECENTS<span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>theme <span class="token operator">=</span> R<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Theme_Material_Dialog_Alert<span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>exported <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>resizeMode <span class="token operator">=</span> ActivityInfo<span class="token punctuation">.</span>RESIZE_MODE_RESIZEABLE<span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>configChanges <span class="token operator">=</span> ActivityInfo<span class="token punctuation">.</span>CONFIG_SCREEN_SIZE                            <span class="token operator">|</span> ActivityInfo<span class="token punctuation">.</span>CONFIG_SMALLEST_SCREEN_SIZE                            <span class="token operator">|</span> ActivityInfo<span class="token punctuation">.</span>CONFIG_SCREEN_LAYOUT                            <span class="token operator">|</span> ActivityInfo<span class="token punctuation">.</span>CONFIG_ORIENTATION                            <span class="token operator">|</span> ActivityInfo<span class="token punctuation">.</span>CONFIG_KEYBOARD                            <span class="token operator">|</span> ActivityInfo<span class="token punctuation">.</span>CONFIG_KEYBOARD_HIDDEN<span class="token punctuation">;</span>                    mResolveInfo<span class="token punctuation">.</span>activityInfo <span class="token operator">=</span> mResolveActivity<span class="token punctuation">;</span>                    mResolveInfo<span class="token punctuation">.</span>priority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    mResolveInfo<span class="token punctuation">.</span>preferredOrder <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    mResolveInfo<span class="token punctuation">.</span>match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    mResolveComponentName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span>                             mAndroidApplication<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> mResolveActivity<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 在此之前，四大组件的信息都是 Package 对象的私有变量，通过下面的代码，</span>        <span class="token comment" spellcheck="true">// 将他们注册到 PackageManagerService 里面，</span>        <span class="token comment" spellcheck="true">// 这样 PackageManagerService 就有了所有的组件信息</span>        <span class="token keyword">int</span> N <span class="token operator">=</span> pkg<span class="token punctuation">.</span>providers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder r <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册 pkg 里面的 provider 到 PackageManagerService 上的 mProvider 上</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            PackageParser<span class="token punctuation">.</span>Provider p <span class="token operator">=</span> pkg<span class="token punctuation">.</span>providers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置进程名称，如果在 AndroidManifest 里面配置了进程名称，就以配置为准，</span>            <span class="token comment" spellcheck="true">// 如果没有配置，就是默认包名</span>            p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>processName <span class="token operator">=</span> <span class="token function">fixProcessName</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>processName<span class="token punctuation">,</span>                        p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>processName<span class="token punctuation">)</span><span class="token punctuation">;</span>            mProviders<span class="token punctuation">.</span><span class="token function">addProvider</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span>syncable <span class="token operator">=</span> p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>isSyncable<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>authority <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String names<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>authority<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>authority <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> names<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>syncable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageParser<span class="token punctuation">.</span>Provider</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                        p<span class="token punctuation">.</span>syncable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mProvidersByAuthority<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mProvidersByAuthority<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>authority <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>authority <span class="token operator">=</span> names<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>authority <span class="token operator">=</span> p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>authority <span class="token operator">+</span> <span class="token string">";"</span> <span class="token operator">+</span> names<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        PackageParser<span class="token punctuation">.</span>Provider other <span class="token operator">=</span> mProvidersByAuthority<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>chatty<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    r<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                r<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 注册该 Package 中的 service 到 PackageManagerService 的 mServices 上</span>        N <span class="token operator">=</span> pkg<span class="token punctuation">.</span>services<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            mServices<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 注册 pkg 里面的 receiver 到 PackageManagerService 上的 mReceivers 上</span>        N <span class="token operator">=</span> pkg<span class="token punctuation">.</span>receivers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            mReceivers<span class="token punctuation">.</span><span class="token function">addActivity</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"receiver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 注册 pkg 里面的 activity 到 PackageManagerService 上的 mActivities 上</span>        N <span class="token operator">=</span> pkg<span class="token punctuation">.</span>activities<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            mActivities<span class="token punctuation">.</span><span class="token function">addActivity</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"activity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Don't allow ephemeral applications to define new permissions groups.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>scanFlags <span class="token operator">&amp;</span> SCAN_AS_INSTANT_APP<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Permission groups from package "</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span>packageName                    <span class="token operator">+</span> <span class="token string">" ignored: instant apps cannot define new permission groups."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mPermissionManager<span class="token punctuation">.</span><span class="token function">addAllPermissionGroups</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> chatty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Don't allow ephemeral applications to define new permissions.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>scanFlags <span class="token operator">&amp;</span> SCAN_AS_INSTANT_APP<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Permissions from package "</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span>packageName                    <span class="token operator">+</span> <span class="token string">" ignored: instant apps cannot define new permissions."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mPermissionManager<span class="token punctuation">.</span><span class="token function">addAllPermissions</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> chatty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//  注册 pkg 里面的 instrumentation 到 PackageManagerService 的 mInstrumentation 中</span>        <span class="token comment" spellcheck="true">// Instrumentation 用来跟踪本应用内的 application 及 activity 的生命周期</span>        N <span class="token operator">=</span> pkg<span class="token punctuation">.</span>instrumentation<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            PackageParser<span class="token punctuation">.</span>Instrumentation a <span class="token operator">=</span> pkg<span class="token punctuation">.</span>instrumentation<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span>info<span class="token punctuation">.</span>packageName <span class="token operator">=</span> pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">;</span>            a<span class="token punctuation">.</span>info<span class="token punctuation">.</span>sourceDir <span class="token operator">=</span> pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>sourceDir<span class="token punctuation">;</span>            a<span class="token punctuation">.</span>info<span class="token punctuation">.</span>publicSourceDir <span class="token operator">=</span> pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>publicSourceDir<span class="token punctuation">;</span>            a<span class="token punctuation">.</span>info<span class="token punctuation">.</span>splitNames <span class="token operator">=</span> pkg<span class="token punctuation">.</span>splitNames<span class="token punctuation">;</span>            a<span class="token punctuation">.</span>info<span class="token punctuation">.</span>splitSourceDirs <span class="token operator">=</span> pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>splitSourceDirs<span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            mInstrumentation<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getComponentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果有包内广播</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>protectedBroadcasts <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            N <span class="token operator">=</span> pkg<span class="token punctuation">.</span>protectedBroadcasts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mProtectedBroadcasts<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mProtectedBroadcasts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>protectedBroadcasts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-3-扫描非系统-Package"><a href="#2-3-扫描非系统-Package" class="headerlink" title="2.3 扫描非系统 Package"></a>2.3 扫描非系统 Package</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*  * mOnlyCore 用于控制是否扫描非系统 Package */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mOnlyCore<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do this first before mucking with mPackages for the "expecting better" case</span>    <span class="token keyword">final</span> Iterator<span class="token operator">&lt;</span>PackageParser<span class="token punctuation">.</span>Package<span class="token operator">></span> pkgIterator <span class="token operator">=</span> mPackages<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pkgIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> PackageParser<span class="token punctuation">.</span>Package pkg <span class="token operator">=</span> pkgIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>isStub<span class="token punctuation">)</span> <span class="token punctuation">{</span>            stubSystemApps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> Iterator<span class="token operator">&lt;</span>PackageSetting<span class="token operator">></span> psit <span class="token operator">=</span> mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>psit<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        PackageSetting ps <span class="token operator">=</span> psit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * If this is not a system app, it can't be a         * disable system app.         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>pkgFlags <span class="token operator">&amp;</span> ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*         * If the package is scanned, it's not erased.         */</span>        <span class="token keyword">final</span> PackageParser<span class="token punctuation">.</span>Package scannedPkg <span class="token operator">=</span> mPackages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scannedPkg <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mSettings<span class="token punctuation">.</span><span class="token function">isDisabledSystemPackageLPr</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">removePackageLI</span><span class="token punctuation">(</span>scannedPkg<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mExpectingBetter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>name<span class="token punctuation">,</span> ps<span class="token punctuation">.</span>codePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mSettings<span class="token punctuation">.</span><span class="token function">isDisabledSystemPackageLPr</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            psit<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> PackageSetting disabledPs <span class="token operator">=</span>                    mSettings<span class="token punctuation">.</span><span class="token function">getDisabledSystemPkgLPr</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>disabledPs<span class="token punctuation">.</span>codePath <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>disabledPs<span class="token punctuation">.</span>codePath<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">||</span> disabledPs<span class="token punctuation">.</span>pkg <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                possiblyDeletedUpdatedSystemApps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mOnlyCore<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 扫描 /data/app 目录</span>    <span class="token function">scanDirTracedLI</span><span class="token punctuation">(</span>mAppInstallDir<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> scanFlags <span class="token operator">|</span> SCAN_REQUIRE_KNOWN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 扫描 /data/app-private 目录</span>    <span class="token function">scanDirTracedLI</span><span class="token punctuation">(</span>mDrmAppPrivateInstallDir<span class="token punctuation">,</span> mDefParseFlags            <span class="token operator">|</span> PackageParser<span class="token punctuation">.</span>PARSE_FORWARD_LOCK<span class="token punctuation">,</span>            scanFlags <span class="token operator">|</span> SCAN_REQUIRE_KNOWN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里检查用户目录下升级文件是否还存在，然后进行处理</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String deletedAppName <span class="token operator">:</span> possiblyDeletedUpdatedSystemApps<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PackageParser<span class="token punctuation">.</span>Package deletedPkg <span class="token operator">=</span> mPackages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>deletedAppName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从 mSettings.mDisabledSysPackages 变量中移除去此应用</span>        mSettings<span class="token punctuation">.</span><span class="token function">removeDisabledSystemPackageLPw</span><span class="token punctuation">(</span>deletedAppName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String msg<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用户目录中也没有升级包，则肯定是残留的应用信息，则把它的数据目录删除掉</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>deletedPkg <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            msg <span class="token operator">=</span> <span class="token string">"Updated system package "</span> <span class="token operator">+</span> deletedAppName                    <span class="token operator">+</span> <span class="token string">" no longer exists; removing its data"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果在用户空间找到了文件，则说明系统目录下的文件可能被删除了，</span>        <span class="token comment" spellcheck="true">// 因此，把应用的系统属性去掉，以普通应用的方式运行</span>            msg <span class="token operator">=</span> <span class="token string">"Updated system package + "</span> <span class="token operator">+</span> deletedAppName                    <span class="token operator">+</span> <span class="token string">" no longer exists; revoking system privileges"</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> PackageSetting deletedPs <span class="token operator">=</span> mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>deletedAppName<span class="token punctuation">)</span><span class="token punctuation">;</span>            deletedPkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">;</span>            deletedPs<span class="token punctuation">.</span>pkgFlags <span class="token operator">&amp;=</span> <span class="token operator">~</span>ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 报告系统发生了不一致的情况</span>        <span class="token function">logCriticalInfo</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>WARN<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 处理 mExpectingBetter 列表，这个列表的应用是带有升级包的系统的应用，</span>    <span class="token comment" spellcheck="true">// 前面把他们从 mPackages 列表中清除了并放到 mExpectingBetter 列表，</span>    <span class="token comment" spellcheck="true">// 最后也对他们进行扫描处理，但不会放到 mPackages 中。</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mExpectingBetter<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> String packageName <span class="token operator">=</span> mExpectingBetter<span class="token punctuation">.</span><span class="token function">keyAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mPackages<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> File scanFile <span class="token operator">=</span> mExpectingBetter<span class="token punctuation">.</span><span class="token function">valueAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token annotation punctuation">@ParseFlags</span> <span class="token keyword">int</span> reparseFlags<span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token annotation punctuation">@ScanFlags</span> <span class="token keyword">int</span> rescanFlags<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 确保应用位于下面的系统应用目录中，如果不在，则不需要处理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>FileUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>privilegedAppDir<span class="token punctuation">,</span> scanFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                reparseFlags <span class="token operator">=</span>                        mDefParseFlags <span class="token operator">|</span>                        PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">;</span>                rescanFlags <span class="token operator">=</span>                        scanFlags                        <span class="token operator">|</span> SCAN_AS_SYSTEM                        <span class="token operator">|</span> SCAN_AS_PRIVILEGED<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>FileUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>systemAppDir<span class="token punctuation">,</span> scanFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                reparseFlags <span class="token operator">=</span>                        mDefParseFlags <span class="token operator">|</span>                        PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">;</span>                rescanFlags <span class="token operator">=</span>                        scanFlags                        <span class="token operator">|</span> SCAN_AS_SYSTEM<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>FileUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>privilegedVendorAppDir<span class="token punctuation">,</span> scanFile<span class="token punctuation">)</span>                       <span class="token operator">||</span> FileUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>privilegedOdmAppDir<span class="token punctuation">,</span> scanFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                reparseFlags <span class="token operator">=</span>                        mDefParseFlags <span class="token operator">|</span>                        PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">;</span>                rescanFlags <span class="token operator">=</span>                        scanFlags                        <span class="token operator">|</span> SCAN_AS_SYSTEM                        <span class="token operator">|</span> SCAN_AS_VENDOR                        <span class="token operator">|</span> SCAN_AS_PRIVILEGED<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>FileUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>vendorAppDir<span class="token punctuation">,</span> scanFile<span class="token punctuation">)</span>                       <span class="token operator">||</span> FileUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>odmAppDir<span class="token punctuation">,</span> scanFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                reparseFlags <span class="token operator">=</span>                        mDefParseFlags <span class="token operator">|</span>                        PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">;</span>                rescanFlags <span class="token operator">=</span>                        scanFlags                        <span class="token operator">|</span> SCAN_AS_SYSTEM                        <span class="token operator">|</span> SCAN_AS_VENDOR<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>FileUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>oemAppDir<span class="token punctuation">,</span> scanFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                reparseFlags <span class="token operator">=</span>                        mDefParseFlags <span class="token operator">|</span>                        PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">;</span>                rescanFlags <span class="token operator">=</span>                        scanFlags                        <span class="token operator">|</span> SCAN_AS_SYSTEM                        <span class="token operator">|</span> SCAN_AS_OEM<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>FileUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>privilegedProductAppDir<span class="token punctuation">,</span> scanFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                reparseFlags <span class="token operator">=</span>                        mDefParseFlags <span class="token operator">|</span>                        PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">;</span>                rescanFlags <span class="token operator">=</span>                        scanFlags                        <span class="token operator">|</span> SCAN_AS_SYSTEM                        <span class="token operator">|</span> SCAN_AS_PRODUCT                        <span class="token operator">|</span> SCAN_AS_PRIVILEGED<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>FileUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>productAppDir<span class="token punctuation">,</span> scanFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                reparseFlags <span class="token operator">=</span>                        mDefParseFlags <span class="token operator">|</span>                        PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">;</span>                rescanFlags <span class="token operator">=</span>                        scanFlags                        <span class="token operator">|</span> SCAN_AS_SYSTEM                        <span class="token operator">|</span> SCAN_AS_PRODUCT<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Ignoring unexpected fallback path "</span> <span class="token operator">+</span> scanFile<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果应用不在上面这些目录，继续循环，不要处理</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mSettings<span class="token punctuation">.</span><span class="token function">enableSystemPackageLPw</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 重新扫描一下这个文件，会添加一个 &lt;update-package> 标签</span>                <span class="token function">scanPackageTracedLI</span><span class="token punctuation">(</span>scanFile<span class="token punctuation">,</span> reparseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageManagerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to parse original system package: "</span>                        <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Uncompress and install any stubbed system applications.</span>    <span class="token comment" spellcheck="true">// This must be done last to ensure all stubs are replaced or disabled.</span>    <span class="token function">decompressSystemApplications</span><span class="token punctuation">(</span>stubSystemApps<span class="token punctuation">,</span> scanFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> cachedNonSystemApps <span class="token operator">=</span> PackageParser<span class="token punctuation">.</span>sCachedPackageReadCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">-</span> cachedSystemApps<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">long</span> dataScanTime <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> systemScanTime <span class="token operator">-</span> startTime<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> dataPackagesCount <span class="token operator">=</span> mPackages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> systemPackagesCount<span class="token punctuation">;</span>    Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Finished scanning non-system apps. Time: "</span> <span class="token operator">+</span> dataScanTime            <span class="token operator">+</span> <span class="token string">" ms, packageCount: "</span> <span class="token operator">+</span> dataPackagesCount            <span class="token operator">+</span> <span class="token string">" , timePerPackage: "</span>            <span class="token operator">+</span> <span class="token punctuation">(</span>dataPackagesCount <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> dataScanTime <span class="token operator">/</span> dataPackagesCount<span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token string">" , cached: "</span> <span class="token operator">+</span> cachedNonSystemApps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mIsUpgrade <span class="token operator">&amp;&amp;</span> dataPackagesCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MetricsLogger<span class="token punctuation">.</span><span class="token function">histogram</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"ota_package_manager_data_app_avg_scan_time"</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> dataScanTime<span class="token punctuation">)</span> <span class="token operator">/</span> dataPackagesCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>　　　　<span class="token comment" spellcheck="true">//　扫描非系统 apk　工作完成！</span><span class="token punctuation">}</span></code></pre><h1 id="三、扫尾工作"><a href="#三、扫尾工作" class="headerlink" title="三、扫尾工作"></a>三、扫尾工作</h1><p>这部分任务比较简单，就是将第二阶段 APK 的信息再集中整理一次，可自行研究。</p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>&nbsp;📕 01. <a href="https://www.2cto.com/kf/201609/551752.html" target="_blank" rel="noopener">Android7.0 PackageManagerService (2) PKMS构造函数的主要工作</a><br>&nbsp;📕 02. <a href="https://www.jianshu.com/p/8e2831428110" target="_blank" rel="noopener">APK安装流程详解7——PackageManagerService的启动流程(上)</a></p><hr><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>推荐跳转：<a href="https://superandroid.pro/2019/12/31/%E3%80%8AThinking%20in%20Android%E3%80%8B%20--%2001.%20%E5%8D%9A%E5%AE%A2%E7%B4%A2%E5%BC%95/">博客索引（Android 9.0）</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://superandroid.pro/2019/01/01/%E3%80%90%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1%E3%80%91Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89%E4%B9%8B%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/">Framework 核心服务之 PMS 钻研（1）- 启动流程</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://superandroid.pro/2019/01/10/%E3%80%90%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1%E3%80%91Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%883%EF%BC%89%E4%B9%8B%20PackageManager/">Framework 核心服务之 PMS 钻研（3）- PackageManager</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PackageManagerService </tag>
            
            <tag> PMS 构造函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PackageManagerService 钻研（1）- 启动流程</title>
      <link href="/2019/01/01/02.kuang-jia-he-xin-fu-wu-android-kuang-jia-fu-wu-pian-packagemanagerservice-zuan-yan-1-qi-dong-liu-cheng/"/>
      <url>/2019/01/01/02.kuang-jia-he-xin-fu-wu-android-kuang-jia-fu-wu-pian-packagemanagerservice-zuan-yan-1-qi-dong-liu-cheng/</url>
      
        <content type="html"><![CDATA[<p><br></p><p><strong><center><font color="#3A5FCD" size="4">PackageManagerService 系列文章如下（基于 Android 9.0 源码）</font><center></center></center></strong><br></p><table><thead><tr><th style="text-align:center">&nbsp;</th><th style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（1）- 启动流程</font></a></th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（2）- 构造函数</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（3）- PackageManager</font></a></td></tr><tr><td style="text-align:center"><strong><font color="#EE2C2C" size="3">PackageManagerService</font></strong></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（4）- PackageInstaller</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（5）- APK 安装流程（1）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（6）- APK 安装流程（2）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（7）- PackageParser</font></a></td></tr></tbody></table><p><br></p><p><strong><font color="#3A5FCD" size="4">修订日志</font></strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">1、重新梳理 Android 9.0 源码中 PMS 的启动流程；</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">2、重新梳理涉及 Settings 的代码逻辑；</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">3、重新梳理 XML 文件扫描的代码逻辑；</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">4、博文格式，文章排版等优化；</font></p><p><br></p><hr><h1 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h1><h2 id="1-1-核心源码"><a href="#1-1-核心源码" class="headerlink" title="1.1 核心源码"></a>1.1 核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">Process.java</font></td><td>frameworks/base/core/java/android/os/Process.java</td></tr><tr><td><font color="#D15FEE">Settings.java</font></td><td>frameworks/base/services/core/java/com/android/server/pm/Settings.java</td></tr><tr><td><font color="#D15FEE">SettingBase.java</font></td><td>frameworks/base/services/core/java/com/android/server/pm/SettingBase.java</td></tr><tr><td><font color="#D15FEE">SystemConfig.java</font></td><td>frameworks/base/core/java/com/android/server/SystemConfig.java</td></tr><tr><td><font color="#D15FEE">SystemServer.java</font></td><td>frameworks/base/services/java/com/android/server/SystemServer.java</td></tr><tr><td><font color="#D15FEE">SharedUserSetting.java</font></td><td>frameworks/base/services/core/java/com/android/server/pm/SharedUserSetting.java</td></tr><tr><td><font color="#D15FEE">PackageManagerService.java</font></td><td>frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</td></tr></tbody></table><h2 id="1-2-简介"><a href="#1-2-简介" class="headerlink" title="1.2 简介"></a>1.2 简介</h2><p><strong><font color="#0000CD">PackageManagerService（PMS）</font></strong>是 SystemServer 启动后的第一个核心服务，也是 Android 系统中最常用的服务之一。它负责系统中 Package 的管理，应用程序的安装、卸载、信息查询等。如果你是面向 Android 系统开发的工程师，基础概念我也不需要再多赘述，我们的重点是阅读分析源码，钻研更深层次的原理。</p><h2 id="1-3-家族谱"><a href="#1-3-家族谱" class="headerlink" title="1.3 家族谱"></a>1.3 家族谱</h2><p>首先，我们看一下 PackageManagerService 及客户端的家族谱，如下图所示（这张图暂且只需要有个印象，整个系列分析完再回来看这个家族谱，你会清晰很多！）</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-ece68587e315bc1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="家族谱.png"></center><p><strong><font color="#436EEE" size="3">简单说明：</font></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🔰 IPackageManager 接口类中定义了服务端和客户端通信的业务函数，还定义了内部类 Stub，该类从 Binder 派生并实现了 IPackageManager 接口。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🔰 PackageManagerService 继承自 IPackageManager.Stub类，由于 Stub 类从 Binder 派生，因此 PackageManagerService 将作为服务端参与 Binder 通信。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🔰 Stub 类中定义了一个内部类 Proxy，该类有一个 IBinder类型（实际类型为 BinderProxy）的成员变量 mRemote，mRemote 用于和服务端 PackageManagerService通信。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🔰 IPackageManager 接口类中定义了许多业务函数，但是处于安全等方面的考虑，Android 对外（即SDK）提供的只是一个子集，该子类被封装在抽象类 PackageManager中。客户端一般通过 Context 的 getPackageManager 函数返回一个类型为 PackageManager的对象，该对象的实际类型是 PackageManager 的子类 ApplicationPackageManager。这种基于接口编程的方式，虽然极大降低了模块之间的耦合性，却给代码分析带来了不小的麻烦。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🔰 ApplicationPackageManager 类继承自 PackageManager类。它并没有直接参与 Binder 通信，而是通过 mPM 成员变量指向一个 IPackageManager.Stub.Proxy 类型的对象。</p><blockquote><p><strong><font color="#FF0000">【提示】：</font></strong>在你自己的分析过程中，可能会发现源码中找不到 IPackageManager.java 这个文件。其实该文件是在编译过程中产生的，最终的文件位于 Android 源码 out（<code>/out/target/common/obj/JAVA_LIBRARIES/framework_intermediates/core/java/android/content/pm</code>）目录下面。</p></blockquote><p><strong><font color="#0000FF">IPackageManager.java：</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPackageManager</span> <span class="token keyword">extends</span> <span class="token class-name">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IInterface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** Local-side IPC implementation stub class. */</span>    <span class="token comment" spellcheck="true">// 定义内部类 Stub，派生自 Binder，实现 IPackageManager 接口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Stub</span> <span class="token keyword">extends</span> <span class="token class-name">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Binder</span>                                      <span class="token keyword">implements</span> <span class="token class-name">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>IPackageManager</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String DESCRIPTOR <span class="token operator">=</span>                                       <span class="token string">"android.content.pm.IPackageManager"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** Construct the stub at attach it to the interface. */</span>        <span class="token keyword">public</span> <span class="token function">Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachInterface</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 定义 Stub 的内部类 Proxy，实现 IPackageManager 接口</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>IPackageManager</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder mRemote<span class="token punctuation">;</span>            <span class="token function">Proxy</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder remote<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mRemote <span class="token operator">=</span> remote<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><strong><font color="#436EEE">看源码，梳理流程，就像是走进迷宫，很容易迷失！</font></strong></p><p>所以在开始分析之前，我给大家一些建议：<strong><font color="#FF0000">紧抓主干，熟悉流程，再啃细节！</font></strong></p><hr><h1 id="二、SystemServer"><a href="#二、SystemServer" class="headerlink" title="二、SystemServer"></a>二、SystemServer</h1><p>先来说说 PackageManagerService 是怎么启动的？</p><p><code>PackageManagerService</code> 作为系统的核心服务，由 <code>SystemServer</code> 创建，<code>SystemServer</code> 调用了 <code>PackageManagerService</code> 的 <code>main()</code> 创建 <code>PackageManagerService 实例</code>。</p><h2 id="2-1-main"><a href="#2-1-main" class="headerlink" title="2.1 main"></a>2.1 main</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/services/java/com/android/server/SystemServer.java</span><span class="token comment" spellcheck="true">/**  * The main entry point from zygote.  */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">SystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Start services.</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">startBootstrapServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">startOtherServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="2-2-startBootstrapServices"><a href="#2-2-startBootstrapServices" class="headerlink" title="2.2 startBootstrapServices"></a>2.2 startBootstrapServices</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/services/java/com/android/server/SystemServer.java</span><span class="token keyword">private</span> PackageManagerService mPackageManagerService<span class="token punctuation">;</span><span class="token keyword">private</span> Context mSystemContext<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> mOnlyCore<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startBootstrapServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 调用 PMS 的 main 函数，主要是创建 PMS 服务，并注册到 ServiceManager（服务管家）</span>    mPackageManagerService <span class="token operator">=</span> PackageManagerService<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>mSystemContext<span class="token punctuation">,</span> installer<span class="token punctuation">,</span>                mFactoryTestMode <span class="token operator">!=</span> FactoryTest<span class="token punctuation">.</span>FACTORY_TEST_OFF<span class="token punctuation">,</span> mOnlyCore<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 获取 PackageManager</span>    mPackageManager <span class="token operator">=</span> mSystemContext<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="2-3-startOtherServices"><a href="#2-3-startOtherServices" class="headerlink" title="2.3 startOtherServices"></a>2.3 startOtherServices</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/services/java/com/android/server/SystemServer.java</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startOtherServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token function">traceBeginAndSlog</span><span class="token punctuation">(</span><span class="token string">"MakePackageManagerServiceReady"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mPackageManagerService<span class="token punctuation">.</span><span class="token function">systemReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><hr><h1 id="三、PackageManagerService"><a href="#三、PackageManagerService" class="headerlink" title="三、PackageManagerService"></a>三、PackageManagerService</h1><p>查看源码，我们知道了 <code>SystemServer</code> 调用 <code>PackageManagerService</code> 的 <code>main()</code> 创建了 <code>PackageManagerService 实例</code>。</p><p>那么接下来的重点就是关注 PackageManagerService 的 <code>main()</code> 方法！</p><h2 id="3-1-main"><a href="#3-1-main" class="headerlink" title="3.1 main"></a>3.1 main</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/services/core/java/com/android/server/pm/</span>            PackageManagerService<span class="token punctuation">.</span>java<span class="token keyword">public</span> <span class="token keyword">static</span> PackageManagerService <span class="token function">main</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Installer installer<span class="token punctuation">,</span>                                         <span class="token keyword">boolean</span> factoryTest<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyCore<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Self-check for initial settings: 此处主要检查系统属性</span>    PackageManagerServiceCompilerMapping<span class="token punctuation">.</span><span class="token function">checkProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 此处创建构造函数，其中，factoryTest：决定是否测试版本，onlyCore：决定是否只解析系统目录</span>    PackageManagerService m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageManagerService</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> installer<span class="token punctuation">,</span>                                                         factoryTest<span class="token punctuation">,</span> onlyCore<span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token punctuation">.</span><span class="token function">enableSystemUserPackages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 利用 Binder 通信，将自己注册到 ServiceManager 进程中（这是 Binder 服务的常规注册流程）</span>    ServiceManager<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span><span class="token string">"package"</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> PackageManagerNative pmn <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">PackageManagerNative</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ServiceManager<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span><span class="token string">"package_native"</span><span class="token punctuation">,</span> pmn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>该方法主要<code>创建 PMS 对象</code>，并将其注册到 <code>ServiceManager</code> 中，内部是一个 <code>HashMap</code> 的集合，存储了很多相关的 Binder 服务，缓存起来，我们在使用的时候，会通过 <code>getService(key)</code> 的方式去 <code>Map</code> 中获取。</p><blockquote><p><strong><font color="#436EEE">main 函数看似几行代码很简单，但执行时间却很长。主要原因是 PMS 在其“构造函数”中做了很多“重体力活”，这也是 Android 启动速度慢的主要原因之一。</font></strong></p></blockquote><p><strong><font color="#FF0000">具体分析前，我们先简单了解一下 PMS 构造函数的主要功能：</font></strong></p><p>扫描 Android 系统中几个目标文件夹中的 APK，从而建立合适的数据结构来管理各种信息，如：Package 信息、四大组件信息、权限信息等。</p><p>抽象地来看，PMS 像一个加工厂，它解析实际的物理文件（APK文件）以生成符合自己要求的产品。（例如：PMS 将解析 APK 包中的 <code>AndroidManifest.xml</code>，并根据其中声明的 <code>Activity 标签</code>来创建与此对应的对象并加以保管。）</p><p>从源码角度来看，PMS 的工作流程相对简单。但深入研究后，发现其很复杂！</p><blockquote><p><strong><font color="#A020F0">复杂的是其中用于保存各种信息的<code>数据结构</code>和<code>它们之间的关系</code>，以及影响最终结果的<code>策略控制</code></font></strong>。</p></blockquote><p>如果你自行研究过 PMS，你会发现代码中存在大量不同的数据结构以及它们之间的关系会让人大为头疼。所以，在这篇文章中我们除了分析 PMS 的工作流程以外，会重点关注重要的数据结构以及它们的作用。</p><p><strong><font color="#FF0000">接下来开始重点分析 PMS 的构造函数</font></strong>，如果放在一篇文章中去分析是完全不可能梳理清楚的！</p><p>我们分两部分研究，如下：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong><font color="#551A8B">🍁 &nbsp;构造函数（1） - 前期准备工作</font></strong>&nbsp;<strong><font color="#FF0000">（本篇文章要讨论的内容）</font></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong><font color="#551A8B">🍁 &nbsp;构造函数（2） - 扫描 Package 和 扫尾工作</font></strong> <a href="https://superandroid.pro/2018/11/05/B_02.%20Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%882%EF%BC%89%E4%B9%8B%20%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/">《Framework 核心服务之 PMS 钻研（2）- 构造函数》</a></p><hr><p>正式开始分析 PMS 的构造函数：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 此处创建构造函数，其中，factoryTest：决定是否测试版本，onlyCore：决定是否只解析系统目录</span>PackageManagerService m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageManagerService</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> installer<span class="token punctuation">,</span>                                                     factoryTest<span class="token punctuation">,</span> onlyCore<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-2-Settings"><a href="#3-2-Settings" class="headerlink" title="3.2 Settings"></a>3.2 Settings</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// public static final int SDK_INT = SystemProperties.getInt("ro.build.version.sdk", 0);</span><span class="token keyword">final</span> <span class="token keyword">int</span> mSdkVersion <span class="token operator">=</span> Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">PackageManagerService</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Installer installer<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> factoryTest<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyCore<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*     * mSdkVersion是 PMS 的成员变量，定义的时候进行赋值，其值取自系统属性 ro.build.version.sdk     * 如果没有定义，则 APK 就无法知道自己运行在 Android 哪个版本上     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mSdkVersion <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"**** ro.build.version.sdk not set!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mContext <span class="token operator">=</span> context<span class="token punctuation">;</span>    mFactoryTest <span class="token operator">=</span> factoryTest<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 运行在非工厂模式下</span>    mOnlyCore <span class="token operator">=</span> onlyCore<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 标记是否只加载核心服务</span>    mMetrics <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 存储与显示屏相关的一些属性，例如屏幕的宽/高尺寸，分辨率等信息</span>    mInstaller <span class="token operator">=</span> installer<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 创建 Installer 对象，该对象和 Native 进程 installd 交互</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mInstallLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Expose private service for system components to use.</span>        LocalServices<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span>PackageManagerInternal<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">PackageManagerInternalImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sUserManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserManagerService</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UserDataPreparer</span><span class="token punctuation">(</span>mInstaller<span class="token punctuation">,</span> mInstallLock<span class="token punctuation">,</span> mContext<span class="token punctuation">,</span> mOnlyCore<span class="token punctuation">)</span><span class="token punctuation">,</span>                 mPackages<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPermissionManager <span class="token operator">=</span> PermissionManagerService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">DefaultPermissionGrantedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDefaultRuntimePermissionsGranted</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            mSettings<span class="token punctuation">.</span><span class="token function">onDefaultRuntimePermissionsGrantedLPr</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> mPackages <span class="token comment" spellcheck="true">/*externalLock*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mDefaultPermissionPolicy <span class="token operator">=</span> mPermissionManager<span class="token punctuation">.</span><span class="token function">getDefaultPermissionGrantPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Settings 是一个非常重要的类，该类用于存储系统运行过程中的一些设置，我们后面会重点分析这个类！</span>        mSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Settings</span><span class="token punctuation">(</span>mPermissionManager<span class="token punctuation">.</span><span class="token function">getPermissionSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mPackages<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 添加system、phone、log、nfc、bluetooth、shell这六种 shareUserId 到 mSettings</span>    <span class="token comment" spellcheck="true">// addSharedUserLPw 函数做了什么？这是我们接下来要分析的重点！</span>    mSettings<span class="token punctuation">.</span><span class="token function">addSharedUserLPw</span><span class="token punctuation">(</span><span class="token string">"android.uid.system"</span><span class="token punctuation">,</span> Process<span class="token punctuation">.</span>SYSTEM_UID<span class="token punctuation">,</span>                ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">,</span> ApplicationInfo<span class="token punctuation">.</span>PRIVATE_FLAG_PRIVILEGED<span class="token punctuation">)</span><span class="token punctuation">;</span>    mSettings<span class="token punctuation">.</span><span class="token function">addSharedUserLPw</span><span class="token punctuation">(</span><span class="token string">"android.uid.phone"</span><span class="token punctuation">,</span> RADIO_UID<span class="token punctuation">,</span>                ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">,</span> ApplicationInfo<span class="token punctuation">.</span>PRIVATE_FLAG_PRIVILEGED<span class="token punctuation">)</span><span class="token punctuation">;</span>    mSettings<span class="token punctuation">.</span><span class="token function">addSharedUserLPw</span><span class="token punctuation">(</span><span class="token string">"android.uid.log"</span><span class="token punctuation">,</span> LOG_UID<span class="token punctuation">,</span>                ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">,</span> ApplicationInfo<span class="token punctuation">.</span>PRIVATE_FLAG_PRIVILEGED<span class="token punctuation">)</span><span class="token punctuation">;</span>    mSettings<span class="token punctuation">.</span><span class="token function">addSharedUserLPw</span><span class="token punctuation">(</span><span class="token string">"android.uid.nfc"</span><span class="token punctuation">,</span> NFC_UID<span class="token punctuation">,</span>                ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">,</span> ApplicationInfo<span class="token punctuation">.</span>PRIVATE_FLAG_PRIVILEGED<span class="token punctuation">)</span><span class="token punctuation">;</span>    mSettings<span class="token punctuation">.</span><span class="token function">addSharedUserLPw</span><span class="token punctuation">(</span><span class="token string">"android.uid.bluetooth"</span><span class="token punctuation">,</span> BLUETOOTH_UID<span class="token punctuation">,</span>                ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">,</span> ApplicationInfo<span class="token punctuation">.</span>PRIVATE_FLAG_PRIVILEGED<span class="token punctuation">)</span><span class="token punctuation">;</span>    mSettings<span class="token punctuation">.</span><span class="token function">addSharedUserLPw</span><span class="token punctuation">(</span><span class="token string">"android.uid.shell"</span><span class="token punctuation">,</span> SHELL_UID<span class="token punctuation">,</span>                ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">,</span> ApplicationInfo<span class="token punctuation">.</span>PRIVATE_FLAG_PRIVILEGED<span class="token punctuation">)</span><span class="token punctuation">;</span>    mSettings<span class="token punctuation">.</span><span class="token function">addSharedUserLPw</span><span class="token punctuation">(</span><span class="token string">"android.uid.se"</span><span class="token punctuation">,</span> SE_UID<span class="token punctuation">,</span>                ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">,</span> ApplicationInfo<span class="token punctuation">.</span>PRIVATE_FLAG_PRIVILEGED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>刚进入构造函数，我们就遇到了第一个较为复杂的数据结构 <code>Settings</code> ，以及它的 <code>addSharedUserLPw</code> 函数。</p><h4 id="3-2-1-构造函数"><a href="#3-2-1-构造函数" class="headerlink" title="3.2.1 构造函数"></a>3.2.1 构造函数</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Settings</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token function">Settings</span><span class="token punctuation">(</span>PermissionSettings permissions<span class="token punctuation">,</span> Object lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getDataDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> permissions<span class="token punctuation">,</span> lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Settings</span><span class="token punctuation">(</span>File dataDir<span class="token punctuation">,</span> PermissionSettings permission<span class="token punctuation">,</span> Object lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mLock <span class="token operator">=</span> lock<span class="token punctuation">;</span>        mPermissions <span class="token operator">=</span> permission<span class="token punctuation">;</span>        mRuntimePermissionsPersistence <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuntimePermissionPersistence</span><span class="token punctuation">(</span>mLock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建指向 /data/system/ 目录的 File</span>        mSystemDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dataDir<span class="token punctuation">,</span> <span class="token string">"system"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建目录</span>        mSystemDir<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileUtils<span class="token punctuation">.</span><span class="token function">setPermissions</span><span class="token punctuation">(</span>mSystemDir<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  FileUtils<span class="token punctuation">.</span>S_IRWXU<span class="token operator">|</span>FileUtils<span class="token punctuation">.</span>S_IRWXG                  <span class="token operator">|</span>FileUtils<span class="token punctuation">.</span>S_IROTH<span class="token operator">|</span>FileUtils<span class="token punctuation">.</span>S_IXOTH<span class="token punctuation">,</span>                  <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用于描述系统所安装的 Package 信息</span>        mSettingsFilename <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mSystemDir<span class="token punctuation">,</span> <span class="token string">"packages.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// packages.xml的备份信息</span>        mBackupSettingsFilename <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mSystemDir<span class="token punctuation">,</span> <span class="token string">"packages-backup.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 保存系统中存在的所有非系统自带的 APK 信息，即 UID 大于 10000 的 apk</span>        mPackageListFilename <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mSystemDir<span class="token punctuation">,</span> <span class="token string">"packages.list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileUtils<span class="token punctuation">.</span><span class="token function">setPermissions</span><span class="token punctuation">(</span>mPackageListFilename<span class="token punctuation">,</span> <span class="token number">0640</span><span class="token punctuation">,</span> SYSTEM_UID<span class="token punctuation">,</span> PACKAGE_INFO_GID<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// sdcardfs 相关的文件</span>        <span class="token keyword">final</span> File kernelDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/config/sdcardfs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mKernelMappingFilename <span class="token operator">=</span> kernelDir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> kernelDir <span class="token operator">:</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 记录系统中被强制停止运行的 App 信息，如有 App 被强制停止运行，会将一些信息记录到该文件中</span>        mStoppedPackagesFilename <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mSystemDir<span class="token punctuation">,</span> <span class="token string">"packages-stopped.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// packages-stopped.xml 的备份信息</span>        mBackupStoppedPackagesFilename <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mSystemDir<span class="token punctuation">,</span> <span class="token string">"packages-stopped-backup.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><strong><font color="#FF0000">Settings 的构造函数的主要工作：建立与某些系统配置文件、目录之间的关联</font></strong>。首先，它会创建指向 <code>/data/system/</code> 目录的 <code>File</code> 实例，这个目录下会保存很多系统文件。其次，就是创建 <code>/data/system/</code> 目录下的某些 <code>.xml 文件</code> 或其他文件的 <code>File</code> 实例。</p><p>上面源码中涉及到 5 个文件：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#63B8FF">✨ packages.xml：</font> PMS 扫描完目标文件夹后，会创建packages.xml。当系统进行程序安装、卸载和更新等操作时，均会更新该文件;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#63B8FF">✨ packages-backup.xml：</font>packages.xml 文件的备份;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#63B8FF">✨ packages.list：</font>用于描述系统中存在的所有非系统自带的 APK 信息。当这些 APK 有变化时，PKMS就会更新该文件;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#63B8FF">✨ packages-stopped.xml：</font>记录被用户强行停止的应用的 Package 信息（例如，从设置进入某个应用，然后点击强行停止，那么应用的Package信息就会被记录）;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#63B8FF">✨ packages-stopped-back.xml：</font>packages-stopped.xml 文件的备份。</p><blockquote><p>我们注意到，上面的介绍中涉及到了两个 <code>back-up</code> 文件，它们是做什么的呢？其实 Android 系统在修改 <code>packages.xml</code>、<code>packages-stopped.xml</code> 之前，会先对它们进行<code>备份</code>。当对它们的修改操作正常完成，则会删掉备份的文件。如果在修改过程中系统出现问题重启了，会再次去读取这两个文件；如果此时发现它们的备份文件还存在，则说明上一次对两份文件的修改操作发生了异常，这两份文件的内容可能已经不准确了，这时系统会去使用之前备份的文件的内容。</p></blockquote><p>创建完相关系统文件 File 实例后，Settings 的构造工作也就结束了。</p><p>之前我们提出了一个问题：<strong><font color="#63B8FF">addSharedUserLPw 函数做了什么？</font></strong>从上面截取一段代码回顾一下：</p><pre class=" language-java"><code class="language-java">mSettings<span class="token punctuation">.</span><span class="token function">addSharedUserLPw</span><span class="token punctuation">(</span><span class="token string">"android.uid.system"</span><span class="token punctuation">,</span> Process<span class="token punctuation">.</span>SYSTEM_UID<span class="token punctuation">,</span>            ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">,</span> ApplicationInfo<span class="token punctuation">.</span>PRIVATE_FLAG_PRIVILEGED<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>addSharedUserLPw 传递了 4 个参数：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#63B8FF">✨ &nbsp;android.uid.system</font>：字符串，name 和 uid 一一对应</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>public static final int SYSTEM_UID = 1000;</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#63B8FF">✨ &nbsp;Process.SYSTEM_UID</font>：值为 1000，name 和 uid 一一对应</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>public static final int FLAG_SYSTEM = 1&lt;&lt;0;</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#63B8FF">✨ &nbsp;ApplicationInfo.FLAG_SYSTEM</font>：标志</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>public static final int PRIVATE_FLAG_PRIVILEGED = 1&lt;&lt;3;</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#63B8FF">✨ &nbsp;ApplicationInfo.PRIVATE_FLAG_PRIVILEGED</font>：特权Apk</p><p>对 addSharedUserLPw 函数分析之前，我们有必要了解 <code>SYSTEM_UID</code> 的相关知识。</p><hr><h3 id="3-2-2-UID-GID"><a href="#3-2-2-UID-GID" class="headerlink" title="3.2.2 UID/GID"></a>3.2.2 UID/GID</h3><p><strong><font color="#FF0000">UID 为 <code>用户 ID</code> 的缩写，GID 为 <code>用户组 ID</code> 的缩写</font></strong>。一般来说，每一个进程都会有一个对应的 UID（即标示该进程属于哪个用户，不同用户拥有不同权限）。一个进程也可分属不用的用户组（每个用户都有对应的权限）。<strong><font color="#FF0000">UID/GID 和进程的权限有关</font></strong>。</p><p>在 Android 平台中，系统定义的 UID/GID 在 <strong><font color="#8470FF">Process.java</font></strong> 文件中，如下所示（列举部分）：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/core/java/android/os/Process.java</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SYSTEM_UID <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 系统进程的 UID/GID</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PHONE_UID <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// Phone 进程的 UID/GID</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHELL_UID <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// shell 进程的 UID/GID</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LOG_UID <span class="token operator">=</span> <span class="token number">1007</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// LOG 进程的 UID/GID</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> WIFI_UID <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// WIFI 进程的 UID/GID</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MEDIA_UID <span class="token operator">=</span> <span class="token number">1013</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// mediaserver 进程的 UID/GID</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NFC_UID <span class="token operator">=</span> <span class="token number">1027</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// NFC 进程的 UID/GID</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> FIRST_APPLICATION_UID <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第一个应用 Package 的起始 UID</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LAST_APPLICATION_UID <span class="token operator">=</span> <span class="token number">19999</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 系统所支持的最大的应用 Package 的 UID</span></code></pre><h3 id="3-2-3-addSharedUserLPw"><a href="#3-2-3-addSharedUserLPw" class="headerlink" title="3.2.3 addSharedUserLPw"></a>3.2.3 addSharedUserLPw</h3><p>现在我们开始分析 addSharedUserLPw 函数：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/services/core/java/com/android/server/pm/Settings.java</span>SharedUserSetting <span class="token function">addSharedUserLPw</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> pkgFlags<span class="token punctuation">,</span> <span class="token keyword">int</span> pkgPrivateFlags<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 根据 key 从 map 中获取值</span>    SharedUserSetting s <span class="token operator">=</span> mSharedUsers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果值不为 null 并且保存的 uid 和传递过来的一致，就直接返回结果</span>    <span class="token comment" spellcheck="true">// uid 不一致则返回 null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>userId <span class="token operator">==</span> uid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        PackageManagerService<span class="token punctuation">.</span><span class="token function">reportSettingsProblem</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>ERROR<span class="token punctuation">,</span>                    <span class="token string">"Adding duplicate shared user, keeping first: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 若 s 为 null，则根据传递过来的参数新创建对象</span>    s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedUserSetting</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> pkgFlags<span class="token punctuation">,</span> pkgPrivateFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>userId <span class="token operator">=</span> uid<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在系统中保存值为 uid 的 用户 id，成功返回 true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addUserIdLPw</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> s<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mSharedUsers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将 name 与 s 键值对添加到 mSharedUsers 中保存</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从源码中我们发现，Settings 中有一个 <code>mSharedUsers</code> 成员，该成员存储的是 <code>【“字符串” 与 “SharedUserSetting” 键值对】</code>，也就是说可以通过 <code>字符串</code> 为 <code>key</code> 得到对应的 <code>SharedUserSetting</code> 对象。</p><p>那么 SharedUserSetting 是什么？创建它的目的是什么？接下来我们继续分析！</p><h4 id="3-2-3-1-SharedUserSetting"><a href="#3-2-3-1-SharedUserSetting" class="headerlink" title="3.2.3.1 SharedUserSetting"></a>3.2.3.1 SharedUserSetting</h4><p>为了解释 SharedUserSetting，我们拿 <strong><font color="#1874CD">SystemUI</font></strong> 作为例子来讨论这个问题。</p><p>我们看下 SystemUI 的 <code>AndroidManifest.xml</code>（这个文件你肯定不陌生）：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>androidprv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/prv/res/android<span class="token punctuation">"</span></span>        <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.android.systemui<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>sharedUserId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.uid.system<span class="token punctuation">"</span></span>        <span class="token attr-name">coreApp</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>在 <code>AndroidManifest.xml</code> 中，声明了一个名为 <code>android:sharedUserId</code> 的属性：<code>android.uid.systemui</code>。</p><p><strong><font color="#FF0000">有必要聊聊这个 “sharedUserId” 的作用！</font></strong></p><p>1、两个或多个声明了同一种 <code>sharedUserId</code> 的 <code>APK</code> 可共享彼此的数据，并且可运行在同一进程中。</p><p>2、通过声明特定的 <code>sharedUserId</code>，该 <code>APK</code> 所在 <code>进程</code> 将被赋予指定的 <code>UID</code>（比如本例中的 SystemUI 声明了 system 的 uid，运行 SystemUI 的进程就可享受 system 用户所对应的权限）。</p><blockquote><p>除了在 <code>AndroidManifest.xml</code> 中声明 <code>sharedUserId</code> 外，APK 在编译时还必须使用对应的证书进行签名。例如本例的 <code>SystemUI</code>，在其 <code>Android.mk</code> 中需要额外申明 <code>LOCAL_CERTIFICATE := platform</code>，如此才可以获得指定的 <code>UID</code>（当然这个不是我们分析的重点，在项目开发的过程中，我们会了解到这一点）。</p></blockquote><p>通过以上分析，我们知道了如何组织一种数据结构来包括上面的内容。</p><p><strong><font color="#FF0000">有 3 个关键点需要注意：</font></strong></p><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🍁 &nbsp;XML 中 sharedUserId 属性指定了一个字符串，它是 UID 的字符串描述，故对应数据结构中也应该有这样一个字符串，这样就把代码和 XML 中的属性联系起来了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🍁 &nbsp;在 LINUX 系统中，真正的 uid 是一个整数，所以该数据结构中必然有一个整型变量。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🍁 &nbsp;多个 Package 可声明同一个 sharedUserId，因此该数据结构必然会保存那些声明了相同 sharedUserId 的 Package 的某些信息。</p></blockquote><p>对 <strong><font color="#8470FF">SharedUserSetting</font></strong> 我们做个总结：</p><p>1、<code>Settings</code> 类定义了一个 <code>mSharedUsers</code> 成员，它是一个 <code>ArrayMap</code>，以 <code>字符串</code>（如：android.uid.system）为 <code>key</code>，对应的 <code>Value</code> 是一个 <code>SharedUserSetting</code> 对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> ArrayMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> SharedUserSetting<span class="token operator">></span> mSharedUsers <span class="token operator">=</span>                                           <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> SharedUserSetting<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2、<code>SharedUserSetting</code> 定义了一个成员变量 <code>packages</code>，类型为 <code>ArraySet</code>，用于保存声明了相同 <code>sharedUserId</code> 的 <code>Package</code> 的权限设置信息（这一点我们之前提到过）。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SharedUserSetting</span> <span class="token keyword">extends</span> <span class="token class-name">SettingBase</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> userId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// flags that are associated with this uid, regardless of any package flags</span>    <span class="token keyword">int</span> uidFlags<span class="token punctuation">;</span>    <span class="token keyword">int</span> uidPrivateFlags<span class="token punctuation">;</span>    <span class="token keyword">final</span> ArraySet<span class="token operator">&lt;</span>PackageSetting<span class="token operator">></span> packages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArraySet</span><span class="token operator">&lt;</span>PackageSetting<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>3、每个 <code>Package</code> 有自己的权限设置。权限的概念由 <code>PackageSeting</code> 类表达。该类继承自 <code>PackageSettingBase</code> 类，<code>PackageSettingBase</code> 又继承自 <code>SettingBase</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">PackageSetting</span> <span class="token keyword">extends</span> <span class="token class-name">PackageSettingBase</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PackageSettingBase</span> <span class="token keyword">extends</span> <span class="token class-name">SettingBase</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><code>SettingBase</code> 对象持有 <code>PermissionsState</code> 对象，用于表示可用的权限。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SettingBase</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> PermissionsState mPermissionsState<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4、<code>Settings</code> 中还有两个成员，一个是 <code>mUserIds</code>，另一个是 <code>mOtherUserIds</code>，这两位成员的类型分别是 <code>ArrayList</code> 和 <code>SparseArray</code>。其目的是以 <code>UID</code> 为索引，得到对应的 <code>SharedUserSeting</code> 对象。在一般情况下，以 <code>索引</code> 获取<code>数组元素</code>的速度，比以 <code>Key</code> 获取 <code>ArrayMap</code> 中 <code>元素</code> 的速度要快很多。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>Object<span class="token operator">></span> mUserIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> SparseArray<span class="token operator">&lt;</span>Object<span class="token operator">></span> mOtherUserIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparseArray</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-2-3-2-addUserIdLPw"><a href="#3-2-3-2-addUserIdLPw" class="headerlink" title="3.2.3.2 addUserIdLPw"></a>3.2.3.2 addUserIdLPw</h4><p>我们回忆一下 addSharedUserLPw 方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/services/core/java/com/android/server/pm/Settings.java</span>SharedUserSetting <span class="token function">addSharedUserLPw</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> pkgFlags<span class="token punctuation">,</span> <span class="token keyword">int</span> pkgPrivateFlags<span class="token punctuation">)</span> <span class="token punctuation">{</span>    SharedUserSetting s <span class="token operator">=</span> mSharedUsers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedUserSetting</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> pkgFlags<span class="token punctuation">,</span> pkgPrivateFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>userId <span class="token operator">=</span> uid<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addUserIdLPw</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> s<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mSharedUsers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>源码中还有一个 <code>addUserIdLPw</code> 方法，它的功能就是将 <code>SharedUserSettings</code> 对象保存到对应的数组中，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/services/core/java/com/android/server/pm/Settings.java</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addUserIdLPw</span><span class="token punctuation">(</span><span class="token keyword">int</span> uid<span class="token punctuation">,</span> Object obj<span class="token punctuation">,</span> Object name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 系统所支持的最大的应用 Package 的 UID，不能超出限制 19999</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>uid <span class="token operator">></span> Process<span class="token punctuation">.</span>LAST_APPLICATION_UID<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 第一个应用 Package（非系统安装应用）的起始 UID</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>uid <span class="token operator">>=</span> Process<span class="token punctuation">.</span>FIRST_APPLICATION_UID<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取数组的长度</span>        <span class="token keyword">int</span> N <span class="token operator">=</span> mUserIds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">// 计算索引，其值是 uid 和 FIRST_APPLICATION_UID 的差</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> uid <span class="token operator">-</span> Process<span class="token punctuation">.</span>FIRST_APPLICATION_UID<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mUserIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            N<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果数组的目标索引值位置有不为 null 的值，说明已经添加过</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mUserIds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            PackageManagerService<span class="token punctuation">.</span><span class="token function">reportSettingsProblem</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>ERROR<span class="token punctuation">,</span>                    <span class="token string">"Adding duplicate user id: "</span> <span class="token operator">+</span> uid                    <span class="token operator">+</span> <span class="token string">" name="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 应用 Package 的 uid 由 mUserIds 保存</span>        mUserIds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOtherUserIds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            PackageManagerService<span class="token punctuation">.</span><span class="token function">reportSettingsProblem</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>ERROR<span class="token punctuation">,</span>                    <span class="token string">"Adding duplicate shared id: "</span> <span class="token operator">+</span> uid                            <span class="token operator">+</span> <span class="token string">" name="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 系统 Package 的 uid 由 mOtherUserIds 保存</span>        mOtherUserIds<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong><font color="#FF0000">至此对 Settings 的分析我们暂时告一段落。</font></strong></p><h3 id="3-2-4-总结"><a href="#3-2-4-总结" class="headerlink" title="3.2.4 总结"></a>3.2.4 总结</h3><p>我们来看一个 SharedUserSettings 的类图：(类名改变，后期重新补图)<br><br></p><p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-6aeecba875f5450b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20160929092228475.jpg"></center><br></p><p>如上图所示，<code>Settings</code> 对象中持有多个 <code>SharedUserSetting</code> 对象，每个 <code>SharedUserSetting</code> 对象又会持有多个 <code>PackageSetting</code> 对象。</p><p>从继承关系来看，<code>SharedUserSetting</code> 和 <code>PackageSetting</code> 对象，最终都将继承 <code>SettingBase</code> 对象。</p><p>从图上可以看出，<code>SettingBase</code> 对象持有 <code>PermissionsState</code> 对象，用于表示可用的权限。</p><p>因此，<code>SharedUserSetting</code> 对象和 <code>PackageSetting</code> 对象中都将包含有 <code>PermissionsState</code>。</p><p>从而我们可以据此推测出，<code>SharedUserSetting</code> 中持有的是一组 <code>Package</code> 共有的权限；<code>PackageSetting</code> 中持有的是单个 <code>Package</code> 独有的权限。</p><hr><h2 id="3-3-XML-文件扫描"><a href="#3-3-XML-文件扫描" class="headerlink" title="3.3 XML 文件扫描"></a>3.3 XML 文件扫描</h2><p>分析完 PMS 构造函数前期工作的第一阶段后，接下来就要继续回到构造函数中分析剩下的代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码：frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</span><span class="token keyword">public</span> <span class="token function">PackageManagerService</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Installer installer<span class="token punctuation">,</span>              <span class="token keyword">boolean</span> factoryTest<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyCore<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 第一阶段</span>    <span class="token comment" spellcheck="true">// 该值和调试有关，一般不设置该属性</span>    String separateProcesses <span class="token operator">=</span> SystemProperties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"debug.separate_processes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>separateProcesses <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> separateProcesses<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>separateProcesses<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mDefParseFlags <span class="token operator">=</span> PackageParser<span class="token punctuation">.</span>PARSE_IGNORE_PROCESSES<span class="token punctuation">;</span>            mSeparateProcesses <span class="token operator">=</span> null<span class="token punctuation">;</span>            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Running with debug.separate_processes: * (ALL)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mDefParseFlags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            mSeparateProcesses <span class="token operator">=</span> separateProcesses<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Running with debug.separate_processes: "</span> <span class="token operator">+</span> separateProcesses<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        mDefParseFlags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        mSeparateProcesses <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 对应用进行 dexopt 优化的辅助类</span>    mPackageDexOptimizer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageDexOptimizer</span><span class="token punctuation">(</span>installer<span class="token punctuation">,</span> mInstallLock<span class="token punctuation">,</span> context<span class="token punctuation">,</span>                                                   <span class="token string">"*dexopt*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DexManager<span class="token punctuation">.</span>Listener dexManagerListener <span class="token operator">=</span> DexLogger<span class="token punctuation">.</span><span class="token function">getListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> installer<span class="token punctuation">,</span>                                                                   mInstallLock<span class="token punctuation">)</span><span class="token punctuation">;</span>    mDexManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DexManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> mPackageDexOptimizer<span class="token punctuation">,</span> installer<span class="token punctuation">,</span> mInstallLock<span class="token punctuation">)</span><span class="token punctuation">;</span>    mArtManagerService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArtManagerService</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> installer<span class="token punctuation">,</span> mInstallLock<span class="token punctuation">)</span><span class="token punctuation">;</span>    mMoveCallbacks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MoveCallbacks</span><span class="token punctuation">(</span>FgThread<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mOnPermissionChangeListeners <span class="token operator">=</span> <span class="token keyword">new</span>                                    <span class="token class-name">OnPermissionChangeListeners</span><span class="token punctuation">(</span>FgThread<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取当前设备的显示屏信息</span>    <span class="token function">getDefaultDisplayMetrics</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> mMetrics<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过 SystemConfig 读取系统的 feature、permession 等配置，</span>    <span class="token comment" spellcheck="true">// 并初始化 mGlobalGids/mAvailableFeatures 成员</span>    SystemConfig systemConfig <span class="token operator">=</span> SystemConfig<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重点讨论</span>    mAvailableFeatures <span class="token operator">=</span> systemConfig<span class="token punctuation">.</span><span class="token function">getAvailableFeatures</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mProtectedPackages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProtectedPackages</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">}</span></code></pre><p>以上代码除了创建了几个对象以外，还有一个重要的需要关注的类：<strong><font color="#FF0000">SystemConfig</font></strong>，这就是我们接下来分析的重点！！！</p><h3 id="3-3-1-SystemConfig"><a href="#3-3-1-SystemConfig" class="headerlink" title="3.3.1 SystemConfig"></a>3.3.1 SystemConfig</h3><p>我们先来分析 <strong><font color="#1874CD">SystemConfig systemConfig = SystemConfig.getInstance() </font></strong> 函数！</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/core/java/com/android/server/SystemConfig.java</span><span class="token comment" spellcheck="true">/** * Loads global system configuration info. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> SystemConfig sInstance<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SystemConfig <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 单例模式</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SystemConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> sInstance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>查看它的构造函数：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/core/java/com/android/server/SystemConfig.java</span><span class="token comment" spellcheck="true">/** * 通过 readPermissions() 读取并解析 /system/etc/　等目录下的 sysconfig.xml、permission.xml 文件 */</span><span class="token function">SystemConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Read configuration from system</span>    <span class="token function">readPermissions</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">buildPath</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span><span class="token function">getRootDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"etc"</span><span class="token punctuation">,</span> <span class="token string">"sysconfig"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ALLOW_ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Read configuration from the old permissions dir</span>    <span class="token function">readPermissions</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">buildPath</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span><span class="token function">getRootDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"etc"</span><span class="token punctuation">,</span> <span class="token string">"permissions"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ALLOW_ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Vendors are only allowed to customze libs, features and privapp permissions</span>    <span class="token keyword">int</span> vendorPermissionFlag <span class="token operator">=</span> ALLOW_LIBS <span class="token operator">|</span> ALLOW_FEATURES <span class="token operator">|</span> ALLOW_PRIVAPP_PERMISSIONS<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>FIRST_SDK_INT <span class="token operator">&lt;=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>O_MR1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// For backward compatibility</span>        vendorPermissionFlag <span class="token operator">|=</span> <span class="token punctuation">(</span>ALLOW_PERMISSIONS <span class="token operator">|</span> ALLOW_APP_CONFIGS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">readPermissions</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">buildPath</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span><span class="token function">getVendorDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"etc"</span><span class="token punctuation">,</span> <span class="token string">"sysconfig"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vendorPermissionFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">readPermissions</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">buildPath</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span><span class="token function">getVendorDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"etc"</span><span class="token punctuation">,</span> <span class="token string">"permissions"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vendorPermissionFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Allow ODM to customize system configs as much as Vendor, because /odm is another</span>    <span class="token comment" spellcheck="true">// vendor partition other than /vendor.</span>    <span class="token keyword">int</span> odmPermissionFlag <span class="token operator">=</span> vendorPermissionFlag<span class="token punctuation">;</span>    <span class="token function">readPermissions</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">buildPath</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span><span class="token function">getOdmDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"etc"</span><span class="token punctuation">,</span> <span class="token string">"sysconfig"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> odmPermissionFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">readPermissions</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">buildPath</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span><span class="token function">getOdmDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"etc"</span><span class="token punctuation">,</span> <span class="token string">"permissions"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> odmPermissionFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Allow OEM to customize features and OEM permissions</span>    <span class="token keyword">int</span> oemPermissionFlag <span class="token operator">=</span> ALLOW_FEATURES <span class="token operator">|</span> ALLOW_OEM_PERMISSIONS<span class="token punctuation">;</span>    <span class="token function">readPermissions</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">buildPath</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span><span class="token function">getOemDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"etc"</span><span class="token punctuation">,</span> <span class="token string">"sysconfig"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> oemPermissionFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">readPermissions</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">buildPath</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span><span class="token function">getOemDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"etc"</span><span class="token punctuation">,</span> <span class="token string">"permissions"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> oemPermissionFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Allow Product to customize system configs around libs, features, permissions and apps</span>    <span class="token keyword">int</span> productPermissionFlag <span class="token operator">=</span> ALLOW_LIBS <span class="token operator">|</span> ALLOW_FEATURES <span class="token operator">|</span> ALLOW_PERMISSIONS <span class="token operator">|</span>            ALLOW_APP_CONFIGS <span class="token operator">|</span> ALLOW_PRIVAPP_PERMISSIONS<span class="token punctuation">;</span>    <span class="token function">readPermissions</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">buildPath</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span><span class="token function">getProductDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"etc"</span><span class="token punctuation">,</span> <span class="token string">"sysconfig"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> productPermissionFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">readPermissions</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">buildPath</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span><span class="token function">getProductDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"etc"</span><span class="token punctuation">,</span> <span class="token string">"permissions"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> productPermissionFlag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们发现 <code>SystemConfig</code> 的构造函数所做的工作就是：<code>readPermissions()</code>，即从文件中<code>读取权限</code>！</p><h3 id="3-3-2-readPermissions"><a href="#3-3-2-readPermissions" class="headerlink" title="3.3.2 readPermissions"></a>3.3.2 readPermissions</h3><p>接下来我们看看 readPermissions 的源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/core/java/com/android/server/SystemConfig.java</span><span class="token keyword">void</span> <span class="token function">readPermissions</span><span class="token punctuation">(</span>File libraryDir<span class="token punctuation">,</span> <span class="token keyword">int</span> permissionFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// Iterate over the files in the directory and scan .xml files</span>    File platformFile <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>File f <span class="token operator">:</span> libraryDir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// We'll read platform.xml last</span>        <span class="token comment" spellcheck="true">// 处理该目录下的非 platform.xml 文件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"etc/permissions/platform.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            platformFile <span class="token operator">=</span> f<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 调用 readPermissionsFromXml 解析此 XML 文件</span>        <span class="token function">readPermissionsFromXml</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> permissionFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Read platform permissions last so it will take precedence</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>platformFile <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 不知道你有没有发现，platform.xml文件的解析优先级最高！</span>        <span class="token function">readPermissionsFromXml</span><span class="token punctuation">(</span>platformFile<span class="token punctuation">,</span> permissionFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从源码中，我们发现 <code>readPermissions</code> 函数不就是调用 <code>readPermissionFromXml</code> 函数解析 <code>&quot;/xxx/etc/permissions/&quot;</code> 目录下的文件吗？</p><p>这些文件似乎都是 XML 文件。你也许有个疑问？该目录下都有哪些 XML 文件？这些 XML 文件中有些什么内容呢？<strong><font color="#63B8FF">以我手中的 pixel 为例</font></strong>：</p><pre><code>sailfish:/system/etc/permissions $ ls -alls -altotal 168drwxr-xr-x  2 root root  4096 2009-01-01 16:00 .drwxr-xr-x 14 root root  4096 2009-01-01 16:00 ..-rw-r--r--  1 root root  1050 2009-01-01 16:00 android.software.live_wallpaper.xml-rw-r--r--  1 root root   748 2009-01-01 16:00 android.software.webview.xml-rw-r--r--  1 root root  1778 2009-01-01 16:00 com.android.ims.rcsmanager.xml-rw-r--r--  1 root root   828 2009-01-01 16:00 com.android.location.provider.xml-rw-r--r--  1 root root   828 2009-01-01 16:00 com.android.media.remotedisplay.xml-rw-r--r--  1 root root   820 2009-01-01 16:00 com.android.mediadrm.signer.xml-rw-r--r--  1 root root   158 2009-01-01 16:00 com.android.omadm.service.xml-rw-r--r--  1 root root   435 2009-01-01 16:00 com.android.sdm.plugins.connmo.xml-rw-r--r--  1 root root   701 2009-01-01 16:00 com.android.sdm.plugins.sprintdm.xml-rw-r--r--  1 root root   234 2009-01-01 16:00 com.android.vzwomatrigger.xml-rw-r--r--  1 root root  1079 2009-01-01 16:00 com.customermobile.preload.vzw.xml-rw-r--r--  1 root root   850 2009-01-01 16:00 com.google.android.camera.experimental2016.xml-rw-r--r--  1 root root   563 2009-01-01 16:00 com.google.android.dialer.support.xml-rw-r--r--  1 root root   816 2009-01-01 16:00 com.google.android.maps.xml-rw-r--r--  1 root root   835 2009-01-01 16:00 com.google.android.media.effects.xml-rw-r--r--  1 root root   811 2009-01-01 16:00 com.google.vr.platform.xml-rw-r--r--  1 root root   160 2009-01-01 16:00 com.verizon.apn.xml-rw-r--r--  1 root root   158 2009-01-01 16:00 com.verizon.embms.xml-rw-r--r--  1 root root   288 2009-01-01 16:00 com.verizon.llkagent.xml-rw-r--r--  1 root root   174 2009-01-01 16:00 com.verizon.provider.xml-rw-r--r--  1 root root   220 2009-01-01 16:00 com.verizon.services.xml-rw-r--r--  1 root root   239 2009-01-01 16:00 features-verizon.xml-rw-r--r--  1 root root   811 2009-01-01 16:00 obdm_permissions.xml-rw-r--r--  1 root root  8916 2009-01-01 16:00 platform.xml-rw-r--r--  1 root root 23092 2009-01-01 16:00 privapp-permissions-google.xml-rw-r--r--  1 root root  1346 2009-01-01 16:00 privapp-permissions-marlin.xml-rw-r--r--  1 root root 20848 2009-01-01 16:00 privapp-permissions-platform.xml-rw-r--r--  1 root root  1587 2009-01-01 16:00 vzw_mvs_permissions.xmlsailfish:/system/etc/permissions $</code></pre><p>既然我们上面一直在说 platform.xml 这个文件，那就看下 <strong><font color="#FF0000">platform.xml</font></strong> 有什么：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>permissions</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 建立权限名与 gid 的映射关系。如下面声明的 BLUETOOTH_ADMIN 权限，         它对应的用户组是 net_bt_admin。注意，该文件中的 permission 标签只对         那些需要通过读写设备（蓝牙/cameta）/创建 socket 等进程划分了 gid。         因为这些权限涉及和 Linux 内核交互，所以需要在底层权限（由不用的用户组界定）         和 Android 层权限（由不同的字符串界定）之间建立映射关系。 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>permission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.BLUETOOTH_ADMIN<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">gid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>net_bt_admin<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>permission</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>permission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.BLUETOOTH<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">gid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>net_bt<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>permission</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>permission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.BLUETOOTH_STACK<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">gid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bluetooth<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">gid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wakelock<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">gid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uhid<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>permission</span><span class="token punctuation">></span></span>    ... ...    <span class="token comment" spellcheck="true">&lt;!-- 赋予对应 uid 相应的权限。如果下面一行表示 uid 为 audioserver，那么就         赋予它 WAKE_LOCK 的权限，其实就是把它加到对应的用户组中 --></span>    ... ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>assign-permission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.MODIFY_AUDIO_SETTINGS<span class="token punctuation">"</span></span> <span class="token attr-name">uid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audioserver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>assign-permission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.ACCESS_SURFACE_FLINGER<span class="token punctuation">"</span></span> <span class="token attr-name">uid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audioserver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>assign-permission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.WAKE_LOCK<span class="token punctuation">"</span></span> <span class="token attr-name">uid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audioserver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>assign-permission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.UPDATE_DEVICE_STATS<span class="token punctuation">"</span></span> <span class="token attr-name">uid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audioserver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>assign-permission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.UPDATE_APP_OPS_STATS<span class="token punctuation">"</span></span> <span class="token attr-name">uid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audioserver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    ... ...    <span class="token comment" spellcheck="true">&lt;!-- This is a list of all the libraries available for application         code to link against. --></span>    <span class="token comment" spellcheck="true">&lt;!-- 系统提供的 Java 库，应用程序运行时必须要链接这些库，该工作由系统自动完成 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>library</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.test.mock<span class="token punctuation">"</span></span>            <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/system/framework/android.test.mock.jar<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>library</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.test.runner<span class="token punctuation">"</span></span>            <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/system/framework/android.test.runner.jar<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>library</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javax.obex<span class="token punctuation">"</span></span>            <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/system/framework/javax.obex.jar<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>library</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.http.legacy<span class="token punctuation">"</span></span>            <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/system/framework/org.apache.http.legacy.jar<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    ... ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>permissions</span><span class="token punctuation">></span></span></code></pre><p>platform.xml 文件中主要使用了如下 <strong><font color="#FF0000">4 个标签</font></strong>：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;<strong><font color="#87CEFA">permission</font></strong> 和 <strong><font color="#87CEFA">group</font></strong> 用于建立 Linux 层 gid 和 Andrid 层 permission 之间的映射关系。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;<strong><font color="#87CEFA">assign-permission</font></strong> 用于向指定的 uid 赋予相应的权限。这个权限由 Android 定义，用于字符串表示。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;<strong><font color="#87CEFA">library</font></strong> 用于指定系统库。当应用程序运行时，系统会自动为这些进程加载这些库。</p><p>不知道你是否已经产生了疑问？设备上的 /system/etc/permission 目录中的文件是从哪里来的？我直接告诉你答案：在编译阶段由不用硬件平台根据自己的配置信息复制相关文件到目标目录中的来的。（这个具体我们不讨论，有兴趣的读者可以自行查阅） </p><h3 id="3-3-3-readPermissionFromXML"><a href="#3-3-3-readPermissionFromXML" class="headerlink" title="3.3.3 readPermissionFromXML"></a>3.3.3 readPermissionFromXML</h3><p>前面我们说过：<code>readPermissions</code> 函数其实就是调用 <code>readPermissionFromXml</code> 函数解析 <code>&quot;/xxx/etc/permissions/&quot;</code> 目录下的文件！</p><p>readPermissionFromXml 又有什么作用？其实它的作用就是将 XML 文件中的标签以及它们之间的关系转换成代码中的相应数据结构，直接看源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/core/java/com/android/server/SystemConfig.java</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readPermissionsFromXml</span><span class="token punctuation">(</span>File permFile<span class="token punctuation">,</span> <span class="token keyword">int</span> permissionFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    FileReader permReader <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> lowRam <span class="token operator">=</span> ActivityManager<span class="token punctuation">.</span><span class="token function">isLowRamDeviceStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        XmlPullParser parser <span class="token operator">=</span> Xml<span class="token punctuation">.</span><span class="token function">newPullParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parser<span class="token punctuation">.</span><span class="token function">setInput</span><span class="token punctuation">(</span>permReader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            String name <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析 group 标签</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"group"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> allowAll<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String gidStr <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"gid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>gidStr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> gid <span class="token operator">=</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Process<span class="token punctuation">.</span><span class="token function">getGidForName</span><span class="token punctuation">(</span>gidStr<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 转换 XML 中的 gid 字符串为整型，并保存到 mGlobalGids中</span>                    mGlobalGids <span class="token operator">=</span> <span class="token function">appendInt</span><span class="token punctuation">(</span>mGlobalGids<span class="token punctuation">,</span> gid<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"&lt;group> without gid in "</span> <span class="token operator">+</span> permFile <span class="token operator">+</span> <span class="token string">" at "</span>                            <span class="token operator">+</span> parser<span class="token punctuation">.</span><span class="token function">getPositionDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                XmlUtils<span class="token punctuation">.</span><span class="token function">skipCurrentTag</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析 permission标签</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"permission"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> allowPermissions<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String perm <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>perm <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    XmlUtils<span class="token punctuation">.</span><span class="token function">skipCurrentTag</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                perm <span class="token operator">=</span> perm<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 调用 readPermission 处理</span>                <span class="token function">readPermission</span><span class="token punctuation">(</span>parser<span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析 assign-permission 标签</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"assign-permission"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> allowPermissions<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String perm <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                String uidStr <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token comment" spellcheck="true">// 如果是 assign-permission，则取出 uid 字符串，然后获得 Linux 平台上的整型 uid 值</span>                <span class="token keyword">int</span> uid <span class="token operator">=</span> Process<span class="token punctuation">.</span><span class="token function">getUidForName</span><span class="token punctuation">(</span>uidStr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                perm <span class="token operator">=</span> perm<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 和 assign 相关的信息保存在 mSystemPermissions 中</span>                ArraySet<span class="token operator">&lt;</span>String<span class="token operator">></span> perms <span class="token operator">=</span> mSystemPermissions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>perms <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    perms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArraySet</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    mSystemPermissions<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> perms<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                perms<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>perm<span class="token punctuation">)</span><span class="token punctuation">;</span>                XmlUtils<span class="token punctuation">.</span><span class="token function">skipCurrentTag</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析 library 标签</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"library"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> allowLibs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String lname <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String lfile <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lname <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lfile <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token comment" spellcheck="true">// 将 XML 中的 name 和 library 属性值存储到 mSharedLibraries 中</span>                    mSharedLibraries<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>lname<span class="token punctuation">,</span> lfile<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                XmlUtils<span class="token punctuation">.</span><span class="token function">skipCurrentTag</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析 feature标签</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"feature"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> allowFeatures<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String fname <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> fversion <span class="token operator">=</span> XmlUtils<span class="token punctuation">.</span><span class="token function">readIntAttribute</span><span class="token punctuation">(</span>parser<span class="token punctuation">,</span> <span class="token string">"version"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> allowed<span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"unavailable-feature"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> allowFeatures<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 解析其它标签</span>        <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><strong><font color="#FF0000">readPermission 函数果然是将 XML 中的标签转换成对应的数据结构！！！</font></strong></p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>&nbsp;📕 01. <a href="https://www.2cto.com/kf/201609/551752.html" target="_blank" rel="noopener">Android 7.0 PackageManagerService (2) – PKMS 构造函数的主要工作</a><br>&nbsp;📕 02. <a href="https://www.jianshu.com/p/8e2831428110" target="_blank" rel="noopener">APK 安装流程详解 7 – PackageManagerService 的启动流程(上)</a></p><hr><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>推荐跳转：<a href="https://superandroid.pro/2019/12/31/%E3%80%8AThinking%20in%20Android%E3%80%8B%20--%2001.%20%E5%8D%9A%E5%AE%A2%E7%B4%A2%E5%BC%95/">博客索引（Android 9.0）</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://superandroid.pro/2019/01/05/%E3%80%90%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1%E3%80%91Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%882%EF%BC%89%E4%B9%8B%20%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/">Framework 核心服务之 PMS 钻研（2）- 构造函数</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PackageManagerService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入钻研 Android 启动阶段 之 Launcher 启动和加载</title>
      <link href="/2018/12/26/01.xi-tong-qi-dong-jie-duan-android-xi-tong-qi-dong-pian-shen-ru-zuan-yan-android-qi-dong-jie-duan-zhi-launcher/"/>
      <url>/2018/12/26/01.xi-tong-qi-dong-jie-duan-android-xi-tong-qi-dong-pian-shen-ru-zuan-yan-android-qi-dong-jie-duan-zhi-launcher/</url>
      
        <content type="html"><![CDATA[<p><br></p><center>🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 </center><br><center><strong><font color="#1874CD"><font color="#3A5FCD" size="4">Android 启动阶段系列</font></font></strong></center><br><center>🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 </center><p><br></p><table><thead><tr><th style="text-align:center"><strong><font color="#EE2C2C" size="3">【启动阶段】</font></strong></th><th style="text-align:center"><strong><font color="#0000FF" size="3">【相关文章】</font></strong></th><th style="text-align:center"><strong><font color="#9932CC" size="3">源码版本</font></strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">init</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/12/01/%E3%80%90%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%E3%80%91Android%20%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E9%92%BB%E7%A0%94%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20init/">深入钻研 Android 启动阶段 之 init</a></td><td style="text-align:center"><font color="#FF0000" size="3">Android 9.0</font></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">zygote</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/12/10/%E3%80%90%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%E3%80%91Android%20%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E9%92%BB%E7%A0%94%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20zygote/">深入钻研 Android 启动阶段 之 zygote</a></td><td style="text-align:center"><font color="#FF0000" size="3">Android 9.0</font></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">systemserver</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/12/18/%E3%80%90%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%E3%80%91Android%20%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E9%92%BB%E7%A0%94%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20systemserver/">深入钻研 Android 启动阶段 之 systemserver</a></td><td style="text-align:center"><font color="#FF0000" size="3">Android 9.0</font></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">Launcher</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/12/26/%E3%80%90%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%E3%80%91Android%20%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E9%92%BB%E7%A0%94%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20Launcher/">深入钻研 Android 启动阶段 之 Launcher 启动及加载流程</a></td><td style="text-align:center"><font color="#FF0000" size="3">Android 9.0</font></td></tr></tbody></table><p><br></p><p><strong><font color="#3A5FCD" size="4">博文修改日志</font></strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">1、重新梳理 Launcher 启动和加载流程（Android 9.0）；</font><br><br></p><hr><h1 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h1><h2 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">SystemServer.java</font></td><td>frameworks/base/services/java/com/android/server/SystemServer.java</td></tr><tr><td><font color="#D15FEE">ActivityManagerService.java</font></td><td>frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</td></tr><tr><td><font color="#D15FEE">ActivityStack.java</font></td><td>frameworks/base/services/core/java/com/android/server/am/ActivityStack.java</td></tr><tr><td><font color="#D15FEE">ActivityStackSupervisor.java</font></td><td>frameworks/base/services/core/java/com/android/server/am/ActivityStackSupervisor.java</td></tr><tr><td><font color="#D15FEE">Launcher.java</font></td><td>packages/apps/Launcher3/src/com/android/launcher3/Launcher.java</td></tr><tr><td><font color="#D15FEE">LauncherModel.java</font></td><td>packages/apps/Launcher3/src/com/android/launcher3/LauncherModel.java</td></tr></tbody></table><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Android系统启动的最后一步是启动一个Home应用程序，这个应用程序用来显示系统中已经安装的应用程序，这个Home应用程序就叫做Launcher。应用程序Launcher在启动过程中会请求PackageManagerService返回系统中已经安装的应用程序的信息，并将这些信息封装成一个快捷图标列表显示在系统屏幕上，这样用户可以通过点击这些快捷图标来启动相应的应用程序。</p><h1 id="Launcher-启动流程"><a href="#Launcher-启动流程" class="headerlink" title="Launcher 启动流程"></a>Launcher 启动流程</h1><h2 id="startOtherServices"><a href="#startOtherServices" class="headerlink" title="startOtherServices"></a>startOtherServices</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> ActivityManagerService mActivityManagerService<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startOtherServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mActivityManagerService<span class="token punctuation">.</span><span class="token function">systemReady</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Making services ready"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="systemReady"><a href="#systemReady" class="headerlink" title="systemReady"></a>systemReady</h2><p>在 startOtherServices 函数中，会调用 ActivityManagerService 的 systemReady 函数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> ActivityStackSupervisor mStackSupervisor<span class="token punctuation">;</span><span class="token keyword">final</span> UserController mUserController<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">systemReady</span><span class="token punctuation">(</span><span class="token keyword">final</span> Runnable goingCallback<span class="token punctuation">,</span> TimingsTraceLog traceLog<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            mStackSupervisor<span class="token punctuation">.</span><span class="token function">resumeFocusedStackTopActivityLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mUserController<span class="token punctuation">.</span><span class="token function">sendUserSwitchBroadcastsLocked</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> currentUserId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    </code></pre><h2 id="resumeFocusedStackTopActivityLocked"><a href="#resumeFocusedStackTopActivityLocked" class="headerlink" title="resumeFocusedStackTopActivityLocked"></a>resumeFocusedStackTopActivityLocked</h2><p>我们看下 resumeFocusedStackTopActivityLocked()：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">boolean</span> <span class="token function">resumeFocusedStackTopActivityLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">resumeFocusedStackTopActivityLocked</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>ok，函数跳转：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">boolean</span> <span class="token function">resumeFocusedStackTopActivityLocked</span><span class="token punctuation">(</span>            ActivityStack targetStack<span class="token punctuation">,</span> ActivityRecord target<span class="token punctuation">,</span> ActivityOptions targetOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">readyToResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetStack <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">isFocusedStack</span><span class="token punctuation">(</span>targetStack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> targetStack<span class="token punctuation">.</span><span class="token function">resumeTopActivityUncheckedLocked</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> targetOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> ActivityRecord r <span class="token operator">=</span> mFocusedStack<span class="token punctuation">.</span><span class="token function">topRunningActivityLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> null <span class="token operator">||</span> r<span class="token punctuation">.</span>state <span class="token operator">!=</span> RESUMED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mFocusedStack<span class="token punctuation">.</span><span class="token function">resumeTopActivityUncheckedLocked</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>state <span class="token operator">==</span> RESUMED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Kick off any lingering app transitions form the MoveTaskToFront operation.</span>            mFocusedStack<span class="token punctuation">.</span><span class="token function">executeAppTransition</span><span class="token punctuation">(</span>targetOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="resumeTopActivityUncheckedLocked"><a href="#resumeTopActivityUncheckedLocked" class="headerlink" title="resumeTopActivityUncheckedLocked"></a>resumeTopActivityUncheckedLocked</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">boolean</span> <span class="token function">resumeTopActivityUncheckedLocked</span><span class="token punctuation">(</span>ActivityRecord prev<span class="token punctuation">,</span> ActivityOptions options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mStackSupervisor<span class="token punctuation">.</span>inResumeTopActivity<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Don't even start recursing.</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Protect against recursion.</span>            mStackSupervisor<span class="token punctuation">.</span>inResumeTopActivity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token function">resumeTopActivityInnerLocked</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            mStackSupervisor<span class="token punctuation">.</span>inResumeTopActivity <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> ActivityRecord next <span class="token operator">=</span> <span class="token function">topRunningActivityLocked</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* focusableOnly */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>next<span class="token punctuation">.</span><span class="token function">canTurnScreenOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkReadyForSleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="resumeTopActivityInnerLocked"><a href="#resumeTopActivityInnerLocked" class="headerlink" title="resumeTopActivityInnerLocked"></a>resumeTopActivityInnerLocked</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">resumeTopActivityInnerLocked</span><span class="token punctuation">(</span>ActivityRecord prev<span class="token punctuation">,</span> ActivityOptions options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> <span class="token function">isOnHomeDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            mStackSupervisor<span class="token punctuation">.</span><span class="token function">resumeHomeStackTask</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> <span class="token string">"prevFinished"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="resumeHomeStackTask"><a href="#resumeHomeStackTask" class="headerlink" title="resumeHomeStackTask"></a>resumeHomeStackTask</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">boolean</span> <span class="token function">resumeHomeStackTask</span><span class="token punctuation">(</span>ActivityRecord prev<span class="token punctuation">,</span> String reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// Only resume home activity if isn't finishing.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>r<span class="token punctuation">.</span>finishing<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">moveFocusableActivityStackToFrontLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> myReason<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">resumeFocusedStackTopActivityLocked</span><span class="token punctuation">(</span>mHomeStack<span class="token punctuation">,</span> prev<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> mService<span class="token punctuation">.</span><span class="token function">startHomeActivityLocked</span><span class="token punctuation">(</span>mCurrentUser<span class="token punctuation">,</span> myReason<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="startHomeActivityLocked"><a href="#startHomeActivityLocked" class="headerlink" title="startHomeActivityLocked"></a>startHomeActivityLocked</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// String mTopAction = Intent.ACTION_MAIN;</span><span class="token keyword">boolean</span> <span class="token function">startHomeActivityLocked</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">,</span> String reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mFactoryTest <span class="token operator">==</span> FactoryTest<span class="token punctuation">.</span>FACTORY_TEST_LOW_LEVEL            <span class="token operator">&amp;&amp;</span> mTopAction <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Intent intent <span class="token operator">=</span> <span class="token function">getHomeIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ActivityInfo aInfo <span class="token operator">=</span> <span class="token function">resolveActivityInfo</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> STOCK_PM_FLAGS<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>aInfo <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        intent<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span>aInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> aInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        aInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActivityInfo</span><span class="token punctuation">(</span>aInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        aInfo<span class="token punctuation">.</span>applicationInfo <span class="token operator">=</span> <span class="token function">getAppInfoForUser</span><span class="token punctuation">(</span>aInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        ProcessRecord app <span class="token operator">=</span> <span class="token function">getProcessRecordLocked</span><span class="token punctuation">(</span>aInfo<span class="token punctuation">.</span>processName<span class="token punctuation">,</span>                aInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>uid<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>app <span class="token operator">==</span> null <span class="token operator">||</span> app<span class="token punctuation">.</span>instr <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            intent<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>intent<span class="token punctuation">.</span><span class="token function">getFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_NEW_TASK<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> resolvedUserId <span class="token operator">=</span> UserHandle<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span>aInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> String myReason <span class="token operator">=</span> reason <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> resolvedUserId<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 启动 Launcher</span>            mActivityStarter<span class="token punctuation">.</span><span class="token function">startHomeActivityLocked</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> aInfo<span class="token punctuation">,</span> myReason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        Slog<span class="token punctuation">.</span><span class="token function">wtf</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"No home screen found for "</span> <span class="token operator">+</span> intent<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Throwable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="getHomeIntent"><a href="#getHomeIntent" class="headerlink" title="getHomeIntent"></a>getHomeIntent</h2><pre class=" language-java"><code class="language-java">    Intent <span class="token function">getHomeIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>mTopAction<span class="token punctuation">,</span> mTopData <span class="token operator">!=</span> null <span class="token operator">?</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>mTopData<span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span>mTopComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_DEBUG_TRIAGED_MISSING<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mFactoryTest <span class="token operator">!=</span> FactoryTest<span class="token punctuation">.</span>FACTORY_TEST_LOW_LEVEL<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果系统运行模式不是低级工厂模式则将 intent的Category 设置为 Intent.CATEGORY_HOME</span>            intent<span class="token punctuation">.</span><span class="token function">addCategory</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>CATEGORY_HOME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> intent<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="Launcher-应用图标显示流程"><a href="#Launcher-应用图标显示流程" class="headerlink" title="Launcher 应用图标显示流程"></a>Launcher 应用图标显示流程</h1><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        LauncherAppState app <span class="token operator">=</span> LauncherAppState<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        mModel <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">setLauncher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mModel<span class="token punctuation">.</span><span class="token function">startLoader</span><span class="token punctuation">(</span>currentScreen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mDragLayer<span class="token punctuation">.</span><span class="token function">setAlpha</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mWorkspace<span class="token punctuation">.</span><span class="token function">setCurrentPage</span><span class="token punctuation">(</span>currentScreen<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setWorkspaceLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="setLauncher"><a href="#setLauncher" class="headerlink" title="setLauncher"></a>setLauncher</h2><pre class=" language-java"><code class="language-java">    LauncherModel <span class="token function">setLauncher</span><span class="token punctuation">(</span>Launcher launcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getLocalProvider</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLauncherProviderChangeListener</span><span class="token punctuation">(</span>launcher<span class="token punctuation">)</span><span class="token punctuation">;</span>        mModel<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>launcher<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="initialize"><a href="#initialize" class="headerlink" title="initialize"></a>initialize</h2><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Set this as the current Launcher activity object for the loader.     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span>Callbacks callbacks<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Preconditions<span class="token punctuation">.</span><span class="token function">assertUIThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mCallbacks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>callbacks<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>在 initialize 函数中会将 Callbacks，也就是传入的 Launcher 封装成一个弱引用对象，因此我们得知 mCallbacks 变量指的就是封装成弱引用对象的 Launcher。</p><p>重新回到 oncreate() 函数，有个 startLoader 方法！</p><h2 id="startLoader"><a href="#startLoader" class="headerlink" title="startLoader"></a>startLoader</h2><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 创建了具有消息循环的线程 HandlerThread 对象</span>    <span class="token annotation punctuation">@Thunk</span> <span class="token keyword">static</span> <span class="token keyword">final</span> HandlerThread sWorkerThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerThread</span><span class="token punctuation">(</span><span class="token string">"launcher-loader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        sWorkerThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建了 Handler，并且传入 HandlerThread 的 Looper</span>    <span class="token annotation punctuation">@Thunk</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Handler sWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>sWorkerThread<span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startLoader</span><span class="token punctuation">(</span><span class="token keyword">int</span> synchronousBindPage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        InstallShortcutReceiver<span class="token punctuation">.</span><span class="token function">enableInstallQueue</span><span class="token punctuation">(</span>InstallShortcutReceiver<span class="token punctuation">.</span>FLAG_LOADER_RUNNING<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallbacks <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> mCallbacks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> Callbacks oldCallbacks <span class="token operator">=</span> mCallbacks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mUiExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                oldCallbacks<span class="token punctuation">.</span><span class="token function">clearPendingBinds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">stopLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                LoaderResults loaderResults <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoaderResults</span><span class="token punctuation">(</span>mApp<span class="token punctuation">,</span> sBgDataModel<span class="token punctuation">,</span>                        mBgAllAppsList<span class="token punctuation">,</span> synchronousBindPage<span class="token punctuation">,</span> mCallbacks<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mModelLoaded <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mIsLoaderTaskRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    loaderResults<span class="token punctuation">.</span><span class="token function">bindWorkspace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    loaderResults<span class="token punctuation">.</span><span class="token function">bindAllApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    loaderResults<span class="token punctuation">.</span><span class="token function">bindDeepShortcuts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    loaderResults<span class="token punctuation">.</span><span class="token function">bindWidgets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">startLoaderForResults</span><span class="token punctuation">(</span>loaderResults<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="startLoaderForResults"><a href="#startLoaderForResults" class="headerlink" title="startLoaderForResults"></a>startLoaderForResults</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startLoaderForResults</span><span class="token punctuation">(</span>LoaderResults results<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">stopLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mLoaderTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoaderTask</span><span class="token punctuation">(</span>mApp<span class="token punctuation">,</span> mBgAllAppsList<span class="token punctuation">,</span> sBgDataModel<span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">runOnWorkerThread</span><span class="token punctuation">(</span>mLoaderTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="runOnWorkerThread"><a href="#runOnWorkerThread" class="headerlink" title="runOnWorkerThread"></a>runOnWorkerThread</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runOnWorkerThread</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sWorkerThread<span class="token punctuation">.</span><span class="token function">getThreadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Process<span class="token punctuation">.</span><span class="token function">myTid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// If we are not on the worker thread, then post to the worker handler</span>            sWorker<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>当 LoaderTask 所描述的消息被处理时则会调用它的 run 函数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoaderTask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Skip fast if we are already stopped.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mStopped<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>LauncherModel<span class="token punctuation">.</span>LoaderTransaction transaction <span class="token operator">=</span> mApp<span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beginLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_LOADERS<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"step 1.1: loading workspace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">loadWorkspace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 加载工作区信息</span>            <span class="token function">verifyNotStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_LOADERS<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"step 1.2: bind workspace workspace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mResults<span class="token punctuation">.</span><span class="token function">bindWorkspace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">// second step</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_LOADERS<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"step 2.1: loading all apps"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">loadAllApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 加载系统已经安装的应用程序信息</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_LOADERS<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"step 2.2: Binding all apps"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">verifyNotStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mResults<span class="token punctuation">.</span><span class="token function">bindAllApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">// third step</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_LOADERS<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"step 3.1: loading deep shortcuts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">loadDeepShortcuts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">verifyNotStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_LOADERS<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"step 3.2: bind deep shortcuts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mResults<span class="token punctuation">.</span><span class="token function">bindDeepShortcuts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">// fourth step</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_LOADERS<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"step 4.1: loading widgets"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mBgDataModel<span class="token punctuation">.</span>widgetsModel<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>mApp<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">verifyNotStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_LOADERS<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"step 4.2: Binding widgets"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mResults<span class="token punctuation">.</span><span class="token function">bindWidgets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            transaction<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CancellationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Loader stopped, ignore</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_LOADERS<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Loader cancelled"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>看下 loadAllApps() ：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadAllApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> loadTime <span class="token operator">=</span> DEBUG_LOADERS <span class="token operator">?</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> List<span class="token operator">&lt;</span>UserHandle<span class="token operator">></span> profiles <span class="token operator">=</span> mUserManager<span class="token punctuation">.</span><span class="token function">getUserProfiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mBgAllAppsList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>UserHandle user <span class="token operator">:</span> profiles<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">long</span> qiaTime <span class="token operator">=</span> DEBUG_LOADERS <span class="token operator">?</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> List<span class="token operator">&lt;</span>LauncherActivityInfo<span class="token operator">></span> apps <span class="token operator">=</span> mLauncherApps<span class="token punctuation">.</span><span class="token function">getActivityList</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>apps <span class="token operator">==</span> null <span class="token operator">||</span> apps<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">boolean</span> quietMode <span class="token operator">=</span> mUserManager<span class="token punctuation">.</span><span class="token function">isQuietModeEnabled</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> apps<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                LauncherActivityInfo app <span class="token operator">=</span> apps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                mBgAllAppsList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AppInfo</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> user<span class="token punctuation">,</span> quietMode<span class="token punctuation">)</span><span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ManagedProfileHeuristic<span class="token punctuation">.</span><span class="token function">onAllAppsLoaded</span><span class="token punctuation">(</span>mApp<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> apps<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>FeatureFlags<span class="token punctuation">.</span>LAUNCHER3_PROMISE_APPS_IN_ALL_APPS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>PackageInstaller<span class="token punctuation">.</span>SessionInfo info <span class="token operator">:</span>                    mPackageInstaller<span class="token punctuation">.</span><span class="token function">getAllVerifiedSessions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mBgAllAppsList<span class="token punctuation">.</span><span class="token function">addPromiseApp</span><span class="token punctuation">(</span>mApp<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        PackageInstallerCompat<span class="token punctuation">.</span>PackageInstallInfo<span class="token punctuation">.</span><span class="token function">fromInstallingState</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        mBgAllAppsList<span class="token punctuation">.</span>added <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="参考Blog"><a href="#参考Blog" class="headerlink" title="参考Blog"></a>参考Blog</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 01. <a href="http://liuwangshu.cn/framework/booting/4-launcher.html" target="_blank" rel="noopener">http://liuwangshu.cn/framework/booting/4-launcher.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 系统启动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Launcher </tag>
            
            <tag> 启动阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入钻研 Android 启动阶段 之 systemserver</title>
      <link href="/2018/12/18/01.xi-tong-qi-dong-jie-duan-android-xi-tong-qi-dong-pian-shen-ru-zuan-yan-android-qi-dong-jie-duan-zhi-systemserver/"/>
      <url>/2018/12/18/01.xi-tong-qi-dong-jie-duan-android-xi-tong-qi-dong-pian-shen-ru-zuan-yan-android-qi-dong-jie-duan-zhi-systemserver/</url>
      
        <content type="html"><![CDATA[<p><br></p><center>🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 </center><br><center><strong><font color="#1874CD"><font color="#3A5FCD" size="4">Android 启动阶段系列</font></font></strong></center><br><center>🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 </center><p><br></p><table><thead><tr><th style="text-align:center"><strong><font color="#EE2C2C" size="3">【启动阶段】</font></strong></th><th style="text-align:center"><strong><font color="#0000FF" size="3">【相关文章】</font></strong></th><th style="text-align:center"><strong><font color="#9932CC" size="3">源码版本</font></strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">init</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/12/01/%E3%80%90%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%E3%80%91Android%20%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E9%92%BB%E7%A0%94%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20init/">深入钻研 Android 启动阶段 之 init</a></td><td style="text-align:center"><font color="#FF0000" size="3">Android 9.0</font></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">zygote</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/12/10/%E3%80%90%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%E3%80%91Android%20%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E9%92%BB%E7%A0%94%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20zygote/">深入钻研 Android 启动阶段 之 zygote</a></td><td style="text-align:center"><font color="#FF0000" size="3">Android 9.0</font></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">systemserver</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/12/18/%E3%80%90%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%E3%80%91Android%20%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E9%92%BB%E7%A0%94%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20systemserver/">深入钻研 Android 启动阶段 之 systemserver</a></td><td style="text-align:center"><font color="#FF0000" size="3">Android 9.0</font></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">Launcher</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/12/26/%E3%80%90%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%E3%80%91Android%20%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E9%92%BB%E7%A0%94%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20Launcher/">深入钻研 Android 启动阶段 之 Launcher 启动及加载流程</a></td><td style="text-align:center"><font color="#FF0000" size="3">Android 9.0</font></td></tr></tbody></table><p><br></p><p><strong><font color="#3A5FCD" size="4">博文修改日志</font></strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">1、重新梳理 systemserver 源码（Android 9.0）；</font><br><br></p><hr><h1 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h1><h2 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">com_android_internal_os_Zygote.cpp</font></td><td>frameworks/base/core/jni/com_android_internal_os_Zygote.cpp</td></tr><tr><td><font color="#D15FEE">AndroidRuntime.cpp</font></td><td>frameworks/base/core/jni/AndroidRuntime.cpp</td></tr><tr><td><font color="#D15FEE">ZygoteInit.java</font></td><td>frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</td></tr><tr><td><font color="#D15FEE">Zygote.java</font></td><td>frameworks/base/core/java/com/android/internal/os/Zygote.java</td></tr><tr><td><font color="#D15FEE">ActivityThread.java</font></td><td>frameworks/base/core/java/android/app/ActivityThread.java</td></tr><tr><td><font color="#D15FEE">ContextImpl.java.java</font></td><td>frameworks/base/core/java/android/app/ContextImpl.java</td></tr><tr><td><font color="#D15FEE">LoadedApk.java.java</font></td><td>frameworks/base/core/java/android/app/LoadedApk.java</td></tr><tr><td><font color="#D15FEE">SystemServer.java</font></td><td>frameworks/base/services/java/com/android/server/SystemServer.java</td></tr><tr><td><font color="#D15FEE">RuntimeInit.java</font></td><td>frameworks/base/core/java/com/android/internal/os/RuntimeInit.java</td></tr></tbody></table><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SystemServer是什么？它是Android Java的两大支柱之一。另外一个支柱是专门负责孵化Java进程的Zygote（Zygote进程是整个android系统的根进程）。这两个支柱倒了任何一个，都会导致Android Java的崩溃（所有由Zygote孵化的Java进程都会被销毁，而SystemServer就是由Zygote孵化而来）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;若Android Java真的崩溃了，那么Linux系统中的进程init会重新启动“两大支柱”以重建Android Java。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SystemServer和系统服务有着重要的关系，Android系统中几乎所有的核心服务都是在这个进程中，如：ActivityManagerService、PowerManagerService和WindowManagerService等。当我们的应用需要使用各种系统服务的时候，其实也是通过与SystemServer进程通讯获取各种服务对象的句柄，进而执行相应的操作。</p><h1 id="Read-The-Fucking-Code"><a href="#Read-The-Fucking-Code" class="headerlink" title="Read The Fucking Code"></a>Read The Fucking Code</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SystemServer是由Zygote孵化而来的一个进程，通过ps命令，我们发现其进程名为：system_server。</p><h2 id="启动SystemServer进程"><a href="#启动SystemServer进程" class="headerlink" title="启动SystemServer进程"></a>启动SystemServer进程</h2><p>在分析zygote进程时，我们知道当zygote进程进入到java世界后，在ZygoteInit.java中，将调用startSystemServer函数启动SystemServer进程，其关键代码是：</p><pre class=" language-C++"><code class="language-C++">            if (startSystemServer) {                Runnable r = forkSystemServer(abiList, socketName, zygoteServer);                 // fork出system server                // {@code r == null} in the parent (zygote) process, and {@code r != null} in the                // child (system_server) process.                if (r != null) {                    r.run();                    return;                }            }</code></pre><p>我们看下forkSystemServer()：</p><pre class=" language-C++"><code class="language-C++">// 我们这边挑出重要代码讲解，详细代码分析请参考Zygote篇/* Request to fork the system server process */pid = Zygote.forkSystemServer(        parsedArgs.uid, parsedArgs.gid,        parsedArgs.gids,        parsedArgs.debugFlags,        null,        parsedArgs.permittedCapabilities,        parsedArgs.effectiveCapabilities);</code></pre><p>老样子，源码继续跟下去：</p><pre class=" language-C++"><code class="language-C++">    public static int forkSystemServer(int uid, int gid, int[] gids, int debugFlags,            int[][] rlimits, long permittedCapabilities, long effectiveCapabilities) {        VM_HOOKS.preFork();        // Resets nice priority for zygote process.        resetNicePriority();        int pid = nativeForkSystemServer(                uid, gid, gids, debugFlags, rlimits, permittedCapabilities, effectiveCapabilities);        // Enable tracing as soon as we enter the system_server.        if (pid == 0) {            Trace.setTracingEnabled(true, debugFlags);        }        VM_HOOKS.postForkCommon();        return pid;    }</code></pre><p>容易看出，该函数通过调用native方法，完成实际的创建操作。该Native方法定义于frameworks/base/core/jni/com_android_internal_os_Zygote.cpp中。 我们来看看对应的native函数。</p><pre class=" language-C++"><code class="language-C++">static jint com_android_internal_os_Zygote_nativeForkSystemServer(        JNIEnv* env, jclass, uid_t uid, gid_t gid, jintArray gids,        jint debug_flags, jobjectArray rlimits, jlong permittedCapabilities,        jlong effectiveCapabilities) {  // 进行实际的“分裂”工作  pid_t pid = ForkAndSpecializeCommon(env, uid, gid, gids,                                      debug_flags, rlimits,                                      permittedCapabilities, effectiveCapabilities,                                      MOUNT_EXTERNAL_DEFAULT, NULL, NULL, true, NULL,                                      NULL, NULL, NULL);  if (pid > 0) {      // The zygote process checks whether the child process has died or not.      ALOGI("System server process %d has been created", pid);      // 这里SystemServer进程已经创建出来，pid > 0 说明在父进程中      // 将子进程SystemServer的pid存在zygote进程的全局变量中      gSystemServerPid = pid;      // There is a slight window that the system server process has crashed      // but it went unnoticed because we haven't published its pid yet. So      // we recheck here just to make sure that all is well.      int status;      if (waitpid(pid, &status, WNOHANG) == pid) {          // 小概率，SystemServer进程刚创建，就crash；此时需要重启zygote          ALOGE("System server process %d has died. Restarting Zygote!", pid);          RuntimeAbort(env, __LINE__, "System server process has died. Restarting Zygote!");      }      // Assign system_server to the correct memory cgroup.      if (!WriteStringToFile(StringPrintf("%d", pid), "/dev/memcg/system/tasks")) {        ALOGE("couldn't write %d to /dev/memcg/system/tasks", pid);      }  }  return pid;}</code></pre><p>上述代码中，实际的“分裂”工作，由函数ForAndSpecializeCommon完成。</p><pre class=" language-C++"><code class="language-C++">// Utility routine to fork zygote and specialize the child process.static pid_t ForkAndSpecializeCommon(JNIEnv* env, uid_t uid, gid_t gid, jintArray javaGids,                                     jint debug_flags, jobjectArray javaRlimits,                                     jlong permittedCapabilities, jlong effectiveCapabilities,                                     jint mount_external,                                     jstring java_se_info, jstring java_se_name,                                     bool is_system_server, jintArray fdsToClose,                                     jintArray fdsToIgnore,                                     jstring instructionSet, jstring dataDir) {  SetSigChldHandler();               // 注册信号监听器  ... ...  pid_t pid = fork();  if (pid == 0) {    ... ...                          // 根据传入参数进行对应的处理，例如设置进程名，设置各种id（用户id，组id）等    UnsetSigChldHandler();           // 反注册掉信号监听器    ... ...  } else if (pid > 0) {     ... ...  }  return pid;}</code></pre><p>从上面的代码可以看出，ForkAndSpecializeCommon最终是通过fork的方式，分裂出子进程。<br>这里需要关注一下的是，在zygote进程fork之前，调用SetSigChldHandler函数注册了一个子进程信号监听器。由于子进程共享父进程中的堆及栈信息，因此在子进程中也会有相应的信号处理器。<br>为了避免该信号监听器对子进程的影响，可以看到在子进程中进行了UnsetSigChldHandler的操作。</p><p>分别看一下SetSigChldHandler和UnsetSigChldHandler所作工作！</p><h3 id="SetSigChldHandler"><a href="#SetSigChldHandler" class="headerlink" title="SetSigChldHandler"></a>SetSigChldHandler</h3><p>我们看看SetSigChldHandler进行了哪些操作。</p><pre class=" language-C++"><code class="language-C++">// Configures the SIGCHLD handler for the zygote process. This is configured// very late, because earlier in the runtime we may fork() and exec()// other processes, and we want to waitpid() for those rather than// have them be harvested immediately.//// This ends up being called repeatedly before each fork(), but there's// no real harm in that.static void SetSigChldHandler() {  struct sigaction sa;  memset(&sa, 0, sizeof(sa));  sa.sa_handler = SigChldHandler;  // 该信号监听器关注子进程结束，对应的处理函数为SigChldHandler  int err = sigaction(SIGCHLD, &sa, NULL);  if (err < 0) {    ALOGW("Error setting SIGCHLD handler: %s", strerror(errno));  }}</code></pre><p>从上面的代码可以看出，SetSigChldHandler函数将注册一个信号处理器，来监听子进程的死亡。当子进程死亡后，利用SigChldHandler进行操作。需要注意的是，zygote的信号监听器，关注的是zygote所有的子进程，而不只是SystemServer进程（每次创建一个新的进程时，zygote都会注册对应的监听器）。</p><p>那就继续分析一下SigChldHandler吧：</p><pre class=" language-C++"><code class="language-C++">static void SigChldHandler(int /*signal_number*/) {  pid_t pid;  int status;  ... ...  while ((pid = waitpid(-1, &status, WNOHANG)) > 0) {    // 通过status判断子进程结束的原因，并打印相应的log    ... ...    // If the just-crashed process is the system_server, bring down zygote    // so that it is restarted by init and system server will be restarted    // from there.    if (pid == gSystemServerPid) {     // 上文已经介绍过，gSystemServerPid中记录了SystemServer的pid      ... ...      kill(getpid(), SIGKILL);         // 如果结束的子进程为SystemServer，Zygote也将结束自己    }  }  ... ...}</code></pre><p>发现没？所有zygote的子进程中，zygote只关心了SystemServer的死活。当其它子进程crash时，zygote只打印了log信息。</p><h3 id="UnsetSigChldHandler"><a href="#UnsetSigChldHandler" class="headerlink" title="UnsetSigChldHandler"></a>UnsetSigChldHandler</h3><p>最后看看UnsetSigChldHandler函数：</p><pre class=" language-C++"><code class="language-C++">// Sets the SIGCHLD handler back to default behavior in zygote children.static void UnsetSigChldHandler() {  struct sigaction sa;  memset(&sa, 0, sizeof(sa));  sa.sa_handler = SIG_DFL;  int err = sigaction(SIGCHLD, &sa, NULL);  if (err < 0) {    ALOGW("Error unsetting SIGCHLD handler: %s", strerror(errno));  }}</code></pre><h2 id="SystemServer工作流程"><a href="#SystemServer工作流程" class="headerlink" title="SystemServer工作流程"></a>SystemServer工作流程</h2><p>在分析zygote进程时，我们知道当ZygoteInit.java的startSystemServer函数，通过fork创建出SystemServer进程后，SystemServer进程调用handleSystemServerProcess函数，开始执行自己的工作。</p><h3 id="handleSystemServerProcess"><a href="#handleSystemServerProcess" class="headerlink" title="handleSystemServerProcess"></a>handleSystemServerProcess</h3><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">/* For child process */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasSecondZygote</span><span class="token punctuation">(</span>abiList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">waitForSecondaryZygote</span><span class="token punctuation">(</span>socketName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            zygoteServer<span class="token punctuation">.</span><span class="token function">closeServerSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 关闭从zygote进程那里继承下来server socket</span>            <span class="token keyword">return</span> <span class="token function">handleSystemServerProcess</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>接下来，我们来看看handleSystemServerProcess函数的主要内容。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Finish remaining work for the newly forked system server process.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Runnable <span class="token function">handleSystemServerProcess</span><span class="token punctuation">(</span>ZygoteConnection<span class="token punctuation">.</span>Arguments parsedArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// set umask to 0077 so new files and directories will default to owner-only permissions.</span>        Os<span class="token punctuation">.</span><span class="token function">umask</span><span class="token punctuation">(</span>S_IRWXG <span class="token operator">|</span> S_IRWXO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>niceName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Process<span class="token punctuation">.</span><span class="token function">setArgV0</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>niceName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 加载SystemServer对应的文件</span>        <span class="token keyword">final</span> String systemServerClasspath <span class="token operator">=</span> Os<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"SYSTEMSERVERCLASSPATH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>systemServerClasspath <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">performSystemServerDexOpt</span><span class="token punctuation">(</span>systemServerClasspath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>invokeWith <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 利用systemServerClass对应的路径构建对应的ClassLoader</span>            ClassLoader cl <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>systemServerClasspath <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cl <span class="token operator">=</span> <span class="token function">createPathClassLoader</span><span class="token punctuation">(</span>systemServerClasspath<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>targetSdkVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContextClassLoader</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/*             * Pass the remaining arguments to SystemServer.             */</span>            <span class="token comment" spellcheck="true">// 将剩余参数及classLoader递交给ZygoteInit的zygoteInit函数</span>            <span class="token keyword">return</span> ZygoteInit<span class="token punctuation">.</span><span class="token function">zygoteInit</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>targetSdkVersion<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>remainingArgs<span class="token punctuation">,</span> cl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* should never reach here */</span>    <span class="token punctuation">}</span></code></pre><p>从上面的代码可以看出，接下来的流程进入到ZygoteInit的zygoteInit函数。zygoteInit函数将根据classLoader和参数，完成不同进程所需要的初始化工作（SystemServer进程与zygote的其它子进程均将使用zygoteInit函数）。</p><h3 id="zygoteInit"><a href="#zygoteInit" class="headerlink" title="zygoteInit"></a>zygoteInit</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Runnable <span class="token function">zygoteInit</span><span class="token punctuation">(</span><span class="token keyword">int</span> targetSdkVersion<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">,</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>RuntimeInit<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>RuntimeInit<span class="token punctuation">.</span>TAG<span class="token punctuation">,</span> <span class="token string">"RuntimeInit: Starting application from zygote"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>Trace<span class="token punctuation">.</span>TRACE_TAG_ACTIVITY_MANAGER<span class="token punctuation">,</span> <span class="token string">"ZygoteInit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RuntimeInit<span class="token punctuation">.</span><span class="token function">redirectLogStreams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RuntimeInit<span class="token punctuation">.</span><span class="token function">commonInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ZygoteInit<span class="token punctuation">.</span><span class="token function">nativeZygoteInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RuntimeInit<span class="token punctuation">.</span><span class="token function">applicationInit</span><span class="token punctuation">(</span>targetSdkVersion<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="commonInit"><a href="#commonInit" class="headerlink" title="commonInit"></a>commonInit</h4><p>commonInit主要进行一些常规初始化。由于自己是做通信的，所以比较关注的是创建UA(user agent): frameworks/base/core/java/com/android/internal/os/RuntimeInit.java</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">commonInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">/*         * Sets the default HTTP User-Agent used by HttpURLConnection.         */</span>        String userAgent <span class="token operator">=</span> <span class="token function">getDefaultUserAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"http.agent"</span><span class="token punctuation">,</span> userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span></code></pre><p>User-Agent是Http协议中的一部分，属于头域的组成部分，是一种向访问网站提供你所使用的浏览器类型、操作系统、浏览器内核等信息的标识。通过这个标识，用户所访问的网站可以显示不同的排版，从而为用户提供更好的体验或者进行信息统计。</p><h4 id="nativeZygoteInit"><a href="#nativeZygoteInit" class="headerlink" title="nativeZygoteInit"></a>nativeZygoteInit</h4><p>函数nativeZyoteInit实现在frameworks/base/core/jni/AndroidRuntime.cpp中，主要用于为Binder通信打下基础。</p><pre class=" language-C++"><code class="language-C++">static void com_android_internal_os_ZygoteInit_nativeZygoteInit(JNIEnv* env, jobject clazz){    gCurRuntime->onZygoteInit();}</code></pre><p>这里需要关注的是，SystemServer进程中的gCurRuntime指的是什么呢？</p><p>实际上在zygote进程启动时，在app_main.cpp的main函数中，创建出了AppRuntime：</p><pre class=" language-C++"><code class="language-C++">int main(int argc, char* const argv[]){    ........    AppRuntime runtime(argv[0], computeArgBlockSize(argc, argv));    ........</code></pre><p>AppRuntime定义如下：</p><pre class=" language-C++"><code class="language-C++">class AppRuntime : public AndroidRuntime{public:    AppRuntime(char* argBlockStart, const size_t argBlockLength)        : AndroidRuntime(argBlockStart, argBlockLength)        , mClass(NULL)    {    }    ... ...}</code></pre><p>看看AppRuntime的父类AndroidRuntime：</p><pre class=" language-C++"><code class="language-C++">AndroidRuntime::AndroidRuntime(char* argBlockStart, const size_t argBlockLength) :        mExitWithoutCleanup(false),        mArgBlockStart(argBlockStart),        mArgBlockLength(argBlockLength){    SkGraphics::Init();    // Pre-allocate enough space to hold a fair number of options.    mOptions.setCapacity(20);    assert(gCurRuntime == NULL);        // one per process    gCurRuntime = this;}</code></pre><p>从代码可以看出，AndroidRuntime初始化时定义了gCurRuntime。gCurRuntime指向对象自身，也就是说gCurRuntime指向的是AppRuntime对象。</p><p>由于SystemServer进程由zygote进程fork出来，于是system server进程中也存在gCurRuntime对象，类型为AppRuntime。至此我们知道，Native函数中gCurRuntime-&gt;onZygoteInit将调用AppRuntime中的onZygoteInit。</p><pre class=" language-C++"><code class="language-C++">    virtual void onZygoteInit()    {        sp<ProcessState> proc = ProcessState::self();        ALOGV("App process: starting thread pool.\n");        proc->startThreadPool();    }</code></pre><p>onZygoteInit的用途是启动一个线程，用于binder通信。</p><h4 id="applicationInit"><a href="#applicationInit" class="headerlink" title="applicationInit"></a>applicationInit</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">static</span> Runnable <span class="token function">applicationInit</span><span class="token punctuation">(</span><span class="token keyword">int</span> targetSdkVersion<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">,</span>            ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置一些进程退出的处理策略，可用堆栈上限等</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// Remaining arguments are passed to the start class's static main</span>        <span class="token keyword">return</span> <span class="token function">findStaticMain</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>startClass<span class="token punctuation">,</span> args<span class="token punctuation">.</span>startArgs<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>继续分析findStaticMain函数：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> Runnable <span class="token function">findStaticMain</span><span class="token punctuation">(</span>String className<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">,</span>            ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// className为进行初始化工作的进程类名</span>        <span class="token comment" spellcheck="true">// 在SystemServer初始化时，为com.android.server.SystemServer</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cl<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 下面就是通过反射得到对应类的main方法</span>            cl <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                    <span class="token string">"Missing class when invoking static main "</span> <span class="token operator">+</span> className<span class="token punctuation">,</span>                    ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">/*         * This throw gets caught in ZygoteInit.main(), which responds         * by invoking the exception's run() method. This arrangement         * clears up all the stack frames that were required in setting         * up the process.         */</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MethodAndArgsCaller</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 捕获MethodAndArgsCaller异常</span>    <span class="token punctuation">}</span></code></pre><h2 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h2><p>接下来就进入了SystemServer.java的main函数，其代码如下：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * The main entry point from zygote.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">SystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建并运行，简单粗暴！</span>    <span class="token punctuation">}</span></code></pre><p>这里比较简单，只是new出一个SystemServer对象并执行其run方法：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">traceBeginAndSlog</span><span class="token punctuation">(</span><span class="token string">"InitBeforeStartServices"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// If a device's clock is before 1970 (before 0), a lot of</span>            <span class="token comment" spellcheck="true">// APIs crash dealing with negative numbers, notably</span>            <span class="token comment" spellcheck="true">// java.io.File#setLastModified, so instead we fake it and</span>            <span class="token comment" spellcheck="true">// hope that time from cell towers or NTP fixes it shortly.</span>            <span class="token comment" spellcheck="true">// 如何系统时钟早于1970年，则设置系统始终从1970年开始</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> EARLIEST_SUPPORTED_TIME<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"System clock is before 1970; setting to 1970."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// private static final long EARLIEST_SUPPORTED_TIME = 86400 * 1000;</span>                SystemClock<span class="token punctuation">.</span><span class="token function">setCurrentTimeMillis</span><span class="token punctuation">(</span>EARLIEST_SUPPORTED_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">// If the system has "persist.sys.language" and friends set, replace them with</span>            <span class="token comment" spellcheck="true">// "persist.sys.locale". Note that the default locale at this point is calculated</span>            <span class="token comment" spellcheck="true">// using the "-Duser.locale" command line flag. That flag is usually populated by</span>            <span class="token comment" spellcheck="true">// AndroidRuntime using the same set of system properties, but only the system_server</span>            <span class="token comment" spellcheck="true">// and system apps are allowed to set them.</span>            <span class="token comment" spellcheck="true">//</span>            <span class="token comment" spellcheck="true">// NOTE: Most changes made here will need an equivalent change to</span>            <span class="token comment" spellcheck="true">// core/jni/AndroidRuntime.cpp</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>SystemProperties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"persist.sys.language"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 设置区域，语言等选项            </span>                <span class="token keyword">final</span> String languageTag <span class="token operator">=</span> Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLanguageTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                SystemProperties<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"persist.sys.locale"</span><span class="token punctuation">,</span> languageTag<span class="token punctuation">)</span><span class="token punctuation">;</span>                SystemProperties<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"persist.sys.language"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                SystemProperties<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"persist.sys.country"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                SystemProperties<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"persist.sys.localevar"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Mmmmmm... more memory!</span>            <span class="token comment" spellcheck="true">// 清除vm内存增长上限，由于启动过程需要较多的虚拟机内存空间</span>            VMRuntime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clearGrowthLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                 <span class="token comment" spellcheck="true">// The system server has to run all of the time, so it needs to be</span>            <span class="token comment" spellcheck="true">// as efficient as possible with its memory usage.</span>            <span class="token comment" spellcheck="true">// 设置堆栈利用率，GC后会重新计算堆栈空间大小</span>            VMRuntime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTargetHeapUtilization</span><span class="token punctuation">(</span><span class="token number">0.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">// Some devices rely on runtime fingerprint generation, so make sure</span>            <span class="token comment" spellcheck="true">// we've defined it before booting further.</span>            <span class="token comment" spellcheck="true">// 针对部分设备依赖于运行时就产生指纹信息，因此需要在开机完成前已经定义</span>            Build<span class="token punctuation">.</span><span class="token function">ensureFingerprintProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                         <span class="token comment" spellcheck="true">// Within the system server, it is an error to access Environment paths without</span>            <span class="token comment" spellcheck="true">// explicitly specifying a user.</span>            <span class="token comment" spellcheck="true">// 访问环境变量前，需要明确地指定用户</span>            Environment<span class="token punctuation">.</span><span class="token function">setUserRequired</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">// Initialize native services.</span>            <span class="token comment" spellcheck="true">// 加载动态库libandroid_services.so</span>            System<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">"android_servers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                     <span class="token comment" spellcheck="true">// Check whether we failed to shut down last time we tried.</span>            <span class="token comment" spellcheck="true">// This call may not return.</span>            <span class="token comment" spellcheck="true">// 检测上次关机过程是否失败，该方法可能不会返回</span>            <span class="token function">performPendingShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                    <span class="token comment" spellcheck="true">// Initialize the system context.</span>            <span class="token comment" spellcheck="true">// 在SystemServer进程中也需要创建Context对象，初始化系统上下文</span>            <span class="token function">createSystemContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                     <span class="token comment" spellcheck="true">// Create the system service manager.</span>            <span class="token comment" spellcheck="true">// 通过SystemServiceManager的构造方法创建了一个新的SystemServiceManager对象</span>            mSystemServiceManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemServiceManager</span><span class="token punctuation">(</span>mSystemContext<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// SystemServer进程主要是用来构建系统各种service服务，而SystemServiceManager就是这些服务的管理对象            </span>            mSystemServiceManager<span class="token punctuation">.</span><span class="token function">setRuntimeRestarted</span><span class="token punctuation">(</span>mRuntimeRestart<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">// 将SystemServiceManager对象保存到SystemServer进程中的一个数据结构中            </span>            LocalServices<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span>SystemServiceManager<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> mSystemServiceManager<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// Prepare the thread pool for init tasks that can be parallelized</span>            SystemServerInitThreadPool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// InitBeforeStartServices</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Start services.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>                              <span class="token comment" spellcheck="true">// 分种类启动不同的system service</span>            <span class="token comment" spellcheck="true">// 主要用于启动系统Boot级服务</span>            <span class="token function">startBootstrapServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 主要用于启动系统核心的服务            </span>            <span class="token function">startCoreServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 主要用于启动一些非紧要或者非需要及时启动的服务            </span>            <span class="token function">startOtherServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 SystemServerInitThreadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"System"</span><span class="token punctuation">,</span> <span class="token string">"******************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"System"</span><span class="token punctuation">,</span> <span class="token string">"************ Failure starting system services"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// Loop forever.</span>        <span class="token comment" spellcheck="true">// //启动looper，以处理到来的消息，一直循环执行</span>        Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Main thread loop unexpectedly exited"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以上就是SystemServer的run函数整个流程，我们做个简化，如下：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Initialize the system context.</span>            <span class="token function">createSystemContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment" spellcheck="true">// 🍁🍁🍁 01.初始化系统上下文 🍁🍁🍁</span>            <span class="token comment" spellcheck="true">// Create the system service manager.                                          </span>            mSystemServiceManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemServiceManager</span><span class="token punctuation">(</span>mSystemContext<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 🍁🍁🍁 02.创建系统服务管理 🍁🍁🍁</span>            mSystemServiceManager<span class="token punctuation">.</span><span class="token function">setRuntimeRestarted</span><span class="token punctuation">(</span>mRuntimeRestart<span class="token punctuation">)</span><span class="token punctuation">;</span>                              LocalServices<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span>SystemServiceManager<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> mSystemServiceManager<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// InitBeforeStartServices</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Start services.                                                    // 🍁🍁🍁 03.启动系统各种服务 🍁🍁🍁</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">startBootstrapServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                         <span class="token comment" spellcheck="true">// 启动引导服务</span>            <span class="token function">startCoreServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                              <span class="token comment" spellcheck="true">// 启动核心服务</span>            <span class="token function">startOtherServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                             <span class="token comment" spellcheck="true">// 启动其他服务</span>            SystemServerInitThreadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"System"</span><span class="token punctuation">,</span> <span class="token string">"******************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"System"</span><span class="token punctuation">,</span> <span class="token string">"************ Failure starting system services"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// Loop forever.</span>        Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                        <span class="token comment" spellcheck="true">// 一直循环执行  </span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Main thread loop unexpectedly exited"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OK，接下来我们针对SystemServer所做的三部分工作，进行逐个分析！</p><hr><h2 id="初始化上下文"><a href="#初始化上下文" class="headerlink" title="初始化上下文"></a><strong><font color="#DC143C" size="3">初始化上下文</font></strong></h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Initialize the system context.</span>            <span class="token function">createSystemContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment" spellcheck="true">// 🍁🍁🍁 01.初始化系统上下文 🍁🍁🍁</span></code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪createSystemContext函数：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createSystemContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ActivityThread activityThread <span class="token operator">=</span> ActivityThread<span class="token punctuation">.</span><span class="token function">systemMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mSystemContext <span class="token operator">=</span> activityThread<span class="token punctuation">.</span><span class="token function">getSystemContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mSystemContext<span class="token punctuation">.</span><span class="token function">setTheme</span><span class="token punctuation">(</span>DEFAULT_SYSTEM_THEME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Context systemUiContext <span class="token operator">=</span> activityThread<span class="token punctuation">.</span><span class="token function">getSystemUiContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        systemUiContext<span class="token punctuation">.</span><span class="token function">setTheme</span><span class="token punctuation">(</span>DEFAULT_SYSTEM_THEME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪systemMain函数：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> ActivityThread <span class="token function">systemMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// The system process on low-memory devices do not get to use hardware</span>        <span class="token comment" spellcheck="true">// accelerated drawing, since this can add too much overhead to the</span>        <span class="token comment" spellcheck="true">// process.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ActivityManager<span class="token punctuation">.</span><span class="token function">isHighEndGfx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ThreadedRenderer<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                   <span class="token comment" spellcheck="true">// 对于低内存的设备，禁用硬件加速</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            ThreadedRenderer<span class="token punctuation">.</span><span class="token function">enableForegroundTrimming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ActivityThread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActivityThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> thread<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">ActivityThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mResourcesManager <span class="token operator">=</span> ResourcesManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 使用单例模式获得一个ResourcesManager实例</span>    <span class="token punctuation">}</span></code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;继续跟踪attach函数：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> system<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sCurrentActivityThread <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        mSystemThread <span class="token operator">=</span> system<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>system<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Don't set application object here -- if the system crashes,</span>            <span class="token comment" spellcheck="true">// we can't display an alert, we just want to die die die.</span>            <span class="token comment" spellcheck="true">// 设置SystemServer进程在DDMS中显示的名字为"system_process" </span>            android<span class="token punctuation">.</span>ddm<span class="token punctuation">.</span>DdmHandleAppName<span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"system_process"</span><span class="token punctuation">,</span>                                          UserHandle<span class="token punctuation">.</span><span class="token function">myUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 如不设置，则显示"?"，无法调试该进程</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                mInstrumentation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Instrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 首先通过getSystemContext()创建系统上下文，然后创建应用上下文</span>                ContextImpl context <span class="token operator">=</span> ContextImpl<span class="token punctuation">.</span><span class="token function">createAppContext</span><span class="token punctuation">(</span>                                                <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getSystemContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mPackageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 创建Application</span>                mInitialApplication <span class="token operator">=</span> context<span class="token punctuation">.</span>mPackageInfo<span class="token punctuation">.</span><span class="token function">makeApplication</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 调用Application的onCreate()                </span>                mInitialApplication<span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                        <span class="token string">"Unable to instantiate Application():"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// add dropbox logging to libcore</span>        DropBox<span class="token punctuation">.</span><span class="token function">setReporter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DropBoxReporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ViewRootImpl<span class="token punctuation">.</span>ConfigChangedCallback configChangedCallback                <span class="token operator">=</span> <span class="token punctuation">(</span>Configuration globalConfig<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mResourcesManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// We need to apply this change to the resources immediately, because upon returning</span>                <span class="token comment" spellcheck="true">// the view hierarchy will be informed about it.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mResourcesManager<span class="token punctuation">.</span><span class="token function">applyConfigurationToResourcesLocked</span><span class="token punctuation">(</span>globalConfig<span class="token punctuation">,</span>                        null <span class="token comment" spellcheck="true">/* compat */</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">updateLocaleListFromAppContext</span><span class="token punctuation">(</span>mInitialApplication<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            mResourcesManager<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLocales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// This actually changed the resources! Tell everyone about it.</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingConfiguration <span class="token operator">==</span> null                            <span class="token operator">||</span> mPendingConfiguration<span class="token punctuation">.</span><span class="token function">isOtherSeqNewer</span><span class="token punctuation">(</span>globalConfig<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mPendingConfiguration <span class="token operator">=</span> globalConfig<span class="token punctuation">;</span>                        <span class="token function">sendMessage</span><span class="token punctuation">(</span>H<span class="token punctuation">.</span>CONFIGURATION_CHANGED<span class="token punctuation">,</span> globalConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加回调</span>        ViewRootImpl<span class="token punctuation">.</span><span class="token function">addConfigCallback</span><span class="token punctuation">(</span>configChangedCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token punctuation">}</span></code></pre><p>可以看出，attach主要做了三件事：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（1）创建系统上下文：getSystemContext() –&gt; createSystemContext() –&gt; new ContextImpl()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（2）创建应用上下文 ContextImpl.createAppContext() –&gt; new ContextImpl()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（3）添加回调configChangedCallback到ViewRootImpl</p><hr><h3 id="创建系统上下文"><a href="#创建系统上下文" class="headerlink" title="创建系统上下文"></a><strong><font color="#DC143C" size="3">创建系统上下文</font></strong></h3><p>getSystemContext():</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> ContextImpl <span class="token function">getSystemContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mSystemContext <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mSystemContext <span class="token operator">=</span> ContextImpl<span class="token punctuation">.</span><span class="token function">createSystemContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> mSystemContext<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>跟踪createSystemContext函数：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">static</span> ContextImpl <span class="token function">createSystemContext</span><span class="token punctuation">(</span>ActivityThread mainThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这边new出来的LoadedApk将作为创建应用上下文的参数packageInfo</span>        LoadedApk packageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoadedApk</span><span class="token punctuation">(</span>mainThread<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// ContextImpl()创建系统上下文         </span>        ContextImpl context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContextImpl</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> mainThread<span class="token punctuation">,</span> packageInfo<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                                 null<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setResources</span><span class="token punctuation">(</span>packageInfo<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span>mResources<span class="token punctuation">.</span><span class="token function">updateConfiguration</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>mResourcesManager<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                context<span class="token punctuation">.</span>mResourcesManager<span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="创建应用上下文"><a href="#创建应用上下文" class="headerlink" title="创建应用上下文"></a>创建应用上下文</h3><p>ContextImpl.createAppContext()：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">static</span> ContextImpl <span class="token function">createAppContext</span><span class="token punctuation">(</span>ActivityThread mainThread<span class="token punctuation">,</span> LoadedApk packageInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>packageInfo <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"packageInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ContextImpl()创建应用上下文</span>        ContextImpl context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContextImpl</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> mainThread<span class="token punctuation">,</span> packageInfo<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                                 null<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setResources</span><span class="token punctuation">(</span>packageInfo<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>我们可以看出：new ContextImpl时，系统上下文和应用上下文的参数是一样的，createAppContext()中的参数packageInfo，就是createSystemContext()中new的LoadedApk。<br>创建完成之后，系统上下文赋值给了ActivityThread的成员变量mSystemContext，而应用上下文只是作为函数中的局部变量临时使用。<br>我们回顾一下创建上下文的代码：</p><pre class=" language-java"><code class="language-java">            <span class="token keyword">try</span> <span class="token punctuation">{</span>                mInstrumentation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Instrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 首先通过getSystemContext()创建系统上下文，然后创建应用上下文</span>                ContextImpl context <span class="token operator">=</span> ContextImpl<span class="token punctuation">.</span><span class="token function">createAppContext</span><span class="token punctuation">(</span>                                                <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getSystemContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mPackageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 创建Application</span>                mInitialApplication <span class="token operator">=</span> context<span class="token punctuation">.</span>mPackageInfo<span class="token punctuation">.</span><span class="token function">makeApplication</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 调用Application的onCreate()</span>                mInitialApplication<span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            </code></pre><p>接下来就继续看下创建Application的流程：</p><h3 id="创建Application"><a href="#创建Application" class="headerlink" title="创建Application"></a>创建Application</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Application <span class="token function">makeApplication</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> forceDefaultAppClass<span class="token punctuation">,</span>            Instrumentation instrumentation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mApplication <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mApplication<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Application app <span class="token operator">=</span> null<span class="token punctuation">;</span>        String appClass <span class="token operator">=</span> mApplicationInfo<span class="token punctuation">.</span>className<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 参数forceDefaultAppClass为true </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>forceDefaultAppClass <span class="token operator">||</span> <span class="token punctuation">(</span>appClass <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                              appClass <span class="token operator">=</span> <span class="token string">"android.app.Application"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassLoader cl <span class="token operator">=</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 此LoadedApk对象是createSystemContext时new的，mPackageName="android"</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mPackageName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"android"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                         <span class="token function">initializeJavaContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 又创建了一个局部应用上下文</span>            ContextImpl appContext <span class="token operator">=</span> ContextImpl<span class="token punctuation">.</span><span class="token function">createAppContext</span><span class="token punctuation">(</span>mActivityThread<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 创建Application </span>            app <span class="token operator">=</span> mActivityThread<span class="token punctuation">.</span>mInstrumentation<span class="token punctuation">.</span><span class="token function">newApplication</span><span class="token punctuation">(</span>                                             cl<span class="token punctuation">,</span> appClass<span class="token punctuation">,</span> appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            appContext<span class="token punctuation">.</span><span class="token function">setOuterContext</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将前面创建的app添加到应用列表</span>        mActivityThread<span class="token punctuation">.</span>mAllApplications<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>        mApplication <span class="token operator">=</span> app<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> app<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这一步主要创建了一个ActivityThread对象，然后执行了该对象的attach()方法，attach()方法中创建了系统上下文mSystemContext（类型为ContextImpl），并创建Application对象。<br>系统上下文中，new了一个LoadedApk的成员变量，并将ActivityThread对象传给LoadedApk成员，后面的Application对象就是LoadedApk使用ActivityThread创建的，LoadedApk创建了Application对象后，将Application添加到ActivityThread的应用列表中。</p><h2 id="创建系统服务管理"><a href="#创建系统服务管理" class="headerlink" title="创建系统服务管理"></a>创建系统服务管理</h2><p>我们回顾下相关代码：</p><pre class=" language-java"><code class="language-java">            <span class="token comment" spellcheck="true">// Create the system service manager.</span>            mSystemServiceManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemServiceManager</span><span class="token punctuation">(</span>mSystemContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            mSystemServiceManager<span class="token punctuation">.</span><span class="token function">setRuntimeRestarted</span><span class="token punctuation">(</span>mRuntimeRestart<span class="token punctuation">)</span><span class="token punctuation">;</span>            LocalServices<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span>SystemServiceManager<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> mSystemServiceManager<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这一步比较简单，只是new了一个SystemServiceManager，并将其添加到本地服务列表中。mSystemContext为第一步中创建的系统上下文。本地服务列表是以类为key保存的一个列表，即列表中某种类型的对象最多只能有一个。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemServiceManager</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// Services that should receive lifecycle events.</span>    <span class="token comment" spellcheck="true">// 系统服务列表，系统服务必须继承SystemService</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>SystemService<span class="token operator">></span> mServices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>SystemService<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前处于开机过程的哪个阶段，SystemService.PHASE_XXXXX</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mCurrentPhase <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">SystemServiceManager</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mContext <span class="token operator">=</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Starts a service by class name.     *     * @return The service instance.     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 通过类名启动系统服务，可能会找不到类而抛异常</span>    <span class="token keyword">public</span> SystemService <span class="token function">startService</span><span class="token punctuation">(</span>String className<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Class<span class="token operator">&lt;</span>SystemService<span class="token operator">></span> serviceClass<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            serviceClass <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>SystemService<span class="token operator">></span><span class="token punctuation">)</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Starting "</span> <span class="token operator">+</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Failed to create service "</span> <span class="token operator">+</span> className                    <span class="token operator">+</span> <span class="token string">": service class not found, usually indicates that the caller should "</span>                    <span class="token operator">+</span> <span class="token string">"have called PackageManager.hasSystemFeature() to check whether the "</span>                    <span class="token operator">+</span> <span class="token string">"feature is available on this device before trying to start the "</span>                    <span class="token operator">+</span> <span class="token string">"services that implement it"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">startService</span><span class="token punctuation">(</span>serviceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Creates and starts a system service. The class must be a subclass of     * {@link com.android.server.SystemService}.     *     * @param serviceClass A Java class that implements the SystemService interface.     * @return The service instance, never null.     * @throws RuntimeException if the service fails to start.     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 创建并启动系统服务，系统服务类必须继承SystemService</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">SystemService</span><span class="token operator">></span> T <span class="token function">startService</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> serviceClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> String name <span class="token operator">=</span> serviceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Starting "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>Trace<span class="token punctuation">.</span>TRACE_TAG_SYSTEM_SERVER<span class="token punctuation">,</span> <span class="token string">"StartService "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Create the service.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>SystemService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>serviceClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Failed to create "</span> <span class="token operator">+</span> name                        <span class="token operator">+</span> <span class="token string">": service must extend "</span> <span class="token operator">+</span> SystemService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">final</span> T service<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Constructor<span class="token operator">&lt;</span>T<span class="token operator">></span> constructor <span class="token operator">=</span> serviceClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                service <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Failed to create service "</span> <span class="token operator">+</span> name                        <span class="token operator">+</span> <span class="token string">": service could not be instantiated"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Failed to create service "</span> <span class="token operator">+</span> name                        <span class="token operator">+</span> <span class="token string">": service must have a public constructor with a Context argument"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Failed to create service "</span> <span class="token operator">+</span> name                        <span class="token operator">+</span> <span class="token string">": service must have a public constructor with a Context argument"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Failed to create service "</span> <span class="token operator">+</span> name                        <span class="token operator">+</span> <span class="token string">": service constructor threw an exception"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">startService</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> service<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>Trace<span class="token punctuation">.</span>TRACE_TAG_SYSTEM_SERVER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startService</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> SystemService service<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Register it.</span>        mServices<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Start it.</span>        <span class="token keyword">long</span> time <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">elapsedRealtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            service<span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Failed to start service "</span> <span class="token operator">+</span> service<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">+</span> <span class="token string">": onStart threw an exception"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">warnIfTooLong</span><span class="token punctuation">(</span>SystemClock<span class="token punctuation">.</span><span class="token function">elapsedRealtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> time<span class="token punctuation">,</span> service<span class="token punctuation">,</span> <span class="token string">"onStart"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Starts the specified boot phase for all system services that have been started up to     * this point.     *     * @param phase The boot phase to start.     */</span>    <span class="token comment" spellcheck="true">// 通知系统服务到了开机的哪个阶段，会遍历调用所有系统服务的onBootPhase()函数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startBootPhase</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> phase<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>phase <span class="token operator">&lt;=</span> mCurrentPhase<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Next phase must be larger than previous"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mCurrentPhase <span class="token operator">=</span> phase<span class="token punctuation">;</span>        Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Starting phase "</span> <span class="token operator">+</span> mCurrentPhase<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>Trace<span class="token punctuation">.</span>TRACE_TAG_SYSTEM_SERVER<span class="token punctuation">,</span> <span class="token string">"OnBootPhase "</span> <span class="token operator">+</span> phase<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> serviceLen <span class="token operator">=</span> mServices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> serviceLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> SystemService service <span class="token operator">=</span> mServices<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> time <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">elapsedRealtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>Trace<span class="token punctuation">.</span>TRACE_TAG_SYSTEM_SERVER<span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    service<span class="token punctuation">.</span><span class="token function">onBootPhase</span><span class="token punctuation">(</span>mCurrentPhase<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Failed to boot service "</span>                            <span class="token operator">+</span> service<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token operator">+</span> <span class="token string">": onBootPhase threw an exception during phase "</span>                            <span class="token operator">+</span> mCurrentPhase<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">warnIfTooLong</span><span class="token punctuation">(</span>SystemClock<span class="token punctuation">.</span><span class="token function">elapsedRealtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> time<span class="token punctuation">,</span> service<span class="token punctuation">,</span> <span class="token string">"onBootPhase"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>Trace<span class="token punctuation">.</span>TRACE_TAG_SYSTEM_SERVER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>Trace<span class="token punctuation">.</span>TRACE_TAG_SYSTEM_SERVER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="启动系统各种服务"><a href="#启动系统各种服务" class="headerlink" title="启动系统各种服务"></a>启动系统各种服务</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">startBootstrapServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 启动引导服务</span>        <span class="token function">startCoreServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 启动核心服务</span>        <span class="token function">startOtherServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 启动其他服务</span></code></pre><h3 id="启动引导服务"><a href="#启动引导服务" class="headerlink" title="启动引导服务"></a>启动引导服务</h3><p>首先来看下startBootstrapServices()：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startBootstrapServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 启动Installer服务，阻塞等待与installd建立socket通道</span>        Installer installer <span class="token operator">=</span> mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span>Installer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span>DeviceIdentifiersPolicyService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动ActivityManagerService（AMS），关于AMS我们后面会详细讲解</span>        mActivityManagerService <span class="token operator">=</span> mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span>                ActivityManagerService<span class="token punctuation">.</span>Lifecycle<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mActivityManagerService<span class="token punctuation">.</span><span class="token function">setSystemServiceManager</span><span class="token punctuation">(</span>mSystemServiceManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        mActivityManagerService<span class="token punctuation">.</span><span class="token function">setInstaller</span><span class="token punctuation">(</span>installer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动PowerManagerService</span>        mPowerManagerService <span class="token operator">=</span> mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span>PowerManagerService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// PowerManagerService就绪，AMS初始化电源管理</span>        mActivityManagerService<span class="token punctuation">.</span><span class="token function">initPowerManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Bring up recovery system in case a rescue party needs a reboot</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>SystemProperties<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"config.disable_noncore"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">traceBeginAndSlog</span><span class="token punctuation">(</span><span class="token string">"StartRecoverySystemService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span>RecoverySystemService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        RescueParty<span class="token punctuation">.</span><span class="token function">noteBoot</span><span class="token punctuation">(</span>mSystemContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动LightsService</span>        mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span>LightsService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动DisplayManagerService（before package manager）</span>        mDisplayManagerService <span class="token operator">=</span> mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span>DisplayManagerService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化package manager之前，需要默认显示。阻塞，10s超时，see DisplayManagerService.onBootPhase()</span>        mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startBootPhase</span><span class="token punctuation">(</span>SystemService<span class="token punctuation">.</span>PHASE_WAIT_FOR_DEFAULT_DISPLAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Only run "core" apps if we're encrypting the device.</span>        <span class="token comment" spellcheck="true">// 当设备正在加密时，仅运行核心应用</span>        String cryptState <span class="token operator">=</span> SystemProperties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"vold.decrypt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ENCRYPTING_STATE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cryptState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Detected encryption in progress - only parsing core apps"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mOnlyCore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ENCRYPTED_STATE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cryptState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Device encrypted - only parsing core apps"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mOnlyCore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Start the package manager.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mRuntimeRestart<span class="token punctuation">)</span> <span class="token punctuation">{</span>            MetricsLogger<span class="token punctuation">.</span><span class="token function">histogram</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"boot_package_manager_init_start"</span><span class="token punctuation">,</span>                    <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> SystemClock<span class="token punctuation">.</span><span class="token function">elapsedRealtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 启动PackageManagerService</span>        mPackageManagerService <span class="token operator">=</span> PackageManagerService<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>mSystemContext<span class="token punctuation">,</span> installer<span class="token punctuation">,</span>                mFactoryTestMode <span class="token operator">!=</span> FactoryTest<span class="token punctuation">.</span>FACTORY_TEST_OFF<span class="token punctuation">,</span> mOnlyCore<span class="token punctuation">)</span><span class="token punctuation">;</span>        mFirstBoot <span class="token operator">=</span> mPackageManagerService<span class="token punctuation">.</span><span class="token function">isFirstBoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mPackageManager <span class="token operator">=</span> mSystemContext<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 将UserManagerService添加到服务列表，该服务是在PackageManagerService中初始化的        </span>        mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span>UserManagerService<span class="token punctuation">.</span>LifeCycle<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Initialize attribute cache used to cache resources from packages.</span>        <span class="token comment" spellcheck="true">// 初始化用来缓存包资源的属性缓存</span>        AttributeCache<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>mSystemContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Set up the Application instance for the system process and get started.</span>        <span class="token comment" spellcheck="true">// 设置AMS</span>        mActivityManagerService<span class="token punctuation">.</span><span class="token function">setSystemProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// The sensor service needs access to package manager service, app ops</span>        <span class="token comment" spellcheck="true">// service, and permissions service, therefore we start it after them.</span>        <span class="token comment" spellcheck="true">// Start sensor service in a separate thread. Completion should be checked</span>        <span class="token comment" spellcheck="true">// before using it.</span>        mSensorServiceStart <span class="token operator">=</span> SystemServerInitThreadPool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            TimingsTraceLog traceLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimingsTraceLog</span><span class="token punctuation">(</span>                    SYSTEM_SERVER_TIMING_ASYNC_TAG<span class="token punctuation">,</span> Trace<span class="token punctuation">.</span>TRACE_TAG_SYSTEM_SERVER<span class="token punctuation">)</span><span class="token punctuation">;</span>            traceLog<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>START_SENSOR_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 启动传感器服务（native 服务，依赖PackageManagerService、AppOpsService、permissions service）</span>            <span class="token function">startSensorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            traceLog<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> START_SENSOR_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这步首先等待installd启动完成，然后启动一些相互依赖的关键服务。所创建的服务：ActivityManagerService，PowerManagerService，LightsService，DisplayManagerService，PackageManagerService，UserManagerService，sensor服务。</p><h3 id="启动核心服务"><a href="#启动核心服务" class="headerlink" title="启动核心服务"></a>启动核心服务</h3><p>接下来继续看下核心服务：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Starts some essential services that are not tangled up in the bootstrap process.     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startCoreServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span>DropBoxManagerService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动BatteryService，用于统计电池电量，需要LightService</span>        mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span>BatteryService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动UsageStatsService，用于统计应用使用情况</span>        mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span>UsageStatsService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mActivityManagerService<span class="token punctuation">.</span><span class="token function">setUsageStatsManager</span><span class="token punctuation">(</span>                LocalServices<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span>UsageStatsManagerInternal<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动WebViewUpdateService</span>        mWebViewUpdateService <span class="token operator">=</span> mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span>WebViewUpdateService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>启动服务DropBoxManagerService、BatteryService，UsageStatsService，WebViewUpdateService。</p><h3 id="启动其他服务"><a href="#启动其他服务" class="headerlink" title="启动其他服务"></a>启动其他服务</h3><p>代码很长（1200多行…），但是逻辑简单，主要是启动各种服务。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Starts a miscellaneous grab bag of stuff that has yet to be refactored     * and organized.     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startOtherServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token function">traceBeginAndSlog</span><span class="token punctuation">(</span><span class="token string">"StartSchedulingPolicyService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 调度策略</span>            ServiceManager<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span><span class="token string">"scheduling_policy"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SchedulingPolicyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceBeginAndSlog</span><span class="token punctuation">(</span><span class="token string">"StartTelecomLoaderService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span>TelecomLoaderService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceBeginAndSlog</span><span class="token punctuation">(</span><span class="token string">"StartTelephonyRegistry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 提供电话注册、管理服务，可以获取电话的链接状态、信号强度等</span>            telephonyRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TelephonyRegistry</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>            ServiceManager<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span><span class="token string">"telephony.registry"</span><span class="token punctuation">,</span> telephonyRegistry<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceBeginAndSlog</span><span class="token punctuation">(</span><span class="token string">"StartEntropyMixer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 随机数相关，原名EntropyService</span>            mEntropyMixer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EntropyMixer</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mContentResolver <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// The AccountManager must come before the ContentService</span>            <span class="token function">traceBeginAndSlog</span><span class="token punctuation">(</span><span class="token string">"StartAccountManagerService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 提供所有账号、密码、认证管理等等的服务</span>            mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span>ACCOUNT_SERVICE_CLASS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceBeginAndSlog</span><span class="token punctuation">(</span><span class="token string">"StartContentService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// ContentProvider服务，提供跨进程数据交换</span>            mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span>CONTENT_SERVICE_CLASS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceBeginAndSlog</span><span class="token punctuation">(</span><span class="token string">"InstallSystemProviders"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mActivityManagerService<span class="token punctuation">.</span><span class="token function">installSystemProviders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceBeginAndSlog</span><span class="token punctuation">(</span><span class="token string">"StartVibratorService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 振动器服务</span>            vibrator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VibratorService</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>            ServiceManager<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span><span class="token string">"vibrator"</span><span class="token punctuation">,</span> vibrator<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token function">traceBeginAndSlog</span><span class="token punctuation">(</span><span class="token string">"InitWatchdog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 初始化 Watchdog</span>            <span class="token keyword">final</span> Watchdog watchdog <span class="token operator">=</span> Watchdog<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            watchdog<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> mActivityManagerService<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceBeginAndSlog</span><span class="token punctuation">(</span><span class="token string">"StartInputManagerService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 事件传递分发服务</span>            inputManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputManagerService</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceBeginAndSlog</span><span class="token punctuation">(</span><span class="token string">"StartWindowManagerService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 窗口管理服务</span>            <span class="token comment" spellcheck="true">// WMS needs sensor service ready</span>            ConcurrentUtils<span class="token punctuation">.</span><span class="token function">waitForFutureNoInterrupt</span><span class="token punctuation">(</span>mSensorServiceStart<span class="token punctuation">,</span> START_SENSOR_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>            mSensorServiceStart <span class="token operator">=</span> null<span class="token punctuation">;</span>            wm <span class="token operator">=</span> WindowManagerService<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> inputManager<span class="token punctuation">,</span>                    mFactoryTestMode <span class="token operator">!=</span> FactoryTest<span class="token punctuation">.</span>FACTORY_TEST_LOW_LEVEL<span class="token punctuation">,</span>                    <span class="token operator">!</span>mFirstBoot<span class="token punctuation">,</span> mOnlyCore<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PhoneWindowManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ServiceManager<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>WINDOW_SERVICE<span class="token punctuation">,</span> wm<span class="token punctuation">)</span><span class="token punctuation">;</span>            ServiceManager<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>INPUT_SERVICE<span class="token punctuation">,</span> inputManager<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        LockSettingsService               <span class="token comment" spellcheck="true">// 屏幕锁定服务，管理每个用户的相关锁屏信息</span>        DeviceIdleController              <span class="token comment" spellcheck="true">// Doze模式的主要驱动，参考“深入Android 'M' Doze”</span>        DevicePolicyManagerService        <span class="token comment" spellcheck="true">// 提供一些系统级别的设置及属性</span>        StatusBarManagerService           <span class="token comment" spellcheck="true">// 状态栏管理服务</span>        ClipboardService                  <span class="token comment" spellcheck="true">// 系统剪切板服务</span>        NetworkManagementService          <span class="token comment" spellcheck="true">// 网络管理服务</span>        TextServicesManagerService        <span class="token comment" spellcheck="true">// 文本服务，例如文本检查等</span>        NetworkScoreService               <span class="token comment" spellcheck="true">// 网络评分服务</span>        NetworkStatsService               <span class="token comment" spellcheck="true">// 网络状态服务</span>        NetworkPolicyManagerService       <span class="token comment" spellcheck="true">// 网络策略服务</span>        WifiP2pService                    <span class="token comment" spellcheck="true">// Wifi Direct服务</span>        WifiService                       <span class="token comment" spellcheck="true">// Wifi服务</span>        WifiScanningService               <span class="token comment" spellcheck="true">// Wifi扫描服务</span>        RttService                        <span class="token comment" spellcheck="true">// Wifi相关</span>        EthernetService                   <span class="token comment" spellcheck="true">// 以太网服务</span>        ConnectivityService               <span class="token comment" spellcheck="true">// 网络连接管理服务</span>        NsdService                        <span class="token comment" spellcheck="true">// 网络发现服务</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        NotificationManagerService        <span class="token comment" spellcheck="true">// 通知栏管理服务</span>        DeviceStorageMonitorService       <span class="token comment" spellcheck="true">// 磁盘空间状态检测服务</span>        LocationManagerService            <span class="token comment" spellcheck="true">// 位置服务，GPS、定位等</span>        CountryDetectorService            <span class="token comment" spellcheck="true">// 检测用户国家</span>        SearchManagerService              <span class="token comment" spellcheck="true">// 搜索管理服务</span>        DropBoxManagerService             <span class="token comment" spellcheck="true">// 用于系统运行时日志的存储于管理</span>        WallpaperManagerService           <span class="token comment" spellcheck="true">// 壁纸管理服务</span>        AudioService                      <span class="token comment" spellcheck="true">// AudioFlinger的上层管理封装，主要是音量、音效、声道及铃声等的管理</span>        DockObserver                      <span class="token comment" spellcheck="true">// 如果系统有个座子，当手机装上或拔出这个座子的话，就得靠他来管理了</span>        WiredAccessoryManager             <span class="token comment" spellcheck="true">// 监视手机和底座上的耳机</span>        UsbService                        <span class="token comment" spellcheck="true">// USB服务</span>        SerialService                     <span class="token comment" spellcheck="true">// 串口服务</span>        TwilightService                   <span class="token comment" spellcheck="true">// 指出用户当前所在位置是否为晚上，被UiModeManager等用来调整夜间模式。</span>        BackupManagerService              <span class="token comment" spellcheck="true">// 备份服务</span>        AppWidgetService                  <span class="token comment" spellcheck="true">// 提供Widget的管理和相关服务</span>        VoiceInteractionManagerService    <span class="token comment" spellcheck="true">// 语音交互管理服务</span>        DiskStatsService                  <span class="token comment" spellcheck="true">// 磁盘统计服务，供dumpsys使用</span>        SamplingProfilerService           <span class="token comment" spellcheck="true">// 用于耗时统计等</span>        NetworkTimeUpdateService          <span class="token comment" spellcheck="true">// 监视网络时间，当网络时间变化时更新本地时间。</span>        CommonTimeManagementService       <span class="token comment" spellcheck="true">// 管理本地常见的时间服务的配置，在网络配置变化时重新配置本地服务。</span>        CertBlacklister                   <span class="token comment" spellcheck="true">// 提供一种机制更新SSL certificate blacklist</span>        DreamManagerService               <span class="token comment" spellcheck="true">// 屏幕保护</span>        AssetAtlasService                 <span class="token comment" spellcheck="true">// 负责将预加载的bitmap组装成纹理贴图，生成的纹理贴图可以被用来跨进程使用，以减少内存。</span>        PrintManagerService               <span class="token comment" spellcheck="true">// 打印服务</span>        HdmiControlService                <span class="token comment" spellcheck="true">// HDMI控制服务</span>        FingerprintService                <span class="token comment" spellcheck="true">// 指纹服务</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span></code></pre><p>以上代码仅按顺序列出启动的服务，有些服务根据条件，如是否是工厂模式，或系统属性配置，选择性启动，这里不考虑条件判断和异常处理。</p><p>自此，SystemServer相关源码分析完毕。</p><h1 id="参考Blog"><a href="#参考Blog" class="headerlink" title="参考Blog"></a>参考Blog</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 01. <a href="https://blog.csdn.net/kingodcool/article/details/52171331" target="_blank" rel="noopener">https://blog.csdn.net/kingodcool/article/details/52171331</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 02. <a href="https://blog.csdn.net/qq_23547831/article/details/51105171" target="_blank" rel="noopener">https://blog.csdn.net/qq_23547831/article/details/51105171</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 03. <a href="https://blog.csdn.net/gaugamela/article/details/52261075" target="_blank" rel="noopener">https://blog.csdn.net/gaugamela/article/details/52261075</a></p>]]></content>
      
      
      <categories>
          
          <category> 系统启动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 启动阶段 </tag>
            
            <tag> SystemServer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入钻研 Android 启动阶段 之 zygote</title>
      <link href="/2018/12/10/01.xi-tong-qi-dong-jie-duan-android-xi-tong-qi-dong-pian-shen-ru-zuan-yan-android-qi-dong-jie-duan-zhi-zygote/"/>
      <url>/2018/12/10/01.xi-tong-qi-dong-jie-duan-android-xi-tong-qi-dong-pian-shen-ru-zuan-yan-android-qi-dong-jie-duan-zhi-zygote/</url>
      
        <content type="html"><![CDATA[<p><br></p><center>🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 </center><br><center><strong><font color="#1874CD"><font color="#3A5FCD" size="4">Android 启动阶段系列</font></font></strong></center><br><center>🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 </center><p><br></p><table><thead><tr><th style="text-align:center"><strong><font color="#EE2C2C" size="3">【启动阶段】</font></strong></th><th style="text-align:center"><strong><font color="#0000FF" size="3">【相关文章】</font></strong></th><th style="text-align:center"><strong><font color="#9932CC" size="3">源码版本</font></strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">init</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/12/01/%E3%80%90%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%E3%80%91Android%20%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E9%92%BB%E7%A0%94%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20init/">深入钻研 Android 启动阶段 之 init</a></td><td style="text-align:center"><font color="#FF0000" size="3">Android 9.0</font></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">zygote</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/12/10/%E3%80%90%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%E3%80%91Android%20%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E9%92%BB%E7%A0%94%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20zygote/">深入钻研 Android 启动阶段 之 zygote</a></td><td style="text-align:center"><font color="#FF0000" size="3">Android 9.0</font></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">systemserver</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/12/18/%E3%80%90%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%E3%80%91Android%20%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E9%92%BB%E7%A0%94%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20systemserver/">深入钻研 Android 启动阶段 之 systemserver</a></td><td style="text-align:center"><font color="#FF0000" size="3">Android 9.0</font></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">Launcher</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/12/26/%E3%80%90%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%E3%80%91Android%20%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E9%92%BB%E7%A0%94%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20Launcher/">深入钻研 Android 启动阶段 之 Launcher 启动及加载流程</a></td><td style="text-align:center"><font color="#FF0000" size="3">Android 9.0</font></td></tr></tbody></table><p><br></p><p><strong><font color="#3A5FCD" size="4">博文修改日志</font></strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">1、重新梳理 zygote 源码（Android 9.0）；</font><br><br></p><hr><h1 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h1><h2 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">init.rc</font></td><td>system/core/rootdir/init.rc</td></tr><tr><td><font color="#D15FEE">init.cpp</font></td><td>system/core/init/init.cpp</td></tr><tr><td><font color="#D15FEE">init.zygote64.rc</font></td><td>system/core/rootdir/init.zygote64.rc</td></tr><tr><td><font color="#D15FEE">builtins.cpp</font></td><td>system/core/init/builtins.cpp</td></tr><tr><td><font color="#D15FEE">service.cpp</font></td><td>system/core/init/service.cpp</td></tr><tr><td><font color="#D15FEE">app_main.cpp</font></td><td>frameworks/base/cmds/app_process/app_main.cpp</td></tr><tr><td><font color="#D15FEE">AndroidRuntime.cpp</font></td><td>frameworks/base/core/jni/AndroidRuntime.cpp</td></tr><tr><td><font color="#D15FEE">JniInvocation.cpp</font></td><td>libnativehelper/JniInvocation.cpp</td></tr><tr><td><font color="#D15FEE">ZygoteInit.java</font></td><td>frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</td></tr><tr><td><font color="#D15FEE">ZygoteServer.java</font></td><td>frameworks/base/core/java/com/android/internal/os/ZygoteServer.java</td></tr></tbody></table><h2 id="Zygote简介"><a href="#Zygote简介" class="headerlink" title="Zygote简介"></a>Zygote简介</h2><p>在Android系统中，JavaVM(Java虚拟机)、应用程序进程以及运行系统的关键服务的SystemServer进程都是由Zygote进程来创建的，我们也将它称为孵化器。它通过fock(复制进程)的形式来创建应用程序进程和SystemServer进程，由于Zygote进程在启动时会创建JavaVM，因此通过fock而创建的应用程序进程和SystemServer进程可以在内部获取一个JavaVM的实例拷贝。</p><h1 id="Read-The-Fucking-Code"><a href="#Read-The-Fucking-Code" class="headerlink" title="Read The Fucking Code"></a>Read The Fucking Code</h1><h2 id="Zygote触发"><a href="#Zygote触发" class="headerlink" title="Zygote触发"></a>Zygote触发</h2><p>在分析init进程时，我们知道init进程启动后，会解析init.rc文件，然后创建和加载service字段指定的进程。zygote进程就是以这种方式，被init进程加载的。</p><p>在system/core/rootdir/init.rc的开始部分，可以看到：</p><pre><code>import /init.environ.rcimport /init.usb.rcimport /init.${ro.hardware}.rcimport /vendor/etc/init/hw/init.${ro.hardware}.rcimport /init.usb.configfs.rcimport /init.${ro.zygote}.rc           // ${ro.zygote}由厂商定义，与平台相关on early-init    # Set init and its forked children&#39;s oom_adj.    write /proc/1/oom_score_adj -1000</code></pre><h3 id="init-zygoteXX-rc"><a href="#init-zygoteXX-rc" class="headerlink" title="init.zygoteXX.rc"></a>init.zygoteXX.rc</h3><p>从之前分析的init篇中我们知道，在不同的平台（32、64及64_32）上，init.rc将包含不同的zygote.rc文件。在system/core/rootdir目录下，有init.zygote32_64.rc、init.zyote64.rc、 init.zyote32.rc、init.zygote64_32.rc。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ <font color="#87CEFA">init.zygote32.rc</font>：zygote 进程对应的执行程序是 app_process (纯 32bit 模式)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ <font color="#87CEFA">init.zygote64.rc</font>：zygote 进程对应的执行程序是 app_process64 (纯 64bit 模式)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ <font color="#87CEFA">init.zygote32_64.rc</font>：启动两个 zygote 进程 (名为 zygote 和 zygote_secondary)，对应的执行程序分别是 app_process32 (主模式)、app_process64<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ <font color="#87CEFA">init.zygote64_32.rc</font>：启动两个 zygote 进程 (名为 zygote 和 zygote_secondary)，对应的执行程序分别是 app_process64 (主模式)、app_process32</p><p>为什么要定义这么多种情况呢？直接定义一个不就好了，这主要是因为Android 5.0以后开始支持64位程序，为了兼容32位和64位才这样定义。不同的zygote.rc内容大致相同，主要区别体现在启动的是32位，还是64位的进程。init.zygote32_64.rc和init.zygote64_32.rc会启动两个进程，且存在主次之分。</p><p>这里拿64位处理器为例，init.zygote64_32.rc的代码如下所示：</p><pre><code>// 进程名称是zygote,运行的二进制文件在/system/bin/app_process64// 启动参数是 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygoteservice zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote    class main    priority -20    user root    group root readproc    socket zygote stream 660 root system                               // 创建一个socket，名字叫zygote，以tcp形式    onrestart write /sys/android_power/request_state wake              // onrestart 指当进程重启时执行后面的命令    onrestart write /sys/power/state on    onrestart restart audioserver    onrestart restart cameraserver    onrestart restart media    onrestart restart netd    onrestart restart wificond    writepid /dev/cpuset/foreground/tasks                              // 创建子进程时，向 /dev/cpuset/foreground/tasks 写入pid// 另一个service ,名字 zygote_secondaryservice zygote_secondary /system/bin/app_process32 -Xzygote /system/bin --zygote --socket-name=zygote_secondary --enable-lazy-preload    class main    priority -20    user root    group root readproc    socket zygote_secondary stream 660 root system    onrestart restart zygote    writepid /dev/cpuset/foreground/tasks</code></pre><h3 id="start-zygote"><a href="#start-zygote" class="headerlink" title="start zygote"></a>start zygote</h3><p>定义了service，肯定有地方调用 start zygote。在之前init解析的博客中，我们分析过init进程的启动。init进程启动的最后，会产生”late-init”事件。</p><pre class=" language-C++"><code class="language-C++">    // Don't mount filesystems or start core system services in charger mode.    std::string bootmode = GetProperty("ro.bootmode", "");    if (bootmode == "charger") {        am.QueueEventTrigger("charger");    } else {        am.QueueEventTrigger("late-init");    }</code></pre><p>对应于init.rc配置文件中，我们找到如下代码：</p><pre><code># Mount filesystems and start core system services.on late-init    trigger early-fs    ... ...    # Now we can start zygote for devices with file based encryption    trigger zygote-start                 // 触发了zygote-start事件后，就会启动zygote进程    ... ...</code></pre><p>对应于init.rc配置文件中，我们找到如下代码：</p><pre><code># It is recommended to put unnecessary data/ initialization from post-fs-data# to start-zygote in device&#39;s init.rc to unblock zygote start.on zygote-start &amp;&amp; property:ro.crypto.state=unencrypted    # A/B update verifier that marks a successful boot.    exec_start update_verifier_nonencrypted           start netd                    // start对应的映射关系定义于system/core/init/builtins.cpp中    start zygote                  // 调用start对应的处理函数，启动名为zygote的服务（传入前文init.zygote.rc中定义的参数）    start zygote_secondaryon zygote-start &amp;&amp; property:ro.crypto.state=unsupported    # A/B update verifier that marks a successful boot.    exec_start update_verifier_nonencrypted    start netd    start zygote    start zygote_secondaryon zygote-start &amp;&amp; property:ro.crypto.state=encrypted &amp;&amp; property:ro.crypto.type=file    # A/B update verifier that marks a successful boot.    exec_start update_verifier_nonencrypted    start netd    start zygote    start zygote_secondary</code></pre><p>start命令有一个对应的执行函数do_start，定义在platform/system/core/init/builtins.cpp中</p><pre class=" language-C++"><code class="language-C++">const BuiltinFunctionMap::Map& BuiltinFunctionMap::map() const {    constexpr std::size_t kMax = std::numeric_limits<std::size_t>::max();    // clang-format off    static const Map builtin_functions = {        ... ...        {"start",                   {1,     1,    do_start}},        ... ...    };    // clang-format on    return builtin_functions;}</code></pre><p>我们来看下do_start()：</p><pre class=" language-C++"><code class="language-C++">static int do_start(const std::vector<std::string>& args) {    Service* svc = ServiceManager::GetInstance().FindServiceByName(args[1]);    // 找到zygote service对应信息    if (!svc) {        LOG(ERROR) << "do_start: Service " << args[1] << " not found";        return -1;    }    if (!svc->Start())         // 启动对应的进程        return -1;    return 0;}</code></pre><p>do_start首先是通过FindServiceByName去service数组中遍历，根据名字匹配出对应的service，然后调用service的Start函数。</p><p>最后，我们来看看service.cpp中定义Start函数：</p><pre class=" language-C++"><code class="language-C++">bool Service::Start() {    ... ...    pid_t pid = -1;    if (namespace_flags_) {        pid = clone(nullptr, nullptr, namespace_flags_ | SIGCHLD, nullptr);    } else {        pid = fork();         // 从init进程中，fork出zygote进程    }    ... ...}</code></pre><p>Start函数主要是fork出一个新进程，然后执行service对应的二进制文件，并将参数传递进去。那么下面我们以init.zygote64.rc为例进行分析。</p><h2 id="app-process"><a href="#app-process" class="headerlink" title="app_process"></a>app_process</h2><p>从上面我们分析的init.zygote64.rc可以看出，zygote64启动文件的地址为app_process64。app_process64对应的代码定义在frameworks/base/cmds/app_process中， </p><p>我们来看看对应的Android.mk： frameworks/base/cmds/app_process</p><pre class=" language-mk"><code class="language-mk">LOCAL_PATH:= $(call my-dir)... ...app_process_src_files := \    app_main.cpp \... ...LOCAL_MODULE:= app_processLOCAL_MULTILIB := bothLOCAL_MODULE_STEM_32 := app_process32LOCAL_MODULE_STEM_64 := app_process64</code></pre><p>其实不管是app_process、app_process32还是app_process64，对应的源文件都是app_main.cpp。</p><p>接下来我们就看看app_process对应的main函数，该函数定义于app_main.cpp中。</p><p>在app_main.cpp的main函数中，主要做的事情就是参数解析. 这个函数有两种启动模式：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 一种是zygote模式，也就是初始化zygote进程，传递的参数有–start-system-server –socket-name=zygote，前者表示启动SystemServer，后者指定socket的名称（Zygote64_32）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 一种是application模式，也就是启动普通应用程序，传递的参数有class名字以及class带的参数。</p><p>两者最终都是调用AppRuntime对象的start函数，加载ZygoteInit或RuntimeInit两个Java类，并将之前整理的参数传入进去。</p><p>我们这里暂时只讲解ZygoteInit的加载流程。</p><pre class=" language-C++"><code class="language-C++">int main(int argc, char* const argv[]){    // 将参数argv放到argv_String字符串中，然后打印出来    // 之前start zygote传入的参数是 -Xzygote /system/bin --zygote --start-system-server    if (!LOG_NDEBUG) {      String8 argv_String;      for (int i = 0; i < argc; ++i) {        argv_String.append("\"");        argv_String.append(argv[i]);        argv_String.append("\" ");      }      ALOGV("app_process main with argv: %s", argv_String.string());    }    // AppRuntime定义于app_main.cpp中，继承自AndroidRuntime    // 就是对Android运行环境的一种抽象，类似于java虚拟机对Java程序的作用    AppRuntime runtime(argv[0], computeArgBlockSize(argc, argv));    // Process command line arguments    // ignore argv[0]    argc--;    argv++;    // 这两个参数是Java程序需要依赖的Jar包，相当于import    const char* spaced_commands[] = { "-cp", "-classpath" };    // Allow "spaced commands" to be succeeded by exactly 1 argument (regardless of -s).    bool known_command = false;    int i;    // 找到解析参数的起点    for (i = 0; i < argc; i++) {        // 将spaced_commands中的参数额外加入VM        if (known_command == true) {          runtime.addOption(strdup(argv[i]));          // The static analyzer gets upset that we don't ever free the above          // string. Since the allocation is from main, leaking it doesn't seem          // problematic. NOLINTNEXTLINE          ALOGV("app_process main add known option '%s'", argv[i]);          known_command = false;          continue;        }        for (int j = 0;             j < static_cast<int>(sizeof(spaced_commands) / sizeof(spaced_commands[0]));             ++j) {            // 比较参数是否是spaced_commands中的参数          if (strcmp(argv[i], spaced_commands[j]) == 0) {            known_command = true;            ALOGV("app_process main found known command '%s'", argv[i]);          }        }        // 如果参数第一个字符是'-'，直接跳出循环，之前传入的第一个参数是 -Xzygote，所以执行到这儿就跳出了        if (argv[i][0] != '-') {            break;        }        if (argv[i][1] == '-' && argv[i][2] == 0) {            ++i; // Skip --.            break;        }        runtime.addOption(strdup(argv[i]));        // The static analyzer gets upset that we don't ever free the above        // string. Since the allocation is from main, leaking it doesn't seem        // problematic. NOLINTNEXTLINE        ALOGV("app_process main add option '%s'", argv[i]);    }    // Parse runtime arguments.  Stop at first unrecognized option.    // 从这里其实可以看出，通过app_main可以启动zygote、system-server及普通apk进程    // 这个可以通过init.rc来配置    bool zygote = false;    bool startSystemServer = false;    bool application = false;    String8 niceName;                              // app_process的名称改为zygote    String8 className;                             // 启动apk进程时，对应的类名    ++i;  // Skip unused "parent dir" argument.    // 跳过一个参数，之前跳过了-Xzygote，这里继续跳过 /system/bin ,也就是所谓的 "parent dir"    while (i < argc) {                             // 开始解析输入参数        const char* arg = argv[i++];        if (strcmp(arg, "--zygote") == 0) {        // 表示是zygote启动模式            zygote = true;            niceName = ZYGOTE_NICE_NAME;           // 这个值根据平台可能是zygote64或zygote        } else if (strcmp(arg, "--start-system-server") == 0) {            startSystemServer = true;              // init.zygote.rc中定义了该字段，启动zygote后会启动system-server        } else if (strcmp(arg, "--application") == 0) {            application = true;                    // 表示是application启动模式，也就是普通应用程序        } else if (strncmp(arg, "--nice-name=", 12) == 0) {            niceName.setTo(arg + 12);              // 进程别名，可以自己指定进程名        } else if (strncmp(arg, "--", 2) != 0) {            className.setTo(arg);                  // 与--application配置，启动指定的类，application启动的class            break;        } else {            --i;            break;        }    }    // 准备参数    Vector<String8> args;    if (!className.isEmpty()) {                    // className不为空，说明是application启动模式        // We're not in zygote mode, the only argument we need to pass        // to RuntimeInit is the application argument.        //        // The Remainder of args get passed to startup class main(). Make        // copies of them before we overwrite them with the process name.        args.add(application ? String8("application") : String8("tool"));        runtime.setClassNameAndArgs(className, argc - i, argv + i);    // 将className和参数设置给runtime        ... ...    } else {                                       // zygote启动模式        // We're in zygote mode.        maybeCreateDalvikCache();                  // 创建Dalvik的缓存目录并定义权限        if (startSystemServer) {                   // 增加start-system-server参数，默认启动zygote后，就会启动system_server            args.add(String8("start-system-server"));        }        char prop[PROP_VALUE_MAX];                 // 获取平台对应的abi信息        if (property_get(ABI_LIST_PROPERTY, prop, NULL) == 0) {            LOG_ALWAYS_FATAL("app_process: Unable to determine ABI list from property %s.",                ABI_LIST_PROPERTY);            return 11;        }        String8 abiFlag("--abi-list=");            // 参数需要制定abi        abiFlag.append(prop);        args.add(abiFlag);                         // 加入--abi-list=参数        // In zygote mode, pass all remaining arguments to the zygote        // main() method.        for (; i < argc; ++i) {            args.add(String8(argv[i]));            // 将剩下的参数加入args        }    }    if (!niceName.isEmpty()) {                     // 将app_process的进程名，替换为niceName        runtime.setArgv0(niceName.string(), true /* setProcName */);    }    if (zygote) {                                  // 调用Runtime的start函数, 启动ZygoteInit        runtime.start("com.android.internal.os.ZygoteInit", args, zygote);    } else if (className) {                        // 启动zygote没有进入这个分支        // 但这个分支说明，通过配置init.rc文件，其实是可以不通过zygote来启动一个进程        // 如果是application启动模式，则加载RuntimeInit        runtime.start("com.android.internal.os.RuntimeInit", args, zygote);    } else {        // error情况        fprintf(stderr, "Error: no class name or --zygote supplied.\n");        app_usage();        LOG_ALWAYS_FATAL("app_process: no class name or --zygote supplied.");    }}</code></pre><h2 id="AndroidRuntime"><a href="#AndroidRuntime" class="headerlink" title="AndroidRuntime"></a>AndroidRuntime</h2><p>由于AppRuntime继承自AndroidRuntime，且没有重写start方法，因此zygote的流程进入到了AndroidRuntime.cpp。</p><p>接下来，我们来看看AndroidRuntime的start函数的流程。</p><h3 id="创建Java虚拟机"><a href="#创建Java虚拟机" class="headerlink" title="创建Java虚拟机"></a>创建Java虚拟机</h3><pre class=" language-C++"><code class="language-C++">/* * Start the Android runtime.  This involves starting the virtual machine * and calling the "static void main(String[] args)" method in the class * named by "className". * * Passes the main function two arguments, the class name and the specified * options string. */void AndroidRuntime::start(const char* className, const Vector<String8>& options, bool zygote){    ... ...                                   // 打印一些日志，获取ANDROID_ROOT环境变量    /* start the virtual machine */    JniInvocation jni_invocation;    jni_invocation.Init(NULL);                // 初始化JNI,加载libart.so    JNIEnv* env;    // 创建虚拟机，其中大多数参数由系统属性决定    // 最终，startVm利用JNI_CreateJavaVM创建出虚拟机    if (startVm(&mJavaVM, &env, zygote) != 0) {        return;    }    // 回调AppRuntime的onVmCreated函数    // 对于zygote进程的启动流程而言，无实际操作，表示虚拟创建完成，但是里面是空实现    onVmCreated(env);    ... ...}</code></pre><p>这边我们跟一下jni_invocation.Init()：libnativehelper/JniInvocation.cpp</p><p>Init函数主要作用是初始化JNI，具体工作是首先通过dlopen加载libart.so获得其句柄，然后调用dlsym从libart.so中找到JNI_GetDefaultJavaVMInitArgs、JNI_CreateJavaVM、JNI_GetCreatedJavaVMs三个函数地址，赋值给对应成员属性，这三个函数会在后续虚拟机创建中调用。</p><pre class=" language-C++"><code class="language-C++">bool JniInvocation::Init(const char* library) {#ifdef __ANDROID__  char buffer[PROP_VALUE_MAX];#else  char* buffer = NULL;#endif  library = GetLibrary(library, buffer);              // 默认返回 libart.so  // Load with RTLD_NODELETE in order to ensure that libart.so is not unmapped when it is closed.  // This is due to the fact that it is possible that some threads might have yet to finish  // exiting even after JNI_DeleteJavaVM returns, which can lead to segfaults if the library is  // unloaded.  const int kDlopenFlags = RTLD_NOW | RTLD_NODELETE;  /*   * 1.dlopen功能是以指定模式打开指定的动态链接库文件，并返回一个句柄   * 2.RTLD_NOW表示需要在dlopen返回前，解析出所有未定义符号，如果解析不出来，在dlopen会返回NULL   * 3.RTLD_NODELETE表示在dlclose()期间不卸载库，并且在以后使用dlopen()重新加载库时不初始化库中的静态变量   */  handle_ = dlopen(library, kDlopenFlags);            // 获取libart.so的句柄  if (handle_ == NULL) {                              // 获取失败打印错误日志并尝试再次打开libart.so    if (strcmp(library, kLibraryFallback) == 0) {      // Nothing else to try.      ALOGE("Failed to dlopen %s: %s", library, dlerror());      return false;    }    // Note that this is enough to get something like the zygote    // running, we can't property_set here to fix this for the future    // because we are root and not the system user. See    // RuntimeInit.commonInit for where we fix up the property to    // avoid future fallbacks. http://b/11463182    ALOGW("Falling back from %s to %s after dlopen error: %s",          library, kLibraryFallback, dlerror());    library = kLibraryFallback;    handle_ = dlopen(library, kDlopenFlags);    if (handle_ == NULL) {      ALOGE("Failed to dlopen %s: %s", library, dlerror());      return false;    }  }  /*   * 1.FindSymbol函数内部实际调用的是dlsym   * 2.dlsym作用是根据 动态链接库 操作句柄(handle)与符号(symbol)，返回符号对应的地址   * 3.这里实际就是从libart.so中将JNI_GetDefaultJavaVMInitArgs等对应的地址存入&JNI_GetDefaultJavaVMInitArgs_中   */  if (!FindSymbol(reinterpret_cast<void**>(&JNI_GetDefaultJavaVMInitArgs_),                  "JNI_GetDefaultJavaVMInitArgs")) {    return false;  }  if (!FindSymbol(reinterpret_cast<void**>(&JNI_CreateJavaVM_),                  "JNI_CreateJavaVM")) {    return false;  }  if (!FindSymbol(reinterpret_cast<void**>(&JNI_GetCreatedJavaVMs_),                  "JNI_GetCreatedJavaVMs")) {    return false;  }  return true;}</code></pre><p>其次，我们再跟一下startVm()：</p><p>这个函数特别长，但是里面做的事情很单一，其实就是从各种系统属性中读取一些参数，然后通过addOption设置到AndroidRuntime的mOptions数组中存起来，另外就是调用之前从libart.so中找到JNI_CreateJavaVM函数，并将这些参数传入，由于本篇主要讲zygote启动流程，因此关于虚拟机的实现就不深入探究了。</p><pre class=" language-C++"><code class="language-C++">int AndroidRuntime::startVm(JavaVM** pJavaVM, JNIEnv** pEnv, bool zygote){    JavaVMInitArgs initArgs;    char propBuf[PROPERTY_VALUE_MAX];    char stackTraceFileBuf[sizeof("-Xstacktracefile:")-1 + PROPERTY_VALUE_MAX];    char jniOptsBuf[sizeof("-Xjniopts:")-1 + PROPERTY_VALUE_MAX];    ... ...    /* route exit() to our handler */    addOption("exit", (void*) runtime_exit);                                    // 将参数放入mOptions数组中    ... ...    initArgs.version = JNI_VERSION_1_4;    initArgs.options = mOptions.editArray();                                    // 将mOptions赋值给initArgs    initArgs.nOptions = mOptions.size();    initArgs.ignoreUnrecognized = JNI_FALSE;    /*     * Initialize the VM.     *     * The JavaVM* is essentially per-process, and the JNIEnv* is per-thread.     * If this call succeeds, the VM is ready, and we can start issuing     * JNI calls.     */    if (JNI_CreateJavaVM(pJavaVM, pEnv, &initArgs) < 0) {                       // 调用libart.so的JNI_CreateJavaVM函数        ALOGE("JNI_CreateJavaVM failed\n");        return -1;    }    return 0;}</code></pre><h3 id="注册JNI函数"><a href="#注册JNI函数" class="headerlink" title="注册JNI函数"></a>注册JNI函数</h3><p>我们回到AndroidRuntime的start函数。初始化JVM后，接下来就会调用startReg函数。</p><pre class=" language-C++"><code class="language-C++">void AndroidRuntime::start(const char* className, const Vector<String8>& options, bool zygote){    ... ...    /* 01. 创建Java虚拟机*/    /*     * Register android functions.     */    if (startReg(env) < 0) {         // 注册JNI函数        ALOGE("Unable to register all android natives\n");        return;    }    ... ...}</code></pre><p>startReg首先是设置了Android创建线程的处理函数，然后创建了一个200容量的局部引用作用域，用于确保不会出现OutOfMemoryException，最后就是调用register_jni_procs进行JNI注册。</p><p>我们跟进startReg()：</p><pre class=" language-C++"><code class="language-C++">/* * Register android native functions with the VM. *//*static*/ int AndroidRuntime::startReg(JNIEnv* env){    ATRACE_NAME("RegisterAndroidNatives");    /*     * This hook causes all future threads created in this process to be     * attached to the JavaVM.  (This needs to go away in favor of JNI     * Attach calls.)     */    // 定义Android创建线程的func：javaCreateThreadEtc，这个函数内部是通过Linux的clone来创建线程的    androidSetCreateThreadFunc((android_create_thread_fn) javaCreateThreadEtc);           ALOGV("--- registering native functions ---\n");    /*     * Every "register" function calls one or more things that return     * a local reference (e.g. FindClass).  Because we haven't really     * started the VM yet, they're all getting stored in the base frame     * and never released.  Use Push/Pop to manage the storage.     */    env->PushLocalFrame(200);        // 创建一个200容量的局部引用作用域,这个局部引用其实就是局部变量    if (register_jni_procs(gRegJNI, NELEM(gRegJNI), env) < 0) {       // 注册JNI函数        env->PopLocalFrame(NULL);        return -1;    }    env->PopLocalFrame(NULL);                                         // 释放局部引用作用域    //createJavaThread("fubar", quickTest, (void*) "hello");    return 0;}</code></pre><p>从上述代码可以看出，startReg函数中主要是通过register_jni_procs来注册JNI函数。其中，gRegJNI是一个全局数组，该数组的定义如下：</p><pre class=" language-C++"><code class="language-C++">static const RegJNIRec gRegJNI[] = {                                  // 里面就是一堆的函数指针    REG_JNI(register_com_android_internal_os_RuntimeInit),    REG_JNI(register_com_android_internal_os_ZygoteInit_nativeZygoteInit),    REG_JNI(register_android_os_SystemClock),    REG_JNI(register_android_util_EventLog),    REG_JNI(register_android_util_Log),    ... ...};</code></pre><p>我们挑一个register_com_android_internal_os_ZygoteInit_nativeZygoteInit，这实际上是自定义JNI函数并进行动态注册的标准写法,<br>内部是调用JNI的RegisterNatives，这样注册后，Java类ZygoteInit的native方法nativeZygoteInit就会调用com_android_internal_os_ZygoteInit_nativeZygoteInit函数。</p><pre class=" language-C++"><code class="language-C++">int register_com_android_internal_os_ZygoteInit_nativeZygoteInit(JNIEnv* env){    const JNINativeMethod methods[] = {        { "nativeZygoteInit", "()V",            (void*) com_android_internal_os_ZygoteInit_nativeZygoteInit },    };    return jniRegisterNativeMethods(env, "com/android/internal/os/ZygoteInit",        methods, NELEM(methods));}</code></pre><p>REG_JNI对应的宏定义及RegJNIRec结构体的定义为：</p><pre class=" language-C++"><code class="language-C++">#ifdef NDEBUG    #define REG_JNI(name)      { name }    struct RegJNIRec {        int (*mProc)(JNIEnv*);    };#else    #define REG_JNI(name)      { name, #name }    struct RegJNIRec {        int (*mProc)(JNIEnv*);        const char* mName;    };#endif</code></pre><p>根据宏定义可以看出，宏REG_JNI将得到函数名；定义RegJNIRec数组时，函数名被赋值给RegJNIRec结构体，于是每个函数名被强行转换为函数指针。<br>因此，register_jni_procs的参数就是一个函数指针数组，数组的大小和JNIEnv。</p><p>我们来跟进一下register_jni_procs函数：</p><pre class=" language-C++"><code class="language-C++">static int register_jni_procs(const RegJNIRec array[], size_t count, JNIEnv* env){    for (size_t i = 0; i < count; i++) {        if (array[i].mProc(env) < 0) {              // 调用mProc#ifndef NDEBUG            ALOGD("----------!!! %s failed to load\n", array[i].mName);#endif            return -1;        }    }    return 0;}</code></pre><p>结合前面的分析，容易知道register_jni_procs函数，实际上就是调用函数指针（mProc）对应的函数，以进行实际的JNI函数注册。</p><h3 id="反射启动ZygoteInit"><a href="#反射启动ZygoteInit" class="headerlink" title="反射启动ZygoteInit"></a>反射启动ZygoteInit</h3><p>继续分析AndroidRuntime.cpp的start函数：</p><pre class=" language-C++"><code class="language-C++">void AndroidRuntime::start(const char* className, const Vector<String8>& options, bool zygote){    ... ...    /* 01. 创建Java虚拟机*/    /* 02. 注册JNI函数 */    /*     * Start VM.  This thread becomes the main thread of the VM, and will     * not return until the VM exits.     */    // 替换string为实际路径    // 例如：将 "com.android.internal.os.ZygoteInit" 替换为 "com/android/internal/os/ZygoteInit"    char* slashClassName = toSlashClassName(className != NULL ? className : "");    jclass startClass = env->FindClass(slashClassName);                    // 找到class文件    if (startClass == NULL) {        ALOGE("JavaVM unable to locate class '%s'\n", slashClassName);        /* keep going */    } else {        jmethodID startMeth = env->GetStaticMethodID(startClass, "main",            "([Ljava/lang/String;)V");                                     // 通过反射找到ZygoteInit的main函数        if (startMeth == NULL) {            ALOGE("JavaVM unable to find main() in '%s'\n", className);            /* keep going */        } else {            env->CallStaticVoidMethod(startClass, startMeth, strArray);    // 调用ZygoteInit的main函数            ... ...        }    }    free(slashClassName);    ALOGD("Shutting down VM\n");    if (mJavaVM->DetachCurrentThread() != JNI_OK)                          // 退出当前线程        ALOGW("Warning: unable to detach main thread\n");    if (mJavaVM->DestroyJavaVM() != 0)                                     // 创建一个线程，该线程会等待所有子线程结束后关闭虚拟机        ALOGW("Warning: VM did not shut down cleanly\n");}</code></pre><p>可以看到，在AndroidRuntime的最后，将通过反射调用ZygoteInit的main函数。至此，<strong><font color="#87CEFA">zygote进程进入了java世界</font></strong>。 </p><p>其实我们仔细想一想，就会觉得zygote的整个流程实际上是非常符合实际情况的。<br>&nbsp;&nbsp;&nbsp;&nbsp;✨✨ 在Android中，每个进程都运行在对应的虚拟机上，因此zygote首先就负责创建出虚拟机。<br>&nbsp;&nbsp;&nbsp;&nbsp;✨✨ 然后，为了反射调用java代码，必须有对应的JNI函数，于是zygote进行了JNI函数的注册。<br>&nbsp;&nbsp;&nbsp;&nbsp;✨✨ 当一切准备妥当后，zygote进程才进入到了java世界。</p><h2 id="ZygoteInit"><a href="#ZygoteInit" class="headerlink" title="ZygoteInit"></a>ZygoteInit</h2><p>现在我们跟进ZygoteInit.java的main函数。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建ZygoteServer对象</span>        ZygoteServer zygoteServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">// Mark zygote start. This ensures that thread creation will throw</span>        <span class="token comment" spellcheck="true">// an error.</span>        <span class="token comment" spellcheck="true">// 调用native函数，确保当前没有其它线程在运行</span>        <span class="token comment" spellcheck="true">// 主要还是处于安全的考虑</span>        ZygoteHooks<span class="token punctuation">.</span><span class="token function">startZygoteNoThreadCreation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Zygote goes into its own process group.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Os<span class="token punctuation">.</span><span class="token function">setpgid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ErrnoException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Failed to setpgid(0,0)"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> Runnable caller<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            RuntimeInit<span class="token punctuation">.</span><span class="token function">enableDdms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> startSystemServer <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            String socketName <span class="token operator">=</span> <span class="token string">"zygote"</span><span class="token punctuation">;</span>            String abiList <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">boolean</span> enableLazyPreload <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析参数，得到上述变量的值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argv<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"start-system-server"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    startSystemServer <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"--enable-lazy-preload"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    enableLazyPreload <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>ABI_LIST_ARG<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    abiList <span class="token operator">=</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>ABI_LIST_ARG<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>SOCKET_NAME_ARG<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    socketName <span class="token operator">=</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>SOCKET_NAME_ARG<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Unknown command line argument: "</span> <span class="token operator">+</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>abiList <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"No ABI list supplied."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            zygoteServer<span class="token punctuation">.</span><span class="token function">registerServerSocket</span><span class="token punctuation">(</span>socketName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册server socket</span>            <span class="token comment" spellcheck="true">// In some configurations, we avoid preloading resources and classes eagerly.</span>            <span class="token comment" spellcheck="true">// In such cases, we will preload things prior to our first fork.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>enableLazyPreload<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token function">preload</span><span class="token punctuation">(</span>bootTimingsTraceLog<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 默认情况，预加载信息</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如注释，延迟预加载</span>            <span class="token comment" spellcheck="true">// 变更Zygote进程优先级为NORMAL级别</span>            <span class="token comment" spellcheck="true">// 第一次fork时才会preload</span>                Zygote<span class="token punctuation">.</span><span class="token function">resetNicePriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Do an initial gc to clean up after startup</span>            bootTimingsTraceLog<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span><span class="token string">"PostZygoteInitGC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">gcAndFinalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">// 如果预加载了，很有必要GC一波</span>            bootTimingsTraceLog<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// PostZygoteInitGC</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">// Zygote process unmounts root storage spaces.</span>            Zygote<span class="token punctuation">.</span><span class="token function">nativeUnmountStorageOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Set seccomp policy</span>            <span class="token comment" spellcheck="true">// 加载seccomp的过滤规则</span>            <span class="token comment" spellcheck="true">// 所有 Android 软件都使用系统调用（简称为 syscall）与 Linux 内核进行通信</span>            <span class="token comment" spellcheck="true">// 内核提供许多特定于设备和SOC的系统调用，让用户空间进程（包括应用）可以直接与内核进行交互</span>            <span class="token comment" spellcheck="true">// 不过，其中许多系统调用Android未予使用或未予正式支持</span>            <span class="token comment" spellcheck="true">// 通过seccomp，Android可使应用软件无法访问未使用的内核系统调用</span>            <span class="token comment" spellcheck="true">// 由于应用无法访问这些系统调用，因此，它们不会被潜在的有害应用利用</span>            <span class="token comment" spellcheck="true">// 该过滤器安装到zygote进程中，由于所有Android应用均衍生自该进程</span>            <span class="token comment" spellcheck="true">// 因而会影响到所有应用</span>            Seccomp<span class="token punctuation">.</span><span class="token function">setPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/// M: Added for BOOTPROF</span>            <span class="token function">addBootEvent</span><span class="token punctuation">(</span><span class="token string">"Zygote:Preload End"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/// @}</span>            ZygoteHooks<span class="token punctuation">.</span><span class="token function">stopZygoteNoThreadCreation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 允许有其它线程了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>startSystemServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Runnable r <span class="token operator">=</span> <span class="token function">forkSystemServer</span><span class="token punctuation">(</span>abiList<span class="token punctuation">,</span> socketName<span class="token punctuation">,</span> zygoteServer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// fork出system server</span>                <span class="token comment" spellcheck="true">// {@code r == null} in the parent (zygote) process, and {@code r != null} in the</span>                <span class="token comment" spellcheck="true">// child (system_server) process.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Accepting command socket connections"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// The select loop returns early in the child process after a fork and</span>            <span class="token comment" spellcheck="true">// loops forever in the zygote.</span>            caller <span class="token operator">=</span> zygoteServer<span class="token punctuation">.</span><span class="token function">runSelectLoop</span><span class="token punctuation">(</span>abiList<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// zygote进程进入无限循环，处理请求</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            zygoteServer<span class="token punctuation">.</span><span class="token function">closeServerSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// We're in the child process and have exited the select loop. Proceed to execute the</span>        <span class="token comment" spellcheck="true">// command.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>caller <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            caller<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>上面是ZygoteInit的main函数的主干部分，除了安全相关的内容外，最主要的工作就是注册server socket、预加载、启动system server及进入无限循环处理请求消息。 </p><p>接下来我们分四部分分别讨论！</p><h3 id="创建server-socket"><a href="#创建server-socket" class="headerlink" title="创建server socket"></a>创建server socket</h3><p>Android O将server socket相关的工作抽象到ZygoteServer.java中了。我们来看看其中的registerZygoteSocket函数：</p><pre class=" language-C++"><code class="language-C++">    /**     * Registers a server socket for zygote command connections     *     * @throws RuntimeException when open fails     */    void registerServerSocket(String socketName) {        if (mServerSocket == null) {            int fileDesc;            // ANDROID_SOCKET_PREFIX为"ANDROID_SOCKET_"            // 此处的socket name，就是zygote            final String fullSocketName = ANDROID_SOCKET_PREFIX + socketName;            try {                // 还记得么？在init.zygote.rc被加载时，指定了名为zygote的socket                // 在进程被创建时，就会创建对应的文件描述符，并加入到环境变量中                // 因此，此时可以取出对应的环境变量                String env = System.getenv(fullSocketName);                fileDesc = Integer.parseInt(env);            } catch (RuntimeException ex) {                throw new RuntimeException(fullSocketName + " unset or invalid", ex);            }            try {                FileDescriptor fd = new FileDescriptor();                fd.setInt$(fileDesc);                           // 获取zygote socket的文件描述符                mServerSocket = new LocalServerSocket(fd);      // 将socket包装成一个server socket            } catch (IOException ex) {                throw new RuntimeException(                        "Error binding to local socket '" + fileDesc + "'", ex);            }        }    }</code></pre><p>我们跟踪LocalServerSocket()：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">LocalServerSocket</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException    <span class="token punctuation">{</span>        impl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalSocketImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        impl<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>LocalSocket<span class="token punctuation">.</span>SOCKET_STREAM<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 创建SOCKET_STREAM类型的AF_UNIX socket</span>        localAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalSocketAddress</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        impl<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>localAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 绑定到指定地址</span>        impl<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>LISTEN_BACKLOG<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 开始监听</span>    <span class="token punctuation">}</span></code></pre><h3 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h3><p>我们看看预加载的内容：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">preload</span><span class="token punctuation">(</span>TimingsTraceLog bootTimingsTraceLog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token function">beginIcuCachePinning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">// Pin ICU Data, 获取字符集转换资源等</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token function">preloadClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                             <span class="token comment" spellcheck="true">// 读取文件system/etc/preloaded-classes，然后通过反射加载对应的类</span>                                                                      <span class="token comment" spellcheck="true">// 一般由厂商来定义，有时需要加载数千个类，启动慢的原因之一</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token function">preloadResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                           <span class="token comment" spellcheck="true">// 负责加载一些常用的系统资源</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token function">nativePreloadAppProcessHALs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token function">preloadOpenGL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                              <span class="token comment" spellcheck="true">// 图形相关</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token function">preloadSharedLibraries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">// 一些必要库</span>        <span class="token function">preloadTextResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">// 语言相关的字符信息</span>        <span class="token comment" spellcheck="true">// Ask the WebViewFactory to do any initialization that must run in the zygote process,</span>        <span class="token comment" spellcheck="true">// for memory sharing purposes.</span>        WebViewFactory<span class="token punctuation">.</span><span class="token function">prepareWebViewInZygote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">endIcuCachePinning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">warmUpJcaProviders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                         <span class="token comment" spellcheck="true">// 安全相关的</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"end preload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sPreloadComplete <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>为了让系统实际运行时更加流畅，在zygote启动时候，调用preload函数进行了一些预加载操作。Android 通过zygote fork的方式创建子进程。zygote进程预加载这些类和资源，在fork子进程时，仅需要做一个复制即可。<br>这样可以节约子进程的启动时间。同时，根据fork的copy-on-write机制可知，有些类如果不做改变，甚至都不用复制，子进程可以和父进程共享这部分数据，从而省去不少内存的占用。</p><h3 id="启动SystemServer进程"><a href="#启动SystemServer进程" class="headerlink" title="启动SystemServer进程"></a>启动SystemServer进程</h3><p>再来看看启动System Server的流程：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Prepare the arguments and forks for the system server process.     *     * Returns an {@code Runnable} that provides an entrypoint into system_server code in the     * child process, and {@code null} in the parent.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Runnable <span class="token function">forkSystemServer</span><span class="token punctuation">(</span>String abiList<span class="token punctuation">,</span> String socketName<span class="token punctuation">,</span>            ZygoteServer zygoteServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> capabilities <span class="token operator">=</span> <span class="token function">posixCapabilitiesAsBits</span><span class="token punctuation">(</span>            OsConstants<span class="token punctuation">.</span>CAP_IPC_LOCK<span class="token punctuation">,</span>            OsConstants<span class="token punctuation">.</span>CAP_KILL<span class="token punctuation">,</span>            OsConstants<span class="token punctuation">.</span>CAP_NET_ADMIN<span class="token punctuation">,</span>            OsConstants<span class="token punctuation">.</span>CAP_NET_BIND_SERVICE<span class="token punctuation">,</span>            OsConstants<span class="token punctuation">.</span>CAP_NET_BROADCAST<span class="token punctuation">,</span>            OsConstants<span class="token punctuation">.</span>CAP_NET_RAW<span class="token punctuation">,</span>            OsConstants<span class="token punctuation">.</span>CAP_SYS_MODULE<span class="token punctuation">,</span>            OsConstants<span class="token punctuation">.</span>CAP_SYS_NICE<span class="token punctuation">,</span>            OsConstants<span class="token punctuation">.</span>CAP_SYS_PTRACE<span class="token punctuation">,</span>            OsConstants<span class="token punctuation">.</span>CAP_SYS_TIME<span class="token punctuation">,</span>            OsConstants<span class="token punctuation">.</span>CAP_SYS_TTY_CONFIG<span class="token punctuation">,</span>            OsConstants<span class="token punctuation">.</span>CAP_WAKE_ALARM        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Containers run without this capability, so avoid setting it in that case */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>SystemProperties<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span>PROPERTY_RUNNING_IN_CONTAINER<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            capabilities <span class="token operator">|=</span> <span class="token function">posixCapabilitiesAsBits</span><span class="token punctuation">(</span>OsConstants<span class="token punctuation">.</span>CAP_BLOCK_SUSPEND<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* Hardcoded command line to start the system server */</span>        String args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"--setuid=1000"</span><span class="token punctuation">,</span>            <span class="token string">"--setgid=1000"</span><span class="token punctuation">,</span>            <span class="token string">"--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1023,1032,3001,3002,3003,3006,3007,3009,3010"</span><span class="token punctuation">,</span>            <span class="token string">"--capabilities="</span> <span class="token operator">+</span> capabilities <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> capabilities<span class="token punctuation">,</span>            <span class="token string">"--nice-name=system_server"</span><span class="token punctuation">,</span>            <span class="token string">"--runtime-args"</span><span class="token punctuation">,</span>            <span class="token string">"com.android.server.SystemServer"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ZygoteConnection<span class="token punctuation">.</span>Arguments parsedArgs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> pid<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            parsedArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteConnection<span class="token punctuation">.</span>Arguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将上面准备的参数，按照ZygoteConnection的风格进行封装</span>            ZygoteConnection<span class="token punctuation">.</span><span class="token function">applyDebuggerSystemProperty</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>            ZygoteConnection<span class="token punctuation">.</span><span class="token function">applyInvokeWithSystemProperty</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* Request to fork the system server process */</span>            pid <span class="token operator">=</span> Zygote<span class="token punctuation">.</span><span class="token function">forkSystemServer</span><span class="token punctuation">(</span>                                <span class="token comment" spellcheck="true">// 通过fork"分裂"出system_server</span>                    parsedArgs<span class="token punctuation">.</span>uid<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>gid<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>gids<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>debugFlags<span class="token punctuation">,</span>                    null<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>permittedCapabilities<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>effectiveCapabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* For child process */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 处理32_64和64_32的情况</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasSecondZygote</span><span class="token punctuation">(</span>abiList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">waitForSecondaryZygote</span><span class="token punctuation">(</span>socketName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// fork时会copy socket，system server需要主动关闭</span>            zygoteServer<span class="token punctuation">.</span><span class="token function">closeServerSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// system server进程处理自己的工作</span>            <span class="token keyword">return</span> <span class="token function">handleSystemServerProcess</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="处理请求信息"><a href="#处理请求信息" class="headerlink" title="处理请求信息"></a>处理请求信息</h3><p>创建出SystemServer进程后，zygote进程调用ZygoteServer中的函数runSelectLoop，处理server socket收到的命令。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Runs the zygote process's select loop. Accepts new connections as     * they happen, and reads commands from connections one spawn-request's     * worth at a time.     */</span>    Runnable <span class="token function">runSelectLoop</span><span class="token punctuation">(</span>String abiList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>FileDescriptor<span class="token operator">></span> fds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>FileDescriptor<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>ZygoteConnection<span class="token operator">></span> peers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>ZygoteConnection<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 首先将server socket加入到fds</span>        fds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mServerSocket<span class="token punctuation">.</span><span class="token function">getFileDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        peers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 每次循环，都重新创建需要监听的pollFds</span>            StructPollfd<span class="token punctuation">[</span><span class="token punctuation">]</span> pollFds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StructPollfd</span><span class="token punctuation">[</span>fds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pollFds<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                pollFds<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StructPollfd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pollFds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fd <span class="token operator">=</span> fds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 关注事件到来</span>                pollFds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> POLLIN<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 等待事件到来</span>                Os<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>pollFds<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ErrnoException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"poll failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 注意这里是倒序的，即优先处理已建立链接的信息，后处理新建链接的请求</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> pollFds<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pollFds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLIN<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// server socket最先加入fds， 因此这里是server socket收到数据</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 收到新的建立通信的请求，建立通信连接</span>                    ZygoteConnection newPeer <span class="token operator">=</span> <span class="token function">acceptCommandPeer</span><span class="token punctuation">(</span>abiList<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 加入到peers和fds, 即下一次也开始监听</span>                    peers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newPeer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    fds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newPeer<span class="token punctuation">.</span><span class="token function">getFileDesciptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//其它通信连接收到数据</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>从上面代码可知，初始时fds中仅有server socket，因此当有数据到来时，将执行i等于0的分支。此时，显然是需要创建新的通信连接，因此acceptCommandPeer将被调用。</p><p>我们看看acceptCommandPeer函数：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Waits for and accepts a single command connection. Throws     * RuntimeException on failure.     */</span>    <span class="token keyword">private</span> ZygoteConnection <span class="token function">acceptCommandPeer</span><span class="token punctuation">(</span>String abiList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// socket编程中，accept()调用主要用在基于连接的套接字类型，比如SOCK_STREAM和SOCK_SEQPACKET</span>            <span class="token comment" spellcheck="true">// 它提取出所监听套接字的等待连接队列中第一个连接请求，创建一个新的套接字，并返回指向该套接字的文件描述符</span>            <span class="token comment" spellcheck="true">// 新建立的套接字不在监听状态，原来所监听的套接字的状态也不受accept()调用的影响</span>            <span class="token keyword">return</span> <span class="token function">createNewConnection</span><span class="token punctuation">(</span>mServerSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> abiList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                    <span class="token string">"IOException during accept()"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> ZygoteConnection <span class="token function">createNewConnection</span><span class="token punctuation">(</span>LocalSocket socket<span class="token punctuation">,</span> String abiList<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteConnection</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> abiList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>从上面的代码，可以看出acceptCommandPeer调用了server socket的accpet函数。于是当新的连接建立时，zygote将会创建出一个新的socket与其通信，并将该socket加入到fds中。因此，一旦通信连接建立后，fds中将会包含有多个socket。</p><p>当poll监听到这一组sockets上有数据到来时，就会从阻塞中恢复。于是，我们需要判断到底是哪个socket收到了数据。</p><p>在runSelectLoop中采用倒序的方式轮询。由于server socket第一个被加入到fds，因此最后轮询到的socket才需要处理新建连接的操作；其它socket收到数据时，仅需要调用zygoteConnection的runonce函数执行数据对应的操作。若一个连接处理完所有对应消息后，该连接对应的socket和连接等将被移除。</p><h1 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h1><p><center><strong><font color="#87CEFA" size="4">Zygote启动流程到此结束，Zygote进程共做了如下几件事</font></strong></center><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🔨 1. 创建AppRuntime并调用其start方法，启动Zygote进程。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🔨 2. 创建JavaVM并为JavaVM注册JNI.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🔨 3. 通过JNI调用ZygoteInit的main函数进入Zygote的Java框架层。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🔨 4. 通过registerZygoteSocket函数创建服务端Socket，预加载类和资源，并通过runSelectLoop函数等待如ActivityManagerService等的请求。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🔨 5. 启动SystemServer进程。</p><h1 id="参考Blog"><a href="#参考Blog" class="headerlink" title="参考Blog"></a>参考Blog</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 01. <a href="https://blog.csdn.net/tfygg/article/details/52086621" target="_blank" rel="noopener">https://blog.csdn.net/tfygg/article/details/52086621</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 02. <a href="https://www.jianshu.com/p/cbc6b84aee08" target="_blank" rel="noopener">https://www.jianshu.com/p/cbc6b84aee08</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 03. <a href="https://www.jianshu.com/p/ab9b83a77af6" target="_blank" rel="noopener">https://www.jianshu.com/p/ab9b83a77af6</a></p>]]></content>
      
      
      <categories>
          
          <category> 系统启动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 启动阶段 </tag>
            
            <tag> zygote </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入钻研 Android 启动阶段 之 init</title>
      <link href="/2018/12/01/01.xi-tong-qi-dong-jie-duan-android-xi-tong-qi-dong-pian-shen-ru-zuan-yan-android-qi-dong-jie-duan-zhi-init/"/>
      <url>/2018/12/01/01.xi-tong-qi-dong-jie-duan-android-xi-tong-qi-dong-pian-shen-ru-zuan-yan-android-qi-dong-jie-duan-zhi-init/</url>
      
        <content type="html"><![CDATA[<p><br></p><center>🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 </center><br><center><strong><font color="#1874CD"><font color="#3A5FCD" size="4">Android 启动阶段系列</font></font></strong></center><br><center>🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 🍀 </center><p><br></p><table><thead><tr><th style="text-align:center"><strong><font color="#EE2C2C" size="3">【启动阶段】</font></strong></th><th style="text-align:center"><strong><font color="#0000FF" size="3">【相关文章】</font></strong></th><th style="text-align:center"><strong><font color="#9932CC" size="3">源码版本</font></strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">init</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/12/01/%E3%80%90%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%E3%80%91Android%20%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E9%92%BB%E7%A0%94%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20init/">深入钻研 Android 启动阶段 之 init</a></td><td style="text-align:center"><font color="#FF0000" size="3">Android 9.0</font></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">zygote</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/12/10/%E3%80%90%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%E3%80%91Android%20%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E9%92%BB%E7%A0%94%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20zygote/">深入钻研 Android 启动阶段 之 zygote</a></td><td style="text-align:center"><font color="#FF0000" size="3">Android 9.0</font></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">systemserver</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/12/18/%E3%80%90%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%E3%80%91Android%20%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E9%92%BB%E7%A0%94%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20systemserver/">深入钻研 Android 启动阶段 之 systemserver</a></td><td style="text-align:center"><font color="#FF0000" size="3">Android 9.0</font></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">Launcher</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/12/26/%E3%80%90%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%E3%80%91Android%20%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E9%92%BB%E7%A0%94%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20Launcher/">深入钻研 Android 启动阶段 之 Launcher 启动及加载流程</a></td><td style="text-align:center"><font color="#FF0000" size="3">Android 9.0</font></td></tr></tbody></table><p><br></p><p><strong><font color="#3A5FCD" size="4">博文修改日志</font></strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">1、重新梳理 init 源码（Android 9.0）；</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">2、博文格式，文章排版优化；</font><br><br></p><hr><h1 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h1><h2 id="1-1-核心源码"><a href="#1-1-核心源码" class="headerlink" title="1.1 核心源码"></a>1.1 核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">init.rc</font></td><td>/system/core/rootdir/init.rc</td></tr><tr><td><font color="#D15FEE">init.cpp</font></td><td>/system/core/init/init.cpp</td></tr><tr><td><font color="#D15FEE">property_service.cpp</font></td><td>/system/core/init/property_service.cpp</td></tr><tr><td><font color="#D15FEE">parser.cpp</font></td><td>/system/core/init/parser.cpp</td></tr><tr><td><font color="#D15FEE">log.cpp</font></td><td>/system/core/init/log.cpp</td></tr><tr><td><font color="#D15FEE">logging.cpp</font></td><td>/system/core/base/logging.cpp</td></tr><tr><td><font color="#D15FEE">property_service.cpp</font></td><td>/system/core/init/property_service.cpp</td></tr><tr><td><font color="#D15FEE">signal_handler.cpp</font></td><td>/system/core/init/signal_handler.cpp</td></tr><tr><td><font color="#D15FEE">service.cpp</font></td><td>/system/core/init/service.cpp</td></tr><tr><td><font color="#D15FEE">Action.cpp</font></td><td>/system/core/init/Action.cpp</td></tr><tr><td><font color="#D15FEE">builtins.cpp</font></td><td>/system/core/init/builtins.cpp</td></tr><tr><td><font color="#D15FEE">selinux.cpp</font></td><td>/system/core/init/selinux.cpp</td></tr></tbody></table><h2 id="1-2-系统启动流程"><a href="#1-2-系统启动流程" class="headerlink" title="1.2 系统启动流程"></a>1.2 系统启动流程</h2><p><strong><font color="#0000CD">1. 按下电源系统启动</font></strong></p><p>当电源按下时引导芯片代码开始从预定义的地方（固化在 ROM）开始执行，加载引导程序 Bootloader 到 RAM，然后执行。 </p><p><strong><font color="#0000CD">2. 引导程序 Bootloader</font></strong></p><p>引导程序是在 Android 操作系统开始运行前的一个小程序，它的主要作用是把系统 OS 拉起来并运行。 </p><p><strong><font color="#0000CD">3. linux 内核启动</font></strong></p><p>内核启动时，设置缓存、被保护存储器、计划列表，加载驱动。当内核完成系统设置，它首先在系统文件中寻找 ”init” 文件，然后启动 root 进程或者系统的第一个进程。</p><p><strong><font color="#0000CD">4. init 进程启动</font></strong></p><p><strong><font color="#FF0000">✨ 这就是我们本篇文章要讨论的内容 ✨</font></strong></p><h2 id="1-3-关于-init"><a href="#1-3-关于-init" class="headerlink" title="1.3 关于 init"></a>1.3 关于 init</h2><p>init 进程，它是一个由内核启动的用户级进程，当 Linux 内核启动之后，运行的第一个进程是 init，这个进程是一个守护进程，确切的说，它是 Linux 系统中用户控件的第一个进程，所以它的进程号是 1。它的生命周期贯穿整个 linux 内核运行的始终， linux 中所有其它的进程的共同始祖均为 init 进程，可以通过 “adb shell ps | grep init” 查看进程号。</p><p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-f5b4697ef9cc33ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Android 进程模型.png"></center><br><br><br>init 进程的入口文件在 <code>system/core/init/init.cpp</code> 中，由于 init 是命令行程序，所以分析 init.cpp 首先应从 <code>main</code> 函数开始！</p><h1 id="二、第一阶段（内核态）"><a href="#二、第一阶段（内核态）" class="headerlink" title="二、第一阶段（内核态）"></a>二、第一阶段（内核态）</h1><h2 id="2-1-判断及增加环境变量"><a href="#2-1-判断及增加环境变量" class="headerlink" title="2.1 判断及增加环境变量"></a>2.1 判断及增加环境变量</h2><pre class=" language-java"><code class="language-java"><span class="token operator">/</span>system<span class="token operator">/</span>core<span class="token operator">/</span>init<span class="token operator">/</span>init<span class="token punctuation">.</span>cpp<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">//根据参数，判断是否需要启动 ueventd 和 watchdogd</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token function">basename</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ueventd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 启动 ueventd</span>        <span class="token keyword">return</span> <span class="token function">ueventd_main</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token function">basename</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"watchdogd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 启动 watchdogd</span>        <span class="token keyword">return</span> <span class="token function">watchdogd_main</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"subcontext"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">InitKernelLogging</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> BuiltinFunctionMap function_map<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">SubcontextMain</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>function_map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>REBOOT_BOOTLOADER_ON_PANIC<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">InstallRebootSignalHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 若紧急重启，则安装对应的消息处理器</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-2-创建并挂载相关的文件系统"><a href="#2-2-创建并挂载相关的文件系统" class="headerlink" title="2.2 创建并挂载相关的文件系统"></a>2.2 创建并挂载相关的文件系统</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 判断及增加环境变量 */</span>    <span class="token comment" spellcheck="true">// 判断是否是系统启动的第一阶段</span>    bool is_first_stage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"INIT_SECOND_STAGE"</span><span class="token punctuation">)</span> <span class="token operator">==</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第一次进入为 true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is_first_stage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用于记录启动时间</span>        boot_clock<span class="token operator">:</span><span class="token operator">:</span>time_point start_time <span class="token operator">=</span> boot_clock<span class="token operator">:</span><span class="token operator">:</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 清除屏蔽字(file mode creation mask)，保证新建的目录的访问权限不受屏蔽字影响</span>        <span class="token function">umask</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">clearenv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setenv</span><span class="token punctuation">(</span><span class="token string">"PATH"</span><span class="token punctuation">,</span> _PATH_DEFPATH<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 挂载 tmpfs 文件系统</span>        <span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"tmpfs"</span><span class="token punctuation">,</span> <span class="token string">"/dev"</span><span class="token punctuation">,</span> <span class="token string">"tmpfs"</span><span class="token punctuation">,</span> MS_NOSUID<span class="token punctuation">,</span> <span class="token string">"mode=0755"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">"/dev/pts"</span><span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">"/dev/socket"</span><span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 挂载 devpts 文件系统</span>        <span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"devpts"</span><span class="token punctuation">,</span> <span class="token string">"/dev/pts"</span><span class="token punctuation">,</span> <span class="token string">"devpts"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>        #define <span class="token function">MAKE_STR</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token function">__STRING</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 挂载 proc 文件系统</span>        <span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"proc"</span><span class="token punctuation">,</span> <span class="token string">"/proc"</span><span class="token punctuation">,</span> <span class="token string">"proc"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"hidepid=2,gid="</span> <span class="token function">MAKE_STR</span><span class="token punctuation">(</span>AID_READPROC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 8.0 新增, 收紧了 cmdline 目录的权限</span>        <span class="token function">chmod</span><span class="token punctuation">(</span><span class="token string">"/proc/cmdline"</span><span class="token punctuation">,</span> <span class="token number">0440</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 8.0 新增，增加了个用户组</span>        gid_t groups<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> AID_READPROC <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">setgroups</span><span class="token punctuation">(</span><span class="token function">arraysize</span><span class="token punctuation">(</span>groups<span class="token punctuation">)</span><span class="token punctuation">,</span> groups<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 挂载 sysfs 文件系统</span>        <span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"sysfs"</span><span class="token punctuation">,</span> <span class="token string">"/sys"</span><span class="token punctuation">,</span> <span class="token string">"sysfs"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 8.0 新增</span>        <span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"selinuxfs"</span><span class="token punctuation">,</span> <span class="token string">"/sys/fs/selinux"</span><span class="token punctuation">,</span> <span class="token string">"selinuxfs"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 提前创建了 kmsg 设备节点文件，用于输出 log 信息</span>        <span class="token function">mknod</span><span class="token punctuation">(</span><span class="token string">"/dev/kmsg"</span><span class="token punctuation">,</span> S_IFCHR <span class="token operator">|</span> <span class="token number">0600</span><span class="token punctuation">,</span> <span class="token function">makedev</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token function">constexpr</span> <span class="token punctuation">(</span>WORLD_WRITABLE_KMSG<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">mknod</span><span class="token punctuation">(</span><span class="token string">"/dev/kmsg_debug"</span><span class="token punctuation">,</span> S_IFCHR <span class="token operator">|</span> <span class="token number">0622</span><span class="token punctuation">,</span> <span class="token function">makedev</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">mknod</span><span class="token punctuation">(</span><span class="token string">"/dev/random"</span><span class="token punctuation">,</span> S_IFCHR <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">,</span> <span class="token function">makedev</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mknod</span><span class="token punctuation">(</span><span class="token string">"/dev/urandom"</span><span class="token punctuation">,</span> S_IFCHR <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">,</span> <span class="token function">makedev</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Mount staging areas for devices managed by vold</span>        <span class="token comment" spellcheck="true">// See storage config details at http://source.android.com/devices/storage/</span>        <span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"tmpfs"</span><span class="token punctuation">,</span> <span class="token string">"/mnt"</span><span class="token punctuation">,</span> <span class="token string">"tmpfs"</span><span class="token punctuation">,</span> MS_NOEXEC <span class="token operator">|</span> MS_NOSUID <span class="token operator">|</span> MS_NODEV<span class="token punctuation">,</span>              <span class="token string">"mode=0755,uid=0,gid=1000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// /mnt/vendor is used to mount vendor-specific partitions that can not be</span>        <span class="token comment" spellcheck="true">// part of the vendor partition, e.g. because they are mounted read-write.</span>        <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">"/mnt/vendor"</span><span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>通过源码可以发现，该部分主要用于<code>创建</code>和<code>挂载</code>启动所需的<code>文件目录</code>。需要注意的是，在编译 Android 系统源码时，在生成的根文件系统中，并不存在这些目录，它们是系统运行时的目录，即当系统终止时，就会消失。 </p><p><strong><font color="#FF0000" size="4">四类文件系统：</font></strong> <strong>（简单理解即可）</strong></p><p><strong><font color="#0000CD">tmpfs</font></strong>：一种虚拟内存文件系统，它会将所有的文件存储在虚拟内存中，如果你将 tmpfs 文件系统卸载后，那么其下的所有的内容将不复存在。tmpfs 既可以使用 RAM，也可以使用交换分区，会根据你的实际需要而改变大小。tmpfs 的速度非常惊人，毕竟它是驻留在 RAM 中的，即使用了交换分区，性能仍然非常卓越。由于 tmpfs 是驻留在 RAM 的，因此它的内容是不持久的。断电后，tmpfs 的内容就消失了，这也是被称作 tmpfs 的根本原因。</p><p><strong><font color="#0000CD">devpts</font></strong>：为伪终端提供了一个标准接口，它的标准挂接点是 /dev/pts。只要 pty 的主复合设备 /dev/ptmx 被打开，就会在 /dev/pts 下动态的创建一个新的 pty 设备文件。</p><p><strong><font color="#0000CD">proc</font></strong>：一个非常重要的虚拟文件系统，它可以看作是内核内部数据结构的接口，通过它我们可以获得系统的信息，同时也能够在运行时修改特定的内核参数。</p><p><strong><font color="#0000CD">sysfs</font></strong>：与 proc 文件系统类似，也是一个不占有任何磁盘空间的虚拟文件系统。它通常被挂接在 /sys 目录下。sysfs 文件系统是 Linux2.6 内核引入的，它把连接在系统上的设备和总线组织成为一个分级的文件，使得它们可以在用户空间存取。</p><h2 id="2-3-重定向输入输出-内核-Log-系统"><a href="#2-3-重定向输入输出-内核-Log-系统" class="headerlink" title="2.3 重定向输入输出/内核 Log 系统"></a>2.3 重定向输入输出/内核 Log 系统</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 判断及增加环境变量 */</span>    <span class="token comment" spellcheck="true">/* 02. 创建并挂载相关的文件系统 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is_first_stage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token function">InitKernelLogging</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h2 id="2-4-挂载一些分区设备"><a href="#2-4-挂载一些分区设备" class="headerlink" title="2.4 挂载一些分区设备"></a>2.4 挂载一些分区设备</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 判断及增加环境变量 */</span>    <span class="token comment" spellcheck="true">/* 02. 创建文件系统目录并挂载相关的文件系统 */</span>    <span class="token comment" spellcheck="true">/* 03. 重定向输入输出/内核 Log 系统 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is_first_stage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 挂载特定的分区设备</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">DoFirstStageMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">LOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Failed to mount required partitions early ..."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h2 id="2-5-完成-SELinux-相关工作"><a href="#2-5-完成-SELinux-相关工作" class="headerlink" title="2.5 完成 SELinux 相关工作"></a>2.5 完成 SELinux 相关工作</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 判断及增加环境变量 */</span>    <span class="token comment" spellcheck="true">/* 02. 创建文件系统目录并挂载相关的文件系统 */</span>    <span class="token comment" spellcheck="true">/* 03. 重定向输入输出/内核 Log 系统 */</span>    <span class="token comment" spellcheck="true">/* 04. 挂载一些分区设备 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is_first_stage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 此处应该是初始化安全框架：Android Verified Boot</span>        <span class="token comment" spellcheck="true">// AVB 主要用于防止系统文件本身被篡改，还包含了防止系统回滚的功能，</span>        <span class="token comment" spellcheck="true">// 以免有人试图回滚系统并利用以前的漏洞</span>        <span class="token function">SetInitAvbVersionInRecovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Set up SELinux, loading the SELinux policy.</span>        <span class="token function">SelinuxSetupKernelLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">selinux_initialize</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 调用 selinux_initialize 启动 SELinux</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h2 id="2-6-is-first-stage-收尾"><a href="#2-6-is-first-stage-收尾" class="headerlink" title="2.6 is_first_stage 收尾"></a>2.6 is_first_stage 收尾</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 判断及增加环境变量 */</span>    <span class="token comment" spellcheck="true">/* 02. 创建文件系统目录并挂载相关的文件系统 */</span>    <span class="token comment" spellcheck="true">/* 03. 重定向输入输出/内核 Log 系统 */</span>    <span class="token comment" spellcheck="true">/* 04. 挂载一些分区设备 */</span>    <span class="token comment" spellcheck="true">/* 05. 完成 SELinux 相关工作 */</span>    <span class="token comment" spellcheck="true">/* 06. is_first_stage 收尾 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is_first_stage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 按 selinux policy 要求，重新设置 init 文件属性</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">selinux_android_restorecon</span><span class="token punctuation">(</span><span class="token string">"/init"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">PLOG</span><span class="token punctuation">(</span>FATAL<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"restorecon failed of /init failed"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">setenv</span><span class="token punctuation">(</span><span class="token string">"INIT_SECOND_STAGE"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> constexpr uint32_t kNanosecondsPerMillisecond <span class="token operator">=</span> <span class="token number">1e6</span><span class="token punctuation">;</span>        uint64_t start_ms <span class="token operator">=</span>                   start_time<span class="token punctuation">.</span><span class="token function">time_since_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> kNanosecondsPerMillisecond<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 记录初始化时的时间</span>        <span class="token function">setenv</span><span class="token punctuation">(</span><span class="token string">"INIT_STARTED_AT"</span><span class="token punctuation">,</span> std<span class="token operator">:</span><span class="token operator">:</span><span class="token function">to_string</span><span class="token punctuation">(</span>start_ms<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token operator">*</span> path <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token operator">*</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> path<span class="token punctuation">,</span> nullptr <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 再次调用 init 的 main 函数，启动用户态的 init 进程</span>        <span class="token function">execv</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// execv() only returns if an error happened, in which case we</span>        <span class="token comment" spellcheck="true">// panic and never fall through this conditional.</span>        <span class="token function">PLOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"execv(\""</span> <span class="token operator">&lt;&lt;</span> path <span class="token operator">&lt;&lt;</span> <span class="token string">"\") failed"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------- END ------------ */</span><span class="token punctuation">}</span></code></pre><p>上面所有的源码我们都是围绕第一阶段进行的分析（is_first_stage），自此第一阶段结束，会复位一些信息，并设置一些环境变量，最后启动用户态的 init 进程，进入 init 第二阶段。</p><h1 id="三、第二阶段（用户态）"><a href="#三、第二阶段（用户态）" class="headerlink" title="三、第二阶段（用户态）"></a>三、第二阶段（用户态）</h1><p>init 进程的第二阶段仍然从 main 函数开始入手！</p><h2 id="3-1-初始化属性域"><a href="#3-1-初始化属性域" class="headerlink" title="3.1 初始化属性域"></a>3.1 初始化属性域</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 判断及增加环境变量 */</span>    <span class="token comment" spellcheck="true">/* 02. 创建文件系统目录并挂载相关的文件系统 */</span>    <span class="token comment" spellcheck="true">/* 03. 重定向输入输出/内核 Log 系统 */</span>    <span class="token comment" spellcheck="true">/* 04. 挂载一些分区设备 */</span>    <span class="token comment" spellcheck="true">/* 05. 完成 SELinux 相关工作 */</span>    <span class="token comment" spellcheck="true">/* 06. is_first_stage 收尾 */</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------- END ------------ */</span>    <span class="token comment" spellcheck="true">/* ------------ 第二阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">// 同样屏蔽标准输入输出及定义 Kernel logger</span>    <span class="token function">InitKernelLogging</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LOG</span><span class="token punctuation">(</span>INFO<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"init second stage started!"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 最后调用 syscall，设置安全相关的值</span>    <span class="token function">keyctl_get_keyring_ID</span><span class="token punctuation">(</span>KEY_SPEC_SESSION_KEYRING<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里的功能类似于“锁”</span>    <span class="token function">close</span><span class="token punctuation">(</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/.booting"</span><span class="token punctuation">,</span> O_WRONLY <span class="token operator">|</span> O_CREAT <span class="token operator">|</span> O_CLOEXEC<span class="token punctuation">,</span> <span class="token number">0000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">property_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化属性域 --> 定义于system/core/init/property_service.cpp</span>    <span class="token function">process_kernel_dt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process_kernel_cmdline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理内核命令</span>    <span class="token comment" spellcheck="true">// Propagate the kernel variables to internal variables</span>    <span class="token comment" spellcheck="true">// used by init as well as the current required properties.</span>    <span class="token function">export_kernel_boot_props</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Make the time that init started available for bootstat to log.</span>    <span class="token function">property_set</span><span class="token punctuation">(</span><span class="token string">"ro.boottime.init"</span><span class="token punctuation">,</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"INIT_STARTED_AT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">property_set</span><span class="token punctuation">(</span><span class="token string">"ro.boottime.init.selinux"</span><span class="token punctuation">,</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"INIT_SELINUX_TOOK"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Set libavb version for Framework-only OTA match in Treble build.</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> avb_version <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"INIT_AVB_VERSION"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>avb_version<span class="token punctuation">)</span> <span class="token function">property_set</span><span class="token punctuation">(</span><span class="token string">"ro.boot.avb_version"</span><span class="token punctuation">,</span> avb_version<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>这部分代码主要的工作应该就是调用 <code>property_init()</code> 初始化属性域，然后设置各种属性。</p><p>在 Android 平台中，为了让运行中的所有进程共享系统运行时所需要的各种设置值，系统开辟了属性存储区域，并提供了访问该区域的 API。</p><p>我们查看 <code>property_init()</code> 源码：</p><pre class=" language-java"><code class="language-java"><span class="token operator">/</span>system<span class="token operator">/</span>core<span class="token operator">/</span>init<span class="token operator">/</span>property_service<span class="token punctuation">.</span>cpp<span class="token keyword">void</span> <span class="token function">property_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">"/dev/__properties__"</span><span class="token punctuation">,</span> S_IRWXU <span class="token operator">|</span> S_IXGRP <span class="token operator">|</span> S_IXOTH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CreateSerializedPropertyInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 最终调用 _system_property_area_init() 函数初始化属性域</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__system_property_area_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">LOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Failed to initialize property area"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>property_info_area<span class="token punctuation">.</span><span class="token function">LoadDefaultPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">LOG</span><span class="token punctuation">(</span>FATAL<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Failed to load serialized property info file"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-2-清空环境变量"><a href="#3-2-清空环境变量" class="headerlink" title="3.2 清空环境变量"></a>3.2 清空环境变量</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 判断及增加环境变量 */</span>    <span class="token comment" spellcheck="true">/* 02. 创建文件系统目录并挂载相关的文件系统 */</span>    <span class="token comment" spellcheck="true">/* 03. 重定向输入输出/内核 Log 系统 */</span>    <span class="token comment" spellcheck="true">/* 04. 挂载一些分区设备 */</span>    <span class="token comment" spellcheck="true">/* 05. 完成 SELinux 相关工作 */</span>    <span class="token comment" spellcheck="true">/* 06. is_first_stage 收尾 */</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------- END ------------ */</span>    <span class="token comment" spellcheck="true">/* ------------ 第二阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 初始化属性域 */</span>    <span class="token comment" spellcheck="true">// 清除掉之前使用过的环境变量</span>    <span class="token comment" spellcheck="true">// Clean up our environment.</span>    <span class="token function">unsetenv</span><span class="token punctuation">(</span><span class="token string">"INIT_SECOND_STAGE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">unsetenv</span><span class="token punctuation">(</span><span class="token string">"INIT_STARTED_AT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">unsetenv</span><span class="token punctuation">(</span><span class="token string">"INIT_SELINUX_TOOK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">unsetenv</span><span class="token punctuation">(</span><span class="token string">"INIT_AVB_VERSION"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="3-3-完成-SELinux-相关工作"><a href="#3-3-完成-SELinux-相关工作" class="headerlink" title="3.3 完成 SELinux 相关工作"></a>3.3 完成 SELinux 相关工作</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 判断及增加环境变量 */</span>    <span class="token comment" spellcheck="true">/* 02. 创建文件系统目录并挂载相关的文件系统 */</span>    <span class="token comment" spellcheck="true">/* 03. 重定向输入输出/内核 Log 系统 */</span>    <span class="token comment" spellcheck="true">/* 04. 挂载一些分区设备 */</span>    <span class="token comment" spellcheck="true">/* 05. 完成 SELinux 相关工作 */</span>    <span class="token comment" spellcheck="true">/* 06. is_first_stage 收尾 */</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------- END ------------ */</span>    <span class="token comment" spellcheck="true">/* ------------ 第二阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 初始化属性域 */</span>    <span class="token comment" spellcheck="true">/* 02. 清空环境变量 */</span>    <span class="token comment" spellcheck="true">// 再次完成 selinux 相关的工作</span>    <span class="token comment" spellcheck="true">// Now set up SELinux for second stage.</span>    <span class="token function">SelinuxSetupKernelLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SelabelInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SelinuxRestoreContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>我们发现在 <code>init</code> 进程的<code>第一阶段</code>，也调用了 <code>selinux_initialize</code> 函数，那么两者有什么区别？</p><p>init 进程<code>第一阶段</code>主要<code>加载 selinux 相关的策略</code>，而<code>第二阶段</code>调用 <code>SelabelInitialize()</code> 是为了<code>注册一些处理器</code>。</p><h2 id="3-4-创建-epoll-句柄"><a href="#3-4-创建-epoll-句柄" class="headerlink" title="3.4 创建 epoll 句柄"></a>3.4 创建 epoll 句柄</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 判断及增加环境变量 */</span>    <span class="token comment" spellcheck="true">/* 02. 创建文件系统目录并挂载相关的文件系统 */</span>    <span class="token comment" spellcheck="true">/* 03. 重定向输入输出/内核 Log 系统 */</span>    <span class="token comment" spellcheck="true">/* 04. 挂载一些分区设备 */</span>    <span class="token comment" spellcheck="true">/* 05. 完成 SELinux 相关工作 */</span>    <span class="token comment" spellcheck="true">/* 06. is_first_stage 收尾 */</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------- END ------------ */</span>    <span class="token comment" spellcheck="true">/* ------------ 第二阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 初始化属性域 */</span>    <span class="token comment" spellcheck="true">/* 02. 清空环境变量 */</span>    <span class="token comment" spellcheck="true">/* 03. 完成 SELinux 相关工作 */</span>    epoll_fd <span class="token operator">=</span> <span class="token function">epoll_create1</span><span class="token punctuation">(</span>EPOLL_CLOEXEC<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 调用 epoll_create1 创建 epoll 句柄</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>epoll_fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">PLOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"epoll_create1 failed"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="3-5-装载子进程信号处理器"><a href="#3-5-装载子进程信号处理器" class="headerlink" title="3.5 装载子进程信号处理器"></a>3.5 装载子进程信号处理器</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 判断及增加环境变量 */</span>    <span class="token comment" spellcheck="true">/* 02. 创建文件系统目录并挂载相关的文件系统 */</span>    <span class="token comment" spellcheck="true">/* 03. 重定向输入输出/内核 Log 系统 */</span>    <span class="token comment" spellcheck="true">/* 04. 挂载一些分区设备 */</span>    <span class="token comment" spellcheck="true">/* 05. 完成 SELinux 相关工作 */</span>    <span class="token comment" spellcheck="true">/* 06. is_first_stage 收尾 */</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------- END ------------ */</span>    <span class="token comment" spellcheck="true">/* ------------ 第二阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 初始化属性域 */</span>    <span class="token comment" spellcheck="true">/* 02. 清空环境变量 */</span>    <span class="token comment" spellcheck="true">/* 03. 完成 SELinux 相关工作 */</span>    <span class="token comment" spellcheck="true">/* 04. 创建 epoll 句柄 */</span>    <span class="token function">signal_handler_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 装载子进程信号处理器</span><span class="token punctuation">}</span></code></pre><p><code>init</code> 是一个<code>守护进程</code>，为了防止 init 的子进程成为<code>僵尸进程</code>(zombie process)，需要 init 在子进程在结束时获取子进程的结束码，通过结束码将程序表中的子进程移除，防止成为僵尸进程的子进程占用程序表的空间（程序表的空间达到上限时，系统就不能再启动新的进程了，会引起严重的系统问题）。</p><p>在 linux 当中，<code>父进程</code>是通过捕捉 <code>SIGCHLD</code> 信号来得知子进程运行结束的情况，此处 init 进程调用 <code>signal_handler_init()</code> 的目的就是<code>捕获子进程结束的信号</code>。</p><h2 id="3-6-启动属性服务"><a href="#3-6-启动属性服务" class="headerlink" title="3.6 启动属性服务"></a>3.6 启动属性服务</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 判断及增加环境变量 */</span>    <span class="token comment" spellcheck="true">/* 02. 创建文件系统目录并挂载相关的文件系统 */</span>    <span class="token comment" spellcheck="true">/* 03. 重定向输入输出/内核 Log 系统 */</span>    <span class="token comment" spellcheck="true">/* 04. 挂载一些分区设备 */</span>    <span class="token comment" spellcheck="true">/* 05. 完成 SELinux 相关工作 */</span>    <span class="token comment" spellcheck="true">/* 06. is_first_stage 收尾 */</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------- END ------------ */</span>    <span class="token comment" spellcheck="true">/* ------------ 第二阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 初始化属性域 */</span>    <span class="token comment" spellcheck="true">/* 02. 清空环境变量 */</span>    <span class="token comment" spellcheck="true">/* 03. 完成 SELinux 相关工作 */</span>    <span class="token comment" spellcheck="true">/* 04. 创建 epoll 句柄 */</span>    <span class="token comment" spellcheck="true">/* 05. 装载子进程信号处理器 */</span>    <span class="token comment" spellcheck="true">// 进程调用 property_load_boot_defaults 进行默认属性配置相关的工作</span>    <span class="token function">property_load_boot_defaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">export_oem_lock_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最终就是决定 "ro.boot.flash.locked" 的值</span>    <span class="token function">start_property_service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动属性服务</span>    <span class="token function">set_usb_controller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="3-7-匹配命令和函数之间对应关系"><a href="#3-7-匹配命令和函数之间对应关系" class="headerlink" title="3.7 匹配命令和函数之间对应关系"></a>3.7 匹配命令和函数之间对应关系</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 判断及增加环境变量 */</span>    <span class="token comment" spellcheck="true">/* 02. 创建文件系统目录并挂载相关的文件系统 */</span>    <span class="token comment" spellcheck="true">/* 03. 重定向输入输出/内核 Log 系统 */</span>    <span class="token comment" spellcheck="true">/* 04. 挂载一些分区设备 */</span>    <span class="token comment" spellcheck="true">/* 05. 完成 SELinux 相关工作 */</span>    <span class="token comment" spellcheck="true">/* 06. is_first_stage 收尾 */</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------- END ------------ */</span>    <span class="token comment" spellcheck="true">/* ------------ 第二阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 初始化属性域 */</span>    <span class="token comment" spellcheck="true">/* 02. 清空环境变量 */</span>    <span class="token comment" spellcheck="true">/* 03. 完成 SELinux 相关工作 */</span>    <span class="token comment" spellcheck="true">/* 04. 创建 epoll 句柄 */</span>    <span class="token comment" spellcheck="true">/* 05. 装载子进程信号处理器 */</span>    <span class="token comment" spellcheck="true">/* 06. 启动属性服务*/</span>    <span class="token comment" spellcheck="true">/* 07. 匹配命令和函数之间对应关系 */</span>    <span class="token comment" spellcheck="true">// system/core/init/builtins.cpp，定义 Action 中的 function_map 为 BuiltinFuntionMap</span>    <span class="token keyword">const</span> BuiltinFunctionMap function_map<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在 Action 中保存 function_map 对象，记录了命令与函数之间的对应关系</span>    Action<span class="token operator">:</span><span class="token operator">:</span><span class="token function">set_function_map</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>function_map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* ------------ 第二阶段 ------------ END ------------ */</span><span class="token punctuation">}</span></code></pre><p>至此，init 进程的准备工作执行完毕， 接下来就要开始解析 init.rc 文件的工作。 </p><h1 id="四、第三阶段（init-rc）"><a href="#四、第三阶段（init-rc）" class="headerlink" title="四、第三阶段（init.rc）"></a>四、第三阶段（init.rc）</h1><h2 id="4-1-解析-init-rc"><a href="#4-1-解析-init-rc" class="headerlink" title="4.1 解析 init.rc"></a>4.1 解析 init.rc</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 判断及增加环境变量 */</span>    <span class="token comment" spellcheck="true">/* 02. 创建文件系统目录并挂载相关的文件系统 */</span>    <span class="token comment" spellcheck="true">/* 03. 重定向输入输出/内核 Log 系统 */</span>    <span class="token comment" spellcheck="true">/* 04. 挂载一些分区设备 */</span>    <span class="token comment" spellcheck="true">/* 05. 完成 SELinux 相关工作 */</span>    <span class="token comment" spellcheck="true">/* 06. is_first_stage 收尾 */</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------- END ------------ */</span>    <span class="token comment" spellcheck="true">/* ------------ 第二阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 初始化属性域 */</span>    <span class="token comment" spellcheck="true">/* 02. 清空环境变量 */</span>    <span class="token comment" spellcheck="true">/* 03. 完成 SELinux 相关工作 */</span>    <span class="token comment" spellcheck="true">/* 04. 创建 epoll 句柄 */</span>    <span class="token comment" spellcheck="true">/* 05. 装载子进程信号处理器 */</span>    <span class="token comment" spellcheck="true">/* 06. 启动属性服务*/</span>    <span class="token comment" spellcheck="true">/* 07. 匹配命令和函数之间对应关系 */</span>    <span class="token comment" spellcheck="true">/* ------------ 第二阶段 ------------ END ------------ */</span>    <span class="token comment" spellcheck="true">/* ------------ 第三阶段 ----------- BEGIN------------ */</span>    subcontexts <span class="token operator">=</span> <span class="token function">InitializeSubcontexts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ActionManager<span class="token operator">&amp;</span> am <span class="token operator">=</span> ActionManager<span class="token operator">:</span><span class="token operator">:</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ServiceList<span class="token operator">&amp;</span> sm <span class="token operator">=</span> ServiceList<span class="token operator">:</span><span class="token operator">:</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LoadBootScripts</span><span class="token punctuation">(</span>am<span class="token punctuation">,</span> sm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 解析 init.rc</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="4-2-LoadBootScripts"><a href="#4-2-LoadBootScripts" class="headerlink" title="4.2 LoadBootScripts"></a>4.2 LoadBootScripts</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">LoadBootScripts</span><span class="token punctuation">(</span>ActionManager<span class="token operator">&amp;</span> action_manager<span class="token punctuation">,</span> ServiceList<span class="token operator">&amp;</span> service_list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Parser parser <span class="token operator">=</span> <span class="token function">CreateParser</span><span class="token punctuation">(</span>action_manager<span class="token punctuation">,</span> service_list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断是否存在 bootscript</span>    std<span class="token operator">:</span><span class="token operator">:</span>string bootscript <span class="token operator">=</span> <span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">"ro.boot.init_rc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果没有 bootscript，则解析 init.rc 文件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bootscript<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    　           <span class="token comment" spellcheck="true">// 8.0　引入</span>        parser<span class="token punctuation">.</span><span class="token function">ParseConfig</span><span class="token punctuation">(</span><span class="token string">"/init.rc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 开始实际的解析过程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parser<span class="token punctuation">.</span><span class="token function">ParseConfig</span><span class="token punctuation">(</span><span class="token string">"/system/etc/init"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            late_import_paths<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"/system/etc/init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parser<span class="token punctuation">.</span><span class="token function">ParseConfig</span><span class="token punctuation">(</span><span class="token string">"/product/etc/init"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            late_import_paths<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"/product/etc/init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parser<span class="token punctuation">.</span><span class="token function">ParseConfig</span><span class="token punctuation">(</span><span class="token string">"/odm/etc/init"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            late_import_paths<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"/odm/etc/init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parser<span class="token punctuation">.</span><span class="token function">ParseConfig</span><span class="token punctuation">(</span><span class="token string">"/vendor/etc/init"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            late_import_paths<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"/vendor/etc/init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        parser<span class="token punctuation">.</span><span class="token function">ParseConfig</span><span class="token punctuation">(</span>bootscript<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果没有定义 bootScript，那么 init 进程还是会解析 <code>init.rc</code> 文件。init.rc 文件是在 init 进程启动后执行的启动脚本，文件中记录着 init 进程需执行的操作。</p><p>此处解析函数传入的参数为“/init.rc”，解析的是运行时与 init 进程同在根目录下的 init.rc 文件。该文件在编译前，定义于<code>system/core/rootdir/init.rc</code>中。</p><p><strong>继续往下分析 main 函数之前；我们先了解一下 init.rc 是什么，然后分析下 parser 解析 init.rc 过程；最后我们再继续跟源码！</strong></p><h2 id="4-3-init-rc-配置文件"><a href="#4-3-init-rc-配置文件" class="headerlink" title="4.3 init.rc 配置文件"></a>4.3 init.rc 配置文件</h2><p>init.rc 是一个配置文件，内部由 Android 初始化语言编写（Android Init Language）编写的脚本，主要包含五种类型语句： <font color="#0000CD">Action、Command、Service、Option</font> 和 <font color="#0000CD">Import</font>，在分析代码的过程中我们会详细介绍。</p><p>init.rc 的配置代码在：<code>system/core/rootdir/init.rc</code> 中。</p><p>init.rc 文件大致分为两大部分：</p><blockquote><p>一部分是以 <font color="#FF0000">“on”</font> 关键字开头的 <font color="#FF0000">动作列表</font>（action list）：</p></blockquote><pre><code>on early-init                                         // Action类型语句    # Set init and its forked children&#39;s oom_adj.     // #：注释符号    write /proc/1/oom_score_adj -1000    ... ...    # app mem cgroups, used by activity manager, lmkd and zygote    mkdir /dev/memcg/apps/ 0755 system system    ... ...    start ueventd</code></pre><p>Action 类型语句格式：</p><pre><code>on &lt;trigger&gt; [&amp;&amp; &lt;trigger&gt;]*     // 设置触发器   &lt;command&gt;   &lt;command&gt;                     // 动作触发之后要执行的命令   ...</code></pre><blockquote><p>另一部分是以 <font color="#FF0000">“service”</font> 关键字开头的 <font color="#FF0000">服务列表</font>（service list）：  如 <strong><font color="#FF0000">Zygote</font></strong></p></blockquote><pre><code>service ueventd /sbin/ueventd    // Service类型语句    class core    critical    seclabel u:r:ueventd:s0    shutdown critical</code></pre><p>Service 类型语句格式：</p><pre><code>service &lt;name&gt; &lt;pathname&gt; [ &lt;argument&gt; ]*   // &lt;service的名字&gt;&lt;执行程序路径&gt;&lt;传递参数&gt;   &lt;option&gt;                                 // option是service的修饰词，影响什么时候、如何启动services   &lt;option&gt;   ...</code></pre><p>借助系统环境变量或 Linux 命令，<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🏹 动作列表用于<code>创建所需目录，以及为某些特定文件指定权限</code>；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🏹 服务列表用来<code>记录 init 进程需要启动的一些子进程</code>，如上面代码所示，service 关键字后的第一个字符串表示服务（子进程）的名称，第二个字符串表示服务的执行路径。</p><h2 id="4-4-Parser"><a href="#4-4-Parser" class="headerlink" title="4.4 Parser"></a>4.4 Parser</h2><p>回到 LoadBootScripts()　函数中，实际解析 init.rc 的源码如下（回顾）：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">LoadBootScripts</span><span class="token punctuation">(</span>ActionManager<span class="token operator">&amp;</span> action_manager<span class="token punctuation">,</span> ServiceList<span class="token operator">&amp;</span> service_list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建解析器 parser</span>    Parser parser <span class="token operator">=</span> <span class="token function">CreateParser</span><span class="token punctuation">(</span>action_manager<span class="token punctuation">,</span> service_list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断是否存在 bootscript</span>    std<span class="token operator">:</span><span class="token operator">:</span>string bootscript <span class="token operator">=</span> <span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">"ro.boot.init_rc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果没有 bootscript，则解析 init.rc 文件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bootscript<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    　           <span class="token comment" spellcheck="true">// 8.0　引入</span>        parser<span class="token punctuation">.</span><span class="token function">ParseConfig</span><span class="token punctuation">(</span><span class="token string">"/init.rc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 开始实际的解析过程</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h3 id="4-4-1-CreateParser"><a href="#4-4-1-CreateParser" class="headerlink" title="4.4.1 CreateParser"></a>4.4.1 CreateParser</h3><pre class=" language-java"><code class="language-java">Parser <span class="token function">CreateParser</span><span class="token punctuation">(</span>ActionManager<span class="token operator">&amp;</span> action_manager<span class="token punctuation">,</span> ServiceList<span class="token operator">&amp;</span> service_list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Parser parser<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 增加 ServiceParser 为一个 section，对应 name 为 service</span>    parser<span class="token punctuation">.</span><span class="token function">AddSectionParser</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">,</span> std<span class="token operator">:</span><span class="token operator">:</span>make_unique<span class="token operator">&lt;</span>ServiceParser<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>service_list<span class="token punctuation">,</span> subcontexts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 增加 ActionParser 为一个 section，对应 name 为 action</span>    parser<span class="token punctuation">.</span><span class="token function">AddSectionParser</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span> std<span class="token operator">:</span><span class="token operator">:</span>make_unique<span class="token operator">&lt;</span>ActionParser<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>action_manager<span class="token punctuation">,</span> subcontexts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 增加 ImportParser 为一个 section，对应 name 为 import</span>    parser<span class="token punctuation">.</span><span class="token function">AddSectionParser</span><span class="token punctuation">(</span><span class="token string">"import"</span><span class="token punctuation">,</span> std<span class="token operator">:</span><span class="token operator">:</span>make_unique<span class="token operator">&lt;</span>ImportParser<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>parser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> parser<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>初始化 ServiceParser 用来解析 “service” 块，ActionParser 用来解析 “on” 块，ImportParser 用来解析 “import” 块。</p><h3 id="4-4-2-ParseConfig"><a href="#4-4-2-ParseConfig" class="headerlink" title="4.4.2 ParseConfig"></a>4.4.2 ParseConfig</h3><p>接下来我们重点看下 ParseConfig()　函数：</p><pre class=" language-java"><code class="language-java"><span class="token operator">/</span>system<span class="token operator">/</span>core<span class="token operator">/</span>init<span class="token operator">/</span>parser<span class="token punctuation">.</span>cppbool Parser<span class="token operator">:</span><span class="token operator">:</span><span class="token function">ParseConfig</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">:</span><span class="token operator">:</span>string<span class="token operator">&amp;</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>    size_t parse_errors<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">ParseConfig</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>parse_errors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>继续跟踪源码：</p><pre class=" language-java"><code class="language-java">bool Parser<span class="token operator">:</span><span class="token operator">:</span><span class="token function">ParseConfig</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">:</span><span class="token operator">:</span>string<span class="token operator">&amp;</span> path<span class="token punctuation">,</span> size_t<span class="token operator">*</span> parse_errors<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">*</span>parse_errors <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断传入参数是否为目录地址</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_dir</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 递归目录，最终还是靠 ParseConfigFile 来解析实际的文件</span>        <span class="token keyword">return</span> <span class="token function">ParseConfigDir</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> parse_errors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 传入参数为文件地址</span>    <span class="token keyword">return</span> <span class="token function">ParseConfigFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> parse_errors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-4-3-ParseConfigDir"><a href="#4-4-3-ParseConfigDir" class="headerlink" title="4.4.3 ParseConfigDir"></a>4.4.3 ParseConfigDir</h3><pre class=" language-java"><code class="language-java">bool Parser<span class="token operator">:</span><span class="token operator">:</span><span class="token function">ParseConfigDir</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">:</span><span class="token operator">:</span>string<span class="token operator">&amp;</span> path<span class="token punctuation">,</span> size_t<span class="token operator">*</span> parse_errors<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">LOG</span><span class="token punctuation">(</span>INFO<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Parsing directory "</span> <span class="token operator">&lt;&lt;</span> path <span class="token operator">&lt;&lt;</span> <span class="token string">"..."</span><span class="token punctuation">;</span>    std<span class="token operator">:</span><span class="token operator">:</span>unique_ptr<span class="token operator">&lt;</span>DIR<span class="token punctuation">,</span> <span class="token function">decltype</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>closedir<span class="token punctuation">)</span><span class="token operator">></span> <span class="token function">config_dir</span><span class="token punctuation">(</span><span class="token function">opendir</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> closedir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config_dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">PLOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Could not import directory '"</span> <span class="token operator">&lt;&lt;</span> path <span class="token operator">&lt;&lt;</span> <span class="token string">"'"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 递归目录，得到需要处理的文件</span>    dirent<span class="token operator">*</span> current_file<span class="token punctuation">;</span>    std<span class="token operator">:</span><span class="token operator">:</span>vector<span class="token operator">&lt;</span>std<span class="token operator">:</span><span class="token operator">:</span>string<span class="token operator">></span> files<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>current_file <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span>config_dir<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Ignore directories and only process regular files.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current_file<span class="token operator">-</span><span class="token operator">></span>d_type <span class="token operator">==</span> DT_REG<span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">:</span><span class="token operator">:</span>string current_path <span class="token operator">=</span>                android<span class="token operator">:</span><span class="token operator">:</span>base<span class="token operator">:</span><span class="token operator">:</span><span class="token function">StringPrintf</span><span class="token punctuation">(</span><span class="token string">"%s/%s"</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> current_file<span class="token operator">-</span><span class="token operator">></span>d_name<span class="token punctuation">)</span><span class="token punctuation">;</span>            files<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>current_path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Sort first so we load files in a consistent order (bug 31996208)</span>    std<span class="token operator">:</span><span class="token operator">:</span><span class="token function">sort</span><span class="token punctuation">(</span>files<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> files<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> auto<span class="token operator">&amp;</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 容易看出，最终仍是调用 ParseConfigFile　函数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ParseConfigFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> parse_errors<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">LOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"could not import file '"</span> <span class="token operator">&lt;&lt;</span> file <span class="token operator">&lt;&lt;</span> <span class="token string">"'"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-4-4-ParseConfigFile"><a href="#4-4-4-ParseConfigFile" class="headerlink" title="4.4.4 ParseConfigFile"></a>4.4.4 ParseConfigFile</h3><pre class=" language-java"><code class="language-java">bool Parser<span class="token operator">:</span><span class="token operator">:</span><span class="token function">ParseConfigFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">:</span><span class="token operator">:</span>string<span class="token operator">&amp;</span> path<span class="token punctuation">,</span> size_t<span class="token operator">*</span> parse_errors<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">LOG</span><span class="token punctuation">(</span>INFO<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Parsing file "</span> <span class="token operator">&lt;&lt;</span> path <span class="token operator">&lt;&lt;</span> <span class="token string">"..."</span><span class="token punctuation">;</span>    android<span class="token operator">:</span><span class="token operator">:</span>base<span class="token operator">:</span><span class="token operator">:</span>Timer t<span class="token punctuation">;</span>    auto config_contents <span class="token operator">=</span> <span class="token function">ReadFile</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 读取路径指定文件中的内容，保存为字符串形式</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config_contents<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">LOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Unable to read config file '"</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    config_contents<span class="token operator">-</span><span class="token operator">></span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// TODO: fix parse_config.</span>    <span class="token function">ParseData</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">*</span>config_contents<span class="token punctuation">,</span> parse_errors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 解析获取的字符串</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> auto<span class="token operator">&amp;</span> <span class="token punctuation">[</span>section_name<span class="token punctuation">,</span> section_parser<span class="token punctuation">]</span> <span class="token operator">:</span> section_parsers_<span class="token punctuation">)</span> <span class="token punctuation">{</span>        section_parser<span class="token operator">-</span><span class="token operator">></span><span class="token function">EndFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">LOG</span><span class="token punctuation">(</span>VERBOSE<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"(Parsing "</span> <span class="token operator">&lt;&lt;</span> path <span class="token operator">&lt;&lt;</span> <span class="token string">" took "</span> <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> <span class="token string">".)"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以发现，<code>ParseConfigFile</code> 只是读取文件的内容并转换为字符串，实际的解析工作被交付给 <code>ParseData()</code>！</p><h2 id="4-5-ParseData"><a href="#4-5-ParseData" class="headerlink" title="4.5 ParseData"></a>4.5 ParseData</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> Parser<span class="token operator">:</span><span class="token operator">:</span><span class="token function">ParseData</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">:</span><span class="token operator">:</span>string<span class="token operator">&amp;</span> filename<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">:</span><span class="token operator">:</span>string<span class="token operator">&amp;</span> data<span class="token punctuation">,</span> size_t<span class="token operator">*</span> parse_errors<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO: Use a parser with const input and remove this copy</span>    <span class="token comment" spellcheck="true">// copy 一波数据</span>    std<span class="token operator">:</span><span class="token operator">:</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> <span class="token function">data_copy</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data_copy<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 解析用的结构体</span>    parse_state state<span class="token punctuation">;</span>    state<span class="token punctuation">.</span>line <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    state<span class="token punctuation">.</span>ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>data_copy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    state<span class="token punctuation">.</span>nexttoken <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// next_token 以行为单位分割参数传递过来的字符串，初始没有分割符时，最先走到 T_TEXT 分支</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">next_token</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> T_EOF<span class="token operator">:</span>                <span class="token function">end_section</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 解析结束</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> T_NEWLINE<span class="token operator">:</span>                state<span class="token punctuation">.</span>line<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token comment" spellcheck="true">// 在前文创建 parser 时，我们为 service，on，import 定义了对应的 parser</span>                <span class="token comment" spellcheck="true">// 这里就是根据第一个参数，判断是否有对应的 parser</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>section_parsers_<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 结束上一个 parser 的工作</span>                    <span class="token function">end_section</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 获取参数对应的 parser</span>                    section_parser <span class="token operator">=</span> section_parsers_<span class="token punctuation">[</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    section_start_line <span class="token operator">=</span> state<span class="token punctuation">.</span>line<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 调用实际 parser 的 ParseSection 函数</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>auto result <span class="token operator">=</span> section_parser<span class="token operator">-</span><span class="token operator">></span><span class="token function">ParseSection</span><span class="token punctuation">(</span>                                              std<span class="token operator">:</span><span class="token operator">:</span><span class="token function">move</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> filename<span class="token punctuation">,</span> state<span class="token punctuation">.</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token punctuation">(</span><span class="token operator">*</span>parse_errors<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token function">LOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> filename <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> state<span class="token punctuation">.</span>line <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>                        section_parser <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>section_parser<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/*                      * 如果第一个参数不是service，on，import                     * 则调用前一个parser的ParseLineSection函数                     * 这里相当于解析一个参数块的子项                     */</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>auto result <span class="token operator">=</span> section_parser<span class="token operator">-</span><span class="token operator">></span><span class="token function">ParseLineSection</span><span class="token punctuation">(</span>                                              std<span class="token operator">:</span><span class="token operator">:</span><span class="token function">move</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token punctuation">(</span><span class="token operator">*</span>parse_errors<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token function">LOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> filename <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> state<span class="token punctuation">.</span>line <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 清空本次解析的数据</span>                args<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> T_TEXT<span class="token operator">:</span>                <span class="token comment" spellcheck="true">// 将本次解析的内容写入到 args 中</span>                args<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的代码看起来比较复杂，但实际上就是面向对象，根据不同的关键字，使用不同的 parser 对象进行解析。</p><p><strong><font color="#FF0000">至此，init.rc解析完！</font></strong></p><h1 id="五、第四阶段"><a href="#五、第四阶段" class="headerlink" title="五、第四阶段"></a>五、第四阶段</h1><h2 id="5-1-向执行队列中添加其他-action"><a href="#5-1-向执行队列中添加其他-action" class="headerlink" title="5.1 向执行队列中添加其他 action"></a>5.1 向执行队列中添加其他 action</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 判断及增加环境变量 */</span>    <span class="token comment" spellcheck="true">/* 02. 创建文件系统目录并挂载相关的文件系统 */</span>    <span class="token comment" spellcheck="true">/* 03. 重定向输入输出/内核 Log 系统 */</span>    <span class="token comment" spellcheck="true">/* 04. 挂载一些分区设备 */</span>    <span class="token comment" spellcheck="true">/* 05. 完成 SELinux 相关工作 */</span>    <span class="token comment" spellcheck="true">/* 06. is_first_stage 收尾 */</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------- END ------------ */</span>    <span class="token comment" spellcheck="true">/* ------------ 第二阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 初始化属性域 */</span>    <span class="token comment" spellcheck="true">/* 02. 清空环境变量 */</span>    <span class="token comment" spellcheck="true">/* 03. 完成 SELinux 相关工作 */</span>    <span class="token comment" spellcheck="true">/* 04. 创建 epoll 句柄 */</span>    <span class="token comment" spellcheck="true">/* 05. 装载子进程信号处理器 */</span>    <span class="token comment" spellcheck="true">/* 06. 启动属性服务*/</span>    <span class="token comment" spellcheck="true">/* 07. 匹配命令和函数之间对应关系 */</span>    <span class="token comment" spellcheck="true">/* ------------ 第二阶段 ------------ END ------------ */</span>    <span class="token comment" spellcheck="true">/* ------------ 第三阶段 ----------- BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* init解析 */</span>    <span class="token comment" spellcheck="true">/* ------------ 第三阶段 -----------  END ------------ */</span>    <span class="token comment" spellcheck="true">/* ------------ 第四阶段 ----------- BEGIN------------ */</span>        <span class="token comment" spellcheck="true">// init 执行命令触发器主要分为 early-init，init，late-init，boot 等</span>    <span class="token comment" spellcheck="true">// 添加触发器 early-init，执行 on early-init 内容</span>    am<span class="token punctuation">.</span><span class="token function">QueueEventTrigger</span><span class="token punctuation">(</span><span class="token string">"early-init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Queue an action that waits for coldboot done so we know ueventd has set up all of /dev...</span>    am<span class="token punctuation">.</span><span class="token function">QueueBuiltinAction</span><span class="token punctuation">(</span>wait_for_coldboot_done_action<span class="token punctuation">,</span> <span class="token string">"wait_for_coldboot_done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ... so that we can start queuing up actions that require stuff from /dev.</span>    am<span class="token punctuation">.</span><span class="token function">QueueBuiltinAction</span><span class="token punctuation">(</span>MixHwrngIntoLinuxRngAction<span class="token punctuation">,</span> <span class="token string">"MixHwrngIntoLinuxRng"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    am<span class="token punctuation">.</span><span class="token function">QueueBuiltinAction</span><span class="token punctuation">(</span>SetMmapRndBitsAction<span class="token punctuation">,</span> <span class="token string">"SetMmapRndBits"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    am<span class="token punctuation">.</span><span class="token function">QueueBuiltinAction</span><span class="token punctuation">(</span>SetKptrRestrictAction<span class="token punctuation">,</span> <span class="token string">"SetKptrRestrict"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    am<span class="token punctuation">.</span><span class="token function">QueueBuiltinAction</span><span class="token punctuation">(</span>keychord_init_action<span class="token punctuation">,</span> <span class="token string">"keychord_init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    am<span class="token punctuation">.</span><span class="token function">QueueBuiltinAction</span><span class="token punctuation">(</span>console_init_action<span class="token punctuation">,</span> <span class="token string">"console_init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Trigger all the boot actions to get us started.</span>    <span class="token comment" spellcheck="true">// 添加触发器 init，执行 on init 内容，主要包括创建/挂在一些目录，以及 symlink 等</span>    am<span class="token punctuation">.</span><span class="token function">QueueEventTrigger</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Repeat mix_hwrng_into_linux_rng in case /dev/hw_random or /dev/random</span>    <span class="token comment" spellcheck="true">// wasn't ready immediately after wait_for_coldboot_done</span>    am<span class="token punctuation">.</span><span class="token function">QueueBuiltinAction</span><span class="token punctuation">(</span>MixHwrngIntoLinuxRngAction<span class="token punctuation">,</span> <span class="token string">"MixHwrngIntoLinuxRng"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Don't mount filesystems or start core system services in charger mode.</span>    std<span class="token operator">:</span><span class="token operator">:</span>string bootmode <span class="token operator">=</span> <span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">"ro.bootmode"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bootmode <span class="token operator">==</span> <span class="token string">"charger"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        am<span class="token punctuation">.</span><span class="token function">QueueEventTrigger</span><span class="token punctuation">(</span><span class="token string">"charger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// on charger阶段</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        am<span class="token punctuation">.</span><span class="token function">QueueEventTrigger</span><span class="token punctuation">(</span><span class="token string">"late-init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 非充电模式添加触发器 last-init</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Run all property triggers based on current state of the properties.</span>    am<span class="token punctuation">.</span><span class="token function">QueueBuiltinAction</span><span class="token punctuation">(</span>queue_property_triggers_action<span class="token punctuation">,</span> <span class="token string">"queue_property_triggers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="5-2-剩余工作"><a href="#5-2-剩余工作" class="headerlink" title="5.2 剩余工作"></a>5.2 剩余工作</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 判断及增加环境变量 */</span>    <span class="token comment" spellcheck="true">/* 02. 创建文件系统目录并挂载相关的文件系统 */</span>    <span class="token comment" spellcheck="true">/* 03. 重定向输入输出/内核 Log 系统 */</span>    <span class="token comment" spellcheck="true">/* 04. 挂载一些分区设备 */</span>    <span class="token comment" spellcheck="true">/* 05. 完成 SELinux 相关工作 */</span>    <span class="token comment" spellcheck="true">/* 06. is_first_stage 收尾 */</span>    <span class="token comment" spellcheck="true">/* ------------ 第一阶段 ------------- END ------------ */</span>    <span class="token comment" spellcheck="true">/* ------------ 第二阶段 ------------ BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 初始化属性域 */</span>    <span class="token comment" spellcheck="true">/* 02. 清空环境变量 */</span>    <span class="token comment" spellcheck="true">/* 03. 完成 SELinux 相关工作 */</span>    <span class="token comment" spellcheck="true">/* 04. 创建 epoll 句柄 */</span>    <span class="token comment" spellcheck="true">/* 05. 装载子进程信号处理器 */</span>    <span class="token comment" spellcheck="true">/* 06. 启动属性服务*/</span>    <span class="token comment" spellcheck="true">/* 07. 匹配命令和函数之间对应关系 */</span>    <span class="token comment" spellcheck="true">/* ------------ 第二阶段 ------------ END ------------ */</span>    <span class="token comment" spellcheck="true">/* ------------ 第三阶段 ----------- BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* init解析 */</span>    <span class="token comment" spellcheck="true">/* ------------ 第三阶段 -----------  END ------------ */</span>    <span class="token comment" spellcheck="true">/* ------------ 第四阶段 ----------- BEGIN------------ */</span>    <span class="token comment" spellcheck="true">/* 01. 向执行队列中添加其他action */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断是否有事件需要处理</span>        <span class="token comment" spellcheck="true">// By default, sleep until something happens.</span>        <span class="token keyword">int</span> epoll_timeout_ms <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>do_shutdown <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>shutting_down<span class="token punctuation">)</span> <span class="token punctuation">{</span>            do_shutdown <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HandlePowerctlMessage</span><span class="token punctuation">(</span>shutdown_command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                shutting_down <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>waiting_for_prop <span class="token operator">||</span> Service<span class="token operator">:</span><span class="token operator">:</span><span class="token function">is_exec_service_running</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 依次执行每个 action 中携带 command 对应的执行函数</span>            am<span class="token punctuation">.</span><span class="token function">ExecuteOneCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>waiting_for_prop <span class="token operator">||</span> Service<span class="token operator">:</span><span class="token operator">:</span><span class="token function">is_exec_service_running</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shutting_down<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 重启一些挂掉的进程</span>                auto next_process_restart_time <span class="token operator">=</span> <span class="token function">RestartProcesses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// If there's a process that needs restarting, wake up in time for that.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>next_process_restart_time<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    epoll_timeout_ms <span class="token operator">=</span> std<span class="token operator">:</span><span class="token operator">:</span>chrono<span class="token operator">:</span><span class="token operator">:</span>ceil<span class="token operator">&lt;</span>std<span class="token operator">:</span><span class="token operator">:</span>chrono<span class="token operator">:</span><span class="token operator">:</span>milliseconds<span class="token operator">></span><span class="token punctuation">(</span>                                           <span class="token operator">*</span>next_process_restart_time <span class="token operator">-</span> boot_clock<span class="token operator">:</span><span class="token operator">:</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                           <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>epoll_timeout_ms <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> epoll_timeout_ms <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// If there's more work to do, wake up again immediately.</span>            <span class="token comment" spellcheck="true">// 有 action 待处理，不等待</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>am<span class="token punctuation">.</span><span class="token function">HasMoreCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> epoll_timeout_ms <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        epoll_event ev<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 没有事件到来的话，最多阻塞timeout时间</span>        <span class="token keyword">int</span> nr <span class="token operator">=</span> <span class="token function">TEMP_FAILURE_RETRY</span><span class="token punctuation">(</span><span class="token function">epoll_wait</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ev<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> epoll_timeout_ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nr <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">PLOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"epoll_wait failed"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nr <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//有事件到来，执行对应处理函数</span>            <span class="token comment" spellcheck="true">//根据上文知道，epoll 句柄（即 epoll_fd ）主要监听子进程结束，及其它进程设置系统属性的请求</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// end main</span></code></pre><p>至此，Init.cpp 的 main 函数分析完毕！init 进程已经启动完成，一些重要的服务如 core 服务和 main 服务也都启动起来，并启动了 zygote（/system/bin/app_process64）进程，zygote 初始化时会创建虚拟机，启动 systemserver 等！</p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>&nbsp;📕 01. <a href="https://blog.csdn.net/gaugamela/article/details/79280385" target="_blank" rel="noopener">Android O: init进程启动流程分析(阶段一)</a><br>&nbsp;📕 02. <a href="https://blog.csdn.net/yangwen123/article/details/9029959" target="_blank" rel="noopener">Android Init进程源码分析</a></p><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>推荐跳转：<a href="https://superandroid.pro/2019/12/31/%E3%80%8AThinking%20in%20Android%E3%80%8B%20--%2001.%20%E5%8D%9A%E5%AE%A2%E7%B4%A2%E5%BC%95/">博客索引（Android 9.0）</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://superandroid.pro/2018/12/10/%E3%80%90%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%E3%80%91Android%20%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E9%92%BB%E7%A0%94%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20zygote/">深入钻研 Android 启动阶段 之 zygote</a></p>]]></content>
      
      
      <categories>
          
          <category> 系统启动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 启动阶段 </tag>
            
            <tag> init </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入钻研 Android 核心技术 之 Binder（基础篇）</title>
      <link href="/2018/11/20/04.he-xin-ji-zhi-xi-lie-shen-ru-yan-jiu-android-he-xin-ji-zhu-zhi-binder-ji-chu-pian/"/>
      <url>/2018/11/20/04.he-xin-ji-zhi-xi-lie-shen-ru-yan-jiu-android-he-xin-ji-zhu-zhi-binder-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Binder-概述"><a href="#一、Binder-概述" class="headerlink" title="一、Binder 概述"></a>一、Binder 概述</h1><p>Binder 是一种进程间通信机制，基于开源的 OpenBinder 实现；OpenBinder 起初由 Be Inc. 开发，后由 Plam Inc. 接手。从字面上来解释 Binder 有胶水、粘合剂的意思，顾名思义就是粘和不同的进程，使之实现通信。</p><h2 id="1-1-为什么要理解-Binder？"><a href="#1-1-为什么要理解-Binder？" class="headerlink" title="1.1 为什么要理解 Binder？"></a>1.1 为什么要理解 Binder？</h2><p>一般 Android 应用开发很少直接用到跨进程信通信（IPC），但如果你想知道：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🔰 &nbsp;App 是如何启动并初始化的？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🔰 &nbsp;Activity 的启动过程是怎样的？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🔰 &nbsp;进程间是如何通信的？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🔰 &nbsp;AIDL 的具体原理是什么？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🔰 &nbsp;众多插件化框架的设计原理等等…</p><p>这些问题的背后都与 Binder 有莫大的关系，要弄懂上面这些问题，理解 Binder 通信机制是必须的。</p><p>我们知道 Android 应用程序是由 Activity、Service、Broadcast Receiver 和 Content Provide 四大组件中的一个或者多个组成的。有时这些组件运行在同一进程，有时运行在不同的进程。这些进程间的通信就依赖于 Binder IPC 机制。</p><p>不仅如此，Android 系统对应用层提供的各种服务如：ActivityManagerService、PackageManagerService 等都是基于 Binder IPC 机制来实现的。Binder 机制在 Android 中的位置非常重要，毫不夸张的说理解 Binder 是迈向 Android 高级工程的第一步。</p><h2 id="1-2-为什么选择-Binder"><a href="#1-2-为什么选择-Binder" class="headerlink" title="1.2 为什么选择 Binder ?"></a>1.2 为什么选择 Binder ?</h2><p>Android 系统是基于 Linux 内核的，Linux 已经提供了 <font color="#87CEFA">管道</font>、<font color="#87CEFA">消息队列</font>、<font color="#87CEFA">共享内存</font> 和 <font color="#87CEFA">Socket</font> 等 IPC 机制。</p><p>那为什么 Android 还要提供 <font color="#0000CD">Binder</font> 来实现 IPC 呢？主要是基于 <font color="#0000CD">性能</font>、<font color="#0000CD">稳定性</font> 和 <font color="#0000CD">安全性</font> 几方面的原因！</p><h3 id="1-2-1-性能"><a href="#1-2-1-性能" class="headerlink" title="1.2.1 性能"></a>1.2.1 性能</h3><p>首先说说性能上的优势。</p><p><font color="#FF0000">Socket</font>：作为一款通用接口，其传输效率低，开销大，主要用在跨网络的进程间通信和本机上进程间的低速通信。</p><p><font color="#FF0000">消息队列和管道</font>：采用存储-转发方式，即数据先从发送方缓存区拷贝到内核开辟的缓存区中，然后再从内核缓存区拷贝到接收方缓存区，至少有两次拷贝过程。</p><p><font color="#FF0000">共享内存</font>：虽然无需拷贝，但控制复杂，难以使用。</p><p><font color="#FF0000">Binder</font>：只需要一次数据拷贝，性能上仅次于共享内存。</p><table><thead><tr><th>IPC机制</th><th>数据拷贝次数</th></tr></thead><tbody><tr><td>共享内存</td><td>0</td></tr><tr><td>Binder</td><td>1</td></tr><tr><td>管道、消息队列、Socket</td><td>2</td></tr></tbody></table><h3 id="1-2-2-稳定性"><a href="#1-2-2-稳定性" class="headerlink" title="1.2.2 稳定性"></a>1.2.2 稳定性</h3><p>再说说稳定性，Binder 基于 C/S 架构，客户端（Client）有什么需求就丢给服务端（Server）去完成，架构清晰、职责明确又相互独立，自然稳定性更好。共享内存虽然无需拷贝，但是控制负责，难以使用。从稳定性的角度讲，Binder 机制是优于共享内存的。</p><h3 id="1-2-3-安全性"><a href="#1-2-3-安全性" class="headerlink" title="1.2.3 安全性"></a>1.2.3 安全性</h3><p>Android 作为一个开放性的平台，市场上有各类海量的应用供用户选择安装，因此安全性对于 Android 平台而言极其重要。作为用户当然不希望我们下载的 APP 偷偷读取我的通信录，上传我的隐私数据，后台偷跑流量、消耗手机电量。传统的 IPC 没有任何安全措施，完全依赖上层协议来确保。</p><p>首先传统的 IPC 接收方无法获得对方可靠的进程“用户ID/进程ID”（UID/PID），从而无法鉴别对方身份。Android 为每个安装好的 APK 分配了自己的 UID，故而进程的 UID 是鉴别进程身份的重要标志。</p><p>传统的 IPC 只能由用户在数据包中填入 UID/PID，但这样不可靠，容易被恶意程序利用。可靠的身份标识只有由 IPC 机制在内核中添加。</p><p>其次传统的 IPC 访问接入点是开放的，只要知道这些接入点的程序都可以和对端建立连接，不管怎样都无法阻止恶意程序通过猜测接收方地址获得连接。同时 Binder 既支持实名 Binder，又支持匿名 Binder，安全性高。</p><h1 id="二、传统-IPC-通信原理"><a href="#二、传统-IPC-通信原理" class="headerlink" title="二、传统 IPC 通信原理"></a>二、传统 IPC 通信原理</h1><p>了解 Linux IPC 相关的概念和原理有助于我们理解 Binder 通信原理。因此，在介绍 Binder 跨进程通信原理之前，我们先聊聊 Linux 系统下传统的进程间通信是如何实现。</p><h2 id="2-1-基础概念"><a href="#2-1-基础概念" class="headerlink" title="2.1 基础概念"></a>2.1 基础概念</h2><h3 id="2-1-1-进程隔离"><a href="#2-1-1-进程隔离" class="headerlink" title="2.1.1 进程隔离"></a>2.1.1 进程隔离</h3><p>简单的说就是操作系统中，进程与进程间内存是不共享的。两个进程就像两个平行的世界，A 进程没法直接访问 B 进程的数据，这就是进程隔离的通俗解释。A 进程和 B 进程之间要进行数据交互就得采用特殊的通信机制：<font color="#0000CD">进程间通信（IPC）</font>。</p><h3 id="2-1-2-进程空间"><a href="#2-1-2-进程空间" class="headerlink" title="2.1.2 进程空间"></a>2.1.2 进程空间</h3><p>现在操作系统都是采用的虚拟存储器，对于 32 位系统而言，它的寻址空间（虚拟存储空间）就是 2 的 32 次方，也就是 4GB。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也可以访问底层硬件设备的权限。为了保护用户进程不能直接操作内核，保证内核的安全，操作系统从逻辑上将虚拟空间划分为用户空间（User Space）和内核空间（Kernel Space）。针对 Linux 操作系统而言，将最高的 1GB 字节供内核使用，称为内核空间；较低的 3GB 字节供各进程使用，称为用户空间。</p><h3 id="2-1-3-系统调用"><a href="#2-1-3-系统调用" class="headerlink" title="2.1.3 系统调用"></a>2.1.3 系统调用</h3><p>虽然从逻辑上进行了用户空间和内核空间的划分，但不可避免的用户空间需要访问内核资源，比如文件操作、访问网络等等。为了突破隔离限制，就需要借助系统调用来实现。<font color="#FF0000">系统调用是用户空间访问内核空间的唯一方式</font>，保证了所有的资源访问都是在内核的控制下进行的，避免了用户程序对系统资源的越权访问，提升了系统安全性和稳定性。</p><p>Linux 使用两级保护机制：0 级供系统内核使用，3 级供用户程序使用。</p><p>当一个任务（进程）执行系统调用而陷入内核代码中执行时，称进程处于内核运行态（内核态）。此时处理器处于特权级最高的（0级）内核代码中执行。当进程处于内核态时，执行的内核代码会使用当前进程的内核栈。每个进程都有自己的内核栈。</p><p>当进程在执行用户自己的代码的时候，我们称其处于用户运行态（用户态）。此时处理器在特权级最低的（3级）用户代码中运行。</p><h2 id="2-2-IPC-通信原理"><a href="#2-2-IPC-通信原理" class="headerlink" title="2.2 IPC 通信原理"></a>2.2 IPC 通信原理</h2><p>理解了上面的几个概念，我们再来看看传统的 IPC 方式中，进程之间是如何实现通信的。</p><p>通常的做法是消息发送方将要发送的数据存放在内存缓存区中，通过系统调用进入内核态。然后内核程序在内核空间分配内存，开辟一块内核缓存区，调用 <font color="#FF0000">copyfromuser()</font> 函数将数据从用户空间的内存缓存区拷贝到内核空间的内核缓存区中。同样的，接收方进程在接收数据时在自己的用户空间开辟一块内存缓存区，然后内核程序调用 <font color="#FF0000">copytouser()</font> 函数将数据从内核缓存区拷贝到接收进程的内存缓存区。这样数据发送方进程和数据接收方进程就完成了一次数据传输，我们称完成了一次进程间通信。</p><p>我们来看下原理图：</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-635752d9992aeeca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="传统 IPC 通信方式.png"></center><p>这种传统的 IPC 通信方式有两个问题：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ &nbsp;1、性能低下，一次数据传递需要经历：内存缓存区 –&gt; 内核缓存区 –&gt; 内存缓存区，需要 2 次数据拷贝；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ &nbsp;2、接收数据的缓存区由数据接收进程提供，但是接收进程并不知道需要多大的空间来存放将要传递过来的数据，因此只能开辟尽可能大的内存空间或者先调用 API 接收消息头来获取消息体的大小。</p><p>很明显，这两种做法不是浪费空间就是浪费时间。</p><h1 id="三、Binder-跨进程通信原理"><a href="#三、Binder-跨进程通信原理" class="headerlink" title="三、Binder 跨进程通信原理"></a>三、Binder 跨进程通信原理</h1><p>理解了 Linux IPC 相关概念和通信原理，接下来我们正式介绍下 Binder IPC 的原理。</p><h2 id="3-1-动态内核可加载模块"><a href="#3-1-动态内核可加载模块" class="headerlink" title="3.1 动态内核可加载模块"></a>3.1 动态内核可加载模块</h2><p>正如前面所说，跨进程通信是需要内核空间做支持的。传统的 IPC 机制如管道、Socket 都是内核的一部分，因此通过内核支持来实现进程间通信自然是没问题的。但是 Binder 并不是 Linux 系统内核的一部分，那怎么办呢？</p><p>这就得益于 Linux 的 <strong><font color="#FF0000">动态内核可加载模块</font></strong>（Loadable Kernel Module，LKM）的机制；模块是具有独立功能的程序，它可以被单独编译，但是不能独立运行。它在运行时被链接到内核作为内核的一部分运行。这样，Android 系统就可以通过动态添加一个内核模块运行在内核空间，用户进程之间通过这个内核模块作为桥梁来实现通信。</p><p>在 Android 系统中，这个运行在内核空间，负责各个用户进程通过 Binder 实现通信的内核模块就叫 <strong><font color="#FFD39B">Binder 驱动</font></strong>（Binder Dirver）。</p><p>那么在 Android 系统中用户进程之间是如何通过这个内核模块（Binder 驱动）来实现通信的呢？难道是和前面说的传统 IPC 机制一样，先将数据从发送方进程拷贝到内核缓存区，然后再将数据从内核缓存区拷贝到接收方进程，通过两次拷贝来实现吗？显然不是，否则也不会有开篇所说的 Binder 在性能方面的优势了。</p><p>这就涉及到我们接下来要说的 <strong><font color="#87CEFA">内存映射</font></strong> 的概念了。</p><h2 id="3-2-内存映射"><a href="#3-2-内存映射" class="headerlink" title="3.2 内存映射"></a>3.2 内存映射</h2><p>Binder IPC 机制中涉及到的内存映射通过 <strong><font color="#0000CD">mmap()</font></strong> 来实现，mmap() 是操作系统中一种内存映射的方法。内存映射简单的讲就是将用户空间的一块内存区域映射到内核空间。映射关系建立后，用户对这块内存区域的修改可以直接反应到内核空间；反之内核空间对这段区域的修改也能直接反应到用户空间。</p><p>内存映射能减少数据拷贝次数，实现用户空间和内核空间的高效互动。两个空间各自的修改能直接反映在映射的内存区域，从而被对方空间及时感知。也正因为如此，内存映射能够提供对进程间通信的支持。</p><h2 id="3-3-Binder-IPC-实现原理"><a href="#3-3-Binder-IPC-实现原理" class="headerlink" title="3.3 Binder IPC 实现原理"></a>3.3 Binder IPC 实现原理</h2><p>Binder IPC 正是基于内存映射（mmap）来实现的，但是 mmap() 通常是用在有物理介质的文件系统上的。</p><p>比如进程中的用户区域是不能直接和物理设备打交道的，如果想要把磁盘上的数据读取到进程的用户区域，需要两次拷贝（磁盘–&gt;内核空间–&gt;用户空间）；通常在这种场景下 mmap() 就能发挥作用，通过在物理介质和用户空间之间建立映射，减少数据的拷贝次数，用内存读写取代I/O读写，提高文件读取效率。</p><p>而 Binder 并不存在物理介质，因此 Binder 驱动使用 mmap() 并不是为了在物理介质和用户空间之间建立映射，而是用来在内核空间创建数据接收的缓存空间。</p><p><strong><font color="#FFD39B">一次完整的 Binder IPC 通信过程通常是这样：</font></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ &nbsp;1、首先 Binder 驱动在内核空间创建一个 <strong><font color="#87CEFA">数据接收缓存区</font></strong> ；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ &nbsp;2、接着在内核空间开辟一块内核缓存区，建立 <strong><font color="#87CEFA">内核缓存区</font></strong> 和 <strong><font color="#87CEFA">内核中数据接收缓存区</font></strong> 之间的映射关系，以及 <strong><font color="#87CEFA">内核中数据接收缓存区</font></strong> 和 <strong><font color="#87CEFA">接收进程用户空间地址</font></strong> 的映射关系；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ &nbsp;3、发送方进程通过系统调用 <strong><font color="#87CEFA">copyfromuser()</font></strong> 将数据 copy 到内核中的内核缓存区，由于内核缓存区和接收进程的用户空间存在内存映射，因此也就相当于把数据发送到了接收进程的用户空间，这样便完成了一次进程间的通信。</p><p>我们来看下原理图：</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-0c9748841ab26628.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/780" alt="Binder 通信原理.jpg"></center><h1 id="四、Binder-通信模型"><a href="#四、Binder-通信模型" class="headerlink" title="四、Binder 通信模型"></a>四、Binder 通信模型</h1><p>介绍完 Binder IPC 的底层通信原理，接下来我们看看实现层面是如何设计的。</p><p>一次完整的进程间通信必然至少包含两个进程，通常我们称通信的双方分别为 <strong><font color="#87CEFA">客户端进程</font></strong>（Client）和 <strong><font color="#87CEFA">服务端进程</font></strong>（Server），由于进程隔离机制的存在，通信双方必然需要借助 <strong><font color="#87CEFA">Binder</font></strong> 来实现。</p><h2 id="4-1-Client-Server-ServiceManager-驱动"><a href="#4-1-Client-Server-ServiceManager-驱动" class="headerlink" title="4.1 Client/Server/ServiceManager/驱动"></a>4.1 Client/Server/ServiceManager/驱动</h2><p>前面我们介绍过，Binder 是基于 C/S 架构的。由一系列的组件组成，包括 Client、Server、ServiceManager、Binder 驱动。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ &nbsp; Client、Server、Service Manager 运行在用户空间，Binder 驱动运行在内核空间。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ &nbsp; Service Manager 和 Binder 驱动由系统提供，而 Client、Server 由应用程序来实现。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ &nbsp; Client、Server 和 ServiceManager 均是通过系统调用 open、mmap 和 ioctl 来访问设备文件 /dev/binder，从而实现与 Binder 驱动的交互来间接的实现跨进程通信。</p><p>如下原理图：</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-9b388624bd4db998.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/780" alt="通信模型.jpg"></center><p>Client、Server、ServiceManager、Binder 驱动这几个组件在通信过程中扮演的角色就如同互联网中服务器（Server）、客户端（Client）、DNS域名服务器（ServiceManager）以及路由器（Binder 驱动）之前的关系。</p><p>通常我们访问一个网页的步骤是这样的：首先在浏览器输入一个地址，如 <a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a> 然后按下回车键。但是并没有办法通过域名地址直接找到我们要访问的服务器，因此需要首先访问 DNS 域名服务器，域名服务器中保存了 <a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a> 对应的 ip 地址 10.249.23.13，然后通过这个 ip 地址才能找到 <a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a> 对应的服务器。</p><p>如下图所示：</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-b4d4af5e47697aa5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/780" alt="google.jpg"></center><h2 id="4-2-Android-Binder-设计与实现"><a href="#4-2-Android-Binder-设计与实现" class="headerlink" title="4.2 Android Binder 设计与实现"></a>4.2 Android Binder 设计与实现</h2><p><a href="https://blog.csdn.net/universus/article/details/6211589" target="_blank" rel="noopener">Android Binder 设计与实现</a>一文中对 Client、Server、ServiceManager、Binder 驱动有很详细的描述。</p><h3 id="4-2-1-Binder-驱动"><a href="#4-2-1-Binder-驱动" class="headerlink" title="4.2.1 Binder 驱动"></a>4.2.1 Binder 驱动</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Binder 驱动就如同路由器一样，是整个通信的核心；驱动负责进程之间 Binder 通信的建立、Binder 在进程之间的传递、Binder 引用计数管理、数据包在进程之间的传递和交互等一系列底层支持。 </p><h3 id="4-2-2-ServiceManager-与实名-Binder"><a href="#4-2-2-ServiceManager-与实名-Binder" class="headerlink" title="4.2.2 ServiceManager 与实名 Binder"></a>4.2.2 ServiceManager 与实名 Binder</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ServiceManager 和 DNS 类似，作用是将字符形式的 Binder 名字转化成 Client 中对该 Binder 的引用，使得 Client 能够通过 Binder 的名字获得对 Binder 实体的引用。注册了名字的 Binder 叫实名 Binder，就像网站一样除了有 IP 地址以外还有自己的网址。Server 创建了 Binder，并为它起一个字符形式，可读易记得名字，将这个 Binder 实体连同名字一起以数据包的形式通过 Binder 驱动发送给 ServiceManager ，通知 ServiceManager 注册一个名为“张三”的 Binder，它位于某个 Server 中。驱动为这个穿越进程边界的 Binder 创建位于内核中的实体节点以及 ServiceManager 对实体的引用，将名字以及新建的引用打包传给 ServiceManager。ServiceManger 收到数据后从中取出名字和引用填入查找表。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;细心的读者可能会发现，ServierManager 是一个进程，Server 是另一个进程，Server 向 ServiceManager 中注册 Binder 必然涉及到进程间通信。当前实现进程间通信又要用到进程间通信，这就好像蛋可以孵出鸡的前提却是要先找只鸡下蛋！<font color="#87CEFA">Binder 的实现比较巧妙，就是预先创造一只鸡来下蛋</font>。ServiceManager 和其他进程同样采用 Binder 通信，ServiceManager 是 Server 端，有自己的 Binder 实体，其他进程都是 Client，需要通过这个 Binder 的引用来实现 Binder 的注册，查询和获取。ServiceManager 提供的 Binder 比较特殊，它没有名字也不需要注册。当一个进程使用 BINDERSETCONTEXT_MGR 命令将自己注册成 ServiceManager 时 Binder 驱动会自动为它创建 Binder 实体<font color="#87CEFA">（这就是那只预先造好的那只鸡）</font>。其次这个 Binder 实体的引用在所有 Client 中都固定为 0 而无需通过其它手段获得。也就是说，一个 Server 想要向 ServiceManager 注册自己的 Binder 就必须通过这个 0 号引用和 ServiceManager 的 Binder 通信。类比互联网，0 号引用就好比是域名服务器的地址，你必须预先动态或者手工配置好。要注意的是，这里说的 Client 是相对于 ServiceManager 而言的，一个进程或者应用程序可能是提供服务的 Server，但对于 ServiceManager 来说它仍然是个 Client。</p><h3 id="4-2-3-Client-获得实名-Binder-的引用"><a href="#4-2-3-Client-获得实名-Binder-的引用" class="headerlink" title="4.2.3 Client 获得实名 Binder 的引用"></a>4.2.3 Client 获得实名 Binder 的引用</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Server 向 ServiceManager 中注册了 Binder 以后， Client 就能通过名字获得 Binder 的引用了。Client 也利用保留的 0 号引用向 ServiceManager 请求访问某个 Binder: 我申请访问名字叫张三的 Binder 引用。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ServiceManager 收到这个请求后从请求数据包中取出 Binder 名称，在查找表里找到对应的条目，取出对应的 Binder 引用作为回复发送给发起请求的 Client。从面向对象的角度看，Server 中的 Binder 实体现在有两个引用：一个位于 ServiceManager 中，一个位于发起请求的 Client 中。如果接下来有更多的 Client 请求该 Binder，系统中就会有更多的引用指向该 Binder ，就像 Java 中一个对象有多个引用一样。</p><h2 id="4-3-Binder-通信过程"><a href="#4-3-Binder-通信过程" class="headerlink" title="4.3 Binder 通信过程"></a>4.3 Binder 通信过程</h2><p>至此，我们大致能总结出 Binder 通信过程：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 1、首先，一个进程使用 BINDERSETCONTEXT_MGR 命令通过 Binder 驱动将自己注册成为 ServiceManager；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 2、Server 通过驱动向 ServiceManager 中注册 Binder（Server 中的 Binder 实体），表明可以对外提供服务。驱动为这个 Binder 创建位于内核中的实体节点以及 ServiceManager 对实体的引用，将名字以及新建的引用打包传给 ServiceManager，ServiceManger 将其填入查找表。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 3、Client 通过名字，在 Binder 驱动的帮助下从 ServiceManager 中获取到对 Binder 实体的引用，通过这个引用就能实现和 Server 进程的通信。</p><p>我们看到整个通信过程都需要 Binder 驱动的接入。下图能更加直观的展现整个通信过程(为了进一步抽象通信过程以及呈现上的方便，下图我们忽略了 Binder 实体及其引用的概念)：</p><p>原理图：</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-1235f55b286716ee.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/780" alt="原理图.jpg"></center><h2 id="4-4-Binder-通信中的代理模式"><a href="#4-4-Binder-通信中的代理模式" class="headerlink" title="4.4 Binder 通信中的代理模式"></a>4.4 Binder 通信中的代理模式</h2><p>我们已经解释清楚 Client、Server 借助 Binder 驱动完成跨进程通信的实现机制了，但是还有个问题会让我们困惑。A 进程想要 B 进程中某个对象（object）是如何实现的呢？毕竟它们分属不同的进程，A 进程没法直接使用 B 进程中的 object。</p><p>前面我们介绍过跨进程通信的过程都有 Binder 驱动的参与，因此在数据流经 Binder 驱动的时候驱动会对数据做一层转换。当 A 进程想要获取 B 进程中的 object 时，驱动并不会真的把 object 返回给 A，而是返回了一个跟 object 看起来一模一样的代理对象 objectProxy，这个 objectProxy 具有和 object 一模一样的方法，但是这些方法并没有 B 进程中 object 对象那些方法的能力，这些方法只需要把请求参数交给驱动即可。对于 A 进程来说和直接调用 object 中的方法是一样的。</p><p>当 Binder 驱动接收到 A 进程的消息后，发现这是个 objectProxy 就去查询自己维护的表单，一查发现这是 B 进程 object 的代理对象。于是就会去通知 B 进程调用 object 的方法，并要求 B 进程把返回结果发给自己。当驱动拿到 B 进程的返回结果后就会转发给 A 进程，一次通信就完成了。</p><p>原理图：</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-c870411b839705db.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/780" alt="原理图.jpg"></center><h2 id="4-5-Binder-的完整定义"><a href="#4-5-Binder-的完整定义" class="headerlink" title="4.5 Binder 的完整定义"></a>4.5 Binder 的完整定义</h2><p>现在我们可以对 Binder 做个更加全面的定义了：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 从进程间通信的角度看，Binder 是一种进程间通信的机制；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 从 Server 进程的角度看，Binder 指的是 Server 中的 Binder 实体对象；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 从 Client 进程的角度看，Binder 指的是对 Binder 代理对象，是 Binder 实体对象的一个远程代理；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 从传输过程的角度看，Binder 是一个可以跨进程传输的对象；Binder 驱动会对这个跨越进程边界的对象对一点点特殊处理，自动完成代理对象和本地对象之间的转换。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>&nbsp;📕 01. <a href="https://www.jianshu.com/p/062a6e4f5cbe" target="_blank" rel="noopener">关于Binder，作为应用开发者你需要知道的全部</a><br>&nbsp;📕 02. <a href="https://zhuanlan.zhihu.com/p/35519585" target="_blank" rel="noopener">写给 Android 应用工程师的 Binder 原理剖析</a><br>&nbsp;📕 03. <a href="https://blog.csdn.net/universus/article/details/6211589" target="_blank" rel="noopener">Android Bander设计与实现 - 设计篇</a><br>&nbsp;📕 04. <a href="https://blog.csdn.net/freekiteyu/article/details/70082302" target="_blank" rel="noopener">一篇文章了解相见恨晚的 Android Binder 进程间通讯机制</a></p><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>推荐跳转：<a href="https://superandroid.pro/2019/12/31/%E3%80%8AThinking%20in%20Android%E3%80%8B%20--%2001.%20%E5%8D%9A%E5%AE%A2%E7%B4%A2%E5%BC%95/">博客索引（Android 9.0）</a></p>]]></content>
      
      
      <categories>
          
          <category> 核心技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binder </tag>
            
            <tag> 核心技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入钻研 Android 核心技术 之 JNI</title>
      <link href="/2018/11/10/04.he-xin-ji-zhi-xi-lie-shen-ru-zuan-yan-android-he-xin-ji-zhu-zhi-jni/"/>
      <url>/2018/11/10/04.he-xin-ji-zhi-xi-lie-shen-ru-zuan-yan-android-he-xin-ji-zhu-zhi-jni/</url>
      
        <content type="html"><![CDATA[<h1 id="1-开篇"><a href="#1-开篇" class="headerlink" title="1. 开篇"></a>1. 开篇</h1><h2 id="1-1-核心源码"><a href="#1-1-核心源码" class="headerlink" title="1.1 核心源码"></a>1.1 核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">MediaScanner.java</font></td><td>frameworks/base/media/java/android/media/MediaScanner.java</td></tr><tr><td><font color="#D15FEE">android_media_MediaScanner.cpp</font></td><td>frameworks/base/media/jni/android_media_MediaScanner.cpp</td></tr><tr><td><font color="#D15FEE">android_media_MediaPlayer.cpp</font></td><td>frameworks/base/media/jni/android_media_MediaPlayer.cpp</td></tr><tr><td><font color="#D15FEE">AndroidRuntime.cpp</font></td><td>frameworks/base/core/jni/AndroidRuntime.cpp</td></tr></tbody></table><h2 id="1-2-JNI概述"><a href="#1-2-JNI概述" class="headerlink" title="1.2 JNI概述"></a>1.2 JNI概述</h2><p>JNI是Java Native Interface的缩写，中文译为“Java本地调用”，通俗地说，JNI是一种技术，通过这种技术可以做到以下两点：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ Java程序中的函数可以调用Native语言写的函数，Native一般指的是C/C++编写函数；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ Native程序中的函数可以调用Java层的函数，也就是说在C/C++程序中可以调用Java的函数；</p><p>在平台无关的Java中，为什么要创建一个与Native相关的JNI技术呢？这岂不是破坏了 Java 的平台无关特性吗？JNI技术的推出主要有以下几个方面的考虑：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 承载Java世界的虚拟机是用 Native 语言写的，而虚拟机又运行在具体的平台上，所以虚拟机本身无法做到平台无关。然而，有了JNI技术后，就可以对Java层屏蔽不同操作系统平台之间的差异了。这样，就能实现Java本身的平台无关特性。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 在Java诞生之前，很多程序都是用 Native 语言写的，随后Java后来受到追捧，并且迅速发展，但是作为一门高级语言，无法将软件世界彻底的改变。那么既然Native模块实现了许多功能，那么在Java中直接通过JNI技术去使用它们不久可以了？</p><p>所以，我们可以把JNI看作一座将Native世界和Java世界互联起来的一座桥梁（<strong>特殊说明：JNI层的代码也是用Native写的哦！</strong>）。</p><p>原理图如下：</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-c6c57c45b56f79bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="流程图.png"></center><p>一律的讲原理很枯燥，我们直接以实际的代码作为范例来学习JNI的原理和实际使用！</p><h2 id="1-3-MediaScanner"><a href="#1-3-MediaScanner" class="headerlink" title="1.3 MediaScanner"></a>1.3 MediaScanner</h2><p>如果你是做Android系统开发和维护工作的，那么你肯定听过MediaScanner，那我们就拿它来举例，看看它和JNI之间是如何关联的。</p><p>（MediaScanner是Android平台中多媒体系统的重要组成部分，它的功能是扫描媒体文件，得到诸如歌曲时长、歌曲作者等媒体信息，并将他们存入到媒体数据库中，拱其他应用程序使用。）</p><p>MediaScanner和它的JNI：</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-1cb14ee004b58782.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="流程图.png"></center><p>我们简单说明下这个流程图：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ Java世界对应的是MediaScanner，而这个MediaScanner类有一些函数需要由Native层来实现（定义了一些Native函数，具体实现代码在Native层）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ JNI层对应的是libmedia_jni.so。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; · media_jni是JNI库的名字，其中下划线前的“media”是Native层库的名字，这里就是libmedia库。下划线后的“jni”表示它是一个JNI库。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; · Android平台基本上都采用“lib模块名_jni.so”来命名JNI库。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ Native层对应的是libmedia.so，这个库完成了实际的功能。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ MediaScanner将通过JNI库libmedia_jni.so和Native层的libmedia.so交互。</p><h1 id="2-源码分析-Java层"><a href="#2-源码分析-Java层" class="headerlink" title="2. 源码分析 - Java层"></a>2. 源码分析 - Java层</h1><h2 id="2-1-MediaScanner-java"><a href="#2-1-MediaScanner-java" class="headerlink" title="2.1 MediaScanner.java"></a>2.1 MediaScanner.java</h2><p>我们先来看看MediaScanner在Java层中关于JNI的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> android<span class="token punctuation">.</span>media<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MediaScanner</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// static语句</span>        <span class="token comment" spellcheck="true">// 这个我们之前说过，media_jni为JNI库的名字，实际加载动态库的时候会将其拓展成libmedia_jni.so</span>        System<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">"media_jni"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">native_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 调用native_init函数</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">processFile</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> String mimeType<span class="token punctuation">,</span> MediaScannerClient client<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">native_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 申明一个native函数。native为Java的关键字，表示它由JNI层实现。</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>OK，以上代码列出了两个重要的要点：（1）加载JNI库；（2）调用Java的native函数</p><h2 id="2-2-加载JNI库"><a href="#2-2-加载JNI库" class="headerlink" title="2.2 加载JNI库"></a>2.2 加载JNI库</h2><p>我们前面说到过，如果Java要调用native函数，就必须通过一个位于JNI层的动态库来实现。那么这个动态库在什么时候、什么地方加载？</p><p>原则上，在调用native函数之前，我们可以在任何时候、任何地方去加载动态库。但一般通行的做法就是在类的static语句中加载，调用System.loadLibrary方法就可以了。</p><h2 id="2-3-native函数"><a href="#2-3-native函数" class="headerlink" title="2.3 native函数"></a>2.3 native函数</h2><p>我们发现native_init和processFile函数前面都有Java的关键字native，这个就表示函数将由JNI层来实现。</p><p>所以在Java层面去使用JNI只要做两项工作：（1）加载对应的JNI库；（2）申明由关键字native修饰的函数。</p><h1 id="3-源码分析-JNI层"><a href="#3-源码分析-JNI层" class="headerlink" title="3. 源码分析 - JNI层"></a>3. 源码分析 - JNI层</h1><h2 id="3-1-实现函数"><a href="#3-1-实现函数" class="headerlink" title="3.1 实现函数"></a>3.1 实现函数</h2><p>接下来我们看下Java层中定义的两个native函数在JNI层的实现。</p><p>native_init的JNI层实现</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> kClassMediaScanner <span class="token operator">=</span>        <span class="token string">"android/media/MediaScanner"</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token function">android_media_MediaScanner_native_init</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token punctuation">{</span>    jclass <span class="token class-name">clazz</span> <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">FindClass</span><span class="token punctuation">(</span>kClassMediaScanner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fields<span class="token punctuation">.</span>context <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token string">"mNativeContext"</span><span class="token punctuation">,</span> <span class="token string">"J"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fields<span class="token punctuation">.</span>context <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>processFile的JNI层实现</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token function">android_media_MediaScanner_processFile</span><span class="token punctuation">(</span>        JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject thiz<span class="token punctuation">,</span> jstring path<span class="token punctuation">,</span>        jstring mimeType<span class="token punctuation">,</span> jobject client<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Lock already hold by processDirectory</span>    MediaScanner <span class="token operator">*</span>mp <span class="token operator">=</span> <span class="token function">getNativeScanner_l</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> thiz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathStr <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetStringUTFChars</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    env<span class="token operator">-</span><span class="token operator">></span><span class="token function">ReleaseStringUTFChars</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> pathStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mimeType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        env<span class="token operator">-</span><span class="token operator">></span><span class="token function">ReleaseStringUTFChars</span><span class="token punctuation">(</span>mimeType<span class="token punctuation">,</span> mimeTypeStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这边我们来解答一个问题，我们确实是知道MediaScanner的native函数是JNI层去实现的，但是系统是如何知道Java层的native_init函数对应的就是JNI层的android_media_MediaScanner_native_init函数呢？</p><h2 id="3-2-注册JNI函数"><a href="#3-2-注册JNI函数" class="headerlink" title="3.2 注册JNI函数"></a>3.2 注册JNI函数</h2><p>不知道你有没有注意到native_init函数位于android.media这个包中，它的全路径名应该是android.media.MediaScanner.native_init，而JNI层函数的名字是android_media_MediaScanner_native_init。</p><p>是不是很神奇？名字对应着，唯一的区别就是“.”这个符号变成了“<em>”。因为在Native语言中，符号“.”有着特殊的意义，所以JNI层需要把Java函数名称（包括包名）中的“.”换成“</em>”。也就是通过这种方式，native_init找到了自己JNI层的本家兄弟android.media.MediaScanner.native_init。</p><p>我们知道了Java层native函数对应JNI层的函数的原理，但有个问题，我们知道是哪个函数，但是想要把两个函数关联起来（也就是说去调用它）就涉及到JNI函数注册的问题（不注册，就没有关联，没有关联就无法调用）。</p><h3 id="3-2-1-静态方法注册"><a href="#3-2-1-静态方法注册" class="headerlink" title="3.2.1 静态方法注册"></a>3.2.1 静态方法注册</h3><p>这种方法很简单，很暴力！直接根据函数名来找对应的JNI函数，它需要Java的工具程序javah参与，整体流程如下：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 先编写Java代码，然后编译生成.class文件。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 使用Java的工具程序javah，采用命令“javah -o output packagename.classname”，这样它会生成一个叫output.h的JNI层头文件。其中packagename.classname是Java代码编译后的class文件，而在生成的output.h文件里，声明了对应的JNI层函数，只要实现里面的函数即可。</p><p>这个头文件的名字一般都会使用packagename_class.h的样式，例如MediaScanner对应的JNI层头文件就是android_media_MediaScanner.h。</p><pre class=" language-h"><code class="language-h">/* DO NOT EDIT THIS FILE - it is machine generated*/  #include <jni.h>        // 必须包含这个头文件，否则编译通不过/* Header for class android_media_MediaScanner */#ifndef _Included_android_media_MediaScanner#define _Included_android_media_MediaScanner#ifdef _cplusplusextern "C" {#endif... ...     // 略去一部分内容// processFile对应的JNI函数JNIEXPORT void JNICALL Java_android_media_MediaScanner_processFile(JNIEnv *, jobject, jstring, jstring, jobject);... ...     // 略去一部分内容// native_init对应的JNI函数JNIEXPORT void JNICALL Java_android_media_MediaScanner_native_linit(JNIEnv *, jclass);#ifdef _cplusplus}#endif#endif</code></pre><p>从上面代码中可以发现，native_init和processFile的JNI层函数被声明成：</p><pre class=" language-h"><code class="language-h">// Java 层函数名中如果由一个“_”， 转换成JNI后就变成了“l”JNIEXPORT void JNICALL Java_android_media_MediaScanner_processFileJNIEXPORT void JNICALL Java_android_media_MediaScanner_native_linit</code></pre><p>Ok，那么静态方法中native函数是如何找到对应的JNI函数的呢？</p><p>当Java层调用native_init函数时，它会从对应的JNI库中寻找Java_android_media_MediaScanner_native_init函数，如果没有，就会报错。如果找到，则会为这个native_init和Java_android_media_MediaScanner_native_init建立一个关联关系，其实就是保存JNI层函数的函数指针。以后再调用native_init函数时，直接使用这个函数指针就可以了，当然这项工作是由虚拟机完成的。</p><p>从这里可以看出，静态方法就是根据函数名来建立Java函数与JNI函数之间的关联关系的，而且它要求JNI函数的名字必须遵循特定的格式。</p><p>这种方法有三个弊端，如下：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 需要编译所有声明了native函数的Java类，每个所生成的class文件都得用javah生成一个头文件；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ javah生成的JNI层函数名特别长，书写起来很不方便；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 初次调用native函数时需要根据函数名称搜索对应的JNI函数来建立关联关系，这样会影响运行效率。</p><p>所以我们是否有办法克服以上三点弊端？我们知道静态方法是去动态库里找一遍，然后建立关联关系，以后再根据这个函数指针去调用对应的JNI函数，那么如果我们直接让native函数直接知道JNI层对应函数的函数指针，是不就Ok了？</p><p>这就是下面我们要介绍的第二种方法：动态注册法！</p><h3 id="3-2-2-动态方法注册"><a href="#3-2-2-动态方法注册" class="headerlink" title="3.2.2 动态方法注册"></a>3.2.2 动态方法注册</h3><p>我们知道Java native函数和JNI函数是一一对应的，这个就像我们key-value一样，那么如果有一个结构来保存这种关联关系，那么通过这个结构直接可以找到彼此的关联，是不是就效率就高多了？</p><p>答案是肯定的，动态注册就是这么干的！在JNI技术中，用来记录这种一一对应关系的，是一个叫 JNINativeMethod 的结构，其定义如下：</p><pre class=" language-h"><code class="language-h">typedef struct {    char *name;                      // Java中native函数的名字，不用携带包的路径，例如：native_init    char *signature;                 // Java中函数的签名信息，用字符串表示，是参数类型和返回值类型的集合    void *fnPtr;                     // JNI层对应函数的函数指针，注意它是 void* 类型}JNINativeMethod;</code></pre><p>下面我们看看如何使用这个结构体，看下MediaScanner JNI层是如何做的。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 定义一个JNINativeMethod数组，其成员就是MediaScanner中所有native函数的一一对应关系。</span><span class="token keyword">static</span> <span class="token keyword">const</span> JNINativeMethod gMethods<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">{</span>        <span class="token string">"processFile"</span><span class="token punctuation">,</span>                                    <span class="token comment" spellcheck="true">// Java中native函数的函数名</span>        <span class="token string">"(Ljava/lang/String;Ljava/lang/String;Landroid/media/MediaScannerClient;)V"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// processFile的签名信息</span>        <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>android_media_MediaScanner_processFile    <span class="token comment" spellcheck="true">// JNI层对应的函数指针</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">{</span>        <span class="token string">"native_init"</span><span class="token punctuation">,</span>        <span class="token string">"()V"</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>android_media_MediaScanner_native_init    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>是不是很一目了然？定义好了，不能直接用啊，当然需要注册一下。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// This function only registers the native methods, and is called from</span><span class="token comment" spellcheck="true">// JNI_OnLoad in android_media_MediaPlayer.cpp</span><span class="token comment" spellcheck="true">// 注册JNINativeMethod数组</span><span class="token keyword">int</span> <span class="token function">register_android_media_MediaScanner</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调用AndroidRuntime的registerNativeMethods函数，第二个参数表明是Java中的哪个类</span>    <span class="token comment" spellcheck="true">// 我们在讲解Zygote原理时，聊过创建Java虚拟机，注册JNI函数的内容</span>    <span class="token keyword">return</span> AndroidRuntime<span class="token operator">::</span><span class="token function">registerNativeMethods</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span>                kClassMediaScanner<span class="token punctuation">,</span> gMethods<span class="token punctuation">,</span> <span class="token function">NELEM</span><span class="token punctuation">(</span>gMethods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>AndroidRunTime类提供了一个registerNativeMethods函数来完成注册的工作，下面来看下registerNativeMethods的实现：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/* * Register native methods using JNI. */</span><span class="token comment" spellcheck="true">/*static*/</span> <span class="token keyword">int</span> AndroidRuntime<span class="token operator">::</span><span class="token function">registerNativeMethods</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> className<span class="token punctuation">,</span> <span class="token keyword">const</span> JNINativeMethod<span class="token operator">*</span> gMethods<span class="token punctuation">,</span> <span class="token keyword">int</span> numMethods<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调用jniRegisterNativeMethods函数完成注册</span>    <span class="token keyword">return</span> <span class="token function">jniRegisterNativeMethods</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> className<span class="token punctuation">,</span> gMethods<span class="token punctuation">,</span> numMethods<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其实，jniRegisterNativeMethods是Android平台中为了方便JNI使用而提供的一个帮助函数，其代码如下：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">jniRegisterNativeMethods</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> className<span class="token punctuation">,</span> <span class="token keyword">const</span> JNINativeMethod<span class="token operator">*</span> gMethods<span class="token punctuation">,</span> <span class="token keyword">int</span> numMethods<span class="token punctuation">)</span><span class="token punctuation">{</span>    jclass <span class="token class-name">clazz</span><span class="token punctuation">;</span>    clazz <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">FindClass</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 实际上是调用JNIEnv的RegisterNatives函数完成注册的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">RegisterNatives</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> clazz<span class="token punctuation">,</span> gMethods<span class="token punctuation">,</span> numMethods<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我知道你看到这边已经头疼了，调用来调用去，看上去很麻烦，是不是？其实动态注册的工作，只用两个函数就能完成，如下：</p><p>（1）<font color="#FFFF00">jclass clazz = (<em>env)-&gt;FindClass(env, className); </em></font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;env指向一个JNIEnv结构体，它非常重要，后面我们会讨论。classname为对应的Java类名，由于JNINativeMethod中使用的函数名并非全路径名，所以要指明是哪个类。<br>（2）<font color="#FFFF00">(env)-&gt;RegisterNatives(env, clazz, gMethods, numMethods); </font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;调用JNIEnv的RegisterNatives函数，注册关联关系。</p><p>那么，你现在知道了如果动态注册了，但是有个问题，这些动态注册的函数在什么时候和什么地方被调用？</p><font color="#FF0000">当Java层通过System.loadLibrary加载完JNI动态库后，紧接着就会去查找该库中一个叫JNI_OnLoad的函数。如果有，就调用它，而动态注册的工作就是在这里完成的。</font> <h3 id="3-2-3-JNI-OnLoad"><a href="#3-2-3-JNI-OnLoad" class="headerlink" title="3.2.3 JNI_OnLoad"></a>3.2.3 JNI_OnLoad</h3><p>动态库是libmedia_jni.so，那么JNI_OnLoad函数在哪里实现的？如果你看的比较自信的话，我相信之前代码中有段注释你应该注意到了。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// This function only registers the native methods, and is called from</span><span class="token comment" spellcheck="true">// JNI_OnLoad in android_media_MediaPlayer.cpp                    // 看这里！看这里！看这里！ </span><span class="token keyword">int</span> <span class="token function">register_android_media_MediaScanner</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// 这个代码很熟悉吧？</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> AndroidRuntime<span class="token operator">::</span><span class="token function">registerNativeMethods</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span>                kClassMediaScanner<span class="token punctuation">,</span> gMethods<span class="token punctuation">,</span> <span class="token function">NELEM</span><span class="token punctuation">(</span>gMethods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>由于多媒体系统很多地方都使用了JNI，所以JNI_OnLoad被放到了android_media_MediaPlayer.cpp中，我们看下代码：</p><pre class=" language-cpp"><code class="language-cpp">jint <span class="token function">JNI_OnLoad</span><span class="token punctuation">(</span>JavaVM<span class="token operator">*</span> vm<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token comment" spellcheck="true">/* reserved */</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 该函数的第一个参数类型为JavaVM，这可是虚拟机在JNI层的代表哦，每个Java进程只有一个这样的JavaVM</span>    JNIEnv<span class="token operator">*</span> env <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    jint result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetEnv</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>env<span class="token punctuation">,</span> JNI_VERSION_1_4<span class="token punctuation">)</span> <span class="token operator">!=</span> JNI_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">goto</span> bail<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">register_android_media_MediaScanner</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"ERROR: MediaScanner native registration failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">goto</span> bail<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/* success -- return valid version number */</span>    result <span class="token operator">=</span> JNI_VERSION_1_4<span class="token punctuation">;</span>bail<span class="token operator">:</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-3-数据类型转换"><a href="#3-3-数据类型转换" class="headerlink" title="3.3 数据类型转换"></a>3.3 数据类型转换</h2><p>在Java中调用native函数传递的参数是Java数据类型，那么这些参数类型传递到JNI层会变成什么类型？</p><p>Java数据类型分为<strong>“基本数据类型”</strong>和<strong>“引用数据类型”</strong>两种，JNI层也是区别对待两者的。</p><h3 id="3-3-1-基本数据类型的转换"><a href="#3-3-1-基本数据类型的转换" class="headerlink" title="3.3.1 基本数据类型的转换"></a>3.3.1 基本数据类型的转换</h3><table><thead><tr><th>Java基本类型</th><th>Native类型</th><th>符号属性</th><th>字长</th></tr></thead><tbody><tr><td>boolean</td><td>jboolean</td><td>无符号</td><td>8位</td></tr><tr><td>byte</td><td>jbyte</td><td>无符号</td><td>8位</td></tr><tr><td>char</td><td>jchar</td><td>无符号</td><td>16位</td></tr><tr><td>short</td><td>jshort</td><td>有符号</td><td>16位</td></tr><tr><td>int</td><td>jint</td><td>有符号</td><td>32位</td></tr><tr><td>long</td><td>jlong</td><td>有符号</td><td>64位</td></tr><tr><td>float</td><td>jfloat</td><td>有符号</td><td>32位</td></tr><tr><td>double</td><td>jdoublt</td><td>有符号</td><td>64位</td></tr></tbody></table><h3 id="3-3-2-引用数据类型的转换"><a href="#3-3-2-引用数据类型的转换" class="headerlink" title="3.3.2 引用数据类型的转换"></a>3.3.2 引用数据类型的转换</h3><table><thead><tr><th>Java引用类型</th><th>Native类型</th><th>Java引用类型</th><th>Native类型</th></tr></thead><tbody><tr><td>All objects</td><td>jobject</td><td>char[]</td><td>jcharArray</td></tr><tr><td>java.lang.Class 实例</td><td>jclass</td><td>short[]</td><td>jshortArray</td></tr><tr><td>java.lang.String 实例</td><td>jstring</td><td>int[]</td><td>jintArray</td></tr><tr><td>Object[]</td><td>jobjectArray</td><td>long[]</td><td>jlongArray</td></tr><tr><td>boolean[]</td><td>jbooleanArray</td><td>float</td><td>jfloatArray</td></tr><tr><td>byte[]</td><td>jbyteArray</td><td>double[]</td><td>jdoubleArray</td></tr><tr><td>java.lang.Throwable 实例</td><td>jthrowable</td><td></td><td></td></tr></tbody></table><p>我们举例说明，看下processFile函数：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">private</span> native <span class="token keyword">void</span> <span class="token function">processFile</span>                   <span class="token punctuation">(</span>                           String  path<span class="token punctuation">,</span>  String  mimeType<span class="token punctuation">,</span>  MediaScannerClient client<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">android_media_MediaScanner_processFile</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject thiz<span class="token punctuation">,</span> jstring path<span class="token punctuation">,</span>  jstring mimeType<span class="token punctuation">,</span>  jobject            client<span class="token punctuation">)</span></code></pre><p>我们发现：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ Java的String类型在JNI层对应为jstring类型；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ Java的MediaScannerClient类型在JNI层对应为jobject。</p><p>不知道你有没有注意到一个问题，Java中的processFile中只有三个参数，为什么到了JNI层对应的函数却有五个参数？</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">android_media_MediaScanner_processFile</span><span class="token punctuation">(</span>        JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject thiz<span class="token punctuation">,</span> jstring path<span class="token punctuation">,</span>        jstring mimeType<span class="token punctuation">,</span> jobject client<span class="token punctuation">)</span></code></pre><p>接下来我们开始重点讨论JNIEnv！！！</p><h2 id="3-4-JNIEnv"><a href="#3-4-JNIEnv" class="headerlink" title="3.4 JNIEnv"></a>3.4 JNIEnv</h2><p><strong><font color="#FFFF00">JNIEnv的概念</font></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是一个与线程相关的代表JNI环境的结构体，该结构体代表了Java在本线程的执行环境。<br><strong><font color="#FFFF00">JNUEnv的作用</font></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 调用 Java 函数 : JNIEnv 代表 Java 执行环境, 能够使用 JNIEnv 调用 Java 中的代码<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 操作 Java 对象 : Java 对象传入 JNI 层就是 Jobject 对象, 须要使用 JNIEnv 来操作这个 Java 对象</p><p><strong><font color="#00FFFF">我们来看一个有趣的现象</font></strong></p><p>前面，我们已经知道 JNIEnv 是一个与线程相关的变量，如果此时线程 A 有一个 JNIEnv 变量， 线程 B 也有一个JNIEnv变量，由于线程相关，所以 A 线程不能使用 B 线程的 JNIEnv 结构体变量。<br>此时，一个java对象通过JNI调用动态库中的一个send()函数向服务器发送消息，不等服务器消息到来就立即返回，同时把JNI接口的指针JNIEnv *env(虚拟机环境指针)，和jobject obj保存在动态库中的变量里。一段时间后，动态库中的消息接收线程接收到服务器发来的消息，并试图通过保存过的env和obj来调用先前的java对象的方法(相当于JAVA回调方法)来处理此消息，<strong><font color="#FF0000">此时程序突然退出(崩溃)</font></strong>。</p><p><strong><font color="#00FFFF">为什么？</font></strong></p><p><strong><font color="#FF0000">原因</font>：</strong>前台JAVA线程发送消息，后台线程处理消息，归属于两个不同的线程，不能使用相同的JNIEnv变量。</p><p><strong><font color="#00FFFF">怎么解决？</font></strong></p><p>还记得我们前面介绍的JNI_OnLoad函数吗？它的第一个参数是JavaVM，它是虚拟机在JNI层的代表！！！</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 全进程只有一个JavaVM对象，所以可以在任何地方使用</span>jint <span class="token function">JNI_OnLoad</span><span class="token punctuation">(</span>JavaVM<span class="token operator">*</span> vm<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token comment" spellcheck="true">/* reserved */</span><span class="token punctuation">)</span></code></pre><p>那么也就是说，不论进程有多少线程（不论有多少JNIEnv），JavaVM却是独此一份！所以，我们可以利用一个机制：利用全局的 JavaVM <em> 指针得到当前线程的 JNIEnv</em> 指针。</p><p><strong><font color="#FFFF00">JavaVM和JNIEnv</font></strong>：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 调用JavaVM的AttachCurrentThread函数，就可得到这个线程的JNIEnv结构体，这样就可以在后台线程中回调Java函数了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 另外，在后台线程退出前，需要调用JavaVM的DetachCurrentThread函数来释放对应的资源。</p><h2 id="3-5-通过JNIEnv操作jobject"><a href="#3-5-通过JNIEnv操作jobject" class="headerlink" title="3.5 通过JNIEnv操作jobject"></a>3.5 通过JNIEnv操作jobject</h2><p>前面介绍数据类型的时候，我们知道Java的引用类型除了少数几个外（Class、String和Throwable），最终在JNI层都会用jobject来表示对象的数据类型，那么该如何操作这个jobject呢？</p><p>我们先回顾下Java对象是由什么组成的？当然是它的成员变量和成员函数了！那么同理，操作jobject的本质就应当是操作这些对象的成员变量和成员函数！那么jobject的成员变量和成员函数又是什么？</p><h3 id="3-5-1-取出jfieldID和jmethodID"><a href="#3-5-1-取出jfieldID和jmethodID" class="headerlink" title="3.5.1 取出jfieldID和jmethodID"></a>3.5.1 取出jfieldID和jmethodID</h3><p>在java中，我们知道成员变量和成员函数都是由类定义的，他们是类的属性，那么在JNI规则中，也是这么来定义的，用jfieldID定义Java类的成员变量，用jmethodID定义Java类的成员函数。</p><p>可通过JNIEnv的下面两个函数得到：</p><pre class=" language-cpp"><code class="language-cpp">jfieldID <span class="token function">GetFieldID</span><span class="token punctuation">(</span>jclass <span class="token class-name">clazz</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> sig<span class="token punctuation">)</span>jmethodID <span class="token function">GetMethodID</span><span class="token punctuation">(</span>jclass <span class="token class-name">clazz</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> sig<span class="token punctuation">)</span></code></pre><p>其中，jclass代表Java类，name表示成员函数或成员变量的名字，sig为这个函数和变量的签名信息（后面会说到）。</p><p>我们来看看在MediaScanner中如何使用它们，直接看代码：android_media_MediaScanner.cpp::MyMediaScannerClient构造函数</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyMediaScannerClient</span> <span class="token operator">:</span> <span class="token keyword">public</span> MediaScannerClient<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MyMediaScannerClient</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject client<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 先找到android.media.MediaScannerClient类在JNI层中对应的jclass实例</span>        jclass <span class="token class-name">mediaScannerClientInterface</span> <span class="token operator">=</span>                env<span class="token operator">-</span><span class="token operator">></span><span class="token function">FindClass</span><span class="token punctuation">(</span>kClassMediaScannerClient<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mediaScannerClientInterface <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"Class %s not found"</span><span class="token punctuation">,</span> kClassMediaScannerClient<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 取出MediaScannerClient类中函数scanFile的jMethodID</span>            mScanFileMethodID <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetMethodID</span><span class="token punctuation">(</span>                                    mediaScannerClientInterface<span class="token punctuation">,</span>                                    <span class="token string">"scanFile"</span><span class="token punctuation">,</span>                                    <span class="token string">"(Ljava/lang/String;JJZZ)V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 取出MediaScannerClient类中函数handleStringTag的jMethodID</span>            mHandleStringTagMethodID <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetMethodID</span><span class="token punctuation">(</span>                                    mediaScannerClientInterface<span class="token punctuation">,</span>                                    <span class="token string">"handleStringTag"</span><span class="token punctuation">,</span>                                    <span class="token string">"(Ljava/lang/String;Ljava/lang/String;)V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    jobject mClient<span class="token punctuation">;</span>    jmethodID mScanFileMethodID<span class="token punctuation">;</span>    jmethodID mHandleStringTagMethodID<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>从上面的代码中，将scanFile和handleStringTag函数的jMethodID保存在MyMediaScannerClient的成员变量中。为什么这里要把它们保存起来呢？这个问题涉及到一个关于程序运行效率的知识点：</p><p>如果每次操作jobject前都要去查询jmethodID或jfieldID，那么将会影响程序运行的效率，所以我们在初始化的时候可以取出这些ID并保存起来以供后续使用。</p><h3 id="3-5-2-使用jfieldID和jmethodID"><a href="#3-5-2-使用jfieldID和jmethodID" class="headerlink" title="3.5.2 使用jfieldID和jmethodID"></a>3.5.2 使用jfieldID和jmethodID</h3><p>我们来看看android_media_MediaScanner.cpp::MyMediaScannerClient的scanFile函数</p><pre class=" language-cpp"><code class="language-cpp">    <span class="token keyword">virtual</span> status_t <span class="token function">scanFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> path<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> lastModified<span class="token punctuation">,</span>            <span class="token keyword">long</span> <span class="token keyword">long</span> fileSize<span class="token punctuation">,</span> <span class="token keyword">bool</span> isDirectory<span class="token punctuation">,</span> <span class="token keyword">bool</span> noMedia<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        jstring pathStr<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pathStr <span class="token operator">=</span> mEnv<span class="token operator">-</span><span class="token operator">></span><span class="token function">NewStringUTF</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mEnv<span class="token operator">-</span><span class="token operator">></span><span class="token function">ExceptionClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> NO_MEMORY<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*         * 调用JNIEnv的CallVoidMethod函数         * 注意CallVoidMethod的参数：         *（1）第一个参数是代表MediaScannerClient的jobject对象         *（2）第二个参数是函数scanFile的jmethodID，后面是Java中的scanFile的参数         */</span>        mEnv<span class="token operator">-</span><span class="token operator">></span><span class="token function">CallVoidMethod</span><span class="token punctuation">(</span>mClient<span class="token punctuation">,</span> mScanFileMethodID<span class="token punctuation">,</span> pathStr<span class="token punctuation">,</span> lastModified<span class="token punctuation">,</span>                fileSize<span class="token punctuation">,</span> isDirectory<span class="token punctuation">,</span> noMedia<span class="token punctuation">)</span><span class="token punctuation">;</span>        mEnv<span class="token operator">-</span><span class="token operator">></span><span class="token function">DeleteLocalRef</span><span class="token punctuation">(</span>pathStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">checkAndClearExceptionFromCallback</span><span class="token punctuation">(</span>mEnv<span class="token punctuation">,</span> <span class="token string">"scanFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>通过JNIEnv输出CallVoidMethod，再把jobject、jMethodID和对应的参数传进去，JNI层就能够调用Java对象的函数了！</p><p>实际上JNIEnv输出了一系列类似CallVoidMethod的函数，形式如下：</p><pre class=" language-cpp"><code class="language-cpp">NativeType Call<span class="token operator">&lt;</span>type<span class="token operator">></span><span class="token function">Method</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">,</span> jmethodID methodID<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></code></pre><p>其中type对应java函数的返回值类型，例如CallIntMethod、CallVoidMethod等。如果想调用Java中的static函数，则用JNIEnv输出的CallStatic<type>Method系列函数。</type></p><p>所以，我们可以看出，虽然jobject是透明的，但有了JNIEnv的帮助，还是能轻松操作jobject背后的实际对象的。</p><h2 id="3-6-jstring"><a href="#3-6-jstring" class="headerlink" title="3.6 jstring"></a>3.6 jstring</h2><p>这一节我们单独聊聊String。Java中的String也是引用类型，不过由于它的使用频率很高，所以在JNI规范中单独创建了一个jstring类型来表示Java中的String类型。<br>虽然jstring是一种独立的数据累心，但是它并没有提供成员函数以便操作。而C++中的string类是由自己的成员函数的。那么该如何操作jstring呢？还是得依靠JNIEnv提供帮助。</p><p>先看几个有关jstring的函数：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 调用JNIEnv的NewString(const jchar<em> unicodeChars, jsize len)，可以从Native的字符串得到一个jstring对象。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 调用JNIEnv的NewStringUTF(const char</em> bytes)将根据Native的一个UTF-8字符串得到一个jstring对象。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 上面两个函数将本地字符串转换成了Java的String对象，JNIEnv还提供了GetStringChars函数和GetStringUTFChars函数，它们可以将Java String对象转换成本地字符串。其中GetStringChars得到一个Unicode字符串，而GetStringUTFChars得到一个UTF-8字符串。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ 另外，如果在代码中调用了上面几个函数，在做完相关工作后，就都需要调用ReleaseStringChars函数或ReleaseStringUTFChars函数来对应地释放资源，否认会导致JVM内存泄漏。</p><p>我们看段代码加深印象：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token function">android_media_MediaScanner_processFile</span><span class="token punctuation">(</span>        JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject thiz<span class="token punctuation">,</span> jstring path<span class="token punctuation">,</span>        jstring mimeType<span class="token punctuation">,</span> jobject client<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Lock already hold by processDirectory</span>    MediaScanner <span class="token operator">*</span>mp <span class="token operator">=</span> <span class="token function">getNativeScanner_l</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> thiz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>mimeTypeStr <span class="token operator">=</span>        <span class="token punctuation">(</span>mimeType <span class="token operator">?</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetStringUTFChars</span><span class="token punctuation">(</span>mimeType<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mimeType <span class="token operator">&amp;&amp;</span> mimeTypeStr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Out of memory</span>        <span class="token comment" spellcheck="true">// ReleaseStringUTFChars can be called with an exception pending.</span>        env<span class="token operator">-</span><span class="token operator">></span><span class="token function">ReleaseStringUTFChars</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> pathStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="3-7-JNI类型签名"><a href="#3-7-JNI类型签名" class="headerlink" title="3.7 JNI类型签名"></a>3.7 JNI类型签名</h2><p>我们看下动态注册中的一段代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">const</span> JNINativeMethod gMethods<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">{</span>        <span class="token string">"processFile"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// processFile的签名信息，这么长的字符串，是什么意思？</span>        <span class="token string">"(Ljava/lang/String;Ljava/lang/String;Landroid/media/MediaScannerClient;)V"</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>android_media_MediaScanner_processFile    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>上面这段代码我们之前早就见过了，不过”(Ljava/lang/String;Ljava/lang/String;Landroid/media/MediaScannerClient;)V”是什么意思呢？</p><p>我们前面提到过，这个是Java中对应函数的签名信息，由参数类型和返回值类型共同组成，有人可能有疑问，这东西是干嘛的？</p><p>我们都知道，Java支持函数重载，也就是说，可以定义同名但不同参数的函数。但仅仅根据函数名是没法找到具体函数的。为了解决这个问题，JNI技术中就将参数类型和返回值类型的组合作为一个函数的签名信息，有了签名信息和函数名，就能很顺利地找到Java中的函数了。</p><p>JNI规范定义的函数签名信息看起来很别扭，不过习惯就好了。它的格式是：</p><p>(参数 1 类型标识参数 2 类型标识 … 参数 n 类型标识) 返回值类型标识</p><p>我们仍然拿processFile的例子来看下：</p><pre class=" language-cpp"><code class="language-cpp">    <span class="token punctuation">{</span>        <span class="token string">"processFile"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// Java中的函数定义为 private native void processFile(String path, String mimeType, MediaScannerClient client);</span>        <span class="token comment" spellcheck="true">// 对应的JNI函数签名如下：</span>        <span class="token string">"(Ljava/lang/String;Ljava/lang/String;Landroid/media/MediaScannerClient;)V"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// void类型对应的标示是V</span>        <span class="token comment" spellcheck="true">// 当参数的类型是引用类型时，其格式是“L包名”，其中包名中的“.”换成“/”，Ljava/lang/String表示是一个Java String类型</span>        <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>android_media_MediaScanner_processFile    <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p><strong>【注意】</strong>：引用类型（除基本类型的数组外）的标识最后都有一个“;”。</p><p>函数签名不仅看起来麻烦，写起来更麻烦，稍微写错一个标点都会导致注册失败，所以在具体编码时，可以定义字符串宏（这边就不多做解释了，可以自行查询了解即可）。</p><p>虽然函数签名信息很容易写错，但是Java提供了一个叫javap的工具能够帮助我们生成函数或变量的签名信息，它的用法如下：</p><p>javap -s -p xxx</p><p>其中 xxx 为编译后的class文件，s表示输出内部数据类型的签名信息，p表示打印所有函数和成员的签名信息，默认只会打印public成员和函数的签名信息。</p><h2 id="3-8-垃圾回收及异常处理"><a href="#3-8-垃圾回收及异常处理" class="headerlink" title="3.8 垃圾回收及异常处理"></a>3.8 垃圾回收及异常处理</h2><p>这部分我打算单独放在一篇博文中探讨，结果具体错误进行分析。</p>]]></content>
      
      
      <categories>
          
          <category> 核心技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 核心技术 </tag>
            
            <tag> JNI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入钻研 Android 核心技术 之 LowMemoryKiller</title>
      <link href="/2018/11/01/04.he-xin-ji-zhi-xi-lie-shen-ru-yan-jiu-android-he-xin-ji-zhu-zhi-lowmemorykiller/"/>
      <url>/2018/11/01/04.he-xin-ji-zhi-xi-lie-shen-ru-yan-jiu-android-he-xin-ji-zhu-zhi-lowmemorykiller/</url>
      
        <content type="html"><![CDATA[<h1 id="一、核心源码"><a href="#一、核心源码" class="headerlink" title="一、核心源码"></a>一、核心源码</h1><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">lmkd.c</font></td><td>system/core/lmkd/lmkd.c</td></tr><tr><td><font color="#D15FEE">lmkd.rc</font></td><td>system/core/lmkd/lmkd.rc</td></tr><tr><td><font color="#D15FEE">lowmemorykiller.c</font></td><td>kernel-3.18/drivers/staging/android/lowmemorykiller.c</td></tr><tr><td><font color="#D15FEE">ProcessList.java</font></td><td>frameworks/base/services/core/java/com/android/server/am/ProcessList.java</td></tr></tbody></table><h1 id="二、进程生命周期"><a href="#二、进程生命周期" class="headerlink" title="二、进程生命周期"></a>二、进程生命周期</h1><p>Android 系统的设计理念正是希望应用进程能尽量长时间地存活，以提升用户体验。应用首次打开比较慢，这个过程有进程创建以及 Application 等信息的初始化，所以应用在启动之后，即便退到后台并非立刻杀死，而是存活一段时间，这样下次再使用则会非常快。对于 APP 同样希望自身尽可能存活更长的时间，现在很多开发者都在探索各种保活黑科技。</p><p>但物极必反，如果系统继续放任所有进程一直存活，那么系统处于低内存的状态下，性能就会有所下降，内存也会很快枯竭而亡。此时我们就需要进程回收机制帮助我们合理的把控那些进程改回收，哪些不该回收。</p><p>那么问题来了，系统如何判断？到底该回收哪个进程？<strong><font color="#FF0000">其实系统会根据进程的组件状态来决定每个进程的优先级值 “ADJ”，根据一定策略先杀优先级最低的进程，然后逐步杀优先级更低的进程。</font></strong>以此类推，以回收预期的可用系统资源，从而保证系统正常运转。</p><p>接下来就要引入我们本文需要讨论的主角了：<strong><font color="#1874CD">LowMemoryKiller</font></strong>（系统用于判定是否需要杀进程和杀哪些进程的一个机制）。</p><h1 id="三、进程优先级"><a href="#三、进程优先级" class="headerlink" title="三、进程优先级"></a>三、进程优先级</h1><p>系统内进程优先级分 5 级：</p><table><thead><tr><th>进程</th><th>说明</th></tr></thead><tbody><tr><td>前台进程（Foreground process）</td><td>用户当前操作所必需的进程。</td></tr><tr><td>可见进程（Visible process）</td><td>没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。<br>可见进程被视为是极其重要的进程，<br>除非为了维持所有前台进程同时运行而必须终止，否则系统不会终止这些进程。</td></tr><tr><td>服务进程（Service process）</td><td>正在运行已使用 startService() 方法启动的服务且不属于上述两个更高类别进程的进程。<br>尽管服务进程与用户所见内容没有直接关联，但是它们通常在执行一些用户关心的操作<br>（例如，在后台播放音乐或从网络下载数据）。<br>因此，除非内存不足以维持所有前台进程和可见进程同时运行，否则系统会让服务进程保持运行状态。</td></tr><tr><td>后台进程（Background process）</td><td>包含目前对用户不可见的 Activity 的进程（已调用 Activity 的 onStop() 方法）。<br>这些进程对用户体验没有直接影响，系统可能随时终止它们。</td></tr><tr><td>空进程 （Empty process）</td><td>不含任何活动应用组件的进程。<br>保留这种进程的的唯一目的是用作缓存，以缩短下次在其中运行组件所需的启动时间。<br>为使总体系统资源在进程缓存和底层内核缓存之间保持平衡，系统往往会终止这些进程。</td></tr></tbody></table><h1 id="四、Framework-OOM-Adjustment"><a href="#四、Framework-OOM-Adjustment" class="headerlink" title="四、Framework OOM Adjustment"></a>四、Framework OOM Adjustment</h1><h2 id="4-1-ADJ-级别"><a href="#4-1-ADJ-级别" class="headerlink" title="4.1 ADJ 级别"></a>4.1 ADJ 级别</h2><p>ADJ 定义在 <strong><font color="#1874CD">ProcessList.java</font></strong> 中：<strong><font color="#FF0000">oom_adj</font></strong> 划分为16级，取值范围[-1000~1001]</p><table><thead><tr><th>ADJ 级别</th><th>取值</th><th>说明</th></tr></thead><tbody><tr><td>UNKNOWN_ADJ</td><td>1001</td><td>一般指将要会缓存进程，无法获取确定值</td></tr><tr><td>CACHED_APP_MAX_ADJ</td><td>906</td><td>不可见进程的 adj 最大值</td></tr><tr><td>CACHED_APP_MIN_ADJ</td><td>900</td><td>不可见进程的 adj 最小值</td></tr><tr><td>SERVICE_B_AD</td><td>800</td><td>B List中的Service（较老的、使用可能性更小）</td></tr><tr><td>PREVIOUS_APP_ADJ</td><td>700</td><td>上一个App的进程(往往通过按返回键)</td></tr><tr><td>HOME_APP_ADJ</td><td>600</td><td>Home进程</td></tr><tr><td>SERVICE_ADJ</td><td>500</td><td>服务进程(Service process)</td></tr><tr><td>HEAVY_WEIGHT_APP_ADJ</td><td>400</td><td>后台的重量级进程，system/rootdir/init.rc文件中设置</td></tr><tr><td>BACKUP_APP_ADJ</td><td>300</td><td>备份进程</td></tr><tr><td>PERCEPTIBLE_APP_ADJ</td><td>200</td><td>可感知进程，比如后台音乐播放</td></tr><tr><td>VISIBLE_APP_ADJ</td><td>100</td><td>可见进程(Visible process) </td></tr><tr><td>FOREGROUND_APP_ADJ</td><td>0</td><td>前台进程（Foreground process）</td></tr><tr><td>PERSISTENT_SERVICE_ADJ</td><td>-700</td><td>关联着系统或 persistent 进程</td></tr><tr><td>PERSISTENT_PROC_ADJ</td><td>-800</td><td>系统 persistent 进程，比如 telephony</td></tr><tr><td>SYSTEM_ADJ</td><td>-900</td><td>系统进程，仅指system_server进程</td></tr><tr><td>NATIVE_ADJ</td><td>-1000</td><td>native进程（不被系统管理）</td></tr></tbody></table><p>从 Android 7.0 开始，ADJ 采用 100、200、300 等数值；在这之前的版本 AD J采用数字 1、2、3 等数值，这样的调整是为了可以更进一步地细化进程的优先级，比如在 VISIBLE_APP_ADJ(100) 与 PERCEPTIBLE_APP_ADJ(200) 之间，可以设定 ADJ = 101、ADJ = 102 级别的进程。</p><h2 id="4-2-STATE-级别"><a href="#4-2-STATE-级别" class="headerlink" title="4.2 STATE 级别"></a>4.2 STATE 级别</h2><p>STATE 定义在 <strong><font color="#1874CD">ActivityManager.java</font></strong> 中：<strong><font color="#FF0000">process_state</font></strong> 划分20类，取值范围[-1~18]</p><table><thead><tr><th>STATE 级别</th><th>取值</th><th>说明</th></tr></thead><tbody><tr><td>PROCESS_STATE_NONEXISTENT</td><td>18</td><td>不存在的进程</td></tr><tr><td>PROCESS_STATE_CACHED_EMPTY</td><td>17</td><td>进程处于cached状态，且为空进程</td></tr><tr><td>PROCESS_STATE_CACHED_ACTIVITY_CLIENT</td><td>16</td><td>进程处于cached状态，且为另一个cached进程(内含Activity)的client进程 adj 最大值</td></tr><tr><td>PROCESS_STATE_CACHED_ACTIVITY</td><td>15</td><td>进程处于cached状态，且内含Activity</td></tr><tr><td>PROCESS_STATE_LAST_ACTIVITY</td><td>14</td><td>后台进程，且拥有上一次显示的Activity</td></tr><tr><td>PROCESS_STATE_HOME</td><td>14</td><td>后台进程，且拥有home Activity</td></tr><tr><td>PROCESS_STATE_RECEIVER</td><td>12</td><td>后台进程，且正在运行receiver</td></tr><tr><td>PROCESS_STATE_SERVICE</td><td>11</td><td>后台进程，且正在运行service</td></tr><tr><td>PROCESS_STATE_HEAVY_WEIGHT</td><td>10</td><td>后台进程，但无法执行restore，因此尽量避免kill该进程</td></tr><tr><td>PROCESS_STATE_BACKUP</td><td>9</td><td>后台进程，正在运行backup/restore操作</td></tr><tr><td>PROCESS_STATE_TRANSIENT_BACKGROUND</td><td>8</td><td>进程短暂进入后台，我们应该尽量保持运行</td></tr><tr><td>PROCESS_STATE_IMPORTANT_BACKGROUND</td><td>7</td><td>对用户很重要的进程，用户不可感知其存在</td></tr><tr><td>PROCESS_STATE_IMPORTANT_FOREGROUND</td><td>6</td><td>对用户很重要的进程，用户可感知其存在</td></tr><tr><td>PROCESS_STATE_TOP_SLEEPING</td><td>5</td><td>与PROCESS_STATE_TOP一样，但此时设备正处于休眠状态</td></tr><tr><td>PROCESS_STATE_FOREGROUND_SERVICE</td><td>4</td><td>拥有给一个前台Service</td></tr><tr><td>PROCESS_STATE_BOUND_FOREGROUND_SERVICE</td><td>3</td><td>拥有给一个前台Service，且由系统绑定</td></tr><tr><td>PROCESS_STATE_TOP</td><td>2</td><td>拥有当前用户可见的top Activity</td></tr><tr><td>PROCESS_STATE_PERSISTENT_UI</td><td>1</td><td>persistent系统进程，并正在执行UI操作</td></tr><tr><td>PROCESS_STATE_PERSISTENT</td><td>0</td><td>persistent系统进程</td></tr><tr><td>PROCESS_STATE_UNKNOWN</td><td>-1</td><td>不可知的进程</td></tr></tbody></table><h1 id="五、Read-The-Fucking-Code"><a href="#五、Read-The-Fucking-Code" class="headerlink" title="五、Read The Fucking Code"></a>五、Read The Fucking Code</h1><h2 id="5-1-lmkd"><a href="#5-1-lmkd" class="headerlink" title="5.1 lmkd"></a>5.1 lmkd</h2><p>通过前面的表格，我们可以看到：ProcessList 中定义有进程的优先级，<strong><font color="#FF0000">越重要的进程的优先级越低</font></strong> ，前台 APP 的优先级为 0，系统 APP 的优先级一般都是负值，所以一般进程管理以及杀进程都是针对上层 APP 来说的。</p><p><strong><font color="#FF0000">进程的优先级调整都在 ActivityManagerService 里面</font></strong> ，ActivityManagerService 根据进程中组件的状态去不断的计算每个进程的优先级，计算之后会及时更新到对应进程的文件节点中，<strong><font color="#FF0000">而这个对文件节点的更新并不是 AMS 完成的，而是 lmkd ，它们之间通过 socket 通信</font></strong>。 </p><p>lmkd 在手机中是一个常驻进程，用来处理上层 ActivityManager 在进行 updateOomAdj 之后，通过 socket 与 lmkd 进行通信，更新进程的优先级，如果必要则杀掉进程释放内存。</p><p>lmkd 是在 init 进程启动的时候启动的，通过解析 init.rc 文件来启动 lmkd 守护进程。在 lmkd 中有定义 lmkd.rc:</p><pre class=" language-rc"><code class="language-rc">service lmkd /system/bin/lmkd    class core    group root readproc    critical    socket lmkd seqpacket 0660 system system    writepid /dev/cpuset/system-background/tasks</code></pre><p>lmkd 会创建名为 lmkd 的 socket，节点位于/dev/socket/lmkd，该 socket 用于跟上层 framework 交互。</p><p>上层 AMS 跟 lmkd 通信主要分为三种 command，每种 command 代表一种数据控制方式，在 ProcessList 以及 lmkd 中都有定义，ProcessList 文件中的定义必须跟 lmkd.c 定义完全一致，格式如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// LMK_TARGET &lt;minfree> &lt;minkillprio> ... (up to 6 pairs)</span><span class="token comment" spellcheck="true">// LMK_PROCPRIO &lt;pid> &lt;uid> &lt;prio></span><span class="token comment" spellcheck="true">// LMK_PROCREMOVE &lt;pid></span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">byte</span> LMK_TARGET <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">byte</span> LMK_PROCPRIO <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">byte</span> LMK_PROCREMOVE <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * Supported LMKD commands */</span><span class="token keyword">enum</span> lmk_cmd <span class="token punctuation">{</span>    LMK_TARGET <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/* Associate minfree with oom_adj_score */</span>    LMK_PROCPRIO<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/* Register a process and set its oom_adj_score */</span>    LMK_PROCREMOVE<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/* Unregister a process */</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>上述3个命令的使用都通过 ProcessList.java 中的如下方法:</p><table><thead><tr><th>功能</th><th>命令</th><th>对应方法</th></tr></thead><tbody><tr><td>LMK_TARGET</td><td>更新 oom_adj</td><td>PorcessList.updateOomLevels()</td></tr><tr><td>LMK_PROCPRIO</td><td>设置进程 adj</td><td>PorcessList.setOomAdj()</td></tr><tr><td>LMK_PROCREMOVE</td><td>移除进程</td><td>PorcessList.remove()</td></tr></tbody></table><p>在开始分析 lmkd 的处理逻辑之前，lmkd.c 中有几个重要的变量与数据结构提前说明一下：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 内存级别限额</span><span class="token macro property">#<span class="token directive keyword">define</span> INKERNEL_MINFREE_PATH "/sys/module/lowmemorykiller/parameters/minfree"</span><span class="token comment" spellcheck="true">// 不同级别内存对应要杀的的优先级</span><span class="token macro property">#<span class="token directive keyword">define</span> INKERNEL_ADJ_PATH "/sys/module/lowmemorykiller/parameters/adj"</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">/* OOM score values used by both kernel and framework */</span><span class="token comment" spellcheck="true">// 优先级的最小值</span><span class="token macro property">#<span class="token directive keyword">define</span> OOM_SCORE_ADJ_MIN       (-1000)</span><span class="token comment" spellcheck="true">// 优先级的最大值</span><span class="token macro property">#<span class="token directive keyword">define</span> OOM_SCORE_ADJ_MAX       1000</span><span class="token comment" spellcheck="true">/* A threshold of minfree adjustment toward VMPRESS_LEVEL_CRITICAL (36MB) */</span><span class="token macro property">#<span class="token directive keyword">define</span> CACHED_THRESHOLD    (9216)</span><span class="token keyword">static</span> <span class="token keyword">int</span> lowmem_adj<span class="token punctuation">[</span>MAX_TARGETS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> lowmem_minfree<span class="token punctuation">[</span>MAX_TARGETS<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> CACHED_THRESHOLD <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> lowmem_targets_size<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 双向链表结构体</span><span class="token keyword">struct</span> adjslot_list <span class="token punctuation">{</span>    <span class="token keyword">struct</span> adjslot_list <span class="token operator">*</span>next<span class="token punctuation">;</span>    <span class="token keyword">struct</span> adjslot_list <span class="token operator">*</span>prev<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 进程在 lmkd 中的数据结构体</span><span class="token keyword">struct</span> proc <span class="token punctuation">{</span>    <span class="token keyword">struct</span> adjslot_list asl<span class="token punctuation">;</span>    <span class="token keyword">int</span> pid<span class="token punctuation">;</span>    uid_t uid<span class="token punctuation">;</span>    <span class="token keyword">int</span> oomadj<span class="token punctuation">;</span>    <span class="token keyword">struct</span> proc <span class="token operator">*</span>pidhash_next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 存放进程 proc 的 hashtable ，index 是通过 pid 的计算得出</span><span class="token macro property">#<span class="token directive keyword">define</span> PIDHASH_SZ 1024</span><span class="token keyword">static</span> <span class="token keyword">struct</span> proc <span class="token operator">*</span>pidhash<span class="token punctuation">[</span>PIDHASH_SZ<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 根据 pid 计算 index 的 hash 算法</span><span class="token macro property">#<span class="token directive keyword">define</span> pid_hashfn(x) ((((x) >> 8) ^ (x)) &amp; (PIDHASH_SZ - 1))</span><span class="token comment" spellcheck="true">// 进程优先级到数组的 index 之间的转换</span><span class="token comment" spellcheck="true">// 因为进程的优先级可以是负值，但是数组的 index 不能为负值</span><span class="token comment" spellcheck="true">// 不过因为这个转换只是简单加了 1000，为了方便，后面的描述中就认为是优先级直接做了 index</span><span class="token macro property">#<span class="token directive keyword">define</span> ADJTOSLOT(adj) ((adj) + -OOM_SCORE_ADJ_MIN)</span><span class="token comment" spellcheck="true">// table，类似 hashtable ，不过计算 index 的方式不是 hash ，而是 oom_score_adj 经过转换后直接作为 index</span><span class="token comment" spellcheck="true">// 数组的每个元素都是双向循环链表</span><span class="token comment" spellcheck="true">// 进程的优先级作为数组的 index</span><span class="token comment" spellcheck="true">// 即以进程的优先级为 index，从 -1000 到 +1000 + 1 大小的数组，根据优先级，同优先级的进程 index 相同</span><span class="token comment" spellcheck="true">// 每个元素是一个双向链表，这个链表上的所有 proc 的优先级都相同</span><span class="token comment" spellcheck="true">// 这样根据优先级杀进程的时候就会非常方便，要杀指定优先级的进程可以根据优先级获取到一个进程链表，逐个去杀</span><span class="token keyword">static</span> <span class="token keyword">struct</span> adjslot_list procadjslot_list<span class="token punctuation">[</span><span class="token function">ADJTOSLOT</span><span class="token punctuation">(</span>OOM_SCORE_ADJ_MAX<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p><strong><font color="#FF0000">接下来我们正式讨论lmkd！</font></strong></p><h3 id="5-1-1-main"><a href="#5-1-1-main" class="headerlink" title="5.1.1 main()"></a>5.1.1 main()</h3><p>lmkd 启动后，接下里的操作都在 /system/core/lmkd/lmkd.c 文件，首先进入 main() 方法：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc __unused<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv __unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> sched_param param <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span>sched_priority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mlockall</span><span class="token punctuation">(</span>MCL_CURRENT <span class="token operator">|</span> MCL_FUTURE<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">ALOGW</span><span class="token punctuation">(</span><span class="token string">"mlockall failed: errno=%d"</span><span class="token punctuation">,</span> errno<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置此线程的调度策略为 SCHED_FIFO，first-in-first-out，param 中主要设置 sched_priority</span>    <span class="token comment" spellcheck="true">// 由于 SCHED_FIFO 是一种实时调度策略，在这个策略下优先级从1(low) -> 99(high)</span>    <span class="token comment" spellcheck="true">// 实时线程通常会比普通线程有更高的优先级</span>    <span class="token function">sched_setscheduler</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SCHED_FIFO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化 epoll 及与 ActivityManager 的 socket 连接，等待 cmd 和 data</span>    <span class="token comment" spellcheck="true">// 💥 💥 💥 💥 💥 💥 重点讨论 💥 💥 💥 💥 💥 💥</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 进入死循环 epoll_wait 等待fd事件</span>        <span class="token function">mainloop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 💥 💥 💥 💥 💥 💥 重点讨论 💥 💥 💥 💥 💥 💥</span>    <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"exiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>前面已经提到，这个进程存在的主要作用是跟 AMS 进行通信，更新 oomAdj ，在必要的时候杀掉进程。所以在 main 函数中主要就是创建了 epoll 以及初始化 socket 并连接 ActivityManager ，然后阻塞等待上层传递 cmd 以及 data 过来。</p><h4 id="5-1-1-1-init"><a href="#5-1-1-1-init" class="headerlink" title="5.1.1.1 init()"></a>5.1.1.1 init()</h4><p>来看看 init 的逻辑：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> epoll_event epev<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    page_k <span class="token operator">=</span> <span class="token function">sysconf</span><span class="token punctuation">(</span>_SC_PAGESIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>page_k <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        page_k <span class="token operator">=</span> PAGE_SIZE<span class="token punctuation">;</span>    page_k <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建 epoll 监听文件句柄</span>    epollfd <span class="token operator">=</span> <span class="token function">epoll_create</span><span class="token punctuation">(</span>MAX_EPOLL_EVENTS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>epollfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"epoll_create failed (errno=%d)"</span><span class="token punctuation">,</span> errno<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取 lmkd 的 socket fd</span>    ctrl_lfd <span class="token operator">=</span> <span class="token function">android_get_control_socket</span><span class="token punctuation">(</span><span class="token string">"lmkd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctrl_lfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"get lmkd control socket failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 监听 lmkd socket</span>    ret <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>ctrl_lfd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"lmkd control socket listen failed (errno=%d)"</span><span class="token punctuation">,</span> errno<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    epev<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ctrl_connect_handler 里面完成了 soclet 的 accpet 以及 read 数据，并对数据进行相应的处理</span>    <span class="token comment" spellcheck="true">// 💥 💥 💥 💥 💥 💥 下面会重点讨论 💥 💥 💥 💥 💥 💥</span>    ctrl_sock<span class="token punctuation">.</span>handler_info<span class="token punctuation">.</span>handler <span class="token operator">=</span> ctrl_connect_handler<span class="token punctuation">;</span>    epev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>ctrl_sock<span class="token punctuation">.</span>handler_info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> ctrl_sock<span class="token punctuation">.</span>sock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>epev<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"epoll_ctl for lmkd control socket failed (errno=%d)"</span><span class="token punctuation">,</span> errno<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    maxevents<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 该路径是否具有可写的权限</span>    <span class="token comment" spellcheck="true">/*     * 这里，通过检验 /sys/module/lowmemorykiller/parameters/minfree 节点是否具有可写权限     *     *     #define INKERNEL_MINFREE_PATH "/sys/module/lowmemorykiller/parameters/minfree"     *      * 来判断是否使用 kernel 接口来管理 lmk 事件。     * 默认该节点是具有系统可写的权限，也就意味着 use_inkernel_interface = 1     */</span>    has_inkernel_module <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">access</span><span class="token punctuation">(</span>INKERNEL_MINFREE_PATH<span class="token punctuation">,</span> W_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    use_inkernel_interface <span class="token operator">=</span> has_inkernel_module<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这个 use_inkernel_interface 是根据是否有 “/sys/module/lowmemorykiller/parameters/minfree” 的写权限来判断的，没有的情况下就使用 kernel 空间的逻辑</span>    <span class="token comment" spellcheck="true">// 目前遇到的都是 use_inkernel_interface</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>use_inkernel_interface<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"Using in-kernel low memory killer interface"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">init_mp_common</span><span class="token punctuation">(</span>VMPRESS_LEVEL_LOW<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token operator">!</span><span class="token function">init_mp_common</span><span class="token punctuation">(</span>VMPRESS_LEVEL_MEDIUM<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token operator">!</span><span class="token function">init_mp_common</span><span class="token punctuation">(</span>VMPRESS_LEVEL_CRITICAL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"Kernel does not support memory pressure events or in-kernel low memory killer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 双向链表初始化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">ADJTOSLOT</span><span class="token punctuation">(</span>OOM_SCORE_ADJ_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        procadjslot_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token operator">&amp;</span>procadjslot_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        procadjslot_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token operator">&amp;</span>procadjslot_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="5-1-1-2-mainloop"><a href="#5-1-1-2-mainloop" class="headerlink" title="5.1.1.2 mainloop()"></a>5.1.1.2 mainloop()</h4><p>来看看 mainloop 的逻辑：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 进入死循环，然后调用 epoll_wait 阻塞等待事件的到来</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mainloop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">struct</span> epoll_event events<span class="token punctuation">[</span>maxevents<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nevents<span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">struct</span> timespec t1<span class="token punctuation">,</span> t2<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> elapsed_ms<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 等待 epoll_wait 上的事件</span>        nevents <span class="token operator">=</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span> events<span class="token punctuation">,</span> maxevents<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nevents <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"epoll_wait failed (errno=%d)"</span><span class="token punctuation">,</span> errno<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nevents<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLERR<span class="token punctuation">)</span>                <span class="token function">ALOGD</span><span class="token punctuation">(</span><span class="token string">"EPOLLERR on event #%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 当事件到来，则调用 ctrl_connect_handler 方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span>                <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span><span class="token punctuation">)</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>主循环调用 epoll_wait()，等待 epollfd 上的事件，当接收到中断或者不存在事件，则执行 continue 操作。当事件到来，则调用的 ctrl_connect_handler 方法，该方法是由 init() 过程中设定的方法（我们之前在分析 init() 的时候提过）。</p><h3 id="5-1-2-ctrl-connect-handler"><a href="#5-1-2-ctrl-connect-handler" class="headerlink" title="5.1.2 ctrl_connect_handler()"></a>5.1.2 ctrl_connect_handler()</h3><p>我们之前在 init() 中看到以下代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// ctrl_connect_handler 里面完成了 soclet 的 accpet 以及 read 数据，并对数据进行相应的处理</span>ctrl_sock<span class="token punctuation">.</span>handler_info<span class="token punctuation">.</span>handler <span class="token operator">=</span> ctrl_connect_handler<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用 ctrl_connect_handler()</span>epev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>ctrl_sock<span class="token punctuation">.</span>handler_info<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>它是专门处理 Socket 传递过来的数据的：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ctrl_connect_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> data __unused<span class="token punctuation">,</span> uint32_t events __unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> epoll_event epev<span class="token punctuation">;</span>    <span class="token keyword">int</span> free_dscock_idx <span class="token operator">=</span> <span class="token function">get_free_dsock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>free_dscock_idx <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX_DATA_CONN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ctrl_data_close</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        free_dscock_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    data_sock<span class="token punctuation">[</span>free_dscock_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>sock <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>ctrl_sock<span class="token punctuation">.</span>sock<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data_sock<span class="token punctuation">[</span>free_dscock_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>sock <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"lmkd control socket accept failed; errno=%d"</span><span class="token punctuation">,</span> errno<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"lmkd data connection established"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* use data to store data connection idx */</span>    data_sock<span class="token punctuation">[</span>free_dscock_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>handler_info<span class="token punctuation">.</span>data <span class="token operator">=</span> free_dscock_idx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用 ctrl_data_handler()</span>    data_sock<span class="token punctuation">[</span>free_dscock_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>handler_info<span class="token punctuation">.</span>handler <span class="token operator">=</span> ctrl_data_handler<span class="token punctuation">;</span>    epev<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN<span class="token punctuation">;</span>    epev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>data_sock<span class="token punctuation">[</span>free_dscock_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>handler_info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> data_sock<span class="token punctuation">[</span>free_dscock_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>sock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>epev<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"epoll_ctl for data connection socket failed; errno=%d"</span><span class="token punctuation">,</span> errno<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ctrl_data_close</span><span class="token punctuation">(</span>free_dscock_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    maxevents<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5-1-3-ctrl-data-handler"><a href="#5-1-3-ctrl-data-handler" class="headerlink" title="5.1.3 ctrl_data_handler"></a>5.1.3 ctrl_data_handler</h3><p>当事件触发，则调用 ctrl_data_handler()：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ctrl_data_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">,</span> uint32_t events<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>events <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ctrl_command_handler</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-1-4-ctrl-command-handler"><a href="#5-1-4-ctrl-command-handler" class="headerlink" title="5.1.4 ctrl_command_handler"></a>5.1.4 ctrl_command_handler</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ctrl_command_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> dsock_idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LMKD_CTRL_PACKET packet<span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">enum</span> lmk_cmd cmd<span class="token punctuation">;</span>    <span class="token keyword">int</span> nargs<span class="token punctuation">;</span>    <span class="token keyword">int</span> targets<span class="token punctuation">;</span>    len <span class="token operator">=</span> <span class="token function">ctrl_data_read</span><span class="token punctuation">(</span>dsock_idx<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>packet<span class="token punctuation">,</span> CTRL_PACKET_MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"Wrong control socket read length len=%d"</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cmd <span class="token operator">=</span> <span class="token function">lmkd_pack_get_cmd</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>    nargs <span class="token operator">=</span> len <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nargs <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">goto</span> wronglen<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将网络字节顺序转换为主机字节顺序</span>    cmd <span class="token operator">=</span> <span class="token function">ntohl</span><span class="token punctuation">(</span>ibuf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 一共三种command</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 更新内存级别以及对应级别的进程 adj</span>    <span class="token keyword">case</span> LMK_TARGET<span class="token operator">:</span>        targets <span class="token operator">=</span> nargs <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nargs <span class="token operator">&amp;</span> <span class="token number">0x1</span> <span class="token operator">||</span> targets <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>lowmem_adj<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">goto</span> wronglen<span class="token punctuation">;</span>        <span class="token function">cmd_target</span><span class="token punctuation">(</span>targets<span class="token punctuation">,</span> packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据 pid 更新 adj</span>    <span class="token keyword">case</span> LMK_PROCPRIO<span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nargs <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token keyword">goto</span> wronglen<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 💥 💥 💥 💥 💥 💥 下面会重点讨论 💥 💥 💥 💥 💥 💥</span>        <span class="token function">cmd_procprio</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据 pid 移除 proc</span>    <span class="token keyword">case</span> LMK_PROCREMOVE<span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nargs <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">goto</span> wronglen<span class="token punctuation">;</span>        <span class="token function">cmd_procremove</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"Received unknown command code %d"</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>wronglen<span class="token operator">:</span>    <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"Wrong control socket read length cmd=%d len=%d"</span><span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>获取 framework 传递过来的 buf 数据后，根据 3 种不同的命令，进入不同的分支，我们分别看下：</p><h2 id="5-2-三种数据"><a href="#5-2-三种数据" class="headerlink" title="5.2 三种数据"></a>5.2 三种数据</h2><h3 id="5-2-1-LMK-TARGET"><a href="#5-2-1-LMK-TARGET" class="headerlink" title="5.2.1 LMK_TARGET"></a>5.2.1 LMK_TARGET</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 上层逻辑是在 ProcessList.updateOomLevels 中</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">updateOomLevels</span><span class="token punctuation">(</span><span class="token keyword">int</span> displayWidth<span class="token punctuation">,</span> <span class="token keyword">int</span> displayHeight<span class="token punctuation">,</span> <span class="token keyword">boolean</span> write<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>write<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ByteBuffer buf <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>mOomAdj<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buf<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>LMK_TARGET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>mOomAdj<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buf<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mOomMinFree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token operator">/</span>PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>            buf<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>mOomAdj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">writeLmkd</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        SystemProperties<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"sys.sysctl.extra_free_kbytes"</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>reserve<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// lmkd 处理逻辑</span><span class="token macro property">#<span class="token directive keyword">define</span> INKERNEL_MINFREE_PATH "/sys/module/lowmemorykiller/parameters/minfree"</span><span class="token macro property">#<span class="token directive keyword">define</span> INKERNEL_ADJ_PATH "/sys/module/lowmemorykiller/parameters/adj"</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cmd_target</span><span class="token punctuation">(</span><span class="token keyword">int</span> ntargets<span class="token punctuation">,</span> LMKD_CTRL_PACKET packet<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">struct</span> lmk_target target<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ntargets <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>lowmem_adj<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这个 for 循环对应上面的 for 循环，将数据读出装进数组中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ntargets<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">lmkd_pack_get_target</span><span class="token punctuation">(</span>packet<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        lowmem_minfree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">.</span>minfree<span class="token punctuation">;</span>        lowmem_adj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">.</span>oom_adj_score<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    lowmem_targets_size <span class="token operator">=</span> ntargets<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用 kernel 空间的处理逻辑</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>has_inkernel_module<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> minfreestr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> killpriostr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        minfreestr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        killpriostr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 取出两个数组中的数据，以","分隔，分别拼接成 string</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lowmem_targets_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> val<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">strlcat</span><span class="token punctuation">(</span>minfreestr<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>minfreestr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">strlcat</span><span class="token punctuation">(</span>killpriostr<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>killpriostr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">snprintf</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> use_inkernel_interface <span class="token operator">?</span> lowmem_minfree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strlcat</span><span class="token punctuation">(</span>minfreestr<span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>minfreestr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">snprintf</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> use_inkernel_interface <span class="token operator">?</span> lowmem_adj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strlcat</span><span class="token punctuation">(</span>killpriostr<span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>killpriostr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将生成好的 string 写入到文件节点 minfree 以及 adj</span>        <span class="token function">writefilestring</span><span class="token punctuation">(</span>INKERNEL_MINFREE_PATH<span class="token punctuation">,</span> minfreestr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">writefilestring</span><span class="token punctuation">(</span>INKERNEL_ADJ_PATH<span class="token punctuation">,</span> killpriostr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的处理逻辑主要是：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;1. 按照顺序取出数据，装进 lmkd 的数组中。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;2. 分别将两个数组中的数取出，用”,”分隔。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;3. lowmem_minfree 中的数据拼成的 string 写到 “/sys/module/lowmemorykiller/parameters/minfree”。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;4. lowmem_adj 中的数据拼成的 string 写到 “/sys/module/lowmemorykiller/parameters/adj”。</p><h3 id="5-2-2-LMK-PROCPRIO"><a href="#5-2-2-LMK-PROCPRIO" class="headerlink" title="5.2.2 LMK_PROCPRIO"></a>5.2.2 LMK_PROCPRIO</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 上层逻辑是在 ProcessList.setOomAdj 中</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setOomAdj</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">,</span> <span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> amt<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// This indicates that the process is not started yet and so no need to proceed further.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>amt <span class="token operator">==</span> UNKNOWN_ADJ<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">elapsedRealtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ByteBuffer buf <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    buf<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>LMK_PROCPRIO<span class="token punctuation">)</span><span class="token punctuation">;</span>    buf<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    buf<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>    buf<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>amt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将 16Byte 字节写入 socket，buf 大小为 16 个字节</span>    <span class="token comment" spellcheck="true">// 依次写入 LMK_PROCPRIO(命令类型), pid(进程pid), uid(进程uid), amt(目标adj)，将这些字节通过 socket 发送给 lmkd.</span>    <span class="token function">writeLmkd</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> now <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">elapsedRealtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>now<span class="token operator">-</span>start<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">250</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token string">"ActivityManager"</span><span class="token punctuation">,</span> <span class="token string">"SLOW OOM ADJ: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>now<span class="token operator">-</span>start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms for pid "</span> <span class="token operator">+</span> pid <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> amt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// lmkd 处理逻辑</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cmd_procprio</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">,</span> <span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> oomadj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> proc <span class="token operator">*</span>procp<span class="token punctuation">;</span>    <span class="token keyword">char</span> path<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> val<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> soft_limit_mult<span class="token punctuation">;</span>    <span class="token keyword">struct</span> lmk_procprio params<span class="token punctuation">;</span>    <span class="token function">lmkd_pack_get_procprio</span><span class="token punctuation">(</span>packet<span class="token punctuation">,</span> <span class="token operator">&amp;</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oomadj <span class="token operator">&lt;</span> OOM_SCORE_ADJ_MIN <span class="token operator">||</span> oomadj <span class="token operator">></span> OOM_SCORE_ADJ_MAX<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"Invalid PROCPRIO oomadj argument %d"</span><span class="token punctuation">,</span> oomadj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// LMK_PROCPRIO 的主要作用就是更新进程的 oomAdj</span>    <span class="token comment" spellcheck="true">// 将上层传递过来的数据（pid以及优先级）写到该进程对应的文件节点：/proc/pid/oom_score_adj</span>    <span class="token function">snprintf</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/proc/%d/oom_score_adj"</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">snprintf</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> oomadj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 向节点 /proc/&lt;pid>/oom_score_adj 写入 oomAdj</span>    <span class="token function">writefilestring</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果使用 kernel 的逻辑，则 return</span>    <span class="token comment" spellcheck="true">// 即这个 command 传递过来只是更新了对应文件节点的 oom_score_adj</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>use_inkernel_interface<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>low_ram_device<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>oomadj <span class="token operator">>=</span> <span class="token number">900</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            soft_limit_mult <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>oomadj <span class="token operator">>=</span> <span class="token number">800</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            soft_limit_mult <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>oomadj <span class="token operator">>=</span> <span class="token number">700</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            soft_limit_mult <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>oomadj <span class="token operator">>=</span> <span class="token number">600</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Launcher should be perceptible, don't kill it.</span>            params<span class="token punctuation">.</span>oomadj <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>            soft_limit_mult <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>oomadj <span class="token operator">>=</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            soft_limit_mult <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>oomadj <span class="token operator">>=</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            soft_limit_mult <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>oomadj <span class="token operator">>=</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            soft_limit_mult <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>oomadj <span class="token operator">>=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            soft_limit_mult <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>oomadj <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            soft_limit_mult <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>oomadj <span class="token operator">>=</span>   <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            soft_limit_mult <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Persistent processes will have a large</span>            <span class="token comment" spellcheck="true">// soft limit 512MB.</span>            soft_limit_mult <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">snprintf</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token string">"/dev/memcg/apps/uid_%d/pid_%d/memory.soft_limit_in_bytes"</span><span class="token punctuation">,</span>             params<span class="token punctuation">.</span>uid<span class="token punctuation">,</span> params<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">snprintf</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> soft_limit_mult <span class="token operator">*</span> EIGHT_MEGA<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">writefilestring</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 从 hashtable 中查找 proc</span>    procp <span class="token operator">=</span> <span class="token function">pid_lookup</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果没有查找到，也就是说这个进程是新创建的，lmkd 维护的数据结构中还没有这个 proc，因此需要新建并添加到 hashtable 中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>procp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            procp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> proc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>procp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Oh, the irony.  May need to rebuild our state.</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            procp<span class="token operator">-</span><span class="token operator">></span>pid <span class="token operator">=</span> params<span class="token punctuation">.</span>pid<span class="token punctuation">;</span>            procp<span class="token operator">-</span><span class="token operator">></span>uid <span class="token operator">=</span> params<span class="token punctuation">.</span>uid<span class="token punctuation">;</span>            procp<span class="token operator">-</span><span class="token operator">></span>oomadj <span class="token operator">=</span> params<span class="token punctuation">.</span>oomadj<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将 proc 插入到 lmkd 中的数据结构中，主要包括两个数据结构</span>            <span class="token comment" spellcheck="true">// 更新 hashtable，通过 pid 计算 hash 值，然后存储，解决冲突是让新来的作为数组元素链表的头结点</span>            <span class="token comment" spellcheck="true">// 优先级为 index 的双向链表组成的 table</span>            <span class="token function">proc_insert</span><span class="token punctuation">(</span>procp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// hashtable 中已经有这个 proc</span>        <span class="token comment" spellcheck="true">// 但是因为优先级的变化，需要先把这个 proc 从原先的优先级 table 中对应位置的双向链表中 remove</span>        <span class="token comment" spellcheck="true">// 然后新加到新的优先级对应的双向链表中</span>        <span class="token comment" spellcheck="true">// 双向链表的添加是新来的放在头部</span>        <span class="token function">proc_unslot</span><span class="token punctuation">(</span>procp<span class="token punctuation">)</span><span class="token punctuation">;</span>        procp<span class="token operator">-</span><span class="token operator">></span>oomadj <span class="token operator">=</span> params<span class="token punctuation">.</span>oomadj<span class="token punctuation">;</span>        <span class="token function">proc_slot</span><span class="token punctuation">(</span>procp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 其中 pid_lookup：查询 hashtable，因为进程的 pid 是唯一的，然后从中取出该 pid 在 lmkd 中的 proc 结构体</span><span class="token keyword">static</span> <span class="token keyword">struct</span> proc <span class="token operator">*</span><span class="token function">pid_lookup</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> proc <span class="token operator">*</span>procp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>procp <span class="token operator">=</span> pidhash<span class="token punctuation">[</span><span class="token function">pid_hashfn</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> procp <span class="token operator">&amp;&amp;</span> procp<span class="token operator">-</span><span class="token operator">></span>pid <span class="token operator">!=</span> pid<span class="token punctuation">;</span>         procp <span class="token operator">=</span> procp<span class="token operator">-</span><span class="token operator">></span>pidhash_next<span class="token punctuation">)</span>            <span class="token punctuation">;</span>    <span class="token keyword">return</span> procp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5-2-3-LMK-PROCREMOVE"><a href="#5-2-3-LMK-PROCREMOVE" class="headerlink" title="5.2.3 LMK_PROCREMOVE"></a>5.2.3 LMK_PROCREMOVE</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 上层处理逻辑在 ProcessList.remove 中</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// This indicates that the process is not started yet and so no need to proceed further.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ByteBuffer buf <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buf<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>LMK_PROCREMOVE<span class="token punctuation">)</span><span class="token punctuation">;</span>        buf<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">writeLmkd</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// lmkd 处理逻辑</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cmd_procremove</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> lmk_procremove params<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果使用 kernel 接口，return</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>use_inkernel_interface<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">lmkd_pack_get_procremove</span><span class="token punctuation">(</span>packet<span class="token punctuation">,</span> <span class="token operator">&amp;</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 更新数据结构，pid 的 hashtable 以及进程优先级的双向链表 table</span>    <span class="token function">pid_remove</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">pid_remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> hval <span class="token operator">=</span> <span class="token function">pid_hashfn</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> proc <span class="token operator">*</span>procp<span class="token punctuation">;</span>    <span class="token keyword">struct</span> proc <span class="token operator">*</span>prevp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>procp <span class="token operator">=</span> pidhash<span class="token punctuation">[</span>hval<span class="token punctuation">]</span><span class="token punctuation">,</span> prevp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> procp <span class="token operator">&amp;&amp;</span> procp<span class="token operator">-</span><span class="token operator">></span>pid <span class="token operator">!=</span> pid<span class="token punctuation">;</span>         procp <span class="token operator">=</span> procp<span class="token operator">-</span><span class="token operator">></span>pidhash_next<span class="token punctuation">)</span>            prevp <span class="token operator">=</span> procp<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>procp<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prevp<span class="token punctuation">)</span>        pidhash<span class="token punctuation">[</span>hval<span class="token punctuation">]</span> <span class="token operator">=</span> procp<span class="token operator">-</span><span class="token operator">></span>pidhash_next<span class="token punctuation">;</span>    <span class="token keyword">else</span>        prevp<span class="token operator">-</span><span class="token operator">></span>pidhash_next <span class="token operator">=</span> procp<span class="token operator">-</span><span class="token operator">></span>pidhash_next<span class="token punctuation">;</span>    <span class="token function">proc_unslot</span><span class="token punctuation">(</span>procp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>procp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从上面的处理逻辑就能看出来，三种 command 的处理逻辑中都对 use_inkernel_interface 的情况下做了特殊处理，在 use_inkernel_interface 的情况下，做的事情都是很简单的，只是更新一下文件节点。如果不使用 kernel interface，就需要 lmkd 自己维护两个 table，在每次更新 adj 的时候去更新 table。 且在初始化的时候也能看到，如果不使用 kernel 的 lowmemorykiller，则需要 lmkd 自己获取手机内存状态，如果匹配到了 minfree 中的等级，则需要通过杀掉一些进程释放内存。</p><p>在三种数据的代码分析中，我们都看到了 writeLmkd 函数，接下来简单看下！</p><h3 id="5-2-4-writeLmkd"><a href="#5-2-4-writeLmkd" class="headerlink" title="5.2.4 writeLmkd"></a>5.2.4 writeLmkd</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeLmkd</span><span class="token punctuation">(</span>ByteBuffer buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当 socket 打开失败会尝试 3 次</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sLmkdSocket <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 打开 socket</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">openLmkdSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            将 buf 信息写入 lmkd socket            sLmkdOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>             Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Error writing to lowmemorykiller socket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                sLmkdSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>            sLmkdSocket <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查看打开 socket 的函数：</p><h3 id="5-2-5-openLmkdSocket"><a href="#5-2-5-openLmkdSocket" class="headerlink" title="5.2.5 openLmkdSocket"></a>5.2.5 openLmkdSocket</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">openLmkdSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            sLmkdSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalSocket</span><span class="token punctuation">(</span>LocalSocket<span class="token punctuation">.</span>SOCKET_SEQPACKET<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 与远程 lmkd 守护进程建立 socket 连接</span>            sLmkdSocket<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">LocalSocketAddress</span><span class="token punctuation">(</span><span class="token string">"lmkd"</span><span class="token punctuation">,</span>                        LocalSocketAddress<span class="token punctuation">.</span>Namespace<span class="token punctuation">.</span>RESERVED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sLmkdOutputStream <span class="token operator">=</span> sLmkdSocket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"lowmemorykiller daemon socket open failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sLmkdSocket <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>该方法是打开一个名为 lmkd 的 socket，类型为 LocalSocket.SOCKET_SEQPACKET，这只是一个封装，真实类型就是 SOCK_SEQPACKET。先跟远程 lmkd 守护进程建立连接，再向其通过 write() 将数据写入该 socket，再接下来进入 lmkd 过程。</p><h2 id="5-3-Kernel"><a href="#5-3-Kernel" class="headerlink" title="5.3 Kernel"></a>5.3 Kernel</h2><p>前面提过，<strong><font color="#FF0000">大多情况其实是使用 kernel interface 的，其实也就是 kernel 中的 lowmemorykiller</font></strong>。</p><p>lowmemorykiller driver 位于 kernel-x.xx/drivers/staging/android/lowmemorykiller.c。</p><p>lowmemorykiller 中是通过 linux 的 shrinker 实现的，这个是 linux 的内存回收机制的一种，由内核线程 kswapd 负责监控，在 lowmemorykiller 初始化的时候注册 register_shrinker。</p><h3 id="5-3-1-lowmemorykiller-初始化"><a href="#5-3-1-lowmemorykiller-初始化" class="headerlink" title="5.3.1 lowmemorykiller 初始化"></a>5.3.1 lowmemorykiller 初始化</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">struct</span> shrinker lowmem_shrinker <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span>scan_objects <span class="token operator">=</span> lowmem_scan<span class="token punctuation">,</span>    <span class="token punctuation">.</span>count_objects <span class="token operator">=</span> lowmem_count<span class="token punctuation">,</span>    <span class="token punctuation">.</span>seeks <span class="token operator">=</span> DEFAULT_SEEKS <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">lowmem_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token function">register_shrinker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lowmem_shrinker<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 初始化</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> __exit <span class="token function">lowmem_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">unregister_shrinker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lowmem_shrinker<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 退出</span><span class="token punctuation">}</span></code></pre><p>通过 register_shrinker 和 unregister_shrinker 分别用于初始化和退出。</p><h3 id="5-3-2-minfree-min-adj"><a href="#5-3-2-minfree-min-adj" class="headerlink" title="5.3.2 minfree/min_adj"></a>5.3.2 minfree/min_adj</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 下面两个数组分别代表了两个参数文件中的默认值，数组默认的 size 都是 9</span><span class="token comment" spellcheck="true">// 对应 "/sys/module/lowmemorykiller/parameters/adj"</span><span class="token keyword">static</span> <span class="token keyword">short</span> lowmem_adj<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token number">6</span><span class="token punctuation">,</span>    <span class="token number">12</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 对应 "/sys/module/lowmemorykiller/parameters/minfree"</span><span class="token keyword">static</span> <span class="token keyword">int</span> lowmem_adj_size <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token keyword">int</span> lowmem_minfree<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">512</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/* 6MB */</span>    <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/* 8MB */</span>    <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/* 16MB */</span>    <span class="token number">16</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/* 64MB */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> lowmem_minfree_size <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span></code></pre><h3 id="5-3-3-shrinker"><a href="#5-3-3-shrinker" class="headerlink" title="5.3.3 shrinker"></a>5.3.3 shrinker</h3><p>当内存不足时 kswapd 线程会遍历一张 shrinker 链表，并回调已注册的 shrinker 函数来回收内存 page，kswapd 还会周期性唤醒来执行内存操作。每个 zone 维护 active_list 和 inactive_list 链表，内核根据页面活动状态将 page 在这两个链表之间移动，最终通过 shrink_slab 和 shrink_zone 来回收内存页，有兴趣想进一步了解 linux 内存回收机制，可自行研究。</p><h3 id="5-3-4-lowmem-count"><a href="#5-3-4-lowmem-count" class="headerlink" title="5.3.4 lowmem_count"></a>5.3.4 lowmem_count</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">lowmem_count</span><span class="token punctuation">(</span><span class="token keyword">struct</span> shrinker <span class="token operator">*</span>s<span class="token punctuation">,</span>                  <span class="token keyword">struct</span> shrink_control <span class="token operator">*</span>sc<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">// ANON代表匿名映射，没有后备存储器；</span>  <span class="token comment" spellcheck="true">// FILE 代表文件映射； 内存计算公式 = 活动匿名内存 + 活动文件内存 + 不活动匿名内存 + 不活动文件内存</span>  <span class="token keyword">return</span> <span class="token function">global_page_state</span><span class="token punctuation">(</span>NR_ACTIVE_ANON<span class="token punctuation">)</span> <span class="token operator">+</span>           <span class="token function">global_page_state</span><span class="token punctuation">(</span>NR_ACTIVE_FILE<span class="token punctuation">)</span> <span class="token operator">+</span>           <span class="token function">global_page_state</span><span class="token punctuation">(</span>NR_INACTIVE_ANON<span class="token punctuation">)</span> <span class="token operator">+</span>           <span class="token function">global_page_state</span><span class="token punctuation">(</span>NR_INACTIVE_FILE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5-3-5-lowmem-scan"><a href="#5-3-5-lowmem-scan" class="headerlink" title="5.3.5 lowmem_scan"></a>5.3.5 lowmem_scan</h3><p>当触发 lmkd，则先杀 oom_score_adj 最大的进程，当 oom_adj 相等时，则选择 rss 最大的进程。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> unsigned <span class="token keyword">long</span> <span class="token function">lowmem_scan</span><span class="token punctuation">(</span>struct shrinker <span class="token operator">*</span>s<span class="token punctuation">,</span> struct shrink_control <span class="token operator">*</span>sc<span class="token punctuation">)</span><span class="token punctuation">{</span>    struct task_struct <span class="token operator">*</span>tsk<span class="token punctuation">;</span>    struct task_struct <span class="token operator">*</span>selected <span class="token operator">=</span> NULL<span class="token punctuation">;</span>    unsigned <span class="token keyword">long</span> rem <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tasksize<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">short</span> min_score_adj <span class="token operator">=</span> OOM_SCORE_ADJ_MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> minfree <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> selected_tasksize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">short</span> selected_oom_score_adj<span class="token punctuation">;</span>    <span class="token keyword">int</span> array_size <span class="token operator">=</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>lowmem_adj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取当前剩余内存大小</span>    <span class="token keyword">int</span> other_free <span class="token operator">=</span> <span class="token function">global_page_state</span><span class="token punctuation">(</span>NR_FREE_PAGES<span class="token punctuation">)</span> <span class="token operator">-</span> totalreserve_pages<span class="token punctuation">;</span>    <span class="token keyword">int</span> other_file <span class="token operator">=</span> <span class="token function">global_page_state</span><span class="token punctuation">(</span>NR_FILE_PAGES<span class="token punctuation">)</span> <span class="token operator">-</span>                        <span class="token function">global_page_state</span><span class="token punctuation">(</span>NR_SHMEM<span class="token punctuation">)</span> <span class="token operator">-</span>                        <span class="token function">global_page_state</span><span class="token punctuation">(</span>NR_UNEVICTABLE<span class="token punctuation">)</span> <span class="token operator">-</span>                        <span class="token function">total_swapcache_pages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 获取数组大小</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lowmem_adj_size <span class="token operator">&lt;</span> array_size<span class="token punctuation">)</span>        array_size <span class="token operator">=</span> lowmem_adj_size<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lowmem_minfree_size <span class="token operator">&lt;</span> array_size<span class="token punctuation">)</span>        array_size <span class="token operator">=</span> lowmem_minfree_size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遍历 lowmem_minfree 数组找出相应的最小 adj 值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        minfree <span class="token operator">=</span> lowmem_minfree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>other_free <span class="token operator">&lt;</span> minfree <span class="token operator">&amp;&amp;</span> other_file <span class="token operator">&lt;</span> minfree<span class="token punctuation">)</span> <span class="token punctuation">{</span>            min_score_adj <span class="token operator">=</span> lowmem_adj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>min_score_adj <span class="token operator">==</span> OOM_SCORE_ADJ_MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    selected_oom_score_adj <span class="token operator">=</span> min_score_adj<span class="token punctuation">;</span>    <span class="token function">rcu_read_lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">for_each_process</span><span class="token punctuation">(</span>tsk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        struct task_struct <span class="token operator">*</span>p<span class="token punctuation">;</span>        <span class="token keyword">short</span> oom_score_adj<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tsk<span class="token operator">-</span><span class="token operator">></span>flags <span class="token operator">&amp;</span> PF_KTHREAD<span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> <span class="token function">find_lock_task_mm</span><span class="token punctuation">(</span>tsk<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">test_tsk_thread_flag</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> TIF_MEMDIE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">time_before_eq</span><span class="token punctuation">(</span>jiffies<span class="token punctuation">,</span> lowmem_deathpending_timeout<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">task_unlock</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rcu_read_unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lowmem_shrink_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> SHRINK_STOP<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        oom_score_adj <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>signal<span class="token operator">-</span><span class="token operator">></span>oom_score_adj<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 小于目标adj的进程，则忽略</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oom_score_adj <span class="token operator">&lt;</span> min_score_adj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">task_unlock</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取的是进程的 Resident Set Size，也就是进程独占内存 + 共享库大小</span>        tasksize <span class="token operator">=</span> <span class="token function">get_mm_rss</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>mm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">task_unlock</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tasksize <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 算法关键，选择 oom_score_adj 最大的进程中，并且 rss 内存最大的进程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>selected<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>oom_score_adj <span class="token operator">&lt;</span> selected_oom_score_adj<span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>oom_score_adj <span class="token operator">==</span> selected_oom_score_adj <span class="token operator">&amp;&amp;</span>                tasksize <span class="token operator">&lt;=</span> selected_tasksize<span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        selected <span class="token operator">=</span> p<span class="token punctuation">;</span>        selected_tasksize <span class="token operator">=</span> tasksize<span class="token punctuation">;</span>        selected_oom_score_adj <span class="token operator">=</span> oom_score_adj<span class="token punctuation">;</span>        <span class="token function">lowmem_print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"select '%s' (%d), adj %d, score_adj %hd, size %d, to kill\n"</span><span class="token punctuation">,</span>                 p<span class="token operator">-</span><span class="token operator">></span>comm<span class="token punctuation">,</span> p<span class="token operator">-</span><span class="token operator">></span>pid<span class="token punctuation">,</span> <span class="token function">REVERT_ADJ</span><span class="token punctuation">(</span>oom_score_adj<span class="token punctuation">)</span><span class="token punctuation">,</span> oom_score_adj<span class="token punctuation">,</span> tasksize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>selected<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> cache_size <span class="token operator">=</span> other_file <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>PAGE_SIZE <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> cache_limit <span class="token operator">=</span> minfree <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>PAGE_SIZE <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> free <span class="token operator">=</span> other_free <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>PAGE_SIZE <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">trace_lowmemory_kill</span><span class="token punctuation">(</span>selected<span class="token punctuation">,</span> cache_size<span class="token punctuation">,</span> cache_limit<span class="token punctuation">,</span> free<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出 kill 的 log</span>        <span class="token function">lowmem_print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Killing '%s' (%d), adj %d, score_adj %hd, state(%ld)\n"</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lowmem_deathpending_timeout <span class="token operator">=</span> jiffies <span class="token operator">+</span> LOWMEM_DEATHPENDING_TIMEOUT<span class="token punctuation">;</span>        <span class="token function">set_tsk_thread_flag</span><span class="token punctuation">(</span>selected<span class="token punctuation">,</span> TIF_MEMDIE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 向选中的目标进程发送 signal 9 来杀掉目标进程</span>        <span class="token function">send_sig</span><span class="token punctuation">(</span>SIGKILL<span class="token punctuation">,</span> selected<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rem <span class="token operator">+=</span> selected_tasksize<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>d_state_is_found <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">lowmem_print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"No selected (full of D-state processes at %d)\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>min_score_adj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">lowmem_print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"lowmem_scan %lu, %x, return %lu\n"</span><span class="token punctuation">,</span>             sc<span class="token operator">-</span><span class="token operator">></span>nr_to_scan<span class="token punctuation">,</span> sc<span class="token operator">-</span><span class="token operator">></span>gfp_mask<span class="token punctuation">,</span> rem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rcu_read_unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lowmem_shrink_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> rem<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当如下节点数据发送变化时，会通过修改 lowmem_minfree[ ] 和 lowmem_adj[ ] 数组：</p><pre><code>/sys/module/lowmemorykiller/parameters/minfree/sys/module/lowmemorykiller/parameters/adj</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文主要讨论 frameworks 的 ProcessList.java 调整 adj，通过 socket 通信将事件发送给 native 的守护进程 lmkd；lmkd 再根据具体的命令来执行相应操作，其主要功能 更新进程的 oom_score_adj 值以及 lowmemorykiller 驱动的 parameters (包括 minfree 和 adj )；</p><p>最后讲到了 lowmemorykiller 驱动，通过注册 shrinker，借助 linux 标准的内存回收机制，根据当前系统可用内存以及 parameters 配置参数( adj , minfree )来选取合适的 selected_oom_score_adj，再从所有进程中选择 adj 大于该目标值的并且占用 rss 内存最大的进程，将其杀掉，从而释放出内存。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>&nbsp;01. <a href="http://gityuan.com/2016/09/17/android-lowmemorykiller/" target="_blank" rel="noopener">http://gityuan.com/2016/09/17/android-lowmemorykiller/</a><br>&nbsp;02. <a href="https://blog.csdn.net/u011733869/article/details/78820240" target="_blank" rel="noopener">https://blog.csdn.net/u011733869/article/details/78820240</a><br>&nbsp;03. <a href="https://blog.csdn.net/su749520/article/details/78595367" target="_blank" rel="noopener">https://blog.csdn.net/su749520/article/details/78595367</a><br>&nbsp;04. <a href="http://gityuan.com/2018/05/19/android-process-adj/" target="_blank" rel="noopener">http://gityuan.com/2018/05/19/android-process-adj/</a></p><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>推荐跳转：<a href="https://superandroid.pro/2019/01/01/00.%20Thinking%20in%20Android%20--%2001.%20%E5%8D%9A%E5%AE%A2%E7%B4%A2%E5%BC%95/">博客索引（Android 9.0）</a></p>]]></content>
      
      
      <categories>
          
          <category> 核心技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LowMemoryKiller </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入钻研 Android 核心机制 之 事件分发</title>
      <link href="/2018/09/26/04.he-xin-ji-zhi-xi-lie-shen-ru-yan-jiu-android-he-xin-ji-zhi-zhi-shi-jian-fen-fa/"/>
      <url>/2018/09/26/04.he-xin-ji-zhi-xi-lie-shen-ru-yan-jiu-android-he-xin-ji-zhi-zhi-shi-jian-fen-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="1-核心源码"><a href="#1-核心源码" class="headerlink" title="1. 核心源码"></a>1. 核心源码</h1><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">Activity.java</font></td><td>frameworks/base/core/java/android/app/Activity.java</td></tr><tr><td><font color="#D15FEE">DecorView.java</font></td><td>frameworks/base/core/java/com/android/internal/policy/DecorView.java</td></tr><tr><td><font color="#D15FEE">PhoneWindow.java</font></td><td>frameworks/base/core/java/com/android/internal/policy/PhoneWindow.java</td></tr><tr><td><font color="#D15FEE">View.java</font></td><td>frameworks/base/core/java/android/view/View.java</td></tr><tr><td><font color="#D15FEE">ViewGroup.java</font></td><td>frameworks/base/core/core/java/android/view/ViewGroup.java</td></tr><tr><td><font color="#D15FEE">Window.java</font></td><td>frameworks/base/core/java/android/view/Window.java</td></tr></tbody></table><p><br></p><hr><h1 id="2-基础认知"><a href="#2-基础认知" class="headerlink" title="2. 基础认知"></a>2. 基础认知</h1><p>Android <strong> “View”</strong>  虽然不是四大组件，但其并不比四大组件的地位低。而 View 的核心知识点<strong><font color="#FF0000"> “事件分发机制” </font></strong>则是不少刚入门童鞋的拦路虎（<strong>1、项目中处处遇到事件分发机制；2、面试管最喜欢提及的问题</strong>）。</p><p>在实际项目的开发过程中，ScrollView 嵌套 RecyclerView（或者 ListView）的滑动冲突这种老大难问题的理论基础就是“事件分发机制”。</p><p><strong>首先，我们了解一下“事件分发机制”中的基础知识点！</strong></p><h2 id="2-1-事件分发的对象"><a href="#2-1-事件分发的对象" class="headerlink" title="2.1 事件分发的对象"></a>2.1 事件分发的对象</h2><p>事件分发的对象：<strong><font color="#0000FF">点击事件（Touch事件）</font></strong></p><p><strong>1. 定义</strong></p><p>当用户触摸屏幕时（View 或 ViewGroup 派生的控件），将产生点击事件（Touch事件）</p><blockquote><p>Touch 事件的相关细节（发生触摸的位置、时间等）被封装成 MotionEvent 对象。</p></blockquote><p><strong>2. 事件类型</strong></p><table><thead><tr><th>事件类型</th><th>具体动作</th></tr></thead><tbody><tr><td>MotionEvent.ACTION_DOWN</td><td>按下 View（所有事件的开始）</td></tr><tr><td>MotionEvent.ACTION_UP</td><td>抬起 View（与DOWN对应）</td></tr><tr><td>MotionEvent.ACTION_MOVE</td><td>滑动 View</td></tr><tr><td>MotionEvent.ACTION_CANCEL</td><td>结束事件（非人为原因）</td></tr></tbody></table><p><br></p><p><strong>3. 事件序列</strong></p><p>所谓事件序列就是指：从手指接触屏幕至手指离开屏幕，这个过程产生的一系列事件。</p><p>一般情况下，<font color="#FF0000">事件列都是以 DOWN 事件开始、UP 事件结束，中间有无数的 MOVE 事件</font>。</p><p>如下图：</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-3bd69415acb30024.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="事件列.png"></center><p>即当一个点击事件（MotionEvent ）产生后，系统需把这个事件传递给一个具体的 View 去处理。</p><h2 id="2-2-事件分发的本质"><a href="#2-2-事件分发的本质" class="headerlink" title="2.2 事件分发的本质"></a>2.2 事件分发的本质</h2><p><strong><font color="#FF0000" size="4">本质：</font></strong> 将点击事件（MotionEvent）传递到某个具体的 View 并处理的整个过程。 </p><blockquote><p>即：事件传递的过程 = 分发过程</p></blockquote><h2 id="2-3-事件分发的对象"><a href="#2-3-事件分发的对象" class="headerlink" title="2.3 事件分发的对象"></a>2.3 事件分发的对象</h2><p><strong><font color="#FF0000" size="4">对象：</font></strong> Activity、ViewGroup、View </p><blockquote><p>Android 的 UI 界面由 Activity、ViewGroup、View 及其派生类组成。</p></blockquote><p>如下图：</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-b8a64e07cc1ff705.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="UI 界面.png"></center><h2 id="2-4-事件分发的顺序"><a href="#2-4-事件分发的顺序" class="headerlink" title="2.4 事件分发的顺序"></a>2.4 事件分发的顺序</h2><p><strong><font color="#FF0000" size="4">顺序：</font></strong> Activity -&gt; ViewGroup -&gt; View </p><blockquote><p>即：1个点击事件发生后，事件先传到 Activity、再传到 ViewGroup、最终再传到 View。</p></blockquote><p>事件分发的顺序流程图如下：</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-f9c8101c57333075.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="传递.png"></center><h2 id="2-5-事件分发的方法"><a href="#2-5-事件分发的方法" class="headerlink" title="2.5 事件分发的方法"></a>2.5 事件分发的方法</h2><p><strong><font color="#FF0000" size="4">三个重要方法：</font></strong> dispatchTouchEvent() 、onInterceptTouchEvent() 和 onTouchEvent()。</p><blockquote><p><strong><font color="#0000FF">dispatchTouchEvent（事件分发）：</font></strong>当监听到有触发事件时，首先由 Activity 进行捕获，然后事件就进入事件分发的流程。Activity 本身没有事件拦截，从而将事件传递给最外层的 View 的 dispatchTouchEvent(MotionEvent ev)，该方法将对事件进行分发。</p></blockquote><p><strong>返回值：</strong>表示是否消费了当前事件。可能是 View 本身的 onTouchEvent() 消费，也可能是子 View 的 dispatchTouchEvent() 中消费。返回 true 表示事件被消费，本次的事件终止。返回 false 表示 View 以及子 View 均没有消费事件，将调用父 View 的 onTouchEvent()。</p><blockquote><p><strong><font color="#0000FF">onInterceptTouchEvent（事件拦截）：</font></strong>当一个 ViewGroup 在接到 MotionEvent 事件序列时候，首先会调用此方法判断是否需要拦截。特别注意，这是 ViewGroup 特有的方法，View 并没有拦截方法。</p></blockquote><p><strong>返回值：</strong>是否拦截事件传递，返回 true 表示拦截了事件，那么事件将不再向下分发而是调用 View 本身的 onTouchEvent()。返回 false 表示不做拦截，事件将向下分发到子 View 的 dispatchTouchEvent()。</p><blockquote><p><strong><font color="#0000FF">onTouchEvent（事件响应）：</font></strong>真正对 MotionEvent 进行处理或者说消费的方法，在 dispatchTouchEvent() 中进行调用。</p></blockquote><p><strong>返回值：</strong>返回 true 表示事件被消费，本次的事件终止。返回 false 表示事件没有被消费，将调用父 View 的 onTouchEvent 方法，直到返回 true 为止。</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-13579e321d5f0f4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="事件分发的方法.png"></center><p><br></p><p>我们可以做个总结：</p><p>Activity 的点击事件事实上是调用它内部的 ViewGroup 的点击事件，可以直接当成 ViewGroup 处理。</p><p>ViewGroup 的相关事件方法有三个：<code>onInterceptTouchEvent</code>、<code>dispatchTouchEvent</code>、<code>onTouchEvent</code>。</p><p>View 的相关事件方法只有两个：<code>dispatchTouchEvent</code>、<code>onTouchEvent</code>。</p><hr><p>要想充分理解 Android 事件分发机制，本质上是要理解以下三个部分：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;✯ <strong><font color="#0000FF">Activity - Touch 事件分发</font></strong>&nbsp;&nbsp;&nbsp;&nbsp; ✯ <strong><font color="#0000FF">ViewGroup - Touch 事件分发</font></strong> &nbsp;&nbsp;&nbsp;&nbsp; ✯ <strong><font color="#0000FF">View - Touch 事件分发</font></strong> </p><h1 id="3-Touch-事件分发-–-Activity"><a href="#3-Touch-事件分发-–-Activity" class="headerlink" title="3. Touch 事件分发 – Activity"></a>3. Touch 事件分发 – Activity</h1><p>当一个点击事件发生时，事件最先传到 Activity 的 dispatchTouchEvent() ，进行事件分发。</p><h2 id="3-1-dispatchTouchEvent"><a href="#3-1-dispatchTouchEvent" class="headerlink" title="3.1 dispatchTouchEvent"></a>3.1 dispatchTouchEvent</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 一般事件列开始都是 DOWN 事件，即按下事件，所以此处基本是 true</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">onUserInteraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// 1</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">superDispatchTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 2</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// 3</span>    <span class="token punctuation">}</span></code></pre><p>Activity 的 dispatchTouchEvent 方法很简单，主要涉及三个方法：<code>onUserInteraction</code>、<code>superDispatchTouchEvent</code>、<code>onTouchEvent</code>。</p><h3 id="3-1-1-onUserInteraction"><a href="#3-1-1-onUserInteraction" class="headerlink" title="3.1.1 onUserInteraction"></a>3.1.1 onUserInteraction</h3><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">/**    * 说明：    *    a. 该方法为空方法，主要实现屏保功能    *    b. 当此 activity 在栈顶时，触屏点击按 home，back，menu 键等都会触发此方法    */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onUserInteraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-1-2-superDispatchTouchEvent"><a href="#3-1-2-superDispatchTouchEvent" class="headerlink" title="3.1.2 superDispatchTouchEvent"></a>3.1.2 superDispatchTouchEvent</h3><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**    * getWindow()：获取 Window 类的对象，Window 类是抽象类，    * 其唯一实现类是 PhoneWindow 类；即此处的 Window 类对象 = PhoneWindow 类对象。    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">superDispatchTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>Window 类的 superDispatchTouchEvent() 是一个抽象方法，由子类 PhoneWindow 类实现。</p><h4 id="3-1-2-1-PhoneWindow"><a href="#3-1-2-1-PhoneWindow" class="headerlink" title="3.1.2.1 PhoneWindow"></a>3.1.2.1 PhoneWindow</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneWindow</span> <span class="token keyword">extends</span> <span class="token class-name">Window</span> <span class="token keyword">implements</span> <span class="token class-name">MenuBuilder<span class="token punctuation">.</span>Callback</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// This is the top-level view of the window, containing the window decor.</span>    <span class="token keyword">private</span> DecorView mDecor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">superDispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mDecor<span class="token punctuation">.</span><span class="token function">superDispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>我们发现，Activity 的 superDispatchTouchEvent 方法最终会走到 DecorView 的 superDispatchTouchEvent 方法。</p><h4 id="3-1-2-2-DecorView"><a href="#3-1-2-2-DecorView" class="headerlink" title="3.1.2.2 DecorView"></a>3.1.2.2 DecorView</h4><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**    * public class DecorView extends FrameLayout，    *       -- DecorView 继承自 FrameLayout，是所有界面的父类。             * public class FrameLayout extends ViewGroup，            -- FrameLayout 是 ViewGroup 的子类，故 DecorView 的间接父类是 ViewGroup。    */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">superDispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用父类的方法：ViewGroup 的 dispatchTouchEvent()，</span>        <span class="token comment" spellcheck="true">// 即：将事件传递到 ViewGroup 去处理，我们在 ViewGroup 的事件分发机制继续讨论。</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>所以不难发现，Activity 的 dispatchTouchEvent 方法最终会走到 ViewGroup 的 dispatchTouchEvent 方法。</p><h3 id="3-1-3-onTouchEvent"><a href="#3-1-3-onTouchEvent" class="headerlink" title="3.1.3 onTouchEvent"></a>3.1.3 onTouchEvent</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 一般返回 true，除非 Touch 事件在 Window 边界外，所以这边我们不再继续跟踪。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mWindow<span class="token punctuation">.</span><span class="token function">shouldCloseOnTouch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="3-2-小结"><a href="#3-2-小结" class="headerlink" title="3.2 小结"></a>3.2 小结</h2><center><img src="https://upload-images.jianshu.io/upload_images/3517194-09f4ddd079792c82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Activity 事件分发处理流程.png"></center><p><br></p><p>至此，我们分析了 Activity 对点击事件的分发机制处理流程，我们不难发现，Activity 的事件走到了 ViewGroup 进行处理，那么接下来就是分析 ViewGroup 对点击事件的分发机制了。</p><p><br></p><h1 id="4-Touch-事件分发-–-ViewGroup"><a href="#4-Touch-事件分发-–-ViewGroup" class="headerlink" title="4. Touch 事件分发 – ViewGroup"></a>4. Touch 事件分发 – ViewGroup</h1><p>上面我们说过，Activity 的 dispatchTouchEvent 方法最终会走到 ViewGroup 的 dispatchTouchEvent 方法。</p><h2 id="4-1-dispatchTouchEvent"><a href="#4-1-dispatchTouchEvent" class="headerlink" title="4.1 dispatchTouchEvent"></a>4.1 dispatchTouchEvent</h2><p>ViewGroup 对点击事件的分发流程就复杂很多了，我们来细细研究：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// First touch target in the linked list of touch targets.</span><span class="token keyword">private</span> TouchTarget mFirstTouchTarget<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 这个变量用于记录事件是否被处理完</span>    <span class="token keyword">boolean</span> handled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 过滤掉一些不合法的事件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">onFilterTouchEventForSecurity</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> action <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> actionMasked <span class="token operator">=</span> action <span class="token operator">&amp;</span> MotionEvent<span class="token punctuation">.</span>ACTION_MASK<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断是不是 Down 事件，如果是的话，就要做初始化操作</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 如果是 Down 事件，就要清空掉之前的状态，</span>            <span class="token function">cancelAndClearTouchTargets</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">resetTouchState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 是否拦截事件</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> intercepted<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果当前是 Down 事件，或者已经有处理 Touch 事件的目标了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN <span class="token operator">||</span> mFirstTouchTarget <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**              * disallowIntercept：是否禁用事件拦截的功能，默认为 false，              * 我们也可以通过调用 requestDisallowInterceptTouchEvent 方法              * 对这个值进行修改。              */</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> disallowIntercept <span class="token operator">=</span>                                      <span class="token punctuation">(</span>mGroupFlags <span class="token operator">&amp;</span> FLAG_DISALLOW_INTERCEPT<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">// disallowIntercept 默认为 false 所以会走以下流程</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>disallowIntercept<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 每次事件分发时，都需调用 onInterceptTouchEvent() 询问是否拦截事件</span>                intercepted <span class="token operator">=</span> <span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 重新恢复 Action，以免 Action 在上面的步骤被人为地改变了</span>                ev<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// restore action in case it was changed</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果禁用了事件拦截功能，则 intercepted 肯定为 false</span>                intercepted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果说，事件已经初始化过了，并且没有子 View 被分配处理，</span>            <span class="token comment" spellcheck="true">// 那么就说明，这个 ViewGroup 已经拦截了这个事件。</span>            intercepted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>intercepted <span class="token operator">||</span> mFirstTouchTarget <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ev<span class="token punctuation">.</span><span class="token function">setTargetAccessibilityFocus</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Check for cancelation，标志着取消事件.</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> canceled <span class="token operator">=</span> <span class="token function">resetCancelNextUpFlag</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                   <span class="token operator">||</span> actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_CANCEL<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果需要（不取消，也没有被拦截），那么在触摸 Down 事件的时候更新触摸目标列表</span>        <span class="token comment" spellcheck="true">// split：代表当前的 ViewGroup 是不是支持分割 MotionEvent 到不同的 View 当中</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> split <span class="token operator">=</span> <span class="token punctuation">(</span>mGroupFlags <span class="token operator">&amp;</span> FLAG_SPLIT_MOTION_EVENTS<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 新的触摸对象</span>        TouchTarget newTouchTarget <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否把事件分配给了新的触摸</span>        <span class="token keyword">boolean</span> alreadyDispatchedToNewTouchTarget <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        ★ ★ ★ ★ ★ ★ ★ ★ 重点方法 ★ ★ ★ ★ ★ ★ ★ ★         <span class="token comment" spellcheck="true">// 如果事件不是取消事件，也没有拦截，那么进入此函数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>canceled <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>intercepted<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  View childWithAccessibilityFocus <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">isTargetAccessibilityFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">?</span> <span class="token function">findChildWithAccessibilityFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*             * 如果是个全新的 Down 事件，或者是有新的触摸点，或者是光标来回移动事件             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN                    <span class="token operator">||</span> <span class="token punctuation">(</span>split <span class="token operator">&amp;&amp;</span> actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_POINTER_DOWN<span class="token punctuation">)</span>                    <span class="token operator">||</span> actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_HOVER_MOVE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 事件的索引，Down 事件的 index：0</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> actionIndex <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getActionIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// always 0 for down</span>                <span class="token comment" spellcheck="true">// 获取分配的 ID 的 bit 数量</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> idBitsToAssign <span class="token operator">=</span> split <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span>                        ev<span class="token punctuation">.</span><span class="token function">getPointerId</span><span class="token punctuation">(</span>actionIndex<span class="token punctuation">)</span> <span class="token operator">:</span> TouchTarget<span class="token punctuation">.</span>ALL_POINTER_IDS<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 清理之前触摸这个指针标识，以防它们的目标变得不同步</span>                <span class="token function">removePointersFromTouchTargets</span><span class="token punctuation">(</span>idBitsToAssign<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> childrenCount <span class="token operator">=</span> mChildrenCount<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果新的触摸对象为 null &amp; 当前 ViewGroup 有子元素</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>newTouchTarget <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> childrenCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> <span class="token keyword">float</span> x <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span>actionIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">final</span> <span class="token keyword">float</span> y <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span>actionIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>View<span class="token operator">></span> preorderedList                                               <span class="token operator">=</span> <span class="token function">buildTouchDispatchChildList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">final</span> <span class="token keyword">boolean</span> customOrder <span class="token operator">=</span> preorderedList <span class="token operator">==</span> null                            <span class="token operator">&amp;&amp;</span> <span class="token function">isChildrenDrawingOrderEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">final</span> View<span class="token punctuation">[</span><span class="token punctuation">]</span> children <span class="token operator">=</span> mChildren<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 通过 for 循环，遍历了当前 ViewGroup 下的所有子 View</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> childrenCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">final</span> <span class="token keyword">int</span> childIndex <span class="token operator">=</span> <span class="token function">getAndVerifyPreorderedIndex</span><span class="token punctuation">(</span>                                childrenCount<span class="token punctuation">,</span> i<span class="token punctuation">,</span> customOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">final</span> View child <span class="token operator">=</span> <span class="token function">getAndVerifyPreorderedView</span><span class="token punctuation">(</span>                                preorderedList<span class="token punctuation">,</span> children<span class="token punctuation">,</span> childIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>childWithAccessibilityFocus <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>childWithAccessibilityFocus <span class="token operator">!=</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">continue</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            childWithAccessibilityFocus <span class="token operator">=</span> null<span class="token punctuation">;</span>                            i <span class="token operator">=</span> childrenCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 无关紧要的代码我们这边暂且省略</span>                        <span class="token comment" spellcheck="true">// 派发事件到子 View 处理</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dispatchTransformedTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                             <span class="token comment" spellcheck="true">// Child wants to receive touch within its bounds.</span>                            mLastTouchDownTime <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getDownTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>preorderedList <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> childrenCount<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">[</span>childIndex<span class="token punctuation">]</span> <span class="token operator">==</span> mChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                        mLastTouchDownIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>                                        <span class="token keyword">break</span><span class="token punctuation">;</span>                                    <span class="token punctuation">}</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                mLastTouchDownIndex <span class="token operator">=</span> childIndex<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            mLastTouchDownX <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            mLastTouchDownY <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            newTouchTarget <span class="token operator">=</span> <span class="token function">addTouchTarget</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> idBitsToAssign<span class="token punctuation">)</span><span class="token punctuation">;</span>                            alreadyDispatchedToNewTouchTarget <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 如果子 View 处理了事件，则 break，</span>                            <span class="token comment" spellcheck="true">// ViewGroup 不在处理事件（事件被拦截）。</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                             <span class="token punctuation">}</span>                        ev<span class="token punctuation">.</span><span class="token function">setTargetAccessibilityFocus</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>preorderedList <span class="token operator">!=</span> null<span class="token punctuation">)</span> preorderedList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> handled<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其实 ViewGroup 的 dispatchTouchEvent 处理流程，我们只需要关注两个重点方法：<code>onInterceptTouchEvent</code> 和 <code>dispatchTransformedTouchEvent</code>。</p><h3 id="4-1-1-onInterceptTouchEvent"><a href="#4-1-1-onInterceptTouchEvent" class="headerlink" title="4.1.1 onInterceptTouchEvent"></a>4.1.1 onInterceptTouchEvent</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span>MotionEvent ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 一堆判断，我们只需要知道一点，一般 Touch 事件默认返回 false</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token punctuation">.</span><span class="token function">isFromSource</span><span class="token punctuation">(</span>InputDevice<span class="token punctuation">.</span>SOURCE_MOUSE<span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> ev<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN                <span class="token operator">&amp;&amp;</span> ev<span class="token punctuation">.</span><span class="token function">isButtonPressed</span><span class="token punctuation">(</span>MotionEvent<span class="token punctuation">.</span>BUTTON_PRIMARY<span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> <span class="token function">isOnScrollbarThumb</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ev<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="4-1-2-dispatchTransformedTouchEvent"><a href="#4-1-2-dispatchTransformedTouchEvent" class="headerlink" title="4.1.2 dispatchTransformedTouchEvent"></a>4.1.2 dispatchTransformedTouchEvent</h3><p>dispatchTransformedTouchEvent 方法的作用，主要就是把事件下发给子 View 进行处理。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTransformedTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">,</span>             <span class="token keyword">boolean</span> cancel<span class="token punctuation">,</span> View child<span class="token punctuation">,</span> <span class="token keyword">int</span> desiredPointerIdBits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> handled<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">final</span> MotionEvent transformedEvent<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newPointerIdBits <span class="token operator">==</span> oldPointerIdBits<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> null <span class="token operator">||</span> child<span class="token punctuation">.</span><span class="token function">hasIdentityMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    handled <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token comment" spellcheck="true">// dispatchTouchEvent()</span>                    handled <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                    event<span class="token punctuation">.</span><span class="token function">offsetLocation</span><span class="token punctuation">(</span><span class="token operator">-</span>offsetX<span class="token punctuation">,</span> <span class="token operator">-</span>offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> handled<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            transformedEvent <span class="token operator">=</span> MotionEvent<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            transformedEvent <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>newPointerIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Perform any necessary transformations and dispatch.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            handled <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>transformedEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">// dispatchTouchEvent()</span>            handled <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>transformedEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// Done.</span>        transformedEvent<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> handled<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>你有没有发现？当存在子 View 的时候，会调用 View.dispatchTouchEvent 方法，如果没有则会向上调用 super.dispatchTouchEvent 方法。</p><h2 id="4-2-Demo"><a href="#4-2-Demo" class="headerlink" title="4.2 Demo"></a>4.2 Demo</h2><p><strong>Layout 层次：</strong></p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-e7ef15d4b48428d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="layout.png"></center><p><strong>Layout 代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>constraint<span class="token punctuation">.</span>ConstraintLayout xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    xmlns<span class="token operator">:</span>app<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res-auto"</span>    xmlns<span class="token operator">:</span>tools<span class="token operator">=</span><span class="token string">"http://schemas.android.com/tools"</span>    android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/my_layout"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>    tools<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">".MainActivity"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Button        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/button_01"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"Button_01"</span>        tools<span class="token operator">:</span>layout_editor_absoluteX<span class="token operator">=</span><span class="token string">"94dp"</span>        tools<span class="token operator">:</span>layout_editor_absoluteY<span class="token operator">=</span><span class="token string">"106dp"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Button        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/button_02"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"Button_02"</span>        tools<span class="token operator">:</span>layout_editor_absoluteX<span class="token operator">=</span><span class="token string">"94dp"</span>        tools<span class="token operator">:</span>layout_editor_absoluteY<span class="token operator">=</span><span class="token string">"211dp"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>constraint<span class="token punctuation">.</span>ConstraintLayout<span class="token operator">></span></code></pre><p><strong>Activity 代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>myapplication<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>constraint<span class="token punctuation">.</span>ConstraintLayout<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewGroup<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Button button_01<span class="token punctuation">;</span>    <span class="token keyword">private</span> Button button_02<span class="token punctuation">;</span>    <span class="token keyword">private</span> ViewGroup myLayout<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        button_01 <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>button_01<span class="token punctuation">)</span><span class="token punctuation">;</span>        button_02 <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>button_02<span class="token punctuation">)</span><span class="token punctuation">;</span>        myLayout <span class="token operator">=</span> <span class="token punctuation">(</span>ConstraintLayout<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>my_layout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. ViewGroup: myLayout 布局设置监听事件</span>        myLayout<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"TAG"</span><span class="token punctuation">,</span> <span class="token string">"点击了ViewGroup"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. View: button_01 设置监听事件</span>        button_01<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"TAG"</span><span class="token punctuation">,</span> <span class="token string">"点击了button_01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. View: button_02设置监听事件</span>        button_02<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"TAG"</span><span class="token punctuation">,</span> <span class="token string">"点击了button_02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>测试结果：</strong></p><pre class=" language-java"><code class="language-java"><span class="token number">09</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">51.877</span> <span class="token number">16250</span> <span class="token number">16250</span> D TAG <span class="token operator">:</span> 点击了button_01     <span class="token comment" spellcheck="true">// 点击按钮 button_01</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">53.875</span> <span class="token number">16250</span> <span class="token number">16250</span> D TAG <span class="token operator">:</span> 点击了button_02     <span class="token comment" spellcheck="true">// 点击按钮 button_02</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">54.758</span> <span class="token number">16250</span> <span class="token number">16250</span> D TAG <span class="token operator">:</span> 点击了ViewGroup     <span class="token comment" spellcheck="true">// 点击空白处</span></code></pre><p><strong>结果说明：</strong></p><ul><li>点击 Button 时，执行 Button.onClick()，但 ViewGroup_Layout 注册的 onClick() 不会执行；</li><li>只有点击空白区域时，才会执行 ViewGroup_Layout 的 onClick() 方法。</li></ul><p><strong>结论：</strong>Button 的 onClick() 将事件消费掉了，因此事件不会再继续向下传递。</p><h2 id="4-3-小结"><a href="#4-3-小结" class="headerlink" title="4.3 小结"></a>4.3 小结</h2><center><img src="https://upload-images.jianshu.io/upload_images/3517194-751a10fb6d6dcd5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ViewGroup 事件分发处理流程.png"></center><p><br></p><h1 id="5-Touch-事件分发-–-View"><a href="#5-Touch-事件分发-–-View" class="headerlink" title="5. Touch 事件分发 – View"></a>5. Touch 事件分发 – View</h1><p><strong><font color="#ff0000">这边我们先做个说明：</font></strong></p><p>其实，只要你触摸了任何控件，就一定会调用该控件的 <code>dispatchTouchEvent</code> 方法！</p><p><strong><font color="#ff00ff">严格一点来说：</font></strong>当你点击了某个控件，首先会去调用该控件所在<code>布局</code>的 <code>dispatchTouchEvent</code> 方法，然后在<code>布局</code>的 <code>dispatchTouchEvent</code> 方法中<code>找到被点击的相应控件</code>，再去调用该<code>控件</code>的 <code>dispatchTouchEvent</code>方法。</p><h3 id="3-3-1-dispatchTouchEvent"><a href="#3-3-1-dispatchTouchEvent" class="headerlink" title="3.3.1 dispatchTouchEvent"></a>3.3.1 dispatchTouchEvent</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">onFilterTouchEventForSecurity</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mViewFlags <span class="token operator">&amp;</span> ENABLED_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> ENABLED                                           <span class="token operator">&amp;&amp;</span> <span class="token function">handleScrollBarDragging</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//noinspection SimplifiableIfStatement</span>            ListenerInfo li <span class="token operator">=</span> mListenerInfo<span class="token punctuation">;</span>            ★ ★ ★ ★ ★ ★ ★ ★ 重点方法 ★ ★ ★ ★ ★ ★ ★ ★             <span class="token comment" spellcheck="true">/*             * 注意：只有以下3个条件都为真，dispatchTouchEvent() 才返回 true             *       1. li != null &amp; li.mOnTouchListener != null             *       2. (mViewFlags &amp; ENABLED_MASK) == ENABLED             *       3. mListenerInfo.mOnTouchListener.onTouch(this, event)             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>li <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> li<span class="token punctuation">.</span>mOnTouchListener <span class="token operator">!=</span> null                    <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mViewFlags <span class="token operator">&amp;</span> ENABLED_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> ENABLED                    <span class="token operator">&amp;&amp;</span> li<span class="token punctuation">.</span>mOnTouchListener<span class="token punctuation">.</span><span class="token function">onTouch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ★ ★ ★ ★ ★ ★ ★ ★ 分别分析以上几个条件 ★ ★ ★ ★ ★ ★ ★ ★             <span class="token comment" spellcheck="true">// 如果上面没有返回 true，那么执行 onTouchEvent()</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result <span class="token operator">&amp;&amp;</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 下面再分析</span>                result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p><strong><font color="0000FF">条件 1：li != null &amp; li.mOnTouchListener != null</font></strong></p></blockquote><p>mOnTouchListener 这个变量是在哪里赋值的呢？</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**      * 条件 1：mListenerInfo.mOnTouchListener != null      * 说明：mOnTouchListener 变量在 View.setOnTouchListener() 方法里赋值      */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnTouchListener</span><span class="token punctuation">(</span>OnTouchListener l<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 只要我们给控件注册了 Touch 事件，mOnTouchListener 就一定被赋值（不为空）</span>        <span class="token function">getListenerInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mOnTouchListener <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p><strong><font color="0000FF">条件 2：(mViewFlags &amp; ENABLED_MASK) == ENABLED</font></strong></p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**      * 条件 2：(mViewFlags &amp; ENABLED_MASK) == ENABLED      * 说明：      *     a. 该条件是判断当前点击的控件是否 enable      *     b. 一般 View 默认 enable，故该条件恒定为 true      */</span></code></pre><blockquote><p><strong><font color="0000FF">条件 3：mListenerInfo.mOnTouchListener.onTouch(this, event)</font></strong></p></blockquote><p>mListenerInfo.mOnTouchListener.onTouch(this, event)，其实也就是去回调控件注册 touch 事件时的 onTouch 方法。</p><p>也就是说如果我们在 onTouch 方法里返回 true，就会让这三个条件全部成立，从而整个方法直接返回 true。如果我们在 onTouch 方法里返回 false，就会再去执行 onTouchEvent(event) 方法。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**      * 条件 3：mOnTouchListener.onTouch(this, event)      * 说明：回调控件注册 Touch 事件时的 onTouch()      */</span>    button<span class="token punctuation">.</span><span class="token function">setOnTouchListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OnTouchListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouch</span><span class="token punctuation">(</span>View v<span class="token punctuation">,</span> MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-3-2-onTouchEvent"><a href="#3-3-2-onTouchEvent" class="headerlink" title="3.3.2 onTouchEvent"></a>3.3.2 onTouchEvent</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">float</span> x <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">float</span> y <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> viewFlags <span class="token operator">=</span> mViewFlags<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> action <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> clickable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>viewFlags <span class="token operator">&amp;</span> CLICKABLE<span class="token punctuation">)</span> <span class="token operator">==</span> CLICKABLE                <span class="token operator">||</span> <span class="token punctuation">(</span>viewFlags <span class="token operator">&amp;</span> LONG_CLICKABLE<span class="token punctuation">)</span> <span class="token operator">==</span> LONG_CLICKABLE<span class="token punctuation">)</span>                <span class="token operator">||</span> <span class="token punctuation">(</span>viewFlags <span class="token operator">&amp;</span> CONTEXT_CLICKABLE<span class="token punctuation">)</span> <span class="token operator">==</span> CONTEXT_CLICKABLE<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 若该控件可点击，则进入 switch 判断中</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clickable <span class="token operator">||</span> <span class="token punctuation">(</span>viewFlags <span class="token operator">&amp;</span> TOOLTIP<span class="token punctuation">)</span> <span class="token operator">==</span> TOOLTIP<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// a. 若当前的事件 = 抬起 View</span>                <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_UP<span class="token operator">:</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token keyword">boolean</span> prepressed <span class="token operator">=</span> <span class="token punctuation">(</span>mPrivateFlags <span class="token operator">&amp;</span> PFLAG_PREPRESSED<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mPrivateFlags <span class="token operator">&amp;</span> PFLAG_PRESSED<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> prepressed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mHasPerformedLongPress <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mIgnoreNextUpEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// This is a tap, so remove the longpress check</span>                            <span class="token function">removeLongPressCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>focusTaken<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>mPerformClick <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    mPerformClick <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">post</span><span class="token punctuation">(</span>mPerformClick<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token function">performClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 重点分析函数</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// b. 若当前的事件 = 按下 View</span>                <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// c. 若当前的事件 = 结束事件（非人为原因）</span>                <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_CANCEL<span class="token operator">:</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// d. 若当前的事件 = 滑动 View</span>                <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 若该控件可点击，就一定返回true</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 若该控件不可点击，就一定返回false</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="3-3-3-performClick"><a href="#3-3-3-performClick" class="headerlink" title="3.3.3 performClick"></a>3.3.3 performClick</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">performClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> result<span class="token punctuation">;</span>        <span class="token keyword">final</span> ListenerInfo li <span class="token operator">=</span> mListenerInfo<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 只要我们通过 setOnClickListener() 为控件 View 注册1个点击事件，         * 那么就会给 li.mOnClickListener 变量赋值（即不为空），         * 则会往下回调 onClick()，performClick() 返回 true。         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>li <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> li<span class="token punctuation">.</span>mOnClickListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">playSoundEffect</span><span class="token punctuation">(</span>SoundEffectConstants<span class="token punctuation">.</span>CLICK<span class="token punctuation">)</span><span class="token punctuation">;</span>            li<span class="token punctuation">.</span>mOnClickListener<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sendAccessibilityEvent</span><span class="token punctuation">(</span>AccessibilityEvent<span class="token punctuation">.</span>TYPE_VIEW_CLICKED<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyEnterOrExitForAutoFillIfNeeded</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="3-3-4-Demo"><a href="#3-3-4-Demo" class="headerlink" title="3.3.4 Demo"></a>3.3.4 Demo</h2><p><strong>Layout代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>LinearLayout xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    xmlns<span class="token operator">:</span>app<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res-auto"</span>    xmlns<span class="token operator">:</span>tools<span class="token operator">=</span><span class="token string">"http://schemas.android.com/tools"</span>    android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/my_layout"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"vertical"</span>    tools<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">".MainActivity"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Button        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/button_01"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"Button_01"</span>        tools<span class="token operator">:</span>layout_editor_absoluteX<span class="token operator">=</span><span class="token string">"94dp"</span>        tools<span class="token operator">:</span>layout_editor_absoluteY<span class="token operator">=</span><span class="token string">"106dp"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span></code></pre><p><strong>Activity代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>myapplication<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>constraint<span class="token punctuation">.</span>ConstraintLayout<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>MotionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewGroup<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>LinearLayout<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Button button_01<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        button_01 <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>button_01<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**          * 结论验证1：在回调 onTouch() 里返回 false        */</span>        <span class="token comment" spellcheck="true">// 1. 通过 OnTouchListener() 复写 onTouch()，从而手动设置返回 false</span>        button_01<span class="token punctuation">.</span><span class="token function">setOnTouchListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnTouchListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouch</span><span class="token punctuation">(</span>View v<span class="token punctuation">,</span> MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"TAG"</span><span class="token punctuation">,</span> <span class="token string">"run onTouch(), action:"</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 通过 OnClickListener（）为控件设置点击事件，</span>        <span class="token comment" spellcheck="true">//    为 mOnClickListener 变量赋值（即不为空），从而往下回调 onClick（）</span>        button_01<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"TAG"</span><span class="token punctuation">,</span> <span class="token string">"run onClick()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**          * 结论验证2：在回调 onTouch() 里返回 true          */</span>        <span class="token comment" spellcheck="true">// 1. 通过 OnTouchListener()复写 onTouch()，从而手动设置返回 true</span>        button_01<span class="token punctuation">.</span><span class="token function">setOnTouchListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnTouchListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouch</span><span class="token punctuation">(</span>View v<span class="token punctuation">,</span> MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"TAG"</span><span class="token punctuation">,</span> <span class="token string">"run onTouch(), action:"</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 通过 OnClickListener（）为控件设置点击事件，</span>        <span class="token comment" spellcheck="true">//    为 mOnClickListener 变量赋值（即不为空），从而往下回调 onClick（）</span>        button_01<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"TAG"</span><span class="token punctuation">,</span> <span class="token string">"run onClick()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>测试结果：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 通过 OnTouchListener() 复写 onTouch()，从而手动设置返回 false</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">19.299</span> <span class="token number">23350</span> <span class="token number">23350</span> D TAG <span class="token operator">:</span> run <span class="token function">onTouch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token operator">:</span><span class="token number">0</span>    <span class="token comment" spellcheck="true">// ACTION_DOWN</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">19.327</span> <span class="token number">23350</span> <span class="token number">23350</span> D TAG <span class="token operator">:</span> run <span class="token function">onTouch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token operator">:</span><span class="token number">2</span>    <span class="token comment" spellcheck="true">// ACTION_MOVE</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">19.343</span> <span class="token number">23350</span> <span class="token number">23350</span> D TAG <span class="token operator">:</span> run <span class="token function">onTouch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token operator">:</span><span class="token number">2</span>    <span class="token comment" spellcheck="true">// ACTION_MOVE</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">19.383</span> <span class="token number">23350</span> <span class="token number">23350</span> D TAG <span class="token operator">:</span> run <span class="token function">onTouch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token operator">:</span><span class="token number">2</span>    <span class="token comment" spellcheck="true">// ACTION_MOVE</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">19.384</span> <span class="token number">23350</span> <span class="token number">23350</span> D TAG <span class="token operator">:</span> run <span class="token function">onTouch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token operator">:</span><span class="token number">1</span>    <span class="token comment" spellcheck="true">// ACTION_UP</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">19.385</span> <span class="token number">23350</span> <span class="token number">23350</span> D TAG <span class="token operator">:</span> run <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 通过 OnTouchListener() 复写 onTouch()，从而手动设置返回 true</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">29.758</span> <span class="token number">23847</span> <span class="token number">23847</span> D TAG <span class="token operator">:</span> run <span class="token function">onTouch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token operator">:</span><span class="token number">0</span>    <span class="token comment" spellcheck="true">// ACTION_DOWN</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">29.773</span> <span class="token number">23847</span> <span class="token number">23847</span> D TAG <span class="token operator">:</span> run <span class="token function">onTouch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token operator">:</span><span class="token number">2</span>    <span class="token comment" spellcheck="true">// ACTION_MOVE</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">29.856</span> <span class="token number">23847</span> <span class="token number">23847</span> D TAG <span class="token operator">:</span> run <span class="token function">onTouch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token operator">:</span><span class="token number">2</span>    <span class="token comment" spellcheck="true">// ACTION_MOVE</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">29.858</span> <span class="token number">23847</span> <span class="token number">23847</span> D TAG <span class="token operator">:</span> run <span class="token function">onTouch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token operator">:</span><span class="token number">1</span>    <span class="token comment" spellcheck="true">// ACTION_UP</span></code></pre><h2 id="3-3-5-小结"><a href="#3-3-5-小结" class="headerlink" title="3.3.5 小结"></a>3.3.5 小结</h2><center><img src="https://upload-images.jianshu.io/upload_images/3517194-812be931bd432a26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="View 事件分发机制流程图.png"></center><p><br></p><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;1、Android 事件分发机制主要由【“事件分发” —&gt; “事件拦截” —&gt; “事件响应”】这三步来进行逻辑控制的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;2、ViewGroup 默认不拦截任何事件。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;3、onInterceptTouchEvent 返回 true 表示事件拦截，onTouchEvent 返回 true 表示事件消费。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;4、点击事件的分发过程如下：dispatchTouchEvent —&gt; onTouchListener 的 OnTouch 方法 —&gt; onTouchEvent —&gt; onClickListener 的 onClick 方法。从而也可以看出 onTouch 是优先于 onClick 执行，事件传递的顺序是先经过 onTouch，再传递到 onClick。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;5、Android 中的事件 onClick、onLongClick、onScroll 等，都是由多个 Touch 事件（一个 ACTION_DOWN，多个 ACTION_MOVE，一个 ACTION_UP）组成。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;6、子 View 可以通过使用 getParent().requestDisallowInterceptTouchEvent(true) ，阻止 ViewGroup 对其 MOVE 或 UP 事件进行拦截。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;7、MotionEvent 对象的四种状态：MotionEvent.ACTION_DOWN：手指按下屏幕的瞬间</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MotionEvent.ACTION_MOVE：手指在屏幕上移动</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MotionEvent.ACTION_UP：手指离开屏幕瞬间</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MotionEvent.ACTION_CANCEL：取消手势</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;8、点击某个控件，首先会去调用该控件所在布局的 dispatchTouchEvent 方法，然后在布局的 dispatchTouchEvent 方法中找到被点击的相应控件，再去调用该控件的 dispatchTouchEvent方法。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;9、如果 View 没有消费 ACTION_DOWN 事件，则之后的 ACTION_MOVE 等事件都不会再接收。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ✒&nbsp;10、事件在从 Activity.dispatchTouchEvent 往下分发的过程中：</p><blockquote><p>如果中间的 ViewGroup 都不拦截，进入最底层的 View 后，由 View.onTouchEvent 处理，如果 View 也没有消费事件，最后会返回到 Activity.onTouchEvent。<br>如果中间任何一层 ViewGroup 拦截事件，则事件不再往下分发，交由拦截的 ViewGroup 的 onTouchEvent 来处理。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 核心机制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事件分发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入钻研 Android 核心机制 之 Handler（原理篇）</title>
      <link href="/2018/09/13/04.he-xin-ji-zhi-xi-lie-shen-ru-yan-jiu-android-he-xin-ji-zhi-zhi-handler-yuan-li-pian/"/>
      <url>/2018/09/13/04.he-xin-ji-zhi-xi-lie-shen-ru-yan-jiu-android-he-xin-ji-zhi-zhi-handler-yuan-li-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="1-开篇"><a href="#1-开篇" class="headerlink" title="1. 开篇"></a>1. 开篇</h1><h2 id="1-1-核心源码"><a href="#1-1-核心源码" class="headerlink" title="1.1 核心源码"></a>1.1 核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">Looper.java</font></td><td>frameworks/base/core/java/android/os/Looper.java</td></tr><tr><td><font color="#D15FEE">Message.java</font></td><td>frameworks/base/core/java/android/os/Message.java</td></tr><tr><td><font color="#D15FEE">MessageQueue.java</font></td><td>frameworks/base/core/java/android/os/MessageQueue.java</td></tr></tbody></table><h2 id="1-2-简述"><a href="#1-2-简述" class="headerlink" title="1.2 简述"></a>1.2 简述</h2><p>在整个 Android 的源码世界里，有两大利剑，其一是 Binder 机制，另一个便是 Handler 消息机制。消息机制涉及 <strong><font color="#FF0000">MessageQueue、Message、Looper、Handler 这4个类</font></strong>。</p><p>Handler 是 Android 中引入的一种让开发者参与处理线程中消息循环的机制。我们在使用 Handler 的时候与 Message 打交道最多，Message 是 Hanlder 机制向开发人员暴露出来的相关类，可以通过 Message 类完成大部分操作 Handler 的功能。</p><p>作为一名程序员，我们不仅需要知道 <a href="https://superandroid.pro/2018/09/10/03.%20Android%20%E6%9C%BA%E5%88%B6%E7%AF%87%20--%2003.%20%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90%20Handler%20%E6%9C%BA%E5%88%B6%EF%BC%88%E7%94%A8%E6%B3%95%E7%AF%87%EF%BC%89/">Handler 怎么用</a>，还要知道其内部如何实现的，这就是我写这篇文章的目的。</p><h2 id="1-3-模型"><a href="#1-3-模型" class="headerlink" title="1.3 模型"></a>1.3 模型</h2><p><strong>消息机制（Handler）主要包含：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;<strong><font color="#3A5FCD">Message</font></strong>：消息分为硬件产生的消息（如按钮、触摸）和软件生成的消息；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;<strong><font color="#3A5FCD">MessageQueue</font></strong>：消息队列的主要功能向消息池投递消息（MessageQueue.enqueueMessage）和取走消息池的消息（MessageQueue.next）；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;<strong><font color="#3A5FCD">Handler</font></strong>：消息辅助类，主要功能向消息池发送各种消息事件（Handler.sendMessage）和处理相应消息事件（Handler.handleMessage）；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;<strong><font color="#3A5FCD">Looper</font></strong>：不断循环执行（Looper.loop），按分发机制将消息分发给目标处理者。</p><h2 id="1-4-用法"><a href="#1-4-用法" class="headerlink" title="1.4 用法"></a>1.4 用法</h2><p>Looper 源码最上面的注释里有一个使用示例如下，可以清晰的看出 Looper 的使用方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * A typical example of the implementation of a Looper thread, * using the separation of {@link #prepare} and {@link #loop} to create an * initial Handler to communicate with the Looper. */</span><span class="token keyword">class</span> <span class="token class-name">LooperThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Handler mHandler<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Looper<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">// 先初始化 Looper               </span>        mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token comment" spellcheck="true">// 创建 Handler</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// process incoming messages here</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">// 启用 Looper 的 loop 方法开启消息轮询</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接下来我们就围绕这个实例展开讲解！</p><h1 id="2-Looper"><a href="#2-Looper" class="headerlink" title="2. Looper"></a>2. Looper</h1><p>消息队列 MessageQueue 只是存储 Message 的地方，真正让消息队列循环起来的是 Looper，我们先来重点分析 Looper。</p><p>Looper 是用来使线程中的消息循环起来的。默认情况下当我们创建一个新的线程的时候，这个线程里面是没有消息队列 MessageQueue 的。为了能够让线程能够绑定一个消息队列，我们需要借助于 Looper ：<font color="#3A5FCD">首先我们要调用 Looper 的 prepare() 方法，然后调用 Looper 的 Loop() 方法。</font></p><p>需要注意的是 Looper.prepare() 和 Looper.loop() 都是在新线程的 run 方法内调用的，这两个方法都是静态方法。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>     <span class="token operator">--</span><span class="token operator">></span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> quitAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="2-1-prepare"><a href="#2-1-prepare" class="headerlink" title="2.1 prepare()"></a>2.1 prepare()</h2><p>我们来看一下 Looper.prepare()，该方法是让 Looper 做好准备，只有 Looper 准备好了之后才能调用 Looper.loop() 方法。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// sThreadLocal.get() will return null unless you've called prepare().</span>    <span class="token comment" spellcheck="true">// 每个线程都会有一个 ThreadLocal 用来保存 Looper 对象（里面包含了主线程和 MessageQueue）</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>Looper<span class="token operator">></span> sThreadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span>Looper<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 主线程的 Looper</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Looper sMainLooper<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// guarded by Looper.class</span>    <span class="token comment" spellcheck="true">// 保存消息队列</span>    <span class="token keyword">final</span> MessageQueue mQueue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 保存主线程</span>    <span class="token keyword">final</span> Thread mThread<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 无参，调用 prepare(boolean quitAllowed)，为当前线程创建 Looper</span>        <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> quitAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 一个线程只能有一个 Looper，否则抛出异常！</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Only one Looper may be created per thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建 Looper 对象，并保存到当前线程的本地存储区</span>        sThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Looper</span><span class="token punctuation">(</span>quitAllowed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">Looper</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> quitAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建消息队列 MessageQueue </span>        mQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueue</span><span class="token punctuation">(</span>quitAllowed<span class="token punctuation">)</span><span class="token punctuation">;</span>        mThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看出在 prepare 方法中首先通过 sThreadLocal.get() 拿到线程 sThreadLocal 所绑定的 Looper 对象，由于初始情况下 sThreadLocal 并没有绑定 Looper ，所以第一次调用 prepare 方法时，sThreadLocal.get() 返回 null，不会抛出异常。</p><h2 id="2-2-prepareMainLooper"><a href="#2-2-prepareMainLooper" class="headerlink" title="2.2 prepareMainLooper()"></a>2.2 prepareMainLooper()</h2><p>另外，与 prepare() 相近功能的，还有一个 prepareMainLooper() 方法，该方法主要在 ActivityThread 类中使用。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 初始化主线程的 Looper</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prepareMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置不允许退出的 Looper</span>        <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Looper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将当前的 Looper 保存为主 Looper，每个线程只允许执行一次</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sMainLooper <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"The main Looper has already been prepared."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sMainLooper <span class="token operator">=</span> <span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取主线程的 Looper</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Looper <span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Looper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> sMainLooper<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="2-3-ThreadLocal"><a href="#2-3-ThreadLocal" class="headerlink" title="2.3 ThreadLocal"></a>2.3 ThreadLocal</h2><p><strong>ThreadLocal</strong>：线程本地存储区（Thread Local Storage，简称为 TLS），每个线程都有自己的私有的本地存储区域，不同线程之间彼此不能访问对方的 TLS 区域。</p><p>我们简单了解一下 TLS 常用的操作方法：</p><h3 id="2-3-1-set"><a href="#2-3-1-set" class="headerlink" title="2.3.1 set()"></a>2.3.1 set()</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// sThreadLocal.set(new Looper(quitAllowed));   </span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取当前线程 </span>        ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 查找当前线程的本地储存区</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span>            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 保存数据 value 到当前线程 this</span>        <span class="token keyword">else</span>            <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>我们看下 getMap() 函数：</p><pre class=" language-java"><code class="language-java">    ThreadLocalMap <span class="token function">getMap</span><span class="token punctuation">(</span>Thread t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> t<span class="token punctuation">.</span>threadLocals<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>判断 map 是否为空，如果为空则创建 ThreadLocalMap ：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">void</span> <span class="token function">createMap</span><span class="token punctuation">(</span>Thread t<span class="token punctuation">,</span> T firstValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span>threadLocals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-3-2-get"><a href="#2-3-2-get" class="headerlink" title="2.3.2 get()"></a>2.3.2 get()</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// if (sThreadLocal.get() != null) {</span>    <span class="token keyword">public</span> T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取当前线程 </span>        ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 查找当前线程的本地储存区</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ThreadLocalMap<span class="token punctuation">.</span>Entry e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                T result <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 创建 ThreadLocalMap</span>    <span class="token punctuation">}</span></code></pre><p>查看 setInitialValue() ：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> T <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        T value <span class="token operator">=</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span>            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>Looper 通过如下代码保存了对当前线程的引用：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>Looper<span class="token operator">></span> sThreadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span>Looper<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// sThreadLocal 为 ThreadLocal 类型</span></code></pre><p>所以在 Looper 对象中通过 sThreadLocal 就可以找到其绑定的线程。ThreadLocal 可以通过 set() 向 ThreadLocal 中存入一个对象，然后可以通过 get() 取出存入的对象。</p><p>ThreadLocal 在 new 的时候使用了泛型，从上面的代码中我们可以看到此处的泛型类型是 Looper ，也就是我们通过 ThreadLocal 的 set() 和 get() 方法只能写入和读取 Looper 对象类型。</p><h2 id="2-4-构造函数"><a href="#2-4-构造函数" class="headerlink" title="2.4 构造函数"></a>2.4 构造函数</h2><p>我们发现源码中 Looper 的构造函数是 private，也就是说：在该类的外部我们是不能用 new Looper() 的形式得到一个 Looper 对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token function">Looper</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> quitAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>我们看下上面代码中 new Looper() 创建 Looper 对象的工作：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token function">Looper</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> quitAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueue</span><span class="token punctuation">(</span>quitAllowed<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建 MessageQueue 对象</span>    mThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 记录当前线程</span><span class="token punctuation">}</span></code></pre><p>Looper.prepare()在每个线程只允许执行一次，该方法会创建 Looper 对象，Looper 的构造方法中会创建一个 MessageQueue 对象，再将 Looper 对象保存到当前线程 TLS。</p><h2 id="2-5-loop"><a href="#2-5-loop" class="headerlink" title="2.5 loop()"></a>2.5 loop()</h2><p>讨论完 Looper.prepare() 后，我们看下 Looper.loop()的代码:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Run the message queue in this thread. Be sure to call     * {@link #quit()} to end the loop.     */</span>    <span class="token comment" spellcheck="true">// 在当前线程中开启轮询</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从 ThreadLocal 中取出当前线程的 Looper 对象</span>        <span class="token keyword">final</span> Looper me <span class="token operator">=</span> <span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>me <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"No Looper; Looper.prepare() wasn't called on this thread."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取 Looper 对象中的消息队列</span>        <span class="token keyword">final</span> MessageQueue queue <span class="token operator">=</span> me<span class="token punctuation">.</span>mQueue<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Make sure the identity of this thread is that of the local process,</span>        <span class="token comment" spellcheck="true">// and keep track of what that identity token actually is.</span>        Binder<span class="token punctuation">.</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 确保在权限检查时基于本地进程，而不是基于最初调用进程</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> ident <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 进入 loop 的主循环方法</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 死循环</span>            Message msg <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// might block(可能会堵塞)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 没有消息，则退出循环</span>                <span class="token comment" spellcheck="true">// No message indicates that the message queue is quitting.</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">final</span> <span class="token keyword">long</span> dispatchStart <span class="token operator">=</span> needStartTime <span class="token operator">?</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">long</span> dispatchEnd<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 取出消息的 target (也就是 Handler)，执行分发消息的操作</span>                msg<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">dispatchMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                dispatchEnd <span class="token operator">=</span> needEndTime <span class="token operator">?</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>traceTag <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>traceTag<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">// 消息已经分发，将 Message 放入消息池（回收操作）</span>            msg<span class="token punctuation">.</span><span class="token function">recycleUnchecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>源码不算很长，我们重点分析 loop() 里面的几个函数：</p><h3 id="2-5-1-myLooper"><a href="#2-5-1-myLooper" class="headerlink" title="2.5.1 myLooper()"></a>2.5.1 myLooper()</h3><p>前面我们说过，在执行完了 Looper.prepare() 之后，我们就可以在外部通过调用 Looper.myLooper() 获取当前线程绑定的 Looper 对象。 </p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token annotation punctuation">@Nullable</span> Looper <span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 还是通过 sThreadLocal.get()方法获取当前线程绑定的 Looper 对象</span>        <span class="token keyword">return</span> sThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span></code></pre><h3 id="2-5-2-MessageQueue"><a href="#2-5-2-MessageQueue" class="headerlink" title="2.5.2 MessageQueue"></a>2.5.2 MessageQueue</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// Looper 构造函数中创建了 mQueue，即 MessageQueue</span>    <span class="token keyword">private</span> <span class="token function">Looper</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> quitAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueue</span><span class="token punctuation">(</span>quitAllowed<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 创建 MessageQueue 对象</span>        mThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 记录当前线程</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Looper me <span class="token operator">=</span> <span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 获取当前线程绑定的 Looper 对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>me <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> MessageQueue queue <span class="token operator">=</span> me<span class="token punctuation">.</span>mQueue<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 获取 Looper 对象中的消息队列</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span></code></pre><p>变量 me 是通过静态方法 myLooper() 获得的当前线程所绑定的 Looper，me.mQueue 就是当前线程所关联的消息队列。 </p><h3 id="2-5-3-for"><a href="#2-5-3-for" class="headerlink" title="2.5.3 for()"></a>2.5.3 for()</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 进入loop的主循环方法</span></code></pre><p>我们发现for循环没有设置循环终止的条件，所以这个for循环是个死循环。 </p><h4 id="2-5-3-1-Message"><a href="#2-5-3-1-Message" class="headerlink" title="2.5.3.1 Message"></a>2.5.3.1 Message</h4><pre class=" language-java"><code class="language-java">    Message msg <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// might block </span></code></pre><p>我们通过消息队列 MessageQueue 的 next 方法从消息队列中取出一条消息，如果此时消息队列中有 Message，那么 next 方法会立即返回该 Message，如果此时消息队列中没有 Message，那么 next 方法就会阻塞式地等待获取 Message。 </p><h4 id="2-5-3-2-dispatchMessage"><a href="#2-5-3-2-dispatchMessage" class="headerlink" title="2.5.3.2 dispatchMessage()"></a>2.5.3.2 dispatchMessage()</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*package*/</span> Handler target<span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">try</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">dispatchMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        dispatchEnd <span class="token operator">=</span> needEndTime <span class="token operator">?</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>traceTag <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>traceTag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>msg 的 target 属性是 Handler，该代码的意思是让 Message 所关联的 Handler 通过 dispatchMessage 方法让 Handler 处理该 Message ，关于 Handler 的 dispatchMessage 方法将会在下面详细介绍。</p><h4 id="2-5-3-3-recycleUnchecked"><a href="#2-5-3-3-recycleUnchecked" class="headerlink" title="2.5.3.3 recycleUnchecked()"></a>2.5.3.3 recycleUnchecked()</h4><pre class=" language-java"><code class="language-java">msg<span class="token punctuation">.</span><span class="token function">recycleUnchecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 分发后的 Message 回收到消息池，以便重复利用</span></code></pre><h3 id="2-5-4-小结"><a href="#2-5-4-小结" class="headerlink" title="2.5.4 小结"></a>2.5.4 小结</h3><pre><code>loop()进入循环模式，不断重复下面的操作，直到没有消息时退出循环：1、读取 MessageQueue 的下一条 Message；2、把 Message 分发给相应的 target；3、再把分发后的 Message 回收到消息池，以便重复利用。</code></pre><h2 id="2-6-quit"><a href="#2-6-quit" class="headerlink" title="2.6 quit()"></a>2.6 quit()</h2><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 直接退出消息循环，不管是否还有消息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mQueue<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 执行完所有的消息，退出消息循环</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quitSafely</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mQueue<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>Looper.quit() 方法的实现最终调用的是 MessageQueue.quit() 方法。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">void</span> <span class="token function">quit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> safe<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当 mQuitAllowed 为 false，表示不退出，强行调用 quit() 会抛出异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mQuitAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Main thread not allowed to quit."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mQuitting<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mQuitting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>safe<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">removeAllFutureMessagesLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">removeAllMessagesLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// We can assume mPtr != 0 because mQuitting was previously false.</span>            <span class="token function">nativeWake</span><span class="token punctuation">(</span>mPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre><code>消息移除的方式：当 safe = true 时，只移除尚未触发的所有消息，对于正在触发的消息并不移除当 safe = flase 时，移除所有的消息</code></pre><h1 id="3-Handler"><a href="#3-Handler" class="headerlink" title="3. Handler"></a>3. Handler</h1><p>分析完 Loop，接下来我们看看 Handler 类，它是怎么与 Looper 和 MessageQueue 一起搭配工作的。</p><h2 id="3-1-构造函数"><a href="#3-1-构造函数" class="headerlink" title="3.1 构造函数"></a>3.1 构造函数</h2><p>两种构造函数：无参和有参！</p><h3 id="3-1-1-无参构造"><a href="#3-1-1-无参构造" class="headerlink" title="3.1.1 无参构造"></a>3.1.1 无参构造</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span>Callback callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> async<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> async<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 主线程调用的构造方法，主线程已经调用了 Looper.prepareMainLooper();     */</span>    <span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span>Callback callback<span class="token punctuation">,</span> <span class="token keyword">boolean</span> async<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 匿名类、内部类或本地类都必须申明为 static，否则会警告可能出现内存泄露</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>FIND_POTENTIAL_LEAKS<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 默认为 false</span>            <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span><span class="token operator">></span> klass <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>klass<span class="token punctuation">.</span><span class="token function">isAnonymousClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> klass<span class="token punctuation">.</span><span class="token function">isMemberClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> klass<span class="token punctuation">.</span><span class="token function">isLocalClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span>klass<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> Modifier<span class="token punctuation">.</span>STATIC<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"The following Handler class should be static or leaks might occur: "</span> <span class="token operator">+</span>                    klass<span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 必须先执行 Looper.prepare()，才能获取 Looper 对象，否则为null</span>        mLooper <span class="token operator">=</span> Looper<span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mLooper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                <span class="token string">"Can't create handler inside thread that has not called Looper.prepare()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mQueue <span class="token operator">=</span> mLooper<span class="token punctuation">.</span>mQueue<span class="token punctuation">;</span>        mCallback <span class="token operator">=</span> callback<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 回调方法</span>        mAsynchronous <span class="token operator">=</span> async<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置消息是否为异步处理方式</span>    <span class="token punctuation">}</span></code></pre><p>对于 Handler 的无参构造方法，默认采用当前线程 TLS 中的 Looper 对象，并且 callback 回调方法为 null，且消息为同步处理方式。只要执行的 Looper.prepare() 方法，那么便可以获取有效的 Looper 对象。</p><h3 id="3-1-2-有参构造"><a href="#3-1-2-有参构造" class="headerlink" title="3.1.2 有参构造"></a>3.1.2 有参构造</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span>Looper looper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>looper<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span>Looper looper<span class="token punctuation">,</span> Callback callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>looper<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 第二种构造方法，专门给子线程中创建 Handler 时使用的     */</span>    <span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span>Looper looper<span class="token punctuation">,</span> Callback callback<span class="token punctuation">,</span> <span class="token keyword">boolean</span> async<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mLooper <span class="token operator">=</span> looper<span class="token punctuation">;</span>        mQueue <span class="token operator">=</span> looper<span class="token punctuation">.</span>mQueue<span class="token punctuation">;</span>        mCallback <span class="token operator">=</span> callback<span class="token punctuation">;</span>        mAsynchronous <span class="token operator">=</span> async<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>Handler 类在构造方法中，可指定 Looper，Callback 回调方法以及消息的处理方式(同步或异步)，对于无参的 handler，默认是当前线程的 Looper。</p><h2 id="3-2-post"><a href="#3-2-post" class="headerlink" title="3.2 post"></a>3.2 post</h2><p>我们看下 post() 源码处理流程：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 发送 Runnable 消息</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">post</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 可以看到内部调用了 getPostMessage 方法，该方法传入一个 Runnable 对象，得到一个 Message 对象</span>       <span class="token keyword">return</span>  <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span><span class="token function">getPostMessage</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Message <span class="token function">getPostMessage</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Message m <span class="token operator">=</span> Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span>callback <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">return</span> m<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>通过上面的代码我们可以看到在 getPostMessage 方法中，我们创建了一个 Message 对象，并将传入的 Runnable 对象赋值给 Message 的 callback 成员字段，然后返回该 Message ，然后在 post 方法中该携带有 Runnable 信息的 Message 传入到 sendMessageDelayed 方法中。</p><h2 id="3-3-sendMessage"><a href="#3-3-sendMessage" class="headerlink" title="3.3 sendMessage"></a>3.3 sendMessage</h2><p>我们看下 sendMessage() 源码处理流程：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-4-sendMessageDelayed"><a href="#3-4-sendMessageDelayed" class="headerlink" title="3.4 sendMessageDelayed"></a>3.4 sendMessageDelayed</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> delayMillis<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delayMillis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            delayMillis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">sendMessageAtTime</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> delayMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 最终调 sendMessageAtTime()</span>    <span class="token punctuation">}</span></code></pre><p>通过以上代码可以看书：sendMessage() 调用了 sendMessageDelayed() ，sendMessageDelayed() 又调用了 sendMessageAtTime()。</p><h2 id="3-5-sendMessageAtTime"><a href="#3-5-sendMessageAtTime" class="headerlink" title="3.5 sendMessageAtTime"></a>3.5 sendMessageAtTime</h2><p>在 Handler 中所有可以直接或间接向消息队列发送 Message 的方法最终都调用了 sendMessageAtTime 方法，该方法的源码如下：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sendMessageAtTime</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> uptimeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MessageQueue queue <span class="token operator">=</span> mQueue<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            RuntimeException e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                    <span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">" sendMessageAtTime() called with no mQueue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token string">"Looper"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> uptimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-6-enqueueMessage"><a href="#3-6-enqueueMessage" class="headerlink" title="3.6 enqueueMessage"></a>3.6 enqueueMessage</h3><p>我们发现 sendMessageAtTime() 方法内部调用了 enqueueMessage() 函数：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span>MessageQueue queue<span class="token punctuation">,</span> Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> uptimeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mAsynchronous<span class="token punctuation">)</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">.</span><span class="token function">setAsynchronous</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">enqueueMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> uptimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>我们需要重点注意两行代码：</p><pre class=" language-java"><code class="language-java">msg<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 将 Message 的 target 绑定为当前的 Handler </span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 变量 queue 表示的是 Handler 所绑定的消息队列 MessageQueue ，通过调用 queue.enqueueMessage(msg, uptimeMillis) 将 Message 放入到消息队列中。</span>queue<span class="token punctuation">.</span><span class="token function">enqueueMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> uptimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-7-dispatchMessage"><a href="#3-7-dispatchMessage" class="headerlink" title="3.7 dispatchMessage()"></a>3.7 dispatchMessage()</h2><p>在 Looper.loop() 中，当发现有消息时，调用消息的目标 Handler，执行 dispatchMessage() 方法来分发消息。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*package*/</span> Runnable callback<span class="token punctuation">;</span>    <span class="token keyword">final</span> Callback mCallback<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callback</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * @param msg A {@link android.os.Message Message} object         * @return True if no further handling is desired         */</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Handle system messages here.     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatchMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>callback <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果消息体是 Runnable 就执行 run()</span>            <span class="token function">handleCallback</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallback <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 当 Handler 存在 Callback 成员变量时，回调方法 Callback 里面的逻辑</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallback<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Handler 自身的回调方法 handleMessage()</span>            <span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>我们需要重点分析下这个函数！</p><p>首先会判断 msg.callback 存不存在，msg.callback 是 Runnable 类型，<strong><font color="#FF0000">如果 msg.callback 存在，那么说明该 Message 是通过执行 Handler 的 post() 系列方法将 Message 放入到消息队列中的</font></strong>，这种情况下会执行 handleCallback(msg)。</p><h3 id="3-7-1-handleCallback"><a href="#3-7-1-handleCallback" class="headerlink" title="3.7.1 handleCallback"></a>3.7.1 handleCallback</h3><p>源码如下：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">handleCallback</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        message<span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这样我们就清楚地看到我们执行了 msg.callback 的 run 方法，也就是执行了 post() 所传递的 Runnable 对象的 run 方法。</p><h3 id="3-7-2-mCallback"><a href="#3-7-2-mCallback" class="headerlink" title="3.7.2 mCallback"></a>3.7.2 mCallback</h3><p>如果我们不是通过 post() 系列方法将 Message 放入到消息队列中的，那么 msg.callback 就是 null ，代码继续往下执行。</p><p>接着我们会判断 Handler 的成员字段 mCallback 存不存在。mCallback 是 Hanlder.Callback 类型的，我们在上面提到过，在 Handler 的构造函数中我们可以传递 Hanlder.Callback 类型的对象，该对象需要实现 handleMessage 方法，如果我们在构造函数中传递了该 Callback 对象，那么我们就会让 Callback 的 handleMessage 方法来处理 Message。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">final</span> Callback mCallback<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callback</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * @param msg A {@link android.os.Message Message} object         * @return True if no further handling is desired         */</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>如果我们在构造函数中没有传入 Callback 类型的对象，那么 mCallback 就为 null ，那么我们会调用 Handler 自身的 hanldeMessage 方法，该方法默认是个空方法，我们需要自己重写实现该方法。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Subclasses must implement this to receive messages.     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 空函数</span>    <span class="token punctuation">}</span></code></pre><p>综上所述，我们可以看到 Handler 提供了三种途径处理 Message ，而且处理有前后优先级之分：首先尝试让 post() 中传递的 Runnable 执行，其次尝试让 Handler 构造函数中传入的 Callback 的 handleMessage 方法处理，最后才是让 Handler 自身的 handleMessage 方法处理Message。</p><h2 id="3-8-Callback"><a href="#3-8-Callback" class="headerlink" title="3.8 Callback"></a>3.8 Callback</h2><p>Callback 是 Handle r中的内部接口，需要实现其内部的 handleMessage 方法，Callback 代码如下：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callback</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>Handler.Callback 是用来处理 Message 的一种手段，如果没有传递该参数，那么就应该重写 Handler 的 handleMessage 方法，也就是说为了使得 Handler 能够处理 Message ，有两种办法：</p><ol><li><p>向 Hanlder 的构造函数传入一个 Handler.Callback 对象，并实现 Handler.Callback 的 handleMessage 方法 </p></li><li><p>无需向 Hanlder 的构造函数传入 Handler.Callback 对象，但是需要重写 Handler 本身的 handleMessage 方法 </p></li></ol><p>也就是说无论哪种方式，我们都得通过某种方式实现 handleMessage 方法，这点与 Java 中对 Thread 的设计有异曲同工之处。 </p><pre><code>在Java中，如果我们想使用多线程，有两种办法：1. 向 Thread 的构造函数传入一个 Runnable 对象，并实现 Runnable 的 run 方法2. 无需向 Thread 的构造函数传入 Runnable 对象，但是要重写 Thread 本身的 run 方法 所以只要用过多线程 Thread，应该就对 Hanlder 这种需要实现 handleMessage 的两种方式了然于心了。</code></pre><h1 id="4-MessageQueue"><a href="#4-MessageQueue" class="headerlink" title="4. MessageQueue"></a>4. MessageQueue</h1><p>每个线程内部都维护了一个消息队列 —— MessageQueue。消息队列 MessageQueue，顾名思义，就是存放消息的队列。那队列中存储的消息是什么呢？</p><p><strong><font color="#FF0000">我们假设一个场景：</font></strong>在 UI 界面上单击了某个按钮，而此时程序又恰好收到了某个广播事件，那我们如何处理这两件事呢？因为一个线程在某一时刻只能处理一件事情，不能同时处理多件事情，所以我们不能同时处理按钮的单击事件和广播事件，我们只能挨个对其进行处理，只要挨个处理就要有处理的先后顺序。</p><p>为此 Android 把 UI 界面上单击按钮的事件封装成了一个 Message ，将其放入到 MessageQueue 里面去，即将单击按钮事件的 Message 入栈到消息队列中，然后再将广播事件的封装成 Message ，也将其入栈到消息队列中。</p><p>也就是说一个 Message 对象表示的是线程需要处理的一件事情，消息队列就是一堆需要处理的 Message 的池。线程 Thread 会依次取出消息队列中的消息，依次对其进行处理。</p><p>MessageQueue 中有两个比较重要的方法，一个是 enqueueMessage 方法，一个是 next 方法。<font color="#0000FF">enqueueMessage 方法用于将一个 Message 放入到消息队列 MessageQueue 中，next 方法是从消息队列 MessageQueue 中阻塞式地取出一个 Message</font>。</p><h2 id="4-1-创建-MessageQueue"><a href="#4-1-创建-MessageQueue" class="headerlink" title="4.1 创建 MessageQueue"></a>4.1 创建 MessageQueue</h2><p>在 Looper 中创建了 MessageQueue：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token function">Looper</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> quitAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueue</span><span class="token punctuation">(</span>quitAllowed<span class="token punctuation">)</span><span class="token punctuation">;</span>        mThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 构造函数，quitAllowed 用来标识是否允许退出</span>    <span class="token function">MessageQueue</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> quitAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 主线程是不允许退出的（不然会退出整个程序），子线程可以退出</span>        mQuitAllowed <span class="token operator">=</span> quitAllowed<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过 native 方法初始化消息队列，其中 mPtr 是供 native 代码使用</span>        mPtr <span class="token operator">=</span> <span class="token function">nativeInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="4-2-next"><a href="#4-2-next" class="headerlink" title="4.2 next()"></a>4.2 next()</h2><pre class=" language-java"><code class="language-java">    Message <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> ptr <span class="token operator">=</span> mPtr<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 当消息循环已经退出，则直接返回</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 循环迭代的首次为 -1</span>        <span class="token keyword">int</span> pendingIdleHandlerCount <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -1 only during first iteration</span>        <span class="token keyword">int</span> nextPollTimeoutMillis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextPollTimeoutMillis <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Binder<span class="token punctuation">.</span><span class="token function">flushPendingCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 阻塞操作，当等待 nextPollTimeoutMillis 时长，或者消息队列被唤醒，都会返回</span>            <span class="token function">nativePollOnce</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> nextPollTimeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Try to retrieve the next message.  Return if found.</span>                <span class="token keyword">final</span> <span class="token keyword">long</span> now <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Message prevMsg <span class="token operator">=</span> null<span class="token punctuation">;</span>                Message msg <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span>target <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 当消息 Handler 为空时，查询 MessageQueue 中的下一条异步消息 msg，则退出循环</span>                    <span class="token keyword">do</span> <span class="token punctuation">{</span>                        prevMsg <span class="token operator">=</span> msg<span class="token punctuation">;</span>                        msg <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>msg<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">&lt;</span> msg<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 当异步消息触发时间大于当前时间，则设置下一次轮询的超时时长</span>                        nextPollTimeoutMillis <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>when <span class="token operator">-</span> now<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 取出一条消息，消息队列往后移动一个</span>                        mBlocked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>prevMsg <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            prevMsg<span class="token punctuation">.</span>next <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            mMessages <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        msg<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 设置消息的使用状态，即 flags |= FLAG_IN_USE，表示已使用</span>                        msg<span class="token punctuation">.</span><span class="token function">markInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 成功地获取 MessageQueue 中的下一条即将要执行的消息</span>                        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 没有消息</span>                    nextPollTimeoutMillis <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 消息正在退出，返回 null</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mQuitting<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 当消息队列为空，或者是消息队列的第一个消息时</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingIdleHandlerCount <span class="token operator">&lt;</span> <span class="token number">0</span>                        <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mMessages <span class="token operator">==</span> null <span class="token operator">||</span> now <span class="token operator">&lt;</span> mMessages<span class="token punctuation">.</span>when<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    pendingIdleHandlerCount <span class="token operator">=</span> mIdleHandlers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingIdleHandlerCount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 没有 idle handlers 需要运行，则循环并等待</span>                    mBlocked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingIdleHandlers <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mPendingIdleHandlers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IdleHandler</span><span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>pendingIdleHandlerCount<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                mPendingIdleHandlers <span class="token operator">=</span> mIdleHandlers<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>mPendingIdleHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 只有第一次循环时，会运行 idle handlers，执行完成后，重置 pendingIdleHandlerCount 为 0</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pendingIdleHandlerCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> IdleHandler idler <span class="token operator">=</span> mPendingIdleHandlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                mPendingIdleHandlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 去掉 handler 的引用</span>                <span class="token keyword">boolean</span> keep <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    keep <span class="token operator">=</span> idler<span class="token punctuation">.</span><span class="token function">queueIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// idle 时执行的方法</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">wtf</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"IdleHandler threw exception"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keep<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mIdleHandlers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>idler<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 重置 idle handler 个数为 0，以保证不会再次重复运行</span>            pendingIdleHandlerCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 当调用一个空闲 handler 时，一个新 message 能够被分发，因此无需等待可以直接查询 pending message</span>            nextPollTimeoutMillis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>nativePollOnce 是阻塞操作，其中 nextPollTimeoutMillis 代表下一个消息到来前，还需要等待的时长；当 nextPollTimeoutMillis = -1 时，表示消息队列中无消息，会一直等待下去。</p><p>当处于空闲时，往往会执行 IdleHandler 中的方法。当 nativePollOnce() 返回后，next() 从 mMessages 中提取一个消息。</p><h2 id="4-3-enqueueMessage"><a href="#4-3-enqueueMessage" class="headerlink" title="4.3 enqueueMessage()"></a>4.3 enqueueMessage()</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">boolean</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> when<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 每一个普通 Message 必须有一个 target</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>target <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Message must have a target."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">isInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">" This message is already in use."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 正在退出时，回收 msg，加入到消息池</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mQuitting<span class="token punctuation">)</span> <span class="token punctuation">{</span>                IllegalStateException e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                        msg<span class="token punctuation">.</span>target <span class="token operator">+</span> <span class="token string">" sending message to a Handler on a dead thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                msg<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            msg<span class="token punctuation">.</span><span class="token function">markInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            msg<span class="token punctuation">.</span>when <span class="token operator">=</span> when<span class="token punctuation">;</span>            Message p <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>            <span class="token keyword">boolean</span> needWake<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">||</span> when <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> when <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// p 为 null (代表MessageQueue没有消息） 或者 msg 的触发时间是队列中最早的，则进入该该分支</span>                msg<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                mMessages <span class="token operator">=</span> msg<span class="token punctuation">;</span>                needWake <span class="token operator">=</span> mBlocked<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 当阻塞时需要唤醒</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 将消息按时间顺序插入到 MessageQueue。一般地，不需要唤醒事件队列，除非</span>                <span class="token comment" spellcheck="true">// 消息队头存在 barrier，并且同时 Message 是队列中最早的异步消息</span>                needWake <span class="token operator">=</span> mBlocked <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>target <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Message prev<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    prev <span class="token operator">=</span> p<span class="token punctuation">;</span>                    p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">||</span> when <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>needWake <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        needWake <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                msg<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// invariant: p == prev.next</span>                prev<span class="token punctuation">.</span>next <span class="token operator">=</span> msg<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 消息没有退出，我们认为此时 mPtr != 0</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>needWake<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">nativeWake</span><span class="token punctuation">(</span>mPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>MessageQueue 是按照 Message 触发时间的先后顺序排列的，队头的消息是将要最早触发的消息。当有消息需要加入消息队列时，会从队列头开始遍历，直到找到消息应该插入的合适位置，以保证所有消息的时间顺序。</p><h2 id="4-4-removeMessages"><a href="#4-4-removeMessages" class="headerlink" title="4.4 removeMessages()"></a>4.4 removeMessages()</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">void</span> <span class="token function">removeMessages</span><span class="token punctuation">(</span>Handler h<span class="token punctuation">,</span> <span class="token keyword">int</span> what<span class="token punctuation">,</span> Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Message p <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 从消息队列的头部开始，移除所有符合条件的消息</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>target <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>what <span class="token operator">==</span> what                   <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>object <span class="token operator">==</span> null <span class="token operator">||</span> p<span class="token punctuation">.</span>obj <span class="token operator">==</span> object<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Message n <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                mMessages <span class="token operator">=</span> n<span class="token punctuation">;</span>                p<span class="token punctuation">.</span><span class="token function">recycleUnchecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                p <span class="token operator">=</span> n<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 移除剩余的符合要求的消息</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Message n <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>target <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>what <span class="token operator">==</span> what                        <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>object <span class="token operator">==</span> null <span class="token operator">||</span> n<span class="token punctuation">.</span>obj <span class="token operator">==</span> object<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Message nn <span class="token operator">=</span> n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        n<span class="token punctuation">.</span><span class="token function">recycleUnchecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        p<span class="token punctuation">.</span>next <span class="token operator">=</span> nn<span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                p <span class="token operator">=</span> n<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这个移除消息的方法，采用了两个 while 循环，第一个循环是从队头开始，移除符合条件的消息，第二个循环是从头部移除完连续的满足条件的消息之后，再从队列后面继续查询是否有满足条件的消息需要被移除。</p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>最后用一张图，来表示整个消息机制：<br><br></p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-bd6811a7ae7e3e63.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="handler_java.jpg"></center><p><strong>图解：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;Handler 通过 sendMessage() 发送 Message 到 MessageQueue 队列；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;Looper 通过 loop()，不断提取出达到触发条件的 Message，并将 Message 交给 target 来处理；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;经过 dispatchMessage() 后，交回给 Handler 的 handleMessage() 来进行相应地处理；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;将 Message 加入 MessageQueue 时，往管道写入字符，可以会唤醒 loop 线程；如果 MessageQueue 中没有 Message，并处于 Idle 状态，则会执行 IdelHandler 接口中的方法，往往用于做一些清理性地工作。</p><h1 id="参考Blog"><a href="#参考Blog" class="headerlink" title="参考Blog"></a>参考Blog</h1><p>&nbsp; 01. <a href="https://blog.csdn.net/iispring/article/details/47180325" target="_blank" rel="noopener">https://blog.csdn.net/iispring/article/details/47180325</a><br>&nbsp; 02. <a href="http://gityuan.com/2015/12/26/handler-message-framework/" target="_blank" rel="noopener">http://gityuan.com/2015/12/26/handler-message-framework/</a></p><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>推荐跳转：<a href="https://superandroid.pro/2019/01/01/00.%20Thinking%20in%20Android%20--%2001.%20%E5%8D%9A%E5%AE%A2%E7%B4%A2%E5%BC%95/">博客索引（Android 9.0）</a></p>]]></content>
      
      
      <categories>
          
          <category> 核心机制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Handler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入钻研 Android 核心机制 之 Handler（用法篇）</title>
      <link href="/2018/09/10/04.he-xin-ji-zhi-xi-lie-shen-ru-yan-jiu-android-he-xin-ji-zhi-zhi-handler-yong-fa-pian/"/>
      <url>/2018/09/10/04.he-xin-ji-zhi-xi-lie-shen-ru-yan-jiu-android-he-xin-ji-zhi-zhi-handler-yong-fa-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="1-开篇"><a href="#1-开篇" class="headerlink" title="1. 开篇"></a>1. 开篇</h1><h2 id="1-1-引出问题"><a href="#1-1-引出问题" class="headerlink" title="1.1 引出问题"></a>1.1 引出问题</h2><p>在 Android 开发中，我们经常会遇到这样一种情况：在 UI 界面上进行某项操作后要执行一段很耗时的代码，比如我们在界面上点击了一个 “下载” 按钮，那么我们需要执行网络请求，这是一个耗时操作。</p><p>为了保证不影响 UI 线程，所以我们会创建一个新的线程去执行我们的耗时代码。当耗时操作完成时，需要更新 UI 界面以告知用户操作完成了。</p><h2 id="1-2-代码实例"><a href="#1-2-代码实例" class="headerlink" title="1.2 代码实例"></a>1.2 代码实例</h2><p>比如，我们看以下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>handlerdemo<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">Button<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> TextView textView <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> Button btnDownload <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        textView <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView<span class="token punctuation">)</span><span class="token punctuation">;</span>        btnDownload <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btnDownload<span class="token punctuation">)</span><span class="token punctuation">;</span>        btnDownload<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DownLoadThread downLoadThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DownLoadThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        downLoadThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">DownLoadThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始下载文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下载完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"文件下载完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 执行后，此处崩溃！！！</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-3-执行结果"><a href="#1-3-执行结果" class="headerlink" title="1.3 执行结果"></a>1.3 执行结果</h2><pre class=" language-java"><code class="language-java">E<span class="token operator">/</span>AndroidRuntime<span class="token operator">:</span> FATAL EXCEPTION<span class="token operator">:</span> Thread<span class="token operator">-</span><span class="token number">4</span>    Process<span class="token operator">:</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>handlerdemo<span class="token punctuation">,</span> PID<span class="token operator">:</span> <span class="token number">14415</span>    android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewRootImpl$CalledFromWrongThreadException<span class="token operator">:</span> Only the original thread that created a view hierarchy can touch its views<span class="token punctuation">.</span>        at android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewRootImpl<span class="token punctuation">.</span><span class="token function">checkThread</span><span class="token punctuation">(</span>ViewRootImpl<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">7579</span><span class="token punctuation">)</span>        at android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewRootImpl<span class="token punctuation">.</span><span class="token function">requestLayout</span><span class="token punctuation">(</span>ViewRootImpl<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1200</span><span class="token punctuation">)</span>        at android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">.</span><span class="token function">requestLayout</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">22156</span><span class="token punctuation">)</span>        at android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">.</span><span class="token function">requestLayout</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">22156</span><span class="token punctuation">)</span>        at android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">.</span><span class="token function">requestLayout</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">22156</span><span class="token punctuation">)</span>        at android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">.</span><span class="token function">requestLayout</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">22156</span><span class="token punctuation">)</span>        at android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">.</span><span class="token function">requestLayout</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">22156</span><span class="token punctuation">)</span>        at android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">.</span><span class="token function">requestLayout</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">22156</span><span class="token punctuation">)</span>        at android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>constraint<span class="token punctuation">.</span>ConstraintLayout<span class="token punctuation">.</span><span class="token function">requestLayout</span><span class="token punctuation">(</span>ConstraintLayout<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">3172</span><span class="token punctuation">)</span>        at android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">.</span><span class="token function">requestLayout</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">22156</span><span class="token punctuation">)</span>        at android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">.</span><span class="token function">checkForRelayout</span><span class="token punctuation">(</span>TextView<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">8553</span><span class="token punctuation">)</span>        at android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>TextView<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">5416</span><span class="token punctuation">)</span>        at android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>TextView<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">5272</span><span class="token punctuation">)</span>        at android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>TextView<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">5229</span><span class="token punctuation">)</span>        at com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>handlerdemo<span class="token punctuation">.</span>MainActivity$DownLoaderThread<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">36</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 错误开始</span></code></pre><h2 id="1-4-错误分析"><a href="#1-4-错误分析" class="headerlink" title="1.4 错误分析"></a>1.4 错误分析</h2><p>执行之后，我们发现程序崩溃，并且出现了以上的错误：<strong><font color="#ff0000">只有创建 View 的原始线程才能更新 View。</font></strong>为什么会出现这个错误？</p><p>出现这样错误的原因是 Android 中的 View 不是线程安全的，在 Android 应用启动时，会自动创建一个线程，即程序的主线程，主线程负责 UI 的展示、UI 事件消息的派发处理等等，因此主线程也叫做 UI 线程，textView 是在 UI 线程中创建的，当我们在 DownloadThread 线程中去更新 UI 线程中创建的 textView 时自然会报上面的错误。</p><p>Android 的 UI 控件是非线程安全的，不同的平台提供了不同的解决方案以实现跨线程更新 UI 控件，Android 为了解决这种问题引入了 <strong><font color="FF0000">Handler机制</font></strong> 。</p><h2 id="1-5-Handler-引入"><a href="#1-5-Handler-引入" class="headerlink" title="1.5 Handler 引入"></a>1.5 Handler 引入</h2><p>那么 Handler 到底是什么呢？ <strong><font color="#FF00FF">Handler 是 Android 中引入的一种让开发者参与处理线程中消息循环的机制。</font></strong></p><p>每个 Hanlder 都关联了一个线程，每个线程内部都维护了一个消息队列 MessageQueue，这样 Handler 实际上也就关联了一个消息队列。可以通过 Handler 将 Message 或 Runnable 对象发送到该 Handler 所关联线程的 MessageQueue（消息队列）中，然后该消息队列一直在循环拿出一个 Message，对其进行处理，处理完之后拿出下一个 Message，继续进行处理，周而复始。</p><p>Handler 可以用来在多线程间进行通信，在另一个线程中去更新 UI 线程中的 UI 控件只是 Handler 使用中的一种典型案例，除此之外，Handler 可以做很多其他的事情。每个 Handler 都绑定了一个线程，假设存在两个线程 ThreadA 和 ThreadB，并且 HandlerA 绑定了 ThreadA，在 ThreadB 中的代码执行到某处时，出于某些原因，我们需要让 ThreadA 执行某些代码，此时我们就可以使用 Handler，我们可以在 ThreadB 中向 HandlerA 中加入某些信息以告知 ThreadA 中该做某些处理了。由此可以看出，Handler 是 Thread 的代言人，是多线程之间通信的桥梁，通过 Handler，我们可以在一个线程中控制另一个线程去做某些事情。</p><h1 id="2-Handler-用法"><a href="#2-Handler-用法" class="headerlink" title="2. Handler 用法"></a>2. Handler 用法</h1><p>Handler 提供了两种方式解决前面遇到的问题（在一个新线程中更新主线程中的 UI 控件），一种是通过 <strong><font color="4F94CD">post</font></strong> 方法，一种是调用 <strong><font color="4F94CD">sendMessage</font></strong> 方法。</p><h2 id="2-1-post"><a href="#2-1-post" class="headerlink" title="2.1 post"></a>2.1 post</h2><h3 id="2-1-1-代码实例"><a href="#2-1-1-代码实例" class="headerlink" title="2.1.1 代码实例"></a>2.1.1 代码实例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>handlerdemo<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Handler<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">Button<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> TextView textView <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> Button btnDownload <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> Handler uiHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        textView <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView<span class="token punctuation">)</span><span class="token punctuation">;</span>        btnDownload <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btnDownload<span class="token punctuation">)</span><span class="token punctuation">;</span>        btnDownload<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MainThread id "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DownLoadThread downLoadThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DownLoadThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        downLoadThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">DownLoadThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DownloadThread id "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始下载文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下载完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// MainActivity.this.textView.setText("文件下载完成");</span>                Runnable runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RunnableThread id "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"文件下载完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>                uiHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-1-2-执行结果"><a href="#2-1-2-执行结果" class="headerlink" title="2.1.2 执行结果"></a>2.1.2 执行结果</h3><pre class=" language-java"><code class="language-java"><span class="token number">2018</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">24.474</span> <span class="token number">15864</span><span class="token operator">-</span><span class="token number">15864</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>handlerdemo I<span class="token operator">/</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span> MainThread id <span class="token number">2</span><span class="token number">2018</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">26.901</span> <span class="token number">15864</span><span class="token operator">-</span><span class="token number">15938</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>handlerdemo I<span class="token operator">/</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span> DownloadThread id <span class="token number">2441</span><span class="token number">2018</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">26.901</span> <span class="token number">15864</span><span class="token operator">-</span><span class="token number">15938</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>handlerdemo I<span class="token operator">/</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span> 开始下载文件<span class="token number">2018</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">31.902</span> <span class="token number">15864</span><span class="token operator">-</span><span class="token number">15938</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>handlerdemo I<span class="token operator">/</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span> 下载完成<span class="token number">2018</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">31.906</span> <span class="token number">15864</span><span class="token operator">-</span><span class="token number">15864</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>handlerdemo I<span class="token operator">/</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span> RunnableThread id <span class="token number">2</span></code></pre><p>通过输出结果可以看出，Runnable 中的代码所执行的线程 ID 与 DownloadThread 的线程 ID 不同，而与主线程的线程 ID 相同，因此我们也由此看出在执行了 Handler.post(Runnable) 这句代码之后，运行 Runnable 代码的线程与 Handler 所绑定的线程是一致的，而与执行 Handler.post(Runnable) 这句代码的线程（DownloadThread）无关。</p><h3 id="2-1-3-结果分析"><a href="#2-1-3-结果分析" class="headerlink" title="2.1.3 结果分析"></a>2.1.3 结果分析</h3><p>我们在 Activity 中创建了一个 Handler 成员变量 uiHandler，Handler 有个特点，在执行 new Handler() 的时候，默认情况下 Handler 会绑定当前代码执行的线程，我们在主线程中实例化了 uiHandler，所以 uiHandle r就自动绑定了主线程，即 UI 线程。当我们在 DownloadThread 中执行完耗时代码后，我们将一个 Runnable 对象通过 post 方法传入到了 Handler 中，Handler 会在合适的时候让主线程执行 Runnable 中的代码，这样 Runnable 就在主线程中执行了，从而正确更新了主线程中的 UI。</p><h2 id="2-2-sendMessage"><a href="#2-2-sendMessage" class="headerlink" title="2.2 sendMessage"></a>2.2 sendMessage</h2><h3 id="2-2-1-代码实例"><a href="#2-2-1-代码实例" class="headerlink" title="2.2.1 代码实例"></a>2.2.1 代码实例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>handlerdemo<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Handler<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Message<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">Button<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> TextView textView <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> Button btnDownload <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> Handler uiHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"handleMessage thread id "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"msg.arg1:"</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"msg.arg2:"</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"文件下载完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        textView <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView<span class="token punctuation">)</span><span class="token punctuation">;</span>        btnDownload <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btnDownload<span class="token punctuation">)</span><span class="token punctuation">;</span>        btnDownload<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MainThread id "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DownLoadThread downLoadThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DownLoadThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        downLoadThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">DownLoadThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DownloadThread id "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始下载文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下载完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 文件下载完成后更新 UI</span>                Message msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                msg<span class="token punctuation">.</span>what <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                msg<span class="token punctuation">.</span>arg1 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>                msg<span class="token punctuation">.</span>arg2 <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//我们也可以通过给 obj 赋值 Object 类型传递向 Message 传入任意数据</span>                <span class="token comment" spellcheck="true">//msg.obj = null;</span>                <span class="token comment" spellcheck="true">// MainActivity.this.textView.setText("文件下载完成");</span>                <span class="token comment" spellcheck="true">/* Runnable runnable = new Runnable() {                    @Override                    public void run() {                        System.out.println("RunnableThread id " + Thread.currentThread().getId());                        MainActivity.this.textView.setText("文件下载完成");                    }                };                uiHandler.post(runnable);*/</span>                uiHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-2-执行结果"><a href="#2-2-2-执行结果" class="headerlink" title="2.2.2 执行结果"></a>2.2.2 执行结果</h3><pre class=" language-java"><code class="language-java"><span class="token number">2018</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">16.613</span> <span class="token number">19652</span><span class="token operator">-</span><span class="token number">19652</span><span class="token operator">/</span><span class="token operator">?</span> I<span class="token operator">/</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span> MainThread id <span class="token number">2</span><span class="token number">2018</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">19.431</span> <span class="token number">19652</span><span class="token operator">-</span><span class="token number">19692</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>handlerdemo I<span class="token operator">/</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span> DownloadThread id <span class="token number">2493</span><span class="token number">2018</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">19.431</span> <span class="token number">19652</span><span class="token operator">-</span><span class="token number">19692</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>handlerdemo I<span class="token operator">/</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span> 开始下载文件<span class="token number">2018</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">24.432</span> <span class="token number">19652</span><span class="token operator">-</span><span class="token number">19692</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>handlerdemo I<span class="token operator">/</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span> 下载完成<span class="token number">2018</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">24.434</span> <span class="token number">19652</span><span class="token operator">-</span><span class="token number">19652</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>handlerdemo I<span class="token operator">/</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span> handleMessage thread id <span class="token number">2</span><span class="token number">2018</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">24.434</span> <span class="token number">19652</span><span class="token operator">-</span><span class="token number">19652</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>handlerdemo I<span class="token operator">/</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span> msg<span class="token punctuation">.</span>arg1<span class="token operator">:</span><span class="token number">123</span><span class="token number">2018</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">24.435</span> <span class="token number">19652</span><span class="token operator">-</span><span class="token number">19652</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>handlerdemo I<span class="token operator">/</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span> msg<span class="token punctuation">.</span>arg2<span class="token operator">:</span><span class="token number">456</span></code></pre><h3 id="2-2-3-结果分析"><a href="#2-2-3-结果分析" class="headerlink" title="2.2.3 结果分析"></a>2.2.3 结果分析</h3><p>通过 Message 与 Handler 进行通信的步骤是：</p><ol><li><p>重写 Handler 的 handleMessage 方法，根据 Message 的 what 值进行不同的处理操作； </p></li><li><p>设置 Message 的 what 值：Message.what 是我们自定义的一个 Message 的识别码，以便于在 Handler 的 handleMessage 方法中根据 what     识别出不同的 Message ，以便我们做出不同的处理操作；</p></li><li><p>设置 Message 的所携带的数据，简单数据可以通过两个 int 类型的 field ：arg1 和 arg2 来赋值，并可以在 handleMessage 中读取；</p></li><li><p>如果 Message 需要携带复杂的数据，那么可以设置 Message 的 obj 字段，obj 是 Object 类型，可以赋予任意类型的数据；</p></li><li><p>我们通过 Handler.sendMessage(Message) 方法将 Message 传入 Handler 中让其在 handleMessage 中对其进行处理；</p></li><li><p>需要说明的是，如果在 handleMessage 中不需要判断 Message 类型，那么就无须设置 Message 的 what 值；而且让 Message 携带数据也不是必须的，只有在需要的时候才需要让其携带数据；如果确实需要让 Message 携带数据，应该尽量使用 arg1 或 arg2 或两者，能用 arg1 和 arg2 解决的话就不要用obj，因为用 arg1 和 arg2 更高效。</p></li><li><p>由上我们可以看出，执行 handleMessage 的线程与创建 Handler 的线程是同一线程，在本示例中都是主线程。执行 handleMessage 的线程与执行 uiHandler.sendMessage(msg) 的线程没有关系。</p></li></ol><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>相关推荐：<a href="https://superandroid.pro/2019/12/31/00.thinking-in-android-01.bo-ke-suo-yin/">博客索引（Android 9.0）</a></p>]]></content>
      
      
      <categories>
          
          <category> 核心机制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Handler </tag>
            
            <tag> UI 更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你领略 Android 内存泄漏的前世今生</title>
      <link href="/2018/09/03/07.xing-neng-you-hua-xi-lie-dai-ni-ling-lue-android-nei-cun-xie-lou-de-qian-shi-jin-sheng/"/>
      <url>/2018/09/03/07.xing-neng-you-hua-xi-lie-dai-ni-ling-lue-android-nei-cun-xie-lou-de-qian-shi-jin-sheng/</url>
      
        <content type="html"><![CDATA[<h1 id="基础了解"><a href="#基础了解" class="headerlink" title="基础了解"></a>基础了解</h1><h2 id="什么是内存泄漏？"><a href="#什么是内存泄漏？" class="headerlink" title="什么是内存泄漏？"></a>什么是内存泄漏？</h2><p>内存泄漏是当程序不再使用到的内存时，释放内存失败而产生了无用的内存消耗。内存泄漏并不是指物理上的内存消失，这里的内存泄漏是指由程序分配的内存但是由于程序逻辑错误而导致程序失去了对该内存的控制，使得内存浪费。</p><h2 id="Java-内存分配策略"><a href="#Java-内存分配策略" class="headerlink" title="Java 内存分配策略"></a>Java 内存分配策略</h2><p>Java 程序运行时的内存分配策略有三种，分别是 <strong><font color="#FF00FF">静态分配</font></strong>、<strong><font color="#FF00FF">栈式分配</font></strong> 和 <strong><font color="#FF00FF">堆式分配</font></strong>，对应的三种存储策略使用的内存空间主要分别是 <strong><font color="#FF00FF">静态存储区（也称方法区）</font></strong>、<strong><font color="#FF00FF">栈区</font></strong> 和 <strong><font color="#FF00FF">堆区</font></strong>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🔰 <strong>静态存储区（方法区）</strong>：主要存放 <u><strong>静态数据</strong></u>、<u><strong>全局 static 数据</strong></u> 和 <u><strong>常量</strong></u>。这块内存在程序编译时就已经分配好，并且在程序整个运行期间都存在。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🔰 <strong>栈区</strong>：当方法被执行时，方法体内的 <u><strong>局部变量</strong></u>（其中包括基础数据类型、对象的引用）都在栈上创建，并在方法执行结束时这些局部变量所持有的内存将会自动被释放。因为栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🔰 <strong>堆区</strong>： 又称动态内存分配，通常就是指在程序运行时直接 new 出来的内存，也就是 <u><strong>对象的实例</strong></u>。这部分内存在不使用时将会由 Java 垃圾回收器（GC）来负责回收。</p><h2 id="栈与堆的区别"><a href="#栈与堆的区别" class="headerlink" title="栈与堆的区别"></a>栈与堆的区别</h2><p>在方法体内定义的（局部变量）一些基本类型的变量和对象的引用变量都是在方法的栈内存中分配的。当在一段方法块中定义一个变量时，Java 就会在栈中为该变量分配内存空间，当超过该变量的作用域后，该变量也就无效了，分配给它的内存空间也将被释放掉，该内存空间可以被重新使用。</p><p>堆内存用来存放所有由 new 创建的对象（包括该对象其中的所有成员变量）和数组。在堆中分配的内存，将由 Java 垃圾回收器来自动管理。在堆中产生了一个数组或者对象后，还可以在栈中定义一个特殊的变量，这个变量的取值等于数组或者对象在堆内存中的首地址，这个特殊的变量就是我们上面说的引用变量。我们可以通过这个引用变量来访问堆中的对象或者数组。</p><p>举例说明：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sample</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> s1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Sample mSample1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> s2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        Sample mSample2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// Sample 类的局部变量 s2 和引用变量 mSample2 都是存在于栈中，但 mSample2 指向的对象是存在于堆上</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Sample mSample3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// mSample3 指向的对象实体存放在堆上，包括这个对象的所有成员变量 s1 和 mSample1，而它自己存在于栈中。</span></code></pre><h2 id="Java是如何管理内存"><a href="#Java是如何管理内存" class="headerlink" title="Java是如何管理内存"></a>Java是如何管理内存</h2><p>Java的内存管理就是对象的分配和释放问题。在 Java 中，程序员需要通过关键字 new 为每个对象申请内存空间 (基本类型除外)，所有的对象都在堆 (Heap)中分配空间。另外，对象的释放是由 GC 决定和执行的。在 Java 中，内存的分配是由程序完成的，而内存的释放是由 GC 完成的，这种收支两条线的方法确实简化了程序员的工作。但同时，它也加重了JVM的工作。这也是 Java 程序运行速度较慢的原因之一。因为，GC 为了能够正确释放对象，GC 必须监控每一个对象的运行状态，包括对象的申请、引用、被引用、赋值等，GC 都需要进行监控。</p><p>监视对象状态是为了更加准确地、及时地释放对象，而释放对象的根本原则就是该对象不再被引用。</p><h2 id="Java中的内存泄漏"><a href="#Java中的内存泄漏" class="headerlink" title="Java中的内存泄漏"></a>Java中的内存泄漏</h2><p>在Java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点，首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；其次，这些对象是无用的，即程序以后不会再使用这些对象。如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。</p><p>在C++中，内存泄漏的范围更大一些。有些对象被分配了内存空间，然后却不可达，由于C++中没有GC，这些内存将永远收不回来。在Java中，这些不可达的对象都由GC负责回收，因此程序员不需要考虑这部分的内存泄露。</p><p>通过分析，我们得知，对于C++，程序员需要自己管理边和顶点，而对于Java程序员只需要管理边就可以了(不需要管理顶点的释放)。通过这种方式，Java提高了编程的效率。</p><p>因此，通过以上分析，我们知道在Java中也有内存泄漏，但范围比C++要小一些。因为Java从语言上保证，任何对象都是可达的，所有的不可达对象都由GC管理。</p><p>对于程序员来说，GC基本是透明的，不可见的。虽然，我们只有几个函数可以访问GC，例如运行GC的函数System.gc()，但是根据Java语言规范定义， 该函数不保证JVM的垃圾收集器一定会执行。因为，不同的JVM实现者可能使用不同的算法管理GC。通常，GC的线程的优先级别较低。JVM调用GC的策略也有很多种，有的是内存使用到达一定程度时，GC才开始工作，也有定时执行的，有的是平缓执行GC，有的是中断式执行GC。但通常来说，我们不需要关心这些。除非在一些特定的场合，GC的执行影响应用程序的性能，例如对于基于Web的实时系统，如网络游戏等，用户不希望GC突然中断应用程序执行而进行垃圾回收，那么我们需要调整GC的参数，让GC能够通过平缓的方式释放内存，例如将垃圾回收分解为一系列的小步骤执行，Sun提供的HotSpot JVM就支持这一特性。</p><p>以下给出一个 Java 内存泄漏的典型例子：</p><pre class=" language-java"><code class="language-java">Vector v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    o <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>在这个例子中，我们循环申请Object对象，并将所申请的对象放入一个 Vector 中，如果我们仅仅释放引用本身，那么 Vector 仍然引用该对象，所以这个对象对 GC 来说是不可回收的。因此，如果对象加入到Vector 后，还必须从 Vector 中删除，最简单的方法就是将 Vector 对象设置为 null。</p><h1 id="常见内存泄漏"><a href="#常见内存泄漏" class="headerlink" title="常见内存泄漏"></a>常见内存泄漏</h1><h2 id="永远的单例"><a href="#永远的单例" class="headerlink" title="永远的单例"></a>永远的单例</h2><p>单例的使用在我们的程序中随处可见，因为使用它可以完美的解决我们在程序中重复创建对象的问题，不过可别小瞧它。由于 <strong><font color="#CAFF70">单例的静态特性使得其生命周期跟应用的生命周期一样长</font></strong>，所以一旦使用有误，小心无限制的持有Activity的引用而导致内存泄漏。</p><p>我们看个例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppManager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> AppManager instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> Context context<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">AppManager</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> AppManager <span class="token function">getInstance</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppManager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这是一个普通的单例模式，当创建这个单例的时候，由于需要传入一个Context，所以这个Context的生命周期的长短至关重要！<strong><font color="#FF0000">（实际常见）</font></strong></p><p>1、如果此时传入的是 <font color="#BA55D3">Application 的 Context</font>，因为 Application 的生命周期就是整个应用的生命周期，所以这将没有任何问题。</p><p>2、如果此时传入的是 <font color="#BA55D3">Activity 的 Context</font>，当这个 Context 所对应的 Activity 退出时，由于该 Context 的引用被单例对象所持有，其生命周期等于整个应用程序的生命周期，所以当前 Activity 退出时它的内存并不会被回收，这就造成泄漏了。</p><p><strong><font color="#FFFFFF">正确的方式（写法一）：</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppManager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> AppManager instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> Context context<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">AppManager</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用 Application 的 context</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> AppManager <span class="token function">getInstance</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppManager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong><font color="#FFFFFF">正确的方式（写法二）：</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 在你的 Application 中添加一个静态方法，getContext() 返回 Application 的 context</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>context <span class="token operator">=</span> <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token comment" spellcheck="true">/**     * 获取全局的context     * @return 返回全局context对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Context <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppManager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> AppManager instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> Context context<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">AppManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> MyApplication<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用Application 的context</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> AppManager <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="静态Activity"><a href="#静态Activity" class="headerlink" title="静态Activity"></a>静态Activity</h2><p>我们看一段代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> MainActivity activity<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 这边设置了静态Activity，发生了内存泄漏</span>    TextView saButton<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        saButton <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>        saButton<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setStaticActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">nextActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setStaticActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        activity <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">nextActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>RegisterActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SystemClock<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在上面代码中，我们声明了一个静态的 Activity 变量并且在 TextView 的 OnClick 事件里引用了当前正在运行的 Activity 实例，所以如果在 activity 的生命周期结束之前没有清除这个引用，则会引起内存泄漏。因为声明的 activity 是静态的，会常驻内存，如果该对象不清除，则垃圾回收器无法回收变量。</p><p><strong><font color="#FFFFFF">我们可以这样解决：</font></strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        activity <span class="token operator">=</span> null<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 在onDestory方法中将静态变量activity置空，这样垃圾回收器就可以将静态变量回收</span>    <span class="token punctuation">}</span></code></pre><h2 id="静态View"><a href="#静态View" class="headerlink" title="静态View"></a>静态View</h2><p>其实和静态Activity颇为相似，我们看下代码：</p><pre class=" language-java"><code class="language-java">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> View view<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 定义静态View</span>    TextView saButton<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        saButton <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>        saButton<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setStaticView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">nextActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setStaticView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        view <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>sv_view<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>View一旦被加载到界面中将会持有一个Context对象的引用，在这个例子中，这个context对象是我们的Activity，声明一个静态变量引用这个View，也就引用了activity，所以当activity生命周期结束了，静态View没有清除掉，还持有activity的引用，因此内存泄漏了。</p><p><strong><font color="#FFFFFF">我们可以这样解决：</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    view <span class="token operator">=</span> null<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 在onDestroy方法里将静态变量置空</span><span class="token punctuation">}</span> </code></pre><h2 id="匿名类-AsyncTask"><a href="#匿名类-AsyncTask" class="headerlink" title="匿名类/AsyncTask"></a>匿名类/AsyncTask</h2><p>我们看下面的例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">startAsyncTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">AsyncTask</span><span class="token operator">&lt;</span>Void<span class="token punctuation">,</span> Void<span class="token punctuation">,</span> Void<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> Void <span class="token function">doInBackground</span><span class="token punctuation">(</span>Void<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        View aicButton <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>at_button<span class="token punctuation">)</span><span class="token punctuation">;</span>        aicButton<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>             <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">startAsyncTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面代码在activity中创建了一个匿名类 AsyncTask，匿名类和非静态内部类相同，会持有外部类对象，这里也就是activity，因此如果你在 Activity 里声明且实例化一个匿名的AsyncTask对象，则可能会发生内存泄漏，如果这个线程在Activity销毁后还一直在后台执行，那这个线程会继续持有这个Activity的引用从而不会被GC回收，直到线程执行完成。</p><p><strong><font color="#FFFFFF">我们可以这样解决：</font></strong></p><p>自定义静态 AsyncTask 类，并且让 AsyncTask 的周期和 Activity 周期保持一致，也就是在 Activity 生命周期结束时要将 AsyncTask cancel 掉。</p><h2 id="非静态内部类"><a href="#非静态内部类" class="headerlink" title="非静态内部类"></a>非静态内部类</h2><p>有的时候我们可能会在启动频繁的Activity中，为了避免重复创建相同的数据资源，可能会出现这种写法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> TestResource mResource <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mManager <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            mManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//...</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">TestResource</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面这段代码在Activity内部创建了一个非静态内部类的单例（mManager），每次启动Activity时都会使用该单例的数据，这样虽然避免了资源的重复创建，不过这种写法却会造成内存泄漏。</p><p>因为非静态内部类默认会持有外部类的引用，而该非静态内部类又创建了一个静态的实例，该实例的生命周期和应用的一样长，这就导致了该静态实例一直会持有该Activity的引用，导致Activity的内存资源不能正常回收。</p><p><strong><font color="#FFFFFF">正确的做法为：</font></strong></p><p>将该内部类设为静态内部类或将该内部类抽取出来封装成一个单例，如果需要使用Context，请按照上面推荐的使用Application 的 Context。当然，Application 的 context 不是万能的，所以也不能随便乱用，对于有些地方则必须使用 Activity 的 Context。</p><h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><p>Handler 的使用造成的内存泄漏问题应该说是<strong><font color="#FF0000"> 最为常见 </font></strong>了，很多时候我们为了避免 ANR 而不在主线程进行耗时操作，在处理网络任务或者封装一些请求回调等api都借助Handler来处理，但 Handler 不是万能的，对于 Handler 的使用代码编写不规范即有可能造成内存泄漏。另外，我们知道 Handler、Message 和 MessageQueue 都是相互关联在一起的，万一 Handler 发送的 Message 尚未被处理，则该 Message 及发送它的 Handler 对象将被线程 MessageQueue 一直持有。</p><p>由于 Handler 属于 TLS(Thread Local Storage) 变量, 生命周期和 Activity 是不一致的。因此这种实现方式一般很难保证跟 View 或者 Activity 的生命周期保持一致，故很容易导致无法正确释放。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Handler mLeakyHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ...</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Post a message and delay its execution for 10 minutes.</span>        mLeakyHandler<span class="token punctuation">.</span><span class="token function">postDelayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Go back to the previous Activity.</span>        <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在该 SampleActivity 中声明了一个延迟 <strong>10分钟</strong> 执行的消息 Message，mLeakyHandler 将其 push 进了消息队列 MessageQueue 里。当该 Activity 被 finish() 掉时，延迟执行任务的 Message 还会继续存在于主线程中，它持有该 Activity 的 Handler 引用，所以此时 finish() 掉的 Activity 就不会被回收了从而造成内存泄漏（因 Handler 为非静态内部类，它会持有外部类的引用，在这里就是指 SampleActivity）。</p><p><strong><font color="#FFFFFF">正确的做法为：</font></strong></p><p>在 Activity 中避免使用非静态内部类，比如上面我们将 Handler 声明为静态的，则其存活期跟 Activity 的生命周期就无关了。同时通过弱引用的方式引入 Activity，避免直接将 Activity 作为 context 传进去，见下面代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> WeakReference<span class="token operator">&lt;</span>SampleActivity<span class="token operator">></span> mActivity<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyHandler</span><span class="token punctuation">(</span>SampleActivity activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mActivity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span>SampleActivity<span class="token operator">></span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SampleActivity activity <span class="token operator">=</span> mActivity<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>activity <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                              <span class="token comment" spellcheck="true">// 每次使用前注意判空</span>                <span class="token comment" spellcheck="true">// ...</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> MyHandler mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Runnable sRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Post a message and delay its execution for 10 minutes.</span>        mHandler<span class="token punctuation">.</span><span class="token function">postDelayed</span><span class="token punctuation">(</span>sRunnable<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Go back to the previous Activity.</span>        <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从上面的代码中我们可以看出如何避免Handler内存泄漏，推荐使用 “静态内部类 + WeakReference” 这种方式，每次使用前注意判空。</p><p>Java对引用的分类有Strong reference、SoftReference、WeakReference、PhatomReference四种。</p><table><thead><tr><th>级别</th><th>回收机制</th><th>用途</th><th>生存时间</th></tr></thead><tbody><tr><td>强</td><td>从来不会</td><td>对象的一般状态</td><td>JVM停止运行时终止</td></tr><tr><td>软</td><td>在内存不足时</td><td>联合ReferenceQueue构造有效期短/占内存打/生命周期长的对象的二级高速缓冲器（内存不足时才情况）</td><td>内存不足时终止</td></tr><tr><td>弱</td><td>在垃圾回收时</td><td>联合ReferenceQueue构造有效期短/占内存打/生命周期长的对象的一级高速缓冲器（系统发生gc时清空）</td><td>gc运行后终止</td></tr><tr><td>虚</td><td>在垃圾回收时</td><td>联合ReferenceQueue来跟踪对象被垃圾回收期回收的活动</td><td>gc运行后终止</td></tr></tbody></table><p>在Android应用的开发中，为了防止内存溢出，在处理一些占用内存大而且声明周期较长的对象时候，可以尽量应用软引用和弱引用技术。</p><p>软/弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。利用这个队列可以得知被回收的软/弱引用的对象列表，从而为缓冲器清除已失效的软/弱引用。</p><h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><p>看个范例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">spawnThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        View tButton <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>t_button<span class="token punctuation">)</span><span class="token punctuation">;</span>        tButton<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">spawnThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其实这边发生的内存泄漏原因跟AsyncTask是一样的。</p><p><strong><font color="#FFFFFF">正确的做法为：</font></strong></p><p>我们自定义Thread并声明成static这样可以吗？其实这样的做法并不推荐，因为Thread位于GC根部，DVM会和所有的活动线程保持hard references关系，所以运行中的Thread绝不会被GC无端回收了，所以正确的解决办法是在自定义静态内部类的基础上给线程加上取消机制，因此我们可以在Activity的onDestroy方法中将thread关闭掉。</p><h2 id="Timer-Tasks"><a href="#Timer-Tasks" class="headerlink" title="Timer Tasks"></a>Timer Tasks</h2><p>看个范例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">scheduleTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        View ttButton <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tt_button<span class="token punctuation">)</span><span class="token punctuation">;</span>        ttButton<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scheduleTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里内存泄漏在于Timer和TimerTask没有进行Cancel，从而导致Timer和TimerTask一直引用外部类Activity。</p><p><strong><font color="#FFFFFF">正确的做法为：</font></strong></p><p>在适当的时机进行Cancel。</p><h2 id="Sensor-Manager"><a href="#Sensor-Manager" class="headerlink" title="Sensor Manager"></a>Sensor Manager</h2><p>看个范例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">registerListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           SensorManager sensorManager <span class="token operator">=</span> <span class="token punctuation">(</span>SensorManager<span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>SENSOR_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>           Sensor sensor <span class="token operator">=</span> sensorManager<span class="token punctuation">.</span><span class="token function">getDefaultSensor</span><span class="token punctuation">(</span>Sensor<span class="token punctuation">.</span>TYPE_ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>           sensorManager<span class="token punctuation">.</span><span class="token function">registerListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> sensor<span class="token punctuation">,</span> SensorManager<span class="token punctuation">.</span>SENSOR_DELAY_FASTEST<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        View smButton <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>sm_button<span class="token punctuation">)</span><span class="token punctuation">;</span>        smButton<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">registerListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过Context调用getSystemService获取系统服务，这些服务运行在他们自己的进程执行一系列后台工作或者提供和硬件交互的接口，如果Context对象需要在一个Service内部事件发生时随时收到通知，则需要把自己作为一个监听器注册进去，这样服务就会持有一个Activity，如果开发者忘记了在Activity被销毁前注销这个监听器，这样就导致内存泄漏。</p><p><strong><font color="#FFFFFF">正确的做法为：</font></strong></p><p>在onDestroy方法里注销监听器。</p><h2 id="尽量避免使用-static-成员变量"><a href="#尽量避免使用-static-成员变量" class="headerlink" title="尽量避免使用 static 成员变量"></a>尽量避免使用 static 成员变量</h2><p>如果成员变量被声明为 static，那我们都知道其生命周期将与整个app进程生命周期一样。</p><p>这会导致一系列问题，如果你的app进程设计上是长驻内存的，那即使app切到后台，这部分内存也不会被释放。按照现在手机app内存管理机制，占内存较大的后台进程将优先回收，如果此app做过进程互保保活，那会造成app在后台频繁重启。当手机安装了你参与开发的app以后一夜时间手机被消耗空了电量、流量，你的app不得不被用户卸载或者静默。</p><p><strong><font color="#FFFFFF">这里修复的方法是：</font></strong></p><p>不要在类初始时初始化静态成员。可以考虑lazy初始化（使用时初始化）。架构设计上要思考是否真的有必要这样做，尽量避免。如果架构需要这么设计，那么此对象的生命周期你有责任管理起来。</p><h2 id="避免-override-finalize"><a href="#避免-override-finalize" class="headerlink" title="避免 override finalize()"></a>避免 override finalize()</h2><p>1、finalize 方法被执行的时间不确定，不能依赖与它来释放紧缺的资源。时间不确定的原因是：<br>虚拟机调用GC的时间不确定<br>Finalize daemon线程被调度到的时间不确定</p><p>2、finalize 方法只会被执行一次，即使对象被复活，如果已经执行过了 finalize 方法，再次被 GC 时也不会再执行了，原因是：</p><p>含有 finalize 方法的 object 是在 new 的时候由虚拟机生成了一个 finalize reference 在来引用到该Object的，而在 finalize 方法执行的时候，该 object 所对应的 finalize Reference 会被释放掉，即使在这个时候把该 object 复活(即用强引用引用住该 object )，再第二次被 GC 的时候由于没有了 finalize reference 与之对应，所以 finalize 方法不会再执行。</p><p>3、含有Finalize方法的object需要至少经过两轮GC才有可能被释放。</p><h2 id="集合对象及时清除"><a href="#集合对象及时清除" class="headerlink" title="集合对象及时清除"></a>集合对象及时清除</h2><p>我们通常会把一些对象的引用加入到集合容器（比如ArrayList）中，当我们不再需要该对象时，并没有把它的引用从集合中清理掉，这样这个集合就会越来越大。如果这个集合是static的话，那情况就更严重了。</p><p>所以在退出程序之前，将集合里面的东西clear，然后置为null，再退出程序，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> nameList<span class="token punctuation">;</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>Fragment<span class="token operator">></span> list<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nameList <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        nameList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameList <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="webView"><a href="#webView" class="headerlink" title="webView"></a>webView</h2><p>当我们不再需要使用webView的时候，应该调用它的destory()方法来销毁它，并释放其占用的内存，否则其占用的内存长期也不能回收，从而造成内存泄漏。</p><p><strong><font color="#FFFFFF">正确的做法为：</font></strong></p><p>为webView开启另外一个进程，通过AIDL与主线程进行通信，webView所在的进程可以根据业务的需要选择合适的时机进行销毁，从而达到内存的完整释放。</p><h2 id="资源未关闭"><a href="#资源未关闭" class="headerlink" title="资源未关闭"></a>资源未关闭</h2><p>对于使用了BraodcastReceiver，ContentObserver，File，游标 Cursor，Stream，Bitmap等资源的使用，应该在Activity销毁时及时关闭或者注销，否则这些资源将不会被回收，造成内存泄漏。</p><h1 id="拓展-–-相关知识点"><a href="#拓展-–-相关知识点" class="headerlink" title="拓展 – 相关知识点"></a>拓展 – 相关知识点</h1><h2 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h2><h3 id="使用static声明属性"><a href="#使用static声明属性" class="headerlink" title="使用static声明属性"></a>使用static声明属性</h3><p>如果在程序中使用static声明属性，则此属性称为全局属性（也称静态属性），那么声明成全局属性有什么用？我们看下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">static</span> String country <span class="token operator">=</span> <span class="token string">"A城"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"，年龄："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">"，城市："</span> <span class="token operator">+</span> country<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String agrs<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person<span class="token punctuation">.</span>country <span class="token operator">=</span> <span class="token string">"B城"</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p3<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上程序很清晰的说明了static声明属性的好处，需要注意一点的是，类的公共属性应该由类进行修改是最合适的（当然也可以p1.country = …），有时也就把使用static声明的属性称为类属性。</p><h3 id="使用static声明方法"><a href="#使用static声明方法" class="headerlink" title="使用static声明方法"></a>使用static声明方法</h3><p>直接看下代码就清楚了：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String country <span class="token operator">=</span> <span class="token string">"A城"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setCountry</span><span class="token punctuation">(</span>String C<span class="token punctuation">)</span> <span class="token punctuation">{</span>        country <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"，年龄："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">"，城市："</span> <span class="token operator">+</span> country<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> country<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String agrs<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person<span class="token punctuation">.</span><span class="token function">setCountry</span><span class="token punctuation">(</span><span class="token string">"B城"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p3<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong><font color="#FFFFFF">【特殊说明】</font></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;💥 非static声明的方法可以调用static声明的属性或方法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;💥 static声明的方法不能调用非static声明的属性或方法</p><p>比如以下代码就会出错：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String country <span class="token operator">=</span> <span class="token string">"A城"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sFun</span><span class="token punctuation">(</span>String C<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 错误，不能调用非static属性</span>        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">// 错误，不能调用非static方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"World!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h3><p>我们都知道，在类内部可以定义成员变量与方法，同样，在类内部也可以定义另一个类。如果在类Outer的内部定义一个类Inner，此时类Inner就称为内部类，而类Outer则称为外部类。</p><p>内部类可声明成 public 或 private。当内部类声明成 public 或 private时，对其访问的限制与成员变量和成员方法完全相同。</p><h3 id="内部类的定义格式"><a href="#内部类的定义格式" class="headerlink" title="内部类的定义格式"></a>内部类的定义格式</h3><pre class=" language-java"><code class="language-java">标识符 <span class="token keyword">class</span> 外部类的名称 <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 外部类的成员</span>    标识符 <span class="token keyword">class</span> 内部类的名称 <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 内部类的成员</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="内部类的好处"><a href="#内部类的好处" class="headerlink" title="内部类的好处"></a>内部类的好处</h3><p>可以方便地访问外部类中的私有属性！</p><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>使用static可以声明属性或方法，而使用static也可以声明内部类，用static声明的内部类就变成了外部类，但是用static声明的内部类不能访问非static的外部类属性。</p><p>比如如下例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String info <span class="token operator">=</span> <span class="token string">"Hello World!!!"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果此时info不是static属性，则程序运行报错</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行结果：</p><pre><code>Hello World!!!</code></pre><h2 id="在外部访问内部类"><a href="#在外部访问内部类" class="headerlink" title="在外部访问内部类"></a>在外部访问内部类</h2><p>一个内部类除了可以通过外部类访问，也可以直接在其他类中进行调用。</p><p><strong><font color="#FFFFFF">【在外部访问内部类的格式】</font></strong></p><pre class=" language-java"><code class="language-java">外部类<span class="token punctuation">.</span>内部类 内部类对象 <span class="token operator">=</span> 外部类实例<span class="token punctuation">.</span><span class="token keyword">new</span> 内部类<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String info <span class="token operator">=</span> <span class="token string">"Hello World!!!"</span><span class="token punctuation">;</span>      <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Outer out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 实例化外部类对象</span>        Outer<span class="token punctuation">.</span>Inner in <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 实例化内部类对象</span>        in<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// 调用内部类方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="在方法中定义内部类"><a href="#在方法中定义内部类" class="headerlink" title="在方法中定义内部类"></a>在方法中定义内部类</h2><p>除了在外部类中定义内部类，我们也可以在方法中定义内部类。但是需要注意的是，在方法中定义的内部类不能直接访问方法中的参数，如果方法中的参数想要被内部类访问，则参数前必须加上final关键字。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String info <span class="token operator">=</span> <span class="token string">"Hello World!!!"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 参数要被访问必须用final声明</span>        <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"类中的属性："</span> <span class="token operator">+</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法中的参数："</span> <span class="token operator">+</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 调用外部类方法              </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在开发中，内存泄漏最坏的情况是app耗尽内存导致崩溃，但是往往真实情况不是这样的，相反它只会耗尽大量内存但不至于闪退，可分配的内存少了，GC便会更多的工作释放内存，GC是非常耗时的操作，因此会使得页面卡顿。我们在开发中一定要注意当在Activity里实例化一个对象时看看是否有潜在的内存泄漏，一定要经常对内存泄漏进行检测。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>&nbsp;01. <a href="https://developer.android.google.cn/studio/profile/android-profiler" target="_blank" rel="noopener">https://developer.android.google.cn/studio/profile/android-profiler</a><br>&nbsp;02. <a href="https://developer.android.google.cn/studio/profile/memory-profiler" target="_blank" rel="noopener">https://developer.android.google.cn/studio/profile/memory-profiler</a><br>&nbsp;03. <a href="https://www.jianshu.com/p/f77fcb43b3d4" target="_blank" rel="noopener">https://www.jianshu.com/p/f77fcb43b3d4</a></p><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>推荐跳转：<a href="https://superandroid.pro/2019/01/01/00.%20Thinking%20in%20Android%20--%2001.%20%E5%8D%9A%E5%AE%A2%E7%B4%A2%E5%BC%95/">博客索引（Android 9.0）</a></p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存泄漏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入钻研 Android 核心原理 之 进程被杀</title>
      <link href="/2018/08/20/04.he-xin-ji-zhi-xi-lie-shen-ru-yan-jiu-android-he-xin-yuan-li-zhi-jin-cheng-bei-sha/"/>
      <url>/2018/08/20/04.he-xin-ji-zhi-xi-lie-shen-ru-yan-jiu-android-he-xin-yuan-li-zhi-jin-cheng-bei-sha/</url>
      
        <content type="html"><![CDATA[<h1 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h1><h2 id="1-1-核心源码"><a href="#1-1-核心源码" class="headerlink" title="1.1 核心源码"></a>1.1 核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">Process.java</font></td><td>frameworks/base/core/java/android/os/Process.java</td></tr><tr><td><font color="#D15FEE">android_util_Process.cpp</font></td><td>frameworks/base/core/jni/android_util_Process.cpp</td></tr><tr><td><font color="#D15FEE">processgroup.cpp</font></td><td>system/core/libprocessgroup/processgroup.cpp</td></tr></tbody></table><p><br></p><h2 id="1-2-概述"><a href="#1-2-概述" class="headerlink" title="1.2 概述"></a>1.2 概述</h2><p>kill 进程其实是通过 <strong><font color="#FF0000">发送 signal 信号</font></strong> 的方式来完成的。创建进程从 Process.start 开始说起，那么杀进程则相应从 Process.killProcess 开始讲起。</p><h1 id="二、用户态-Kill"><a href="#二、用户态-Kill" class="headerlink" title="二、用户态 Kill"></a>二、用户态 Kill</h1><p>在 Process.java 文件有 3 个方法用于杀进程，下面说说这 3 个方法所做的工作!</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Kill the process with the given PID.     * Note that, though this API allows us to request to     * kill any process based on its PID, the kernel will     * still impose standard restrictions on which PIDs you     * are actually able to kill.  Typically this means only     * the process running the caller's packages/application     * and any additional processes created by that app; packages     * sharing a common UID will also be able to kill each     * other's processes.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">killProcess</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sendSignal</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> SIGNAL_KILL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * @hide     * Private impl for avoiding a log message...  DO NOT USE without doing     * your own log, or the Android Illuminati will find you some night and     * beat you up.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">killProcessQuiet</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sendSignalQuiet</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> SIGNAL_KILL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Kill all processes in a process group started for the given     * pid.     * @hide     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">killProcessGroup</span><span class="token punctuation">(</span><span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="2-1-killProcess"><a href="#2-1-killProcess" class="headerlink" title="2.1 killProcess"></a>2.1 killProcess</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SIGNAL_KILL <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">killProcess</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sendSignal</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> SIGNAL_KILL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Send a signal to the given process.     *      * @param pid The pid of the target process.     * @param signal The signal to send.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">sendSignal</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">,</span> <span class="token keyword">int</span> signal<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 Process.java 中定义了：public static final int SIGNAL_KILL = 9；我们发现，sendSignal 是个 native 方法。</p><p>我们在<a href="https://superandroid.pro/2018/10/10/A_03.%20Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20zygote/">《深入钻研 Android 启动阶段 之 zygote》</a><a href="https://superandroid.pro/2018/10/28/N_01.%20Android%20%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20Android%20%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%20%E4%B9%8B%20JNI/">《深入钻研 Android 核心技术 之 JNI》</a>两篇博文中说过：<strong>虚拟机会注册各种 framework 所需的 JNI 方法，很多时候查询 Java 层的 native 方法所对应到的 native 层方法，可在路径 /framework/base/core/jni 中找到</strong>。</p><p>这里的 sendSignal 所对应的 JNI 方法是：android_util_Process.cpp 文件的 android_os_Process_SendSignal 方法。</p><p><strong><font color="#FF0000">android_os_Process_SendSignal</font></strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">android_os_Process_sendSignal</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject clazz<span class="token punctuation">,</span> jint pid<span class="token punctuation">,</span> jint sig<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 打印 Signal 信息</span>        <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"Sending signal. PID: %"</span> PRId32 <span class="token string">" SIG: %"</span> PRId32<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> sig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用 kill 方法</span>        <span class="token function">kill</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> sig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-2-killProcessQuiet"><a href="#2-2-killProcessQuiet" class="headerlink" title="2.2 killProcessQuiet"></a>2.2 killProcessQuiet</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">killProcessQuiet</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sendSignalQuiet</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> SIGNAL_KILL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @hide     * Private impl for avoiding a log message...  DO NOT USE without doing     * your own log, or the Android Illuminati will find you some night and     * beat you up.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">sendSignalQuiet</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">,</span> <span class="token keyword">int</span> signal<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>sendSignalQuiet 所对应的 JNI 方法是：android_util_Process.cpp 文件的 android_os_Process_sendSignalQuiet 方法。</p><p><strong><font color="#FF0000">android_os_Process_sendSignalQuiet</font></strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">android_os_Process_sendSignalQuiet</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject clazz<span class="token punctuation">,</span> jint pid<span class="token punctuation">,</span> jint sig<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用 kill 方法</span>        <span class="token function">kill</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> sig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其实 sendSignal 和 sendSignalQuiet 的唯一区别就是在于是否有 ALOGI() 这一行代码（是否打印 Log 信息）。</p><p>最终杀进程的实现方法都是调用 kill(pid, sig) 方法。</p><h2 id="2-3-killProcessGroup"><a href="#2-3-killProcessGroup" class="headerlink" title="2.3 killProcessGroup"></a>2.3 killProcessGroup</h2><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// killProcessGroup 本身就是个 native 方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">killProcessGroup</span><span class="token punctuation">(</span><span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过上面的分析，不然发现 killProcessGroup 对应的 native 层方法是：android_os_Process_killProcessGroup。</p><p><strong><font color="#FF0000">android_os_Process_killProcessGroup</font></strong></p><pre class=" language-cpp"><code class="language-cpp">jint <span class="token function">android_os_Process_killProcessGroup</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject clazz<span class="token punctuation">,</span> jint uid<span class="token punctuation">,</span> jint pid<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">killProcessGroup</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> SIGKILL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>看看 killProcessGroup 方法：位于 system/core/libprocessgroup/processgroup.cpp</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">killProcessGroup</span><span class="token punctuation">(</span>uid_t uid<span class="token punctuation">,</span> <span class="token keyword">int</span> initialPid<span class="token punctuation">,</span> <span class="token keyword">int</span> signal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重启 40 次限定</span>    <span class="token keyword">return</span> <span class="token function">killProcessGroup</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> initialPid<span class="token punctuation">,</span> signal<span class="token punctuation">,</span> <span class="token number">40</span> <span class="token comment" spellcheck="true">/*retries*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>继续跟踪：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">killProcessGroup</span><span class="token punctuation">(</span>uid_t uid<span class="token punctuation">,</span> <span class="token keyword">int</span> initialPid<span class="token punctuation">,</span> <span class="token keyword">int</span> signal<span class="token punctuation">,</span> <span class="token keyword">int</span> retries<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>chrono<span class="token operator">::</span>steady_clock<span class="token operator">::</span>time_point start <span class="token operator">=</span> std<span class="token operator">::</span>chrono<span class="token operator">::</span>steady_clock<span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> retry <span class="token operator">=</span> retries<span class="token punctuation">;</span>    <span class="token keyword">int</span> processes<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>processes <span class="token operator">=</span> <span class="token function">doKillProcessGroupOnce</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> initialPid<span class="token punctuation">,</span> signal<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当还有进程未被杀死，则重试，最多40次</span>        <span class="token function">LOG</span><span class="token punctuation">(</span>VERBOSE<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Killed "</span> <span class="token operator">&lt;&lt;</span> processes                     <span class="token operator">&lt;&lt;</span> <span class="token string">" processes for processgroup "</span> <span class="token operator">&lt;&lt;</span> initialPid<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>retry <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>this_thread<span class="token operator">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>5ms<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">--</span>retry<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 重试40次，仍然没有杀死进程，代表杀进程失败</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>processes <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">PLOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Error encountered killing process cgroup uid "</span> <span class="token operator">&lt;&lt;</span> uid <span class="token operator">&lt;&lt;</span> <span class="token string">" pid "</span>                    <span class="token operator">&lt;&lt;</span> initialPid<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span>chrono<span class="token operator">::</span>steady_clock<span class="token operator">::</span>time_point end <span class="token operator">=</span> std<span class="token operator">::</span>chrono<span class="token operator">::</span>steady_clock<span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> ms <span class="token operator">=</span> std<span class="token operator">::</span>chrono<span class="token operator">::</span>duration_cast<span class="token operator">&lt;</span>std<span class="token operator">::</span>chrono<span class="token operator">::</span>milliseconds<span class="token operator">></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// We only calculate the number of 'processes' when killing the processes.</span>    <span class="token comment" spellcheck="true">// In the retries == 0 case, we only kill the processes once and therefore</span>    <span class="token comment" spellcheck="true">// will not have waited then recalculated how many processes are remaining</span>    <span class="token comment" spellcheck="true">// after the first signals have been sent.</span>    <span class="token comment" spellcheck="true">// Logging anything regarding the number of 'processes' here does not make sense.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>processes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>retries <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">LOG</span><span class="token punctuation">(</span>INFO<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Successfully killed process cgroup uid "</span> <span class="token operator">&lt;&lt;</span> uid <span class="token operator">&lt;&lt;</span> <span class="token string">" pid "</span>                      <span class="token operator">&lt;&lt;</span> initialPid <span class="token operator">&lt;&lt;</span> <span class="token string">" in "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"ms"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 移除进程组相应的目录</span>        <span class="token keyword">return</span> <span class="token function">removeProcessGroup</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> initialPid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>retries <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">LOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Failed to kill process cgroup uid "</span> <span class="token operator">&lt;&lt;</span> uid <span class="token operator">&lt;&lt;</span> <span class="token string">" pid "</span> <span class="token operator">&lt;&lt;</span> initialPid                       <span class="token operator">&lt;&lt;</span> <span class="token string">" in "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"ms, "</span> <span class="token operator">&lt;&lt;</span> processes                       <span class="token operator">&lt;&lt;</span> <span class="token string">" processes remain"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>看下 doKillProcessGroupOnce 方法：位于 system/core/libprocessgroup/processgroup.cpp</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// Returns number of processes killed on success</span><span class="token comment" spellcheck="true">// Returns 0 if there are no processes in the process cgroup left to kill</span><span class="token comment" spellcheck="true">// Returns -errno on error</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">doKillProcessGroupOnce</span><span class="token punctuation">(</span>uid_t uid<span class="token punctuation">,</span> <span class="token keyword">int</span> initialPid<span class="token punctuation">,</span> <span class="token keyword">int</span> signal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ProcessGroup process_group<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>process_group<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> initialPid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">PLOG</span><span class="token punctuation">(</span>WARNING<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Failed to open process cgroup uid "</span> <span class="token operator">&lt;&lt;</span> uid <span class="token operator">&lt;&lt;</span> <span class="token string">" pid "</span> <span class="token operator">&lt;&lt;</span> initialPid<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span>errno<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// We separate all of the pids in the cgroup into those pids that are also the leaders of</span>    <span class="token comment" spellcheck="true">// process groups (stored in the pgids set) and those that are not (stored in </span>    <span class="token comment" spellcheck="true">// the pids set).</span>    std<span class="token operator">::</span>set<span class="token operator">&lt;</span>pid_t<span class="token operator">></span> pgids<span class="token punctuation">;</span>    pgids<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>initialPid<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>set<span class="token operator">&lt;</span>pid_t<span class="token operator">></span> pids<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    pid_t pid<span class="token punctuation">;</span>    <span class="token keyword">int</span> processes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// GetOneAppProcess 方法的作用是从节点 /acct/uid_/pid_/cgroup.procs 中获取相应 pid</span>    <span class="token comment" spellcheck="true">// 这里是进程，而非线程</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> process_group<span class="token punctuation">.</span><span class="token function">GetOneAppProcess</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> pid <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        processes<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Should never happen...  but if it does, trying to kill this</span>            <span class="token comment" spellcheck="true">// will boomerang right back and kill us!  Let's not let that happen.</span>            <span class="token function">LOG</span><span class="token punctuation">(</span>WARNING<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Yikes, we've been told to kill pid 0! How about we don't do that?"</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不会进入此分支</span>        <span class="token punctuation">}</span>        pid_t pgid <span class="token operator">=</span> <span class="token function">getpgid</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pgid <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">PLOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"getpgid("</span> <span class="token operator">&lt;&lt;</span> pid <span class="token operator">&lt;&lt;</span> <span class="token string">") failed"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pgid <span class="token operator">==</span> pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            pgids<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            pids<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Erase all pids that will be killed when we kill the process groups.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> pids<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> pids<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        pid_t pgid <span class="token operator">=</span> <span class="token function">getpgid</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pgids<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>pgid<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            it <span class="token operator">=</span> pids<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token operator">++</span>it<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Kill all process groups.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> pgid <span class="token operator">:</span> pgids<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">LOG</span><span class="token punctuation">(</span>VERBOSE<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Killing process group "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span>pgid <span class="token operator">&lt;&lt;</span> <span class="token string">" in uid "</span> <span class="token operator">&lt;&lt;</span> uid                     <span class="token operator">&lt;&lt;</span> <span class="token string">" as part of process cgroup "</span> <span class="token operator">&lt;&lt;</span> initialPid<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用 kill(pid, sig) 方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token operator">-</span>pgid<span class="token punctuation">,</span> signal<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">PLOG</span><span class="token punctuation">(</span>WARNING<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"kill("</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span>pgid <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> signal <span class="token operator">&lt;&lt;</span> <span class="token string">") failed"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Kill remaining pids.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> pid <span class="token operator">:</span> pids<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">LOG</span><span class="token punctuation">(</span>VERBOSE<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Killing pid "</span> <span class="token operator">&lt;&lt;</span> pid <span class="token operator">&lt;&lt;</span> <span class="token string">" in uid "</span> <span class="token operator">&lt;&lt;</span> uid                     <span class="token operator">&lt;&lt;</span> <span class="token string">" as part of process cgroup "</span> <span class="token operator">&lt;&lt;</span> initialPid<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用 kill(pid, sig) 方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">kill</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> signal<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">PLOG</span><span class="token punctuation">(</span>WARNING<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"kill("</span> <span class="token operator">&lt;&lt;</span> pid <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> signal <span class="token operator">&lt;&lt;</span> <span class="token string">") failed"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// processes 代表总共杀死了进程组中的进程个数</span>    <span class="token keyword">return</span> ret <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> processes <span class="token operator">:</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>doKillProcessGroupOnce</code> 的功能是杀掉 uid 下，跟 initialPid 同一个进程组的所有进程。也就意味着通过 <code>kill &lt;pid&gt;</code> ，当 pid 是某个进程的子线程时，那么最终杀的仍是进程。</p><p>最终杀进程的实现方法都是调用 <code>kill(pid, sig)</code> 方法。</p><p>再看下 removeProcessGroup 方法：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">removeProcessGroup</span><span class="token punctuation">(</span>uid_t uid<span class="token punctuation">,</span> <span class="token keyword">int</span> pid<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    <span class="token keyword">char</span> path<span class="token punctuation">[</span>PROCESSGROUP_MAX_PATH_LEN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 删除目录 /acct/uid_&lt;uid>/pid_&lt;pid>/</span>    <span class="token function">convertUidPidToPath</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> uid<span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">rmdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 删除目录 /acct/uid_&lt;uid>/</span>    <span class="token function">convertUidToPath</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rmdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2-4-流程图"><a href="#2-4-流程图" class="headerlink" title="2.4 流程图"></a>2.4 流程图</h2><center><img src="https://upload-images.jianshu.io/upload_images/3517194-aedfee9f07c089e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1020" alt="原理图.png"></center><h2 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5 总结"></a>2.5 总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ Process.killProcess(int pid): 杀 pid 进程<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ Process.killProcessQuiet(int pid)：杀 pid 进程，且不输出 log 信息<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ Process.killProcessGroup(int uid, int pid)：杀同一个 uid 下同一进程组下的所有进程</p><p>以上 3 个方法，最终杀进程的实现方法都是调用 <code>kill(pid, sig)</code> 方法，该方法位于用户空间的 Native 层，经过系统调用进入到 Linux 内核的 <code>sys_kill</code> 方法。对于杀进程此处的 sig = 9，其实与大家平时在 adb 里输入的 <code>kill -9 &lt;pid&gt;</code> 效果基本一致。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://gityuan.com/2016/04/16/kill-signal/" target="_blank" rel="noopener">理解杀进程的实现原理</a></p><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>推荐跳转：<a href="https://superandroid.pro/2019/01/01/00.%20Thinking%20in%20Android%20--%2001.%20%E5%8D%9A%E5%AE%A2%E7%B4%A2%E5%BC%95/">博客索引（Android 9.0）</a></p>]]></content>
      
      
      <categories>
          
          <category> 核心机制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Process </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入钻研 Android 设计模式 之 单例模式</title>
      <link href="/2018/08/10/06.she-ji-mo-shi-xi-lie-shen-ru-yan-jiu-android-she-ji-mo-shi-zhi-dan-li-mo-shi/"/>
      <url>/2018/08/10/06.she-ji-mo-shi-xi-lie-shen-ru-yan-jiu-android-she-ji-mo-shi-zhi-dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><h2 id="1-1-什么是单例模式？"><a href="#1-1-什么是单例模式？" class="headerlink" title="1.1 什么是单例模式？"></a>1.1 什么是单例模式？</h2><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p><strong><font color="#FF0000" size="4">注意：</font></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;💥 &nbsp;单例类只能有一个实例。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;💥 &nbsp;单例类必须自己创建自己的唯一实例。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;💥 &nbsp;单例类必须给所有其他对象提供这一实例。</p><p>我们先来看看关于“单例模式”的以下几点：</p><p><strong><font color="#4876FF">单例意图：</font></strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p><strong><font color="#4876FF">主要解决：</font></strong>一个全局使用的类频繁地创建与销毁。</p><p><strong><font color="#4876FF">何时使用：</font></strong>当您想控制实例数目，节省系统资源的时候。</p><p><strong><font color="#4876FF">如何解决：</font></strong>判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p><p><strong><font color="#4876FF">关键代码：</font></strong>构造函数是私有的。</p><p><strong><font color="#4876FF">单例优点：</font></strong> 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、避免对资源的多重占用（比如写文件操作）。</p><p><strong><font color="#4876FF">单例缺点：</font></strong> 1、没有接口；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、不能继承；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p><p><strong><font color="#4876FF">使用场景：</font></strong> 1、要求生产唯一序列号；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</p><p><strong><font color="#4876FF">注意事项：</font></strong>getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</p><h2 id="1-2-单例-DEMO"><a href="#1-2-单例-DEMO" class="headerlink" title="1.2 单例 DEMO"></a>1.2 单例 DEMO</h2><p>接下来我们看个简单的单例设计的 Demo，我们先创建一个 Singleton 类：SingleObject.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleObject</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//创建 SingleObject 的一个对象</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> SingleObject instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//让构造函数为 private，这样该类就不会被实例化</span>   <span class="token keyword">private</span> <span class="token function">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//获取唯一可用的对象</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> SingleObject <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> instance<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后从 singleton 类获取唯一的对象：SingletonPatternDemo.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonPatternDemo</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//不合法的构造函数</span>      <span class="token comment" spellcheck="true">//编译时错误：构造函数 SingleObject() 是不可见的</span>      <span class="token comment" spellcheck="true">//SingleObject object = new SingleObject();</span>      <span class="token comment" spellcheck="true">//获取唯一可用的对象</span>      SingleObject object <span class="token operator">=</span> SingleObject<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//显示消息</span>      object<span class="token punctuation">.</span><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们看下执行结果：</p><pre><code>Hello World!</code></pre><h1 id="2-单例模式的实现方式"><a href="#2-单例模式的实现方式" class="headerlink" title="2. 单例模式的实现方式"></a>2. 单例模式的实现方式</h1><h2 id="2-1-基本版：饿汉式"><a href="#2-1-基本版：饿汉式" class="headerlink" title="2.1 基本版：饿汉式"></a>2.1 基本版：饿汉式</h2><blockquote><p>代码</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> instance<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><blockquote><p>说明</p></blockquote><p>这种方式比较常见，典型的“饿汉式”写法。</p><p>【是否多线程安全】：是<br>【实现难度】：易<br>【优点】：没有加锁，执行效率会提高。<br>【缺点】：<strong><font color="#FF0000">类加载时就初始化，浪费内存。</font></strong></p><h2 id="2-2-改进版：懒汉式-线程不安全"><a href="#2-2-改进版：懒汉式-线程不安全" class="headerlink" title="2.2 改进版：懒汉式 - 线程不安全"></a>2.2 改进版：懒汉式 - 线程不安全</h2><blockquote><p>代码</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> instance<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><blockquote><p>说明</p></blockquote><p><strong><font color="#1874CD">这种方式是大多数面试者的写法，也是教科书上的标配，</font>但这段代码却存在一个致命的问题：<font color="#FF0000">当多个线程并行调用 getInstance() 的时候，就会创建多个实例。</font></strong></p><h2 id="2-3-改进版：懒汉式-线程安全"><a href="#2-3-改进版：懒汉式-线程安全" class="headerlink" title="2.3 改进版：懒汉式 - 线程安全"></a>2.3 改进版：懒汉式 - 线程安全</h2><blockquote><p>代码</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> instance<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><blockquote><p>说明</p></blockquote><p>既然要线程安全，那就如上所述“加锁”处理！</p><p>【是否多线程安全】：是<br>【实现难度】：易<br>【优点】：第一次调用才初始化，避免内存浪费。<br>【缺点】：<strong><font color="#FF0000">必须加锁 synchronized 才能保证单例，但加锁（加锁操作也是耗时的）会影响效率。</font></strong></p><h2 id="2-4-改进版：双重校验锁"><a href="#2-4-改进版：双重校验锁" class="headerlink" title="2.4 改进版：双重校验锁"></a>2.4 改进版：双重校验锁</h2><blockquote><p>代码</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> instance<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><blockquote><p>说明</p></blockquote><p>为什么需要进行 2 次判断是否为空呢？</p><p><strong><font color="#FF0000">第一次判断是为了避免不必要的同步，第二次判断是确保在此之前没有其他进程进入到 synchronized 块创建了新实例。</font></strong></p><p>这段代码看起来很完美，很可惜，它还是有隐患。主要在于 instance = new Singleton() 这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;1、给 instance 分配内存<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;2、调用 Singleton 的构造函数来初始化成员变量<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;3、将 instance 对象指向分配的内存空间（执行完这步 instance 就为非 null 了）</p><p>但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。</p><h2 id="2-5-改进版：双检锁（volatile）"><a href="#2-5-改进版：双检锁（volatile）" class="headerlink" title="2.5 改进版：双检锁（volatile）"></a>2.5 改进版：双检锁（volatile）</h2><blockquote><p>代码</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> instance<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><blockquote><p>说明</p></blockquote><p>有些人认为使用 volatile 的原因是可见性，也就是可以保证线程在本地不会存有 instance 的副本，每次都是去主内存中读取。但其实是不对的。<strong><font color="#FF0000">使用 volatile 的主要原因是其另一个特性：禁止指令重排序优化</font>。</strong>也就是说，在 volatile 变量的赋值操作后面会有一个内存屏障（生成的汇编代码上），读操作不会被重排序到内存屏障之前。比如上面的例子，取操作必须在执行完 1-2-3 之后或者 1-3-2 之后，不存在执行到 1-3 然后取到值的情况。从「先行发生原则」的角度理解的话，就是对于一个 volatile 变量的写操作都先行发生于后面对这个变量的读操作（这里的“后面”是时间上的先后顺序）。</p><p>但是特别注意在 Java 5 以前的版本使用了 volatile 的双检锁还是有问题的。其原因是 Java 5 以前的 JMM （Java 内存模型）是存在缺陷的，即使将变量声明成 volatile 也不能完全避免重排序，主要是 volatile 变量前后的代码仍然存在重排序问题。这个 volatile 屏蔽重排序的问题在 Java 5 中才得以修复，所以在这之后才可以放心使用 volatile。</p><p><strong><font color="#FF0000">那么，有没有一种既有懒加载，又保证了线程安全，还简单的方法呢？</font></strong></p><p>当然有，<strong><font color="#1874CD">静态内部类就是一种我们想要的方法<font></font></font></strong>。我们完全可以把 Singleton 实例放在一个静态内部类中，这样就避免了静态实例在 Singleton 类加载的时候就创建对象，并且由于静态内部类只会被加载一次，所以这种写法也是线程安全的。</p><h2 id="2-6-终极版：静态内部类"><a href="#2-6-终极版：静态内部类" class="headerlink" title="2.6 终极版：静态内部类"></a>2.6 终极版：静态内部类</h2><blockquote><p>代码</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">{</span>          <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> SingletonHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><blockquote><p>说明</p></blockquote><p>这是比较推荐的解法，这种写法用 JVM 本身的机制保证了线程安全的问题，同时读取实例的时候也不会进行同步，没什么性能缺陷，还不依赖 JDK 版本。</p><h2 id="2-7-传说版：枚举"><a href="#2-7-传说版：枚举" class="headerlink" title="2.7 传说版：枚举"></a>2.7 传说版：枚举</h2><blockquote><p>代码</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Singleton <span class="token punctuation">{</span>      INSTANCE<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><blockquote><p>说明</p></blockquote><p>这是从 Java 1.5 发行版本后就可以实用的单例方法，我们可以通过 Singleton.INSTANCE 来访问实例，这比调用 getInstance() 方法简单多了。</p><p>创建枚举默认就是线程安全的，所以不需要担心 double checked locking，而且还能防止反序列化导致重新创建新的对象。</p><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>推荐跳转：<a href="https://superandroid.pro/2019/01/01/00.%20Thinking%20in%20Android%20--%2001.%20%E5%8D%9A%E5%AE%A2%E7%B4%A2%E5%BC%95/">博客索引（Android 9.0）</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AsyncTask 详解（用法篇）</title>
      <link href="/2018/08/08/05.jin-cheng-xian-cheng-xi-lie-asynctask-xiang-jie-yong-fa-pian/"/>
      <url>/2018/08/08/05.jin-cheng-xian-cheng-xi-lie-asynctask-xiang-jie-yong-fa-pian/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong><font color="#AAAAAA">AsyncTask 作为一个比 Handler 还要好用的消息处理类，它是一个抽象类，如果想要使用它的话，我们必须创建一个子类去继承它。</font></strong></p></blockquote><hr><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>看一下这个抽象类：android.os.AsyncTask&lt;Params, Progress, Result&gt;，指定了三个泛型参数，分析一下三个参数：</p><p>1、<strong><font color="#1874CD">Params：</font></strong>在执行 AsyncTask 时需要传入的参数，可用于在后台任务中使用。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">DownloadTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token function">doInBackground</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">// 这边的 Integer 可以自定义</span></code></pre><p>2、<strong><font color="#1874CD">Progress：</font></strong>后台任务执行时，如果需要在界面上显示当前的进度，则使用这里指定的泛型作为进度单位。</p><p>3、<strong><font color="#1874CD">Result：</font></strong>当任务执行完毕后，如果需要对结果进行返回，则使用这里指定的泛型作为返回值类型，比如我们常使用 Boolean 或 String 类型作为返回类型。</p><p><strong><font color="#FF0000" size="3">Notice：</font></strong>这三个参数是泛型参数，也就是说参数类型是根据要求传入的，所以在方法的使用过程中，一定要清晰参数类型的设定和使用。</p><p><strong>这里给出一个最简单的自定义 AsyncTask 的方式：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">DownloadTask</span> <span class="token keyword">extends</span> <span class="token class-name">AsyncTask</span><span class="token operator">&lt;</span>Void<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Boolean<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>当然，定义完一个继承 AsyncTask 的子类后，我们还需要覆写 AsyncTask 的几个方法：</p><p>　　　　🍁 <strong><font color="#0000CD" size="3">1.     onPreExecute()                 </font></strong></p><p>　　　　🍁 <strong><font color="#0000CD" size="3">2.     doInBackground(Params…)      </font></strong></p><p>　　　　🍁 <strong><font color="#0000CD" size="3">3.     onProgressUpdate(Progress…)  </font></strong></p><p>　　　　🍁 <strong><font color="#0000CD" size="3">4.     onPostExecute(Result)          </font></strong></p><hr><h3 id="四大护法"><a href="#四大护法" class="headerlink" title="四大护法"></a>四大护法</h3><p>下面，我们对这 4 个方法的使用流程作一个详细的介绍！</p><h4 id="onPreExecute"><a href="#onPreExecute" class="headerlink" title="onPreExecute()"></a>onPreExecute()</h4><p>这个方法顾名思义，就是在异步任务处理之前需要执行的操作，那么它操作什么？简单的说就是进行一些界面上的初始化操作，比如：显示一个进度条对话框等。这个方法不是我们的重点方法，但是在使用过程中巧妙使用可以增强界面的可观性。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPreExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>　　<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPreExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 可以进行一些预处理</span><span class="token punctuation">}</span></code></pre><h4 id="doInBackground"><a href="#doInBackground" class="headerlink" title="doInBackground()"></a>doInBackground()</h4><p>这个就是 AsyncTask 中最为重要的方法了，因为这个方法中的所有代码都会在子线程中运行，我们也是在这个方法中去处理所有的耗时任务。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这边 params 是由 execute() 传进来的，这个 execute 方法可以在下面找到答案。</span><span class="token keyword">protected</span> Boolean <span class="token function">doInBackground</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>  　　<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　<span class="token function">publishProgress</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 对主线程 UI 进行更新操作，将调用 onProgressUpdate() 方法</span>　　　　<span class="token keyword">try</span> <span class="token punctuation">{</span>　　　　　　Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 休眠线程</span>　　　　<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　　　e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　<span class="token punctuation">}</span>　　<span class="token punctuation">}</span>　　<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 任务完成后 return 一个结果，这边的 Boolean 类型的结果</span><span class="token punctuation">}</span></code></pre><p>通过以上的代码，我们可以发现：任务一旦完成就可以通过 return 语句来将任务的执行结果返回，如果 AsyncTask 的第三个泛型参数被指定的是 Void，就可以不返回任务执行结果。</p><p>在这个方法中是不可以进行 UI 操作的（子线程是无法对主线程进行修改的），如果需要更新 UI 元素的话，就需要调用 publishProgress(Progress…) 方法来完成了。</p><h4 id="onProgressUpdate"><a href="#onProgressUpdate" class="headerlink" title="onProgressUpdate()"></a>onProgressUpdate()</h4><p>当在后台任务中调用了 publishProgress(Progress…) 方法后，这个方法就会很快被调用。在这个方法中，可以对 UI 进行操作，利用参数中的数值就可以对界面元素进行相应地更新：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onProgressUpdate</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                   <span class="token comment" spellcheck="true">// values[0] = i</span>    MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"当前进度是："</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 主线程进行操作</span><span class="token punctuation">}</span></code></pre><h4 id="onPostExecute"><a href="#onPostExecute" class="headerlink" title="onPostExecute()"></a>onPostExecute()</h4><p>这个函数就是来执行 return 返回后的一些操作。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPostExecute</span><span class="token punctuation">(</span>Boolean b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                         <span class="token comment" spellcheck="true">// b --> true</span>　　<span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getBaseContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Download succeed"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 后续操作</span>　　<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getBaseContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Download failed"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>那么，问题来了，我们定义好了类，同时覆写了各种方法，但是如何启动它？</p><p>如果想要启动这个任务，只需编写一行代码：new DownloadTask().execute();</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  　　<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token keyword">new</span> <span class="token class-name">DownloadTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这样就可以启动异步类了</span><span class="token punctuation">}</span></code></pre><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>推荐跳转：<a href="https://superandroid.pro/2019/01/01/00.%20Thinking%20in%20Android%20--%2001.%20%E5%8D%9A%E5%AE%A2%E7%B4%A2%E5%BC%95/">博客索引（Android 9.0）</a></p>]]></content>
      
      
      <categories>
          
          <category> 进程线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AsyncTask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析多线程中的 “同步” 和 “死锁”</title>
      <link href="/2018/08/06/05.jin-cheng-xian-cheng-xi-lie-qian-xi-duo-xian-cheng-zhong-de-tong-bu-he-si-suo/"/>
      <url>/2018/08/06/05.jin-cheng-xian-cheng-xi-lie-qian-xi-duo-xian-cheng-zhong-de-tong-bu-he-si-suo/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong><font color="#AAAAAA">通过一个日常卖票系统统计剩余票数的小 Demo 问题，引入 synchronized 用法，重点探讨何为“死锁”，产生原因、条件及如何解决！</font></strong></p></blockquote><hr><h1 id="1-Thread-同步"><a href="#1-Thread-同步" class="headerlink" title="1. Thread - 同步"></a>1. Thread - 同步</h1><h2 id="1-1-问题引出"><a href="#1-1-问题引出" class="headerlink" title="1.1 问题引出"></a>1.1 问题引出</h2><p>我们现在来通过 Runnable 接口实现多线程，产生 3 个线程对象，模拟卖票的场景！</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 模拟日常卖票场景</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 加入延迟</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"卖票：ticket = "</span> <span class="token operator">+</span> ticket<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncDemo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyThread mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt<span class="token punctuation">)</span><span class="token punctuation">;</span>            t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 模拟多窗口卖票</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 模拟多窗口卖票</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 模拟多窗口卖票</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们执行下这段代码，结果如下：</p><pre><code>卖票：ticket = 5卖票：ticket = 4卖票：ticket = 5卖票：ticket = 3卖票：ticket = 2卖票：ticket = 2卖票：ticket = 1卖票：ticket = 0卖票：ticket = -1    // 票数竟然还能负数？</code></pre><p>为什么会出现“负数”的情况：在上面的操作中，我们可以发现，因为加入了“延迟操作”一个线程很有可能在还没对票数进行减操作之前，其他线程就已经将票数减少了，这样就会出现票数为负的情况。</p><p>有没有方法解决？肯定是有的！想解决这样的问题，就必须使用同步！所谓同步，就是指多个操作在同一个时间段内只能有一个线程进行，其他线程要等待此线程完成之后才可以继续执行。</p><h2 id="1-2-解决问题"><a href="#1-2-解决问题" class="headerlink" title="1.2 解决问题"></a>1.2 解决问题</h2><p>解决资源共享的同步操作，有两种方法：<strong><font color="#FF0000">“同步代码块”</font></strong> 和 <strong><font color="#FF0000">“同步方法”</font></strong> ！</p><h3 id="1-2-1-同步代码块"><a href="#1-2-1-同步代码块" class="headerlink" title="1.2.1 同步代码块"></a>1.2.1 同步代码块</h3><p>所谓代码块就是指使用“{}”括起来的一段代码，如果在代码块上加上 synchronized 关键字，则此代码块就成为“同步代码块”。</p><p><strong><font color="#D15FEE">【同步代码块 - 格式】</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>同步对象<span class="token punctuation">)</span> <span class="token punctuation">{</span>    需要同步的代码 <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们对代码进行修改：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 加入同步操作</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 加入延迟</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"卖票：ticket = "</span> <span class="token operator">+</span> ticket<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncDemo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyThread mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt<span class="token punctuation">)</span><span class="token punctuation">;</span>            t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们重新执行下这段代码，结果如下：</p><pre><code>卖票：ticket = 5卖票：ticket = 4卖票：ticket = 3卖票：ticket = 2卖票：ticket = 1</code></pre><h3 id="1-2-2-同步方法"><a href="#1-2-2-同步方法" class="headerlink" title="1.2.2 同步方法"></a>1.2.2 同步方法</h3><p>除了可以将需要的代码设置成同步代码块外，也可以使用 synchronized 关键字将一个方法声明成“同步方法”。</p><p><strong><font color="#D15FEE">【同步方法 - 格式】</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span> 方法返回值 方法名称<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>我们采用同步方法对代码进行修改：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 调用同步方法</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 声明同步方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"卖票：ticket = "</span> <span class="token operator">+</span> ticket<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncDemo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyThread mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt<span class="token punctuation">)</span><span class="token punctuation">;</span>            t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们重新执行下这段代码，结果如下：</p><pre><code>卖票：ticket = 5卖票：ticket = 4卖票：ticket = 3卖票：ticket = 2卖票：ticket = 1</code></pre><p>从以上程序的运行结果可以发现，此代码完成了与之前同步代码块同样的功能。</p><h2 id="1-3-总结"><a href="#1-3-总结" class="headerlink" title="1.3 总结"></a>1.3 总结</h2><p>多个线程共享同一资源时需要进行同步，以保证资源操作的完整性。</p><h1 id="2-Thread-死锁"><a href="#2-Thread-死锁" class="headerlink" title="2. Thread - 死锁"></a>2. Thread - 死锁</h1><p>通过上面的例子，我们发现，同步还是很有好处的，它可以保证资源共享操作的正确性，但是过多的同步也会产生问题，这就是我们接下来要讨论“死锁”问题！</p><h2 id="2-1-什么是死锁？"><a href="#2-1-什么是死锁？" class="headerlink" title="2.1 什么是死锁？"></a>2.1 什么是死锁？</h2><p>多线程以及多进程改善了系统资源的利用率并提高了系统的处理能力。然而，并发执行也带来了新的问题 - - <strong><font color="#FF0000">“死锁”</font></strong>。</p><p>在编写多线程的时候，必须要注意资源的使用问题，如果两个或多个线程分别拥有不同的资源，而同时又需要对方释放资源才能继续运行时，就会发生死锁。</p><p><strong><font color="#8A2BE2">简单来说</font></strong>：死锁就是当一个或多个进程都在等待系统资源，而资源本身又被占用时所产生的一种状态。</p><h2 id="2-2-造成死锁的原因"><a href="#2-2-造成死锁的原因" class="headerlink" title="2.2 造成死锁的原因"></a>2.2 造成死锁的原因</h2><p>多个线程竞争共享资源，由于资源被占用，资源不足或进程推进顺序不当等原因造成线程处于永久阻塞状态，从而引发死锁。</p><h2 id="2-3-造成死锁的四个条件"><a href="#2-3-造成死锁的四个条件" class="headerlink" title="2.3 造成死锁的四个条件"></a>2.3 造成死锁的四个条件</h2><p>1、<strong><font color="#1874CD">互斥条件</font></strong>：进程对于所分配到的资源具有排它性，即一个资源只能被一个进程占用，直到被该进程释放。<br>2、<strong><font color="#1874CD">请求和保持条件</font></strong>：一个进程因请求被占用资源而发生阻塞时，对已获得的资源保持不放。<br>3、<strong><font color="#1874CD">不剥夺条件</font></strong>：任何一个资源在没被该进程释放之前，任何其他进程都无法对他剥夺占用。<br>4、<strong><font color="#1874CD">循环等待条件</font></strong>：当发生死锁时，所等待的进程必定会形成一个环路（类似于死循环），造成永久阻塞。</p><h2 id="2-4-问题引出"><a href="#2-4-问题引出" class="headerlink" title="2.4 问题引出"></a>2.4 问题引出</h2><p>现在张三想要李四的画，李四想要张三的书，于是产生了以下对话：</p><p>张三对李四说：“把你的画给我，我就给你书”<br>李四对张三说：“把你的书给我，我就给你画”</p><p>此时，张山在等着李四的答复，李四也在等着张三的答复，那么这样下去的结果就是，两个人都在等待，但是都没有结果，这就是“死锁”！</p><p>从线程角度来说，所谓死锁就是指两个线程都在等待彼此先完成，造成了程序的停滞，一般程序的死锁都是在程序运行时出现，比如我们通过一个代码范例来看看发生死锁的场景。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Zhangsan</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Zhangsan say: give me your painting, i will give you my book!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Zhangsan got Lisi's painting!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Lisi</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Lisi say: give me your book, i will give you my painting!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Lisi got Zhangsan's book!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDeadLock</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Zhangsan zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zhangsan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 实例化 static 型对象，数据共享</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Lisi ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lisi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 实例化 static 型对象，数据共享</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 声明标记，用于判断哪个对象先执行</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断标志位，flag 为 true，Zhangsan 先执行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>zs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token comment" spellcheck="true">// 同步第一个对象</span>                zs<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>ls<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 同步第二个对象</span>                    zs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                     <span class="token comment" spellcheck="true">// Lisi先执行</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>ls<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token comment" spellcheck="true">// 同步第二个对象</span>                ls<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>zs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 同步第一个对象</span>                    ls<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadDeadLock t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadDeadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ThreadDeadLock t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadDeadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Thread thA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>        thA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们执行下这段代码，结果如下：</p><pre><code>Zhangsan say: give me your painting, i will give you my book!Lisi say: give me your book, i will give you my painting!</code></pre><p>从程序的运行结果中可以看出，两个线程都在彼此等待着对方的执行完成，这样，程序就无法向下继续执行，从而造成了死锁的现象。</p><h2 id="2-5-解决问题"><a href="#2-5-解决问题" class="headerlink" title="2.5 解决问题"></a>2.5 解决问题</h2><p>要预防和避免死锁的发生，只需将上面所讲到的 4 个条件破坏掉其中之一即可。</p><p>如上面的代码当中，有四个同步代码块，只需要将其中一个同步代码块去掉，即可解决死锁问题，一般而言破坏“循环等待”这个条件是解决死锁最有效的方法。</p><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>推荐跳转：<a href="https://superandroid.pro/2019/01/01/00.%20Thinking%20in%20Android%20--%2001.%20%E5%8D%9A%E5%AE%A2%E7%B4%A2%E5%BC%95/">博客索引（Android 9.0）</a></p>]]></content>
      
      
      <categories>
          
          <category> 进程线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Synchronized </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探讨 “动态广播” 和 “静态广播” 的用法和区别</title>
      <link href="/2018/07/28/08.chang-yong-zu-jian-xi-lie-tan-tao-dong-tai-guang-bo-he-jing-tai-guang-bo-de-yong-fa-he-qu-bie/"/>
      <url>/2018/07/28/08.chang-yong-zu-jian-xi-lie-tan-tao-dong-tai-guang-bo-he-jing-tai-guang-bo-de-yong-fa-he-qu-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h1><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>新建一个 BroadcastTest 项目，修改 MainActivity ：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>broadcasttest<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>BroadcastReceiver<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>IntentFilter<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Toast<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IntentFilter intentFilter<span class="token punctuation">;</span>    <span class="token keyword">private</span> NetworkChangeReceiver networkChangeReceiver<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        intentFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intentFilter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">"android.net.conn.CONNECTIVITY_CHANGE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        networkChangeReceiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NetworkChangeReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">registerReceiver</span><span class="token punctuation">(</span>networkChangeReceiver<span class="token punctuation">,</span> intentFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unregisterReceiver</span><span class="token punctuation">(</span>networkChangeReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">NetworkChangeReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"network changes"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h1><p>“动态注册”的广播接收器可以自由地控制注册与注销，在灵活性方面有很大的优势，但是它也存在一个缺点：必须要在程序启动之后才能接收到广播，因为注册的逻辑是写在 onCreate() 方法中的。</p><p>那么有没有什么方法可以让程序在未启动的情况下就能接收到广播呢？这就是我们即将看到的“静态注册”方法了！</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><p>（1）新建一个 BroadcastReceiver：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>broadcasttest<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>BroadcastReceiver<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Toast<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BootCompleteReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"Boot Complete"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（2）静态广播接收器一定要在 AndroidManifest.xml 文件中注册才可以使用，如果你使用 Android Studio 快捷方式创建了这个广播接收器，那么系统会自动在 AndroidManifest.xml 中注册好这个广播接收器：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.marco.broadcasttest<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>        <span class="token attr-name"><span class="token namespace">android:</span>allowBackup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/app_name<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>roundIcon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>supportsRtl</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@style/AppTheme<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.MAIN<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span>        &lt;receiver            android:name=".BootCompleteReceiver"            android:enabled="true"                  // 是否启用这个广播接收器            android:exported="true"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>receiver</span><span class="token punctuation">></span></span>     // 是否允许这个广播接收器接收本程序以外的广播    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span></code></pre><p>（3）此时广播接收器还未能接收到开机广播，需要添加 Action 和 权限：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.marco.broadcasttest<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    // 添加权限    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.RECEIVE_BOOT_COMPLETED<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>        <span class="token attr-name"><span class="token namespace">android:</span>allowBackup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/app_name<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>roundIcon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>supportsRtl</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@style/AppTheme<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.MAIN<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>receiver</span>            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.BootCompleteReceiver<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>enabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            // 添加相应的 Action            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.BOOT_COMPLETED<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>receiver</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 常用组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Broadcast </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探讨 Service 的使用方法</title>
      <link href="/2018/07/25/08.chang-yong-zu-jian-xi-lie-tan-tao-service-de-shi-yong-fang-fa/"/>
      <url>/2018/07/25/08.chang-yong-zu-jian-xi-lie-tan-tao-service-de-shi-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h1><h2 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">Service.java</font></td><td>frameworks/base/core/java/android/app/Service.java</td></tr></tbody></table><h2 id="服务是什么？"><a href="#服务是什么？" class="headerlink" title="服务是什么？"></a>服务是什么？</h2><p>服务（Service）是 Android 中实现程序后台运行的解决方案，它非常适合去执行那些不需要和用户交互而且还需要长期进行的任务。服务的运行不依赖于任何用户界面，即使程序被切换到后台，或者用户打开了另外一个应用程序，服务仍然能够保持正常运行。</p><p>不过需要注意的是，服务并不是运行在一个独立的进程当中的，而是依赖于创建服务时所在的应用程序进程。当某个应用程序进程被杀掉时，所有依赖于该进程的服务也会停止运行。</p><h1 id="Service-使用方法"><a href="#Service-使用方法" class="headerlink" title="Service 使用方法"></a>Service 使用方法</h1><h2 id="定义一个服务"><a href="#定义一个服务" class="headerlink" title="定义一个服务"></a>定义一个服务</h2><p>首先，我们定义一个MyService.java类，当然作为一个服务类，必须要继承 Service（android.app.Service），看代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/core/java/android/app/Service.java</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token keyword">extends</span> <span class="token class-name">ContextWrapper</span> <span class="token keyword">implements</span> <span class="token class-name">ComponentCallbacks2</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"Service"</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> IBinder <span class="token function">onBind</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>Service 定义了一个抽象方法 onBind，子类继承它，必须复写此方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span><span class="token punctuation">{</span>　　<span class="token annotation punctuation">@Nullable</span>　　<span class="token annotation punctuation">@Override</span>　　<span class="token keyword">public</span> IBinder <span class="token function">onBind</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这是一个抽象方法，那么子类是必须要重写的</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>　　<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>服务既然已经定义好了，自然应该在服务中去处理一些事情，那处理事情的逻辑应该写在哪里？我们需要在服务里重写 Service 中的另一些常用的方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span><span class="token punctuation">{</span>　　<span class="token annotation punctuation">@Nullable</span>　　<span class="token annotation punctuation">@Override</span>　　<span class="token keyword">public</span> IBinder <span class="token function">onBind</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这是一个抽象方法，那么子类是必须要重写的</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>　　<span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                <span class="token comment" spellcheck="true">// 服务创建时调用</span>　　    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">onStartCommand</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 服务启动时调用</span>　　    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStartCommand</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> startId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                               <span class="token comment" spellcheck="true">// 服务销毁时调用</span>　　    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>和添加 Activity 一样，我们添加了一个服务，那么在 AndroidManifest.xml 文件中必须进行注册才能生效！</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>　　<span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.xin02ma.myapplication<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>　　　　<span class="token attr-name"><span class="token namespace">android:</span>allowBackup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>　　　　<span class="token attr-name"><span class="token namespace">android:</span>icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher<span class="token punctuation">"</span></span>　　　　<span class="token attr-name">......</span>　　　　<span class="token attr-name">&lt;activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>　　　　　　......　　　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span>　　　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MyService<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>enabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span></code></pre><h2 id="启动和停止服务"><a href="#启动和停止服务" class="headerlink" title="启动和停止服务"></a>启动和停止服务</h2><p>服务定义好了，接下来就应该考虑如何去启动以及停止这个服务了。</p><p>（1）先添加两个Button（activity_main.xml）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>　　<span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/start_service<span class="token punctuation">"</span></span>　　<span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>　　<span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>　　<span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/start_service<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>　　<span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/stop_service<span class="token punctuation">"</span></span>　　<span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>　　<span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>　　<span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/stop_service<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><center><img src="https://upload-images.jianshu.io/upload_images/3517194-d7ec3fa46f355206.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加两个Button.png"></center><p>　　（2）接下来，修改主函数 MainActivity 的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token keyword">implements</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">{</span>　　<span class="token keyword">private</span> Button startService<span class="token punctuation">;</span>                                              　　<span class="token keyword">private</span> Button stopService<span class="token punctuation">;</span>　　<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　<span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">// 采用布局</span>　　　　startService <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>start_service<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 取得Button实例</span>　　　　stopService <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>stop_service<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 取得Button实例</span>　　　　startService<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 监控Button,注册按钮事件</span>　　　　stopService<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment" spellcheck="true">// 监控Button,注册按钮时间</span>　　<span class="token punctuation">}</span>　　<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　<span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　　　<span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>start_service<span class="token operator">:</span>　　　　　　　　Intent startIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> MyService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　　　　　<span class="token function">startService</span><span class="token punctuation">(</span>startIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>                                          <span class="token comment" spellcheck="true">// 启动服务</span>　　　　　　　　<span class="token keyword">break</span><span class="token punctuation">;</span>　　　　　　<span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>stop_service<span class="token operator">:</span>　　　　　　　　Intent stopIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> MyService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　　　　　<span class="token function">stopService</span><span class="token punctuation">(</span>stopIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment" spellcheck="true">// 停止服务</span>　　　　　　　　<span class="token keyword">break</span><span class="token punctuation">;</span>　　　　　　<span class="token keyword">default</span><span class="token operator">:</span>　　　　　　　　<span class="token keyword">break</span><span class="token punctuation">;</span>　　　　<span class="token punctuation">}</span>　　<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的代码很简单，主要作了以下工作：</p><p>（1）取得 <font color="#FFFF00">startService</font> 和 <font color="#FFFF00">stopService</font> 两个按钮实例，并且注册了点击事件；</p><p>（2）通过 Intent 对象，调用 Activity 的 <font color="#FFFF00">startService()</font> 和 <font color="#FFFF00">stopService()</font> 方法来启动和停止服务。</p><p><strong><font color="#FF0000" size="4">【Notice】</font></strong></p><p>这里的活动的启动和停止完全是由活动本身控制的，如果我们 start 了服务，但是没有点击 stop，那么服务会一直处于运行状态，此时服务如何让自己停止下来？</p><p>只需要在 MyService 的任何一个位置调用 <strong><font color="#836FFF">stopSelf()</font></strong> 这个方法就能让服务停下来！</p><h2 id="Log测试"><a href="#Log测试" class="headerlink" title="Log测试"></a>Log测试</h2><p>添加Log，查看Service是如何运作的：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"MyService"</span><span class="token punctuation">;</span>　　<span class="token annotation punctuation">@Nullable</span>　　<span class="token annotation punctuation">@Override</span>　　<span class="token keyword">public</span> IBinder <span class="token function">onBind</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这是一个抽象方法，那么子类是必须要重写的</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>　　<span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                <span class="token comment" spellcheck="true">// 服务创建时调用</span>　　    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onCreate executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">onStartCommand</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 服务启动时调用</span>　    　Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onStartCommand executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　    　<span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStartCommand</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> startId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                               <span class="token comment" spellcheck="true">// 服务销毁时调用</span>　　    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onDestroy executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>添加了3行Log，目的就是看：在我们点击两个按钮的时候，整个Service什么时候创建，什么时候启动，什么时候毁灭！</p><p>我们来看一下执行结果，运行程序，查看Logcat中的打印日志：<br><br></p><center><img src="http://upload-images.jianshu.io/upload_images/3517194-0eede444c1a496ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="image"></center><p>（1）第一次点击 <strong><font color="#836FFF">StartService按钮</font></strong> 后，MyService中的 <strong><font color="#FFFF00">onCreate()</font></strong> 和 <strong><font color="#FFFF00">onStartCommand()</font></strong> 方法都执行了，图中黄色箭头所示！<br>此时，我们可以在 <strong><font color="#FFFFFF">手机 –&gt; 设置 –&gt; 应用 –&gt; 运行中</font></strong> 可以看到这个服务：<br><br></p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-e84ffff234f1eddd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="Service.png"></center><p>（2）然后我们点击 <strong><font color="#836FFF">stopService按钮</font></strong> 后，MyService中的 <strong><font color="#00B2EE">onDestory()</font></strong> 方法被执行，图中蓝色箭头所示！</p><p>（3）此时可能你会有一个疑问？当我们点击了 <strong><font color="#836FFF">startService按钮</font></strong> 以后，<strong><font color="#FFFF00">onCreate()</font></strong> 和 <strong><font color="#FFFF00">onStartCommand()</font></strong>方法同时被执行，这两个方法有什么区别？</p><p>图中的 <strong><font color="#FF0000">红色箭头</font></strong> 给了我们答案：<strong><font color="#FFFF00">onCreat()</font></strong> 方法是在服务第一次创建的时候调用的，而 <strong><font color="#FFFF00">onStartCommand()</font></strong> 方法则在每次启动服务的时候都会被调用。</p><p>当我们在 <strong><font color="#FFFFFF">服务未启动</font></strong> 的时候，点击 <strong><font color="#836FFF">startService 按钮</font></strong>，则此时会 <strong><font color="#FF0000">执行两个方法</font></strong>；</p><p>但是 <strong><font color="#FFFFFF">服务启动完成</font></strong> 之后，再次点击（随便你点几次）<strong><font color="#836FFF">startService按钮</font></strong>，你会发现 <strong><font color="#FF0000">只有onStartCommand()方法被执行</font></strong>。</p><h1 id="Service生命周期"><a href="#Service生命周期" class="headerlink" title="Service生命周期"></a>Service生命周期</h1><p>上面介绍完 Service 的使用方法，接下来看看 Service 的 <strong><font color="#FF0000">生命周期</font></strong> ：跟Activity相比，Service的生命周期很简单：<strong><font color="#FFFF00">onCreate()-&gt;onStart()-&gt;onDestroy()<font></font></font></strong></p><p>我们以如下的方式展开这章节的讨论工作！</p><p><strong><font color="#FF7F00">【主题】</font>：</strong>Activity 与 Service之间的 Communication</p><p><strong><font color="#FF7F00">【问题】</font>：</strong>由上贴我们知道，当我们点击 START SERVICE 按钮后，服务的 onCreate() 和 onStartCommand() 方法会得到执行，此后 Service 是一直存在于后台运行的，Activity 无法控制 Service 中具体的逻辑运行，那么这样 Activity 只相当于起到一个通知的作用，除了告诉 Service 你可以开始工作了。那么这样显然会分离两者之间的关联性，这也不是我们需要的结果！</p><p><strong><font color="#FF7F00">【后果】</font>：</strong>如果出现以上的问题，那么在我们平时的项目开发过程中，一直存在的 Service 很有可能会引起功耗的问题，可能影响手机的运行效率！</p><p><strong><font color="#FF7F00">【要求】</font>：</strong>我们能否将 Activity 与 Service 建立一种联系，当 Activity 终结之时，Service 也销毁，也就是有没有办法让 Activity 和 Service 能够<strong><font color="#FFFF00">“不求同生，但求共死”</font></strong>？ </p><p><strong><font color="#FF0000">答案是肯定的！</font></strong>这就涉及到 Service 的另一个重要知识点：<strong><font color="#1C86EE">绑定</font></strong> 与 <strong><font color="#1C86EE">解绑</font></strong>！</p><p>还是以代码为例：</p><h2 id="MyService"><a href="#MyService" class="headerlink" title="MyService"></a>MyService</h2><p><strong><font color="#FFFF00">MyService.java</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span><span class="token punctuation">{</span>　　<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"MyService"</span><span class="token punctuation">;</span>　　<span class="token keyword">private</span> DownloadBinder mBinder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DownloadBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 定义一个 DownloadBinder 类</span>　　<span class="token keyword">class</span> <span class="token class-name">DownloadBinder</span> <span class="token keyword">extends</span> <span class="token class-name">Binder</span> <span class="token punctuation">{</span>                               <span class="token comment" spellcheck="true">// 让 DownloadBinder 成为 Binder 的子类</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                   <span class="token comment" spellcheck="true">// 定义开始下载的方法</span>　　　　　　Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"startDownload executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　<span class="token punctuation">}</span>　　　　<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                   　 <span class="token comment" spellcheck="true">// 定义一个查看下载进度的方法</span>　　　　　　Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"getProgress executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　　　<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                 　　　　<span class="token punctuation">}</span>　　<span class="token punctuation">}</span>　　<span class="token annotation punctuation">@Nullable</span>　　<span class="token annotation punctuation">@Override</span>　　<span class="token keyword">public</span> IBinder <span class="token function">onBind</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// onBind()方法，这个方法将在绑定后调用</span>　　　　<span class="token keyword">return</span> mBinder<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// 返回 IBinder 的实例 --> DownloadBinder 类的实例</span>　　<span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                               　　    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onCreate executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">onStartCommand</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">)</span> <span class="token punctuation">{</span>      　    　Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onStartCommand executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　    　<span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStartCommand</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> startId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                               　　    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onDestroy executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="BIND-SERVICE-UNBIND-SERVICE"><a href="#BIND-SERVICE-UNBIND-SERVICE" class="headerlink" title="BIND SERVICE / UNBIND SERVICE"></a>BIND SERVICE / UNBIND SERVICE</h2><p>我们在Layout中添加两个按钮 <strong><font color="#FFFF00">BIND SERVICE</font></strong> 和 <strong><font color="#FFFF00">UNBIND SERVICE</font></strong>：</p><left><img src="http://upload-images.jianshu.io/upload_images/3517194-3d48d691a13e1455.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"> </left><p><strong><font color="#FFFF00">MainActivity.java</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token keyword">implements</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">{</span>　　<span class="token keyword">private</span> ServiceConnection connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                       <span class="token comment" spellcheck="true">// 创建一个 ServiceConnection 的匿名内部类</span>　　　　<span class="token annotation punctuation">@Override</span>　　　　<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span>ComponentName name<span class="token punctuation">,</span> IBinder service<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 重写 onServiceConnected() 方法</span>　　　　　　MyService<span class="token punctuation">.</span>DownloadBinder downloadBinder <span class="token operator">=</span> <span class="token punctuation">(</span>MyService<span class="token punctuation">.</span>DownloadBinder<span class="token punctuation">)</span> service<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 向下转型取得 downloadBinder 实例</span>　　　　　　downloadBinder<span class="token punctuation">.</span><span class="token function">startDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token comment" spellcheck="true">// 在 Activity 中调用 Service 的方法</span>　　　　　　downloadBinder<span class="token punctuation">.</span><span class="token function">getProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                  <span class="token comment" spellcheck="true">// 在 Activity 中调用 Service 的方法</span>　　　　<span class="token punctuation">}</span>　　　　<span class="token annotation punctuation">@Override</span>　　　　<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span>ComponentName name<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 重写onServiceDisconnected()方法</span>　　　　<span class="token punctuation">}</span>　　<span class="token punctuation">}</span><span class="token punctuation">;</span>　　<span class="token annotation punctuation">@Override</span>　　<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　<span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　Button startService <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>start_service<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　Button stopService <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>stop_service<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　Button bindService <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>bind_service<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　Button unbindService <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>unbind_service<span class="token punctuation">)</span><span class="token punctuation">;</span>        　　　　startService<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　stopService<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　bindService<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　unbindService<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span>　　<span class="token annotation punctuation">@Override</span>　　<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　<span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　　　<span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>start_service<span class="token operator">:</span>　　　　　　　　Intent startIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> MyService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// START 服务 --> onCreate() --> onStartCommand()</span>　　　　　　　　<span class="token function">startService</span><span class="token punctuation">(</span>startIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　　　　　<span class="token keyword">break</span><span class="token punctuation">;</span>　　　　　　<span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>stop_service<span class="token operator">:</span>　　　　　　　　Intent stopIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> MyService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// STOP 服务 --> onDestroy()</span>　　　　　　　　<span class="token function">stopService</span><span class="token punctuation">(</span>stopIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　　　　　<span class="token keyword">break</span><span class="token punctuation">;</span>　　　　　　<span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>bind_service<span class="token operator">:</span>                                            <span class="token comment" spellcheck="true">// 绑定 --> ？</span>　　　　　　　　Intent bindIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> MyService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　　　　　<span class="token function">bindService</span><span class="token punctuation">(</span>bindIntent<span class="token punctuation">,</span> connection<span class="token punctuation">,</span> BIND_AUTO_CREATE<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 💥 💥 💥 💥 重点分析</span>　　　　　　　　<span class="token keyword">break</span><span class="token punctuation">;</span>　　　　　　<span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>unbind_service<span class="token operator">:</span>                                          <span class="token comment" spellcheck="true">// 解绑 --> ？</span>　　　　　　　　<span class="token function">unbindService</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　　　　　<span class="token keyword">break</span><span class="token punctuation">;</span>　　　　　　<span class="token keyword">default</span><span class="token operator">:</span>　　　　　　　　<span class="token keyword">break</span><span class="token punctuation">;</span>　　　　<span class="token punctuation">}</span>　　<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="bindService"><a href="#bindService" class="headerlink" title="bindService"></a>bindService</h2><p>看一下 <strong><font color="#FFFF00">bindService(bindIntent, connection, BIND_AUTO_CREATE)</font></strong> 这个方法：</p><p><strong><font color="#FFFF00">bindService</font></strong> 接收了 <strong>3</strong> 个参数：</p><p><strong><font color="#9F79EE">bindIntent</font></strong>：这个参数传入的就是我们的 intent，目的就是调用 MyService 这个服务。</p><p><strong><font color="#9F79EE">connection</font></strong>：这个参数传入的就是创建好的 ServiceConnection 的实例，这个参数代表着我们的 Activity 是要和 Service 绑定在一起的！</p><p><strong><font color="#9F79EE">BIND_AUTO_CREATE</font></strong>：这是一个 FLAG，表示在活动和服务进行绑定后 <strong><font color="#FF0000">自动创建服务</font></strong>。注意！是自动创建服务，也就是说 MyService 会执行 onCreate() 方法，但是不会执行 onStartCommand() 方法！</p><p><strong><font color="#FFFF00">接下来，直接看代码最终的效果：</font></strong><br><br></p><left><img src="https://upload-images.jianshu.io/upload_images/3517194-173f58785a4d3eba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="Service_buttons.png"></left>&nbsp;&nbsp;&nbsp;<left><img src="https://upload-images.jianshu.io/upload_images/3517194-06ddeca68cb55ecd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="Service_Logcat.png"></left><p>通过排列组合，对按钮进行点击，Log分 3 种情况：</p><p><strong><font color="#9F79EE">START SERVICE + STOP SERVICE： </font></strong></p><p>1、当我们先点击 START SERVICE ：此时服务启动，调用 onCreat() 和 onStartCommand() 方法；</p><p>2、当我们后点击 STOP SERVICE ：此时，服务被销毁，调用 onDestroy() 方法。</p><p><strong><font color="#9F79EE">BIND SERVICE + UNBIND SERVICE：</font></strong></p><p>1、当我们先点击 BIND SERVICE ：此时服务仅仅是创建，并未启动！所以调用的只是 onCreate() 方法。此时 Activity 与 Service 绑定，会同时调用 onBind() 方法，此时 onServiceConnected() 方法会被执行，还记的 onBind() 方法的返回类型不？我们通过 Log 可以很明显发现，Activity 调用了服务内部的两个自定义方法。</p><p>2、当我们后点击 UNBIND SERVICE ：由于服务还未启动，而 BIND SERVICE 只是将服务创建好并与活动进行绑定，那么解绑后，势必会销毁这个 Service，所以 onDestroy() 被执行！</p><p><strong><font color="#9F79EE">START SERVICE + BIND SERVICE + UNBIND SERVICE + STOP SERVICE：</font></strong></p><p>1、我们先点击 START SERVICE ：onCreat() 和 onStartCommand() 方法被执行，这个就不用多说了； </p><p>2、然后点击 BIND SERVICE ：这个时候其实活动已经在后台运行了，我们此时将活动和服务绑定，那么 onCreate() 不会再执行，只会执行 onServiceConnected() 方法，Log 里面打出来看的很清楚。</p><p>3、此时你如果手贱，想 STOP SERVICE：那么恭喜你，毫无反应！为什么？因为你都没解绑，你怎么销毁？</p><p>4、OK，那我们先解绑，我们点击 UNBIND SERVICE ：此时一个奇怪的现象发生了，LOG 日志没有打印出 Destroy() 这个方法啊？没有被执行啊！不是说 bind 了 Service 之后，unbind 就会销毁这个服务吗？这跟我们之前分析的不符合啊。</p><p>5、好吧，我们来看看为什么。其实原因很简单：我们先 start 了 Service，那么此时服务已经在后台运行了，这个时候你 bind，让 Service 和 Activity 绑定，其实是没有什么意义的。但是既然绑定了，你如果不解绑，那么 Destroy() 毫无用武，所以，这种情况和（2）中分析的还是有区别的，此是解绑完后，服务还是舒舒服服的在后台运行，所以，要想干掉这个服务，你必须要 STOP SERVICE。</p><p>6、那我们解绑后，再 STOP SERVICE ：这个时候 Service 就被枪毙了！</p><h1 id="Service-两个实用小技巧"><a href="#Service-两个实用小技巧" class="headerlink" title="Service 两个实用小技巧"></a>Service 两个实用小技巧</h1><h2 id="Forground-Service"><a href="#Forground-Service" class="headerlink" title="Forground Service"></a>Forground Service</h2><p>服务几乎都是在后台运行的，一直一来它都是默默地做着辛苦的工作。但是服务的系统优先级还是比较低的，当系统出现内存不足的情况时，就有可能会回收掉正在后台运行的服务。如果你希望服务可以一直保持运行状态，而不是由于系统内存不足的原因导致被回收掉，就可以考虑使用前台服务。前台服务和普通服务最大的区别就在于，它会一直有一个正在运行的图标在系统的状态栏显示，下拉状态栏后可以看到更加详细的信息，非常类似于通知的效果。当然有时候你也可能不仅仅是为了防止服务被回收掉才使用前台服务，有些项目由于特殊的需求会要求必须使用前台服务，比如说天气类软件，它的服务在后台更新天气数据的同时，还会在系统状态栏一直显示当前的天气信息。</p><p><strong><font color="#FF7F00">【问题】</font></strong>：我们都知道服务是运行在后台的，如果系统出现内存不足的情况，那么此时，系统就可能回收后台的服务，那么我们如何保证服务可以一直运行？</p><p><strong><font color="#FF7F00">【解决】</font></strong>：在服务中，有一个 <strong><font color="#FFFF00">前台服务</font></strong> 的概念，调用 <strong><font color="#FF0000">startForground()</font></strong> 方法可以实现。</p><p>如何创建一个前台服务，看代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span><span class="token punctuation">{</span>　　<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>　　<span class="token annotation punctuation">@Override</span>　　<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"MyService"</span><span class="token punctuation">,</span> <span class="token string">"onCreate executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> MainActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　PendingIntent pi <span class="token operator">=</span> PendingIntent<span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> intent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　Notification notification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notification<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 启动服务后，在前台添加一个Notification</span>　　　　　　　　<span class="token punctuation">.</span><span class="token function">setContentTitle</span><span class="token punctuation">(</span><span class="token string">"This is a content title"</span><span class="token punctuation">)</span>　　　　　　　　<span class="token punctuation">.</span><span class="token function">setContentText</span><span class="token punctuation">(</span><span class="token string">"This is content text"</span><span class="token punctuation">)</span>　　　　　　　　<span class="token punctuation">.</span><span class="token function">setWhen</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>　　　　　　　　<span class="token punctuation">.</span><span class="token function">setSmallIcon</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>ic_launcher<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setLargeIcon</span><span class="token punctuation">(</span>BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>ic_launcher<span class="token punctuation">)</span><span class="token punctuation">)</span>　　　　　　　　<span class="token punctuation">.</span><span class="token function">setContentIntent</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span>　　　　　　　　<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　<span class="token function">startForeground</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>以上的代码是在 Service 的创建中添加了一个 Notification，调用 startForground() 就可以保证：只要服务一直存在，那么在前台就会一直显示这个 Notification。</p><p>如果我们在 onDestroy() 中调用 stopForground() 方法，会销毁这个 Notification，但是 Service 还是存活的，此时 Service 就会面临被 System 干掉的风险。</p><p>如果直接 STOP SERVICE，那么 Notification 和 Service 都会销毁。 </p><h2 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h2><p><strong><font color="#FF7F00">【问题】</font></strong>：我们知道服务的代码逻辑是在主线程中执行的，如果我们在主线程中需要执行一些耗时的操作，那么很有可能出现ANR（程序暂无响应）的状况。</p><p>这个时候，我们可以采用 Android 的多线程编程的方式，我们应该在服务的每个具体的方法里开启一个子线程，然后在这里去处理那些耗时的逻辑。所以，一个比较标准的服务就可以写成如下形式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span><span class="token punctuation">{</span>　　<span class="token annotation punctuation">@Nullable</span>　　<span class="token annotation punctuation">@Override</span>　　<span class="token keyword">public</span> IBinder <span class="token function">onBind</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　<span class="token keyword">return</span> null<span class="token punctuation">;</span>　　<span class="token punctuation">}</span>　　<span class="token annotation punctuation">@Override</span>　　<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">onStartCommand</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　<span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 开启一个线程处理耗时操作</span>　　　　　　<span class="token annotation punctuation">@Override</span>　　　　　　<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　　　　　<span class="token comment" spellcheck="true">// 处理具体的逻辑                     </span>　　　　　　<span class="token punctuation">}</span>　　　　<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　<span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStartCommand</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> startId<span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>现在，服务可以启动起来了。但是如果不调用 <strong><font color="#FF7F00">StopService()</font></strong> 或 <strong><font color="#FF7F00">stopSelf()</font></strong> 方法，服务会一直运行，所以我们需要修改一下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span><span class="token punctuation">{</span>　　<span class="token annotation punctuation">@Nullable</span>　　<span class="token annotation punctuation">@Override</span>　　<span class="token keyword">public</span> IBinder <span class="token function">onBind</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　<span class="token keyword">return</span> null<span class="token punctuation">;</span>　　<span class="token punctuation">}</span>　　<span class="token annotation punctuation">@Override</span>　　<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">onStartCommand</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　<span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　　　<span class="token annotation punctuation">@Override</span>　　　　　　<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　　　　　<span class="token comment" spellcheck="true">// 处理具体的逻辑                  // 开启一个线程处理耗时操作</span>　　　　　　　　<span class="token function">stopSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 让服务执行完逻辑后自行停止</span>　　　　　　<span class="token punctuation">}</span>　　　　<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　<span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStartCommand</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> startId<span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的代码就是一个标准的 Service 的书写形式，主要包含两个知识点：Thread子线程的创建 和 stopSelf() 方法的调用。</p><p>虽说这种写法并不复杂，但是总会有人忘记开启线程，或者忘记调用 stopSelf()，那么有没有更好的办法能够实现上面两个需求呢？</p><p><strong><font color="#FF7F00">【解决】：</font></strong>在 Android 中，专门提供了一个 IntentService 类（android.app.IntentService），这个类就能很好的满足我们的需求！我们直接通过代码来看：</p><p>新建一个 MyIntentService 类继承自 IntentService，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyIntentService</span> <span class="token keyword">extends</span> <span class="token class-name">IntentService</span><span class="token punctuation">{</span>　　<span class="token keyword">public</span> <span class="token function">MyIntentService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"MyIntentService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 调用父类的有参构造函数</span>　　<span class="token punctuation">}</span>　　<span class="token annotation punctuation">@Override</span>　　<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onHandleIntent</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 打印当前线程的 id</span>　　　　Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"MyIntentService"</span><span class="token punctuation">,</span> <span class="token string">"MyIntentServiceThread id is "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span>　　<span class="token annotation punctuation">@Override</span>　　<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"MyIntentService"</span><span class="token punctuation">,</span> <span class="token string">"onDestroy executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong><font color="#FFFF00">以上代码做了几件事：</font></strong></p><p>1、提供了一个无参的构造方法，并且调用了父类的有参构造函数；</p><p>2、子类实现父类的 onHandleIntent() 抽象方法，这个方法好就好在，它是一个已经运行在子线程中的方法。也就是说，服务调用了它，那么执行的逻辑就如同 Thread 子线程；</p><p>3、根据 IntentService 的特性，这个服务在运行结束后应该是会自动停止的，所以我们又重写了 onDestroy()方法，在这里也打印一行日志，以证实服务是不是停止掉了。</p><p>我们在 xml 文件中，创建一个 MyIntentService 服务按钮：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>　　<span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/start_intent_service<span class="token punctuation">"</span></span>　　<span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>　　<span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>　　<span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/intent_service<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>然后修改 MainActivity 中的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>　　<span class="token annotation punctuation">@Override</span>　　<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　<span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>　　　　Button startIntentService <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>start_intent_service<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　startIntentService<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　　　<span class="token annotation punctuation">@Override</span>　　　　　　<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　　　　　Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"MyIntentService"</span><span class="token punctuation">,</span> <span class="token string">"MainActivity Thread id is "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 查看主线程的id</span>　　　　　　　　Intent intentService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token function">getBaseContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MyIntentService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   　　　　　　　　<span class="token function">startService</span><span class="token punctuation">(</span>intentService<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　　　<span class="token punctuation">}</span>　　　　<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后，在AndroidMainfest中注册服务：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MyIntentService<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p><strong><font color="#FF7F00">【结果】</font></strong>：</p><left><img src="http://upload-images.jianshu.io/upload_images/3517194-ccb5506a4bf47f0b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"> </left><p>从打出的LOG可以看出：</p><p>1、MyIntentService 和 MainActivity 所在进程的 <strong><font color="#FF0000">id是不一样的</font></strong> ；</p><p>2、onHandleIntent() 方法在执行完逻辑后确实销毁了服务，效果等同于 stopSelf()。</p><p>从上面的分析可以看出 onHandleIntent() 方法确实相当的好用！</p>]]></content>
      
      
      <categories>
          
          <category> 常用组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Service </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探讨 Fragment 的生命周期</title>
      <link href="/2018/07/22/08.chang-yong-zu-jian-xi-lie-tan-tao-fragment-de-sheng-ming-zhou-qi/"/>
      <url>/2018/07/22/08.chang-yong-zu-jian-xi-lie-tan-tao-fragment-de-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-碎片状态"><a href="#1-碎片状态" class="headerlink" title="1. 碎片状态"></a>1. 碎片状态</h1><p>我们之前讨论过 Activity 生命周期的状态（运行状态、暂停状态、停止状态、销毁状态）。那么碎片（Fragment）的状态如何？其实 Fragment 和 Activity 类似，只是有些许细微的差别！</p><p>每个 Fragment 在其生命周期中也有 <strong><font color="#FF0000">4</font></strong> 种状态：</p><p><strong><font color="#436EEE">1、运行状态</font></strong></p><p>当一个碎片是可见的，并且它所关联的活动正处于运行状态时，该碎片也处于运行状态。</p><p><strong><font color="#436EEE">2、暂停状态</font></strong></p><p>当一个活动进入暂停状态时（由于另一个未沾满屏幕的活动被添加到了栈顶），与它相关联的可见碎片也就进入了暂停状态。</p><p><strong><font color="#436EEE">3、停止状态</font></strong></p><p>当一个活动进入停止状态时，与它相关联的碎片就会进入停止状态，或者通过调用 FragmentTransaction 的 remove()、replace() 方法将碎片从活动中移除，但如果在事务提交之前调用 addToBackStack() 方法，这时的碎片也会进入停止状态。</p><p>总的来说，进入停止状态的碎片对用户来说是完全不可见的，有可能会被系统回收。</p><p><strong><font color="#436EEE">4、销毁状态</font></strong></p><p>碎片总是依附于活动而存在的，因此当活动被销毁时，与它关联的碎片就会进入到销毁状态。或者通过调用 </p><h1 id="2-回调方法"><a href="#2-回调方法" class="headerlink" title="2. 回调方法"></a>2. 回调方法</h1><p>Fragment 类也提供了一系列的回调方法，以覆盖随便生命周期的每个环节。其中，活动中有的回调方法，随便中几乎都有，不过碎片还提供了一些附加的回调方法，我们重点关注：</p><p><strong><font color="#436EEE">1、onAttach()</font></strong>：当碎片和活动建立关联的时候调用。</p><p><strong><font color="#436EEE">2、onCreateView()</font></strong>：当碎片创建视图（加载布局）时调用。</p><p><strong><font color="#436EEE">3、onActivityCreated()</font></strong>：确保与碎片相关联的活动一定已经创建完毕的时候调用。</p><p><strong><font color="#436EEE">4、onDestroyView()</font></strong>：当与碎片关联的视图被移除的时候调用。</p><p><strong><font color="#436EEE">5、onDetach()</font></strong>：当碎片和活动解除关联的时候调用。</p><p>我们看下官方给出的 Activity 生命周期的示意图：<br><br></p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-3977c31967b1a8f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="Fragment.png"></center><h1 id="3-实战演练"><a href="#3-实战演练" class="headerlink" title="3. 实战演练"></a>3. 实战演练</h1><h2 id="3-1-Code"><a href="#3-1-Code" class="headerlink" title="3.1 Code"></a>3.1 Code</h2><blockquote><p>LeftFragment</p></blockquote><p>（1）修改 left_fragment.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/button<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center_horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>（2）修改 LeftFragment.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>NonNull<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Nullable<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Fragment<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>LayoutInflater<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewGroup<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeftFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">onCreateView</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> LayoutInflater inflater<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ViewGroup container<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        View view <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>left_fragment<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>RightFragment</p></blockquote><p>（1）修改 right_fragment.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#00ff00<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20sp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center_horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>This is right fragment<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>（2）修改 RightFragment.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>NonNull<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Nullable<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Fragment<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>LayoutInflater<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewGroup<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RightFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"RightFragment"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAttach</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onAttach</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onAttach"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onCreate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">onCreateView</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> LayoutInflater inflater<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ViewGroup container<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onCreateView"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        View view <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>right_fragment<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActivityCreated</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActivityCreated</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onActivityCreated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onStart"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onResume"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onPause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onStop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onDestroyView"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onDestroy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>AnotherRightFragment</p></blockquote><p>（1）修改 anotheright_right_fragment.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ffff00<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center_horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20sp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>This is another right fragment<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>（2）修改 AnotherRightFragment.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>NonNull<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Nullable<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Fragment<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>LayoutInflater<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewGroup<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnotherRightFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">onCreateView</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> LayoutInflater inflater<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ViewGroup container<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        View view <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>another_right_fragment<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>MainActivity</p></blockquote><p>（1） 修改 activity_main.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fragment</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/left_fragment<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.marco.fragmenttest.LeftFragment<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FrameLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/right_layout<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>（2）修改 MainActivity.java</p><pre><code>package com.example.marco.fragmenttest;import android.app.FragmentManager;import android.app.FragmentTransaction;import android.support.v4.app.Fragment;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.View;import android.widget.Button;public class MainActivity extends AppCompatActivity implements View.OnClickListener {    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        Button button = findViewById(R.id.button);        button.setOnClickListener(this);        replaceFragment(new RightFragment());    }    private void replaceFragment(Fragment fragment) {        android.support.v4.app.FragmentManager fragmentManager = getSupportFragmentManager();        android.support.v4.app.FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();        fragmentTransaction.replace(R.id.right_layout, fragment);        fragmentTransaction.addToBackStack(null);        fragmentTransaction.commit();    }    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.button:                replaceFragment(new AnotherRightFragment());                break;            default:                break;        }    }}</code></pre><h2 id="3-2-Result"><a href="#3-2-Result" class="headerlink" title="3.2 Result"></a>3.2 Result</h2><p>（1）运行程序，Log 如下：</p><pre class=" language-java"><code class="language-java"> <span class="token number">09</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">21.960</span> <span class="token number">13896</span><span class="token operator">-</span><span class="token number">13896</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest D<span class="token operator">/</span>RightFragment<span class="token operator">:</span> onAttach <span class="token number">09</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">21.960</span> <span class="token number">13896</span><span class="token operator">-</span><span class="token number">13896</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest D<span class="token operator">/</span>RightFragment<span class="token operator">:</span> onCreate <span class="token number">09</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">21.961</span> <span class="token number">13896</span><span class="token operator">-</span><span class="token number">13896</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest D<span class="token operator">/</span>RightFragment<span class="token operator">:</span> onCreateView <span class="token number">09</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">21.968</span> <span class="token number">13896</span><span class="token operator">-</span><span class="token number">13896</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest D<span class="token operator">/</span>RightFragment<span class="token operator">:</span> onActivityCreated <span class="token number">09</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">21.968</span> <span class="token number">13896</span><span class="token operator">-</span><span class="token number">13896</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest D<span class="token operator">/</span>RightFragment<span class="token operator">:</span> onStart <span class="token number">09</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">21.975</span> <span class="token number">13896</span><span class="token operator">-</span><span class="token number">13896</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest D<span class="token operator">/</span>RightFragment<span class="token operator">:</span> onResume</code></pre><p>（2）点击 Button 后，Log 如下：</p><pre class=" language-java"><code class="language-java"> <span class="token number">09</span><span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">24.660</span> <span class="token number">13896</span><span class="token operator">-</span><span class="token number">13896</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest D<span class="token operator">/</span>RightFragment<span class="token operator">:</span> onPause <span class="token number">09</span><span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">24.660</span> <span class="token number">13896</span><span class="token operator">-</span><span class="token number">13896</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest D<span class="token operator">/</span>RightFragment<span class="token operator">:</span> onStop <span class="token number">09</span><span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">24.661</span> <span class="token number">13896</span><span class="token operator">-</span><span class="token number">13896</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest D<span class="token operator">/</span>RightFragment<span class="token operator">:</span> onDestroyView</code></pre><p>由于 AnotherRightFragment 替换了 RightFragment，此时的 RightFragment 进入了停止状态，因此 onPause()、onStop() 和 onDestroyView() 方法会得到执行。</p><p>注意，如果在替换的时候没有调用 addToBackStack() 方法，此时的 RightFragment 就会进入销毁状态，onDestroy() 和 onDetach() 方法就会得到执行。</p><p>（3）按下 Back 键，Log 如下：</p><pre class=" language-java"><code class="language-java"> <span class="token number">09</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">41.213</span> <span class="token number">13896</span><span class="token operator">-</span><span class="token number">13896</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest D<span class="token operator">/</span>RightFragment<span class="token operator">:</span> onCreateView <span class="token number">09</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">41.227</span> <span class="token number">13896</span><span class="token operator">-</span><span class="token number">13896</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest D<span class="token operator">/</span>RightFragment<span class="token operator">:</span> onActivityCreated <span class="token number">09</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">41.227</span> <span class="token number">13896</span><span class="token operator">-</span><span class="token number">13896</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest D<span class="token operator">/</span>RightFragment<span class="token operator">:</span> onStart <span class="token number">09</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">41.227</span> <span class="token number">13896</span><span class="token operator">-</span><span class="token number">13896</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest D<span class="token operator">/</span>RightFragment<span class="token operator">:</span> onResume</code></pre><p>（4）继续按下 Back 键，程序退出，Log 如下：</p><pre class=" language-java"><code class="language-java"> <span class="token number">09</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">13.778</span> <span class="token number">14435</span><span class="token operator">-</span><span class="token number">14435</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest D<span class="token operator">/</span>RightFragment<span class="token operator">:</span> onPause <span class="token number">09</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">13.778</span> <span class="token number">14435</span><span class="token operator">-</span><span class="token number">14435</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest D<span class="token operator">/</span>RightFragment<span class="token operator">:</span> onStop <span class="token number">09</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">13.779</span> <span class="token number">14435</span><span class="token operator">-</span><span class="token number">14435</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest D<span class="token operator">/</span>RightFragment<span class="token operator">:</span> onDestroyView <span class="token number">09</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">13.783</span> <span class="token number">14435</span><span class="token operator">-</span><span class="token number">14435</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest D<span class="token operator">/</span>RightFragment<span class="token operator">:</span> onDestroy <span class="token number">09</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">13.783</span> <span class="token number">14435</span><span class="token operator">-</span><span class="token number">14435</span><span class="token operator">/</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>fragmenttest D<span class="token operator">/</span>RightFragment<span class="token operator">:</span> onDetach</code></pre><h1 id="4-疑问"><a href="#4-疑问" class="headerlink" title="4. 疑问"></a>4. 疑问</h1><p>还记得我们在讨论 Activity 的时候提到过一个疑问，如果 Activity 进入停止状态，有可能会被回收掉，那么数据和状态就会丢失，碎片是不是也存在呢？</p><p>答案是肯定的！那怎么办？</p><p>其实在碎片中，你也可以通过 onSaveInstanceState() 方法来保存数据，保存下来的数据在 onCreate()、onCreateView() 和 onActivityCreate() 这 3 个方法中都可以重新得到，因为它们都含有一个 Bundle 类型的 savedInstanceState 参数。</p><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>推荐跳转：<a href="https://superandroid.pro/2019/01/01/00.%20Thinking%20in%20Android%20--%2001.%20%E5%8D%9A%E5%AE%A2%E7%B4%A2%E5%BC%95/">博客索引（Android 9.0）</a></p>]]></content>
      
      
      <categories>
          
          <category> 常用组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fragment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探讨 Activity 的生命周期</title>
      <link href="/2018/07/20/08.chang-yong-zu-jian-xi-lie-tan-tao-activity-de-sheng-ming-zhou-qi/"/>
      <url>/2018/07/20/08.chang-yong-zu-jian-xi-lie-tan-tao-activity-de-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="1、活动状态"><a href="#1、活动状态" class="headerlink" title="1、活动状态"></a>1、活动状态</h3><p>每个活动在其生命周期中最多可能会有 <strong><font color="#FF0000">4</font></strong> 种状态：</p><blockquote><p>运行状态</p></blockquote><p>当一个活动位于返回栈的栈顶时，这时活动就处于运行状态。系统最不愿意回收的就是处于运行状态的活动，因为这会带来非常差的用户体验。</p><blockquote><p>暂停状态</p></blockquote><p>当一个活动不再处于栈顶位置，但仍然可见时，这时活动就进入了暂停状态。你可能会觉得既然活动已经不在栈顶了，还怎么会可见呢？</p><p>这是因为并不是每一个活动都会占满整个屏幕，比如对话框形式的活动只会占用屏幕中间的部分区域。处于暂停状态的活动仍然是完全存活着的，系统也不愿意去回收这种活动（因为它还是可见的，回收可见的东西都会在用户体验方面有不好的影响，）只有在内存极低的情况下，系统才会去考虑回收这种活动。</p><blockquote><p>3、停止状态</p></blockquote><p>当一个活动不再处于栈顶位置，并且完全不可见的状态，就进入了停止状态。系统仍然会为这种活动保持相应的状态和成员变量，但是这并不是完全可靠的，当其他地方需要内存时，处于停止状态的活动有可能会被系统回收。</p><blockquote><p>4、销毁状态</p></blockquote><p>当一个活动从返回栈中移除后就变成了销毁状态。系统会最倾向于回收处于这种状态的活动，从而保证手机的内存充足。</p><hr><h3 id="2、回调方法"><a href="#2、回调方法" class="headerlink" title="2、回调方法"></a>2、回调方法</h3><p>Activity 类中定义了 <strong><font color="#FF0000">7</font></strong> 个回调方法，覆盖了 Activity 生命周期的每一个环节：</p><blockquote><p>onCreate()</p></blockquote><p>这个方法你已经看到过很多次了，每个活动中我们都重写了这个方法，它会在活动第一次被创建的时候调用。你应该在这个方法中完成活动的初始化操作，比如加载布局、绑定事件等。</p><blockquote><p>onStart()</p></blockquote><p>这个方法在活动由不可见变为可见的时候调用。</p><blockquote><p>onResume()</p></blockquote><p>这个方法在活动准备好和用户进行交互的时候调用。此时的活动一定位于返回栈的栈顶，并且处于运行状态。</p><blockquote><p>onPause()</p></blockquote><p>这个方法在系统准备去启动或者恢复另一个活动的时候调用。我们通常会在这个方法中将一些消耗 CPU 的资源释放掉，以及保存一些关键数据，但这个方法的执行速度一定要快，不然会影响到新的栈顶活动的使用。</p><blockquote><p>onStop()</p></blockquote><p>这个方法在活动完全不可见的时候调用。它和 onPause() 方法的主要区别在于，如果启动的新活动是一个对话框式的活动，那么 onPause() 方法会得到执行，而 onStop() 方法并不会执行。</p><blockquote><p>onDestroy()</p></blockquote><p>这个方法在活动被销毁之后调用，之后活动的状态将变为销毁状态。</p><blockquote><p>onRestart()</p></blockquote><p>这个方法在活动由停止状态变为运行状态之前调用，也就是活动被重新启动了。</p><hr><h3 id="3、生存期"><a href="#3、生存期" class="headerlink" title="3、生存期"></a>3、生存期</h3><p>以上 <strong><font color="#FF0000">7</font></strong> 个方法中除了 onRestart() 方法，其他都是两两对应的，从而可以将活动分为 <strong><font color="#FF0000">3</font></strong> 种生存期。</p><p><strong><font color="#FF0000">完整生存期</font></strong>：活动在 onCreate() 方法和 onDestroy() 方法之间所经历的，就是完整生存期。一般情况下，一个活动会在 onCreate() 方法中完成各种初始化操作，而在 onDestroy() 方法种完成释放内存的操作。</p><p><strong><font color="#FF0000">可见生存期()</font></strong>：活动在 onStart() 方法和 onStop() 方法之间所经历的，就是可见生存期。在可见生存期内，活动对于用户总是可见的，即便有可能无法和用户进行交互。我们可以通过这两个方法，合理地管理那些对用户可见的资源。比如在 onStart() 方法中对资源进行加载，而在 onStop() 方法中对资源进行释放，从而保证处于停止状态的活动不会占用过多内存。</p><p><strong><font color="#FF0000">前台生存期</font></strong>：活动在 onResume() 方法和 onPause() 方法之间所经历的，就是前台生存期。在前台生存期内，活动总是处于运行状态的，此时的活动是可以和用户进行交互的，我们平时看到和接触最多的就是这个状态下的活动。</p><p>我们看下官方给出的 Activity 生命周期的示意图：<br><br></p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-a82dadc7f3f3b829.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/720" alt="Activity.png"></center><hr><h3 id="4、实战演练"><a href="#4、实战演练" class="headerlink" title="4、实战演练"></a>4、实战演练</h3><h4 id="4-1-Code"><a href="#4-1-Code" class="headerlink" title="4.1 Code"></a>4.1 Code</h4><p>我们先定义一个：NormalActivity</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.constraint.ConstraintLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.NormalActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>This is a normal activity<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.constraint.ConstraintLayout</span><span class="token punctuation">></span></span></code></pre><p>再定义一个：DialogActivity</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.constraint.ConstraintLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.DialogActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>This is a dialog activity<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.constraint.ConstraintLayout</span><span class="token punctuation">></span></span></code></pre><p>为了让 DialogActivity 使用对话框式主题，我们在 AndroidManifest.xml 中做如下设置：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.marco.activitylifecycletest<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>        <span class="token attr-name"><span class="token namespace">android:</span>allowBackup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/app_name<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>roundIcon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>supportsRtl</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@style/AppTheme<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.MAIN<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.NormalActivity<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.DialogActivity<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@style/Theme.AppCompat.Dialog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    // Look here        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span></code></pre><p>接下来修改 activity_main.xml，重新定制主活动的布局：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/start_normal_activity<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Start NormalActivity<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/start_dialog_activity<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Start DialogActivity<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>修改 MainActivity ：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>marco<span class="token punctuation">.</span>activitylifecycletest<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"MainActivity"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Button startNormalActivity <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> Button startDialogActivity <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        startNormalActivity <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>start_normal_activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        startDialogActivity <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>start_dialog_activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        startNormalActivity<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> NormalActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        startDialogActivity<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> DialogActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onStart"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onResume"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onPause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onStop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onDestroy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRestart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onRestart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onRestart"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-2-Result"><a href="#4-2-Result" class="headerlink" title="4.2 Result"></a>4.2 Result</h4><p>（1）当 MainActivity 第一次被创建时，如下方法被执行：</p><pre><code>2018-10-18 04:31:29.071 2526-2526/? D/MainActivity: onCreate2018-10-18 04:31:29.077 2526-2526/? D/MainActivity: onStart2018-10-18 04:31:29.083 2526-2526/? D/MainActivity: onResume</code></pre><p>（2）点击 Start NormalActivity 按钮：</p><pre><code>2018-10-18 04:33:02.159 2526-2526/com.example.marco.activitylifecycletest D/MainActivity: onPause2018-10-18 04:33:02.745 2526-2526/com.example.marco.activitylifecycletest D/MainActivity: onStop</code></pre><p>因为 NormalActivity 已经把 MainActivity 完全遮挡住，因此 onPause() 和 onStop() 方法都会得到执行。</p><p>（3）点击 Back 键返回 MainActivity：</p><pre><code>2018-10-18 04:35:00.010 2526-2526/com.example.marco.activitylifecycletest D/MainActivity: onRestart2018-10-18 04:35:00.012 2526-2526/com.example.marco.activitylifecycletest D/MainActivity: onStart2018-10-18 04:35:00.014 2526-2526/com.example.marco.activitylifecycletest D/MainActivity: onResume</code></pre><p>由于之前 MainActivity 已经进入了停止状态，所以 onRestart() 方法会得到执行，之后又会执行 onStart() 和 onResume() 方法。注意，此时 onCreate() 方法不会执行，因为 MainActivity 并没有重新创建。</p><p>（4）点击 Start DialogActivity 按钮：</p><pre><code>2018-10-18 04:43:38.006 3555-3555/com.example.marco.activitylifecycletest D/MainActivity: onPause</code></pre><p>通过 Log 可以看到，只有 onPause() 方法得到了执行，onStop() 方法并没有执行，这是因为 DialogActivity 并没有完全遮挡住 MainActivity，此时 MainActivity 只是进入了暂停状态，并没有进入停止状态。</p><p>（5）点击 Back 键返回 MainActivity：</p><pre><code>2018-10-18 04:50:12.222 3555-3555/com.example.marco.activitylifecycletest D/MainActivity: onResume</code></pre><p>按下 Back 键返回 MainActivity 也应该只有 onResume() 方法会得到执行。</p><p>（6）在 MainActivity 界面按下 Back 键退出程序：</p><pre><code>2018-10-18 04:51:47.673 3555-3555/com.example.marco.activitylifecycletest D/MainActivity: onPause2018-10-18 04:51:48.013 3555-3555/com.example.marco.activitylifecycletest D/MainActivity: onStop2018-10-18 04:51:48.015 3555-3555/com.example.marco.activitylifecycletest D/MainActivity: onDestroy</code></pre><p>依次会执行 onPause()、onStop() 和 onDestroy 方法，最终销毁 MainActivity。</p><h3 id="5、疑问"><a href="#5、疑问" class="headerlink" title="5、疑问"></a>5、疑问</h3><p>我们在之前分析 Activity 的生命周期的时候曾经提到过：如果一个活动进入了 onStop （停止）状态，是有可能被系统回收的！</p><h4 id="5-1-场景"><a href="#5-1-场景" class="headerlink" title="5.1 场景"></a>5.1 场景</h4><p>比如我们看以下的场景：</p><p>应用中有一个活动 A ，用户在活动 A 的基础上启动了活动 B ，活动 A 就进入了停止的状态，这个时候由于系统内存不足，将活动 A 回收掉了，然后用户按下 Back 键返回活动 A ，会出现什么情况呢？</p><p>其实还是会正常显示活动 A 的，但是此时并不会执行 onRestart() 方法了，而是会执行活动 A 的 onCreate() 方法，因为活动 A 在这种情况下会被重新创建一次。</p><p>可能这并不会影响正常的功能，但是存在一个特殊情况：如果活动 A 中存在临时数据和状态（比如 A 中有一个文本输入框，我们输入了一些文字，然后启动了 B 活动，如果 A 被 kill了，在重新回到 A 后，A 活动重新创建，那么数据都丢失了），此时会严重影响用户体验，该怎么办？</p><h4 id="5-2-策略"><a href="#5-2-策略" class="headerlink" title="5.2 策略"></a>5.2 策略</h4><p>其实官方文档给出了解决方案，Activity 中提供了一个 onSaveInstanceState() 回调方法，这个方法可以保证在活动被回收之前一定会被调用，因此我们可以通过这个方法来解决活动被回收时临时数据得不到保存的问题。</p><p>onSaveInstanceState() 方法会携带一个 Bundle 类型的参数，Bundle 提供了一系列的方法用于保存数据，比如可以使用 putString() 方法保存字符串，使用 putInt() 方法保存整型数据，依次类推。</p><p>每个保存方法需要传入两个参数，第一个参数是键，用于后面从 Bundle 中取值，第二个参数是真正要保存的内容。</p><h4 id="5-3-Code"><a href="#5-3-Code" class="headerlink" title="5.3 Code"></a>5.3 Code</h4><p>我们现在对上面的代码进行修改，在 MainActivity 中添加如下代码将临时数据进行保存：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>Bundle outState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>outState<span class="token punctuation">)</span><span class="token punctuation">;</span>        String tempData <span class="token operator">=</span> <span class="token string">"Something you just typed"</span><span class="token punctuation">;</span>        outState<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">"data_key"</span><span class="token punctuation">,</span> tempData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>Ok，数据保存好了，那我们应该在哪边进行恢复？</p><p>不知道你有没有发现，在 onCreate() 方法中有一个 Bundle 类型的参数。这个参数一般情况下是 null ，但是如果在活动被系统回收之前有通过 onSaveInstanceState() 方法来保存数据的话，这个参数就会带有之前所保存的全部数据，我们只需要再通过相应的取值方法将数据取出即可。</p><p>修改 MainActivity 的 onCreate() 方法：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onCreate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>savedInstanceState <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String tempData <span class="token operator">=</span> savedInstanceState<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"data_key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> tempData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span></code></pre><p>通过上面的方法取出值之后再做相应的恢复操作就可以了，比如说将文本内容重新赋值到文本输入框上即可。</p>]]></content>
      
      
      <categories>
          
          <category> 常用组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探讨 Activity 的启动模式</title>
      <link href="/2018/07/18/08.chang-yong-zu-jian-xi-lie-tan-tao-activity-de-qi-dong-mo-shi/"/>
      <url>/2018/07/18/08.chang-yong-zu-jian-xi-lie-tan-tao-activity-de-qi-dong-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="LaunchMode"><a href="#LaunchMode" class="headerlink" title="LaunchMode"></a>LaunchMode</h1><p>可以在 AndroidManifest.xml 中通过给 <activity> 标签指定 <strong><font color="#0000FF">android:launchMode</font></strong> 属性来选择启动模式。</activity></p><blockquote><p><strong>standard</strong></p></blockquote><p>standard 是活动默认的启动模式，在不进行显式指定的情况下，所有活动都会自动使用这种启动模式。我们知道 Android 是使用返回栈来管理活动的，在 standard 模式下，每当启动一个新的活动，它就会在返回栈中入栈，并处于栈顶的位置。</p><p>对于使用 standard 模式的活动，系统不会在乎这个活动是否已经在返回栈中存在，每次启动都会创建该活动的一个新实例。</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-3bb5f57fa0e5d7a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3994917-5cc3d0d8dd2be549.png"></center><blockquote><p><strong>singleTop</strong></p></blockquote><p>有没有觉得 standard 模式似乎不太合理，活动明明已经在栈顶了，为什么再次启动的时候还要创建一次新的活动实例呢？当然，这只是系统默认的一种启动模式而已，我们完全可以根据自己的要求进行修改，比如说我们可以使用 singleTop 模式。</p><p>当活动的启动模式指定为 singleTop，在启动活动时如果发现返回栈的栈顶已经是该活动，则认为可以直接使用它，直接调用 <strong><font color="#FF0000">onNewIntent()</font></strong> 方法来实现重用，不会再创建新的活动实例。</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-16bb62b6b0e00580.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3994917-051def7f0abafef5.png"></center><blockquote><p><strong>singleTask</strong></p></blockquote><p>使用 singleTop 模式可以很好的解决重复创建栈顶活动的问题，但是这就存在一个问题了，如果活动处于栈顶，那么不会再重新创建一个新的实例，但如果不处于栈顶，则会重新创建。</p><p>所以我们自然而然要考虑一个问题，有没有什么方法可以让某个活动在整个应用程序的上下文中只存在一个实例呢？当然有，我们可以借助 singleTask 模式来实现。</p><p>当活动的启动模式指定为 singleTask，每次启动该活动时系统首先会在返回栈中检查是否存在该活动的实例，如果发现已经存在则直接调用 <strong><font color="#FF0000">onNewIntent()</font></strong> 方法来实现重用实例，并把在这个活动之上的所有活动统统出栈，如果没有发现就会创建一个新的活动实例。</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-473f55d3138f4e87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3994917-2811e48d580c4b0e.png"></center><blockquote><p><strong>singleInstance</strong></p></blockquote><p>singleInstance 模式应该算是 4 个启动模式中最特殊也最复杂的一个了。不同于以上 3 种启动模式，指定为 singleInstance 模式的活动会在一个新栈中创建该 Activity 的实例，并让多个应用共享该栈中的该 Activity 实例。</p><p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-701cfc5a5c45a355.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3994917-2811e48d580c4b0e.png"></center><br><br></p><h1 id="Intent-标签"><a href="#Intent-标签" class="headerlink" title="Intent 标签"></a>Intent 标签</h1><p>在 Android 中，我们除了在清单文件 AndroidManifest.xml 中配置 launchMode，当然可以用 Intent 标签说事儿。</p><p>启动 Activity ，我们需要传递一个 Intent，完全可以通过设置 <strong><font color="#0000FF">Intent.setFlags(int flags)</font></strong> 来设置启动的 Activity 的启动模式。</p><blockquote><p>需要注意的是：通过代码来设置 Activity 的启动模式的方式，优先级比清单文件设置更高。</p></blockquote><table><thead><tr><th>Flag</th><th>说明</th></tr></thead><tbody><tr><td><font color="#0000FF">FLAG_ACTIVITY_NEW_TASK</font></td><td>这个标识会使新启动的 Activity 独立创建一个 Task。</td></tr><tr><td><font color="#0000FF">FLAG_ACTIVITY_CLEAR_TOP</font></td><td>这个标识会使新启动的 Activity 检查是否存在于 Task 中，如果存在则清除其之上的 Activity，使它获得焦点，并不重新实例化一个 Activity，一般结合 FLAG_ACTIVITY_NEW_TASK 一起使用。</td></tr><tr><td><font color="#0000FF">FLAG_ACTIVITY_SINGLE_TOP</font></td><td>同于在 launcherMode 属性设置为 singleTop。</td></tr></tbody></table><p><br></p><h1 id="面试题范例"><a href="#面试题范例" class="headerlink" title="面试题范例"></a>面试题范例</h1><blockquote><p>1、设置为 singleTask 的启动模式，当 Activity 的实例已经存在时，再启动它，它的哪个回调函数会被执行？我们可以在哪个回调中处理新的 Intent 协带的参数？<br>2、设置为 singleTop 的启动模式，当 Activity 的实例已经存在于 Task 的栈顶，我们可以在哪个回调中处理新的 Intent 协带的参数？</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 常用组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activity </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
