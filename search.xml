<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客日志</title>
      <link href="/2020/01/01/00.thinking-in-android-03.xiu-gai-ri-zhi/"/>
      <url>/2020/01/01/00.thinking-in-android-03.xiu-gai-ri-zhi/</url>
      
        <content type="html"><![CDATA[<style>table th:first-of-type {    width: 200px;}</style><h4 id="Thinking-in-Android-–-“新增”"><a href="#Thinking-in-Android-–-“新增”" class="headerlink" title="Thinking in Android – “新增”"></a><center>Thinking in Android – “新增”</center></h4><p><br></p><table><thead><tr><th style="text-align:center">日期</th><th style="text-align:center">修订博文</th><th style="text-align:center">当前版本</th></tr></thead><tbody><tr><td style="text-align:center">2010.04.15</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《Android 开发常见问题总结（基础篇）》” </font></td><td style="text-align:center"><font color="#87CEEB" size="3">v_1.0</font></td></tr><tr><td style="text-align:center">2010.03.01</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《谈谈算法中的 “时间复杂度》” </font></td><td style="text-align:center"><font color="#87CEEB" size="3">v_1.0</font></td></tr></tbody></table><p><br></p><h4 id="Thinking-in-Android-–-“修订”"><a href="#Thinking-in-Android-–-“修订”" class="headerlink" title="Thinking in Android – “修订”"></a><center>Thinking in Android – “修订”</center></h4><p><br></p><table><thead><tr><th style="text-align:center">日期</th><th style="text-align:center">修订博文</th><th style="text-align:center">修订次数</th></tr></thead><tbody><tr><td style="text-align:center">2019.02.02</td><td style="text-align:center"><font color="#87CEEB" size="3"> 《谈谈算法中的 “时间复杂度》” </font></td><td style="text-align:center">1</td></tr></tbody></table><p><br></p><h4 id="Thinking-in-Android-–-“优化”"><a href="#Thinking-in-Android-–-“优化”" class="headerlink" title="Thinking in Android – “优化”"></a><center>Thinking in Android – “优化”</center></h4><p><br></p><table><thead><tr><th style="text-align:center">日期</th><th style="text-align:center">修改记录 </th></tr></thead><tbody><tr><td style="text-align:center">2019.04.14</td><td style="text-align:center"><font color="#87CEEB" size="3">重构博客布局及文章</font></td></tr><tr><td style="text-align:center">2019.01.24</td><td style="text-align:center"><font color="#87CEEB" size="3">优化布局，导航栏新增项</font></td></tr><tr><td style="text-align:center">2019.01.07</td><td style="text-align:center"><font color="#87CEEB" size="3">Blog计划更新，部分细节优化</font></td></tr><tr><td style="text-align:center">2019.01.02</td><td style="text-align:center"><font color="#87CEEB" size="3">局部修改UI细节</font></td></tr><tr><td style="text-align:center">2018.12.29</td><td style="text-align:center"><font color="#87CEEB" size="3">新增 Links 页，局部修改UI细节</font></td></tr><tr><td style="text-align:center">2018.12.13</td><td style="text-align:center"><font color="#87CEEB" size="3">关于作者页面 – 主题优化</font></td></tr><tr><td style="text-align:center">2018.12.11</td><td style="text-align:center"><font color="#87CEEB" size="3">优化 Blog – 标签页</font></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><font color="#87CEEB" size="3">优化 Blog – 目录页</font></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><font color="#87CEEB" size="3">新增 Blog –   时间源追溯</font></td></tr><tr><td style="text-align:center">2018.12.03</td><td style="text-align:center"><font color="#87CEEB" size="3">Blog 主题改版 – 卡片式风格</font></td></tr><tr><td style="text-align:center">2018.07.01</td><td style="text-align:center"><font color="#87CEEB" size="3">《Thinking in Android》博客启程</font></td></tr></tbody></table><p><br></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客优化 </tag>
            
            <tag> 修订记录 </tag>
            
            <tag> 方向规划 </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资源收藏</title>
      <link href="/2020/01/01/00.thinking-in-android-02.zi-yuan-shou-cang/"/>
      <url>/2020/01/01/00.thinking-in-android-02.zi-yuan-shou-cang/</url>
      
        <content type="html"><![CDATA[<h4 id="Android-官方"><a href="#Android-官方" class="headerlink" title="Android 官方"></a><center>Android 官方</center></h4><p><br></p><style>table th:first-of-type {    width: 490px;}</style><table><thead><tr><th style="text-align:center"><strong><a href="https://source.android.com/" target="_blank" rel="noopener">AOSP</a></strong></th><th style="text-align:center"><strong><a href="https://developer.android.google.cn/index.html" target="_blank" rel="noopener">Android Developers</a></strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><a href="http://www.android-studio.org/" target="_blank" rel="noopener">Android Studio - 中文社区</a></strong></td><td style="text-align:center"><strong><a href="http://androidxref.com/" target="_blank" rel="noopener">Android 源码 - 在线检索</a></strong></td></tr></tbody></table><p><br></p><hr><h4 id="Android-知名博主"><a href="#Android-知名博主" class="headerlink" title="Android 知名博主"></a><center>Android 知名博主</center></h4><p><br></p><style>table th:first-of-type {    width: 490px;}</style><table><thead><tr><th style="text-align:center"><strong><a href="http://gityuan.com/" target="_blank" rel="noopener">Gityuan</a></strong></th><th style="text-align:center"><strong><a href="https://blog.csdn.net/innost?viewmode=contents" target="_blank" rel="noopener">Innost 的专栏</a></strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><a href="https://blog.csdn.net/luoshengyang/article/details/8923485" target="_blank" rel="noopener">老罗的 Android 之旅</a></strong></td><td style="text-align:center"><strong><a href="http://blog.csdn.net/guolin_blog/" target="_blank" rel="noopener">郭霖</a></strong></td></tr><tr><td style="text-align:center"><strong><a href="http://liuwangshu.cn/system/" target="_blank" rel="noopener">刘望舒</a></strong></td><td style="text-align:center"><strong><a href="https://me.csdn.net/cjpx00008" target="_blank" rel="noopener">香辣牛肉面</a></strong></td></tr><tr><td style="text-align:center"><strong><a href="https://www.jianshu.com/u/77699cd41b28" target="_blank" rel="noopener">i校长</a></strong></td><td style="text-align:center"><strong><a href="http://guoyangard.cn/" target="_blank" rel="noopener">ArrayBy</a></strong></td></tr><tr><td style="text-align:center"><strong><a href="http://blog.csdn.net/Android_Tutor/" target="_blank" rel="noopener">魏祝林</a></strong></td><td style="text-align:center"><strong><a href="https://www.jianshu.com/u/3b1099674c2c" target="_blank" rel="noopener">看书的小蜗牛</a></strong></td></tr><tr><td style="text-align:center"><strong><a href="https://blog.csdn.net/Gaugamela/article/details/78655546" target="_blank" rel="noopener">ZhangJianIsAStark</a></strong></td><td style="text-align:center"><strong><a href="https://www.jianshu.com/u/8b9c629f69dd" target="_blank" rel="noopener">隔壁老李头</a></strong></td></tr></tbody></table><p><br></p><hr><h4 id="Android-精品技术贴"><a href="#Android-精品技术贴" class="headerlink" title="Android 精品技术贴"></a><center>Android 精品技术贴</center></h4><p><br></p><style>table th:first-of-type {    width: 490px;}</style><table><thead><tr><th style="text-align:center"><strong><a href="https://www.cnblogs.com/vincent0519/p/6060114.html" target="_blank" rel="noopener">Android 性能优化浅谈</a></strong></th><th style="text-align:center"><strong><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2017/0526/7973.html" target="_blank" rel="noopener">31个 Android 开发工具</a></strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><a href="https://meedamian.com/post/deuglifying-android-studio/" target="_blank" rel="noopener">Making Android Studio pretty</a></strong></td><td style="text-align:center"><strong><a href="https://blog.csdn.net/QQxiaoqiang1573/article/details/72903237" target="_blank" rel="noopener">Android Studio 导入整个 Android 系统源码</a></strong></td></tr><tr><td style="text-align:center"><strong><a href="https://github.com/BolexLiu/AutoEx" target="_blank" rel="noopener">帮助 Android 开发者，自动寻找 Stack Overflow 的解决方案</a></strong></td><td style="text-align:center"><strong><a href="https://androidweekly.cn/" target="_blank" rel="noopener">Android 开发技术周报</a></strong></td></tr></tbody></table><p><br></p><p><br></p><hr><h4 id="Linux-专区"><a href="#Linux-专区" class="headerlink" title="Linux 专区"></a><center>Linux 专区</center></h4><p><br></p><style>table th:first-of-type {    width: 490px;}</style><table><thead><tr><th style="text-align:center"><strong><a href="http://linux.vbird.org/" target="_blank" rel="noopener">鸟哥的 Linux 私房菜</a></strong></th><th style="text-align:center"><strong><a href="https://blog.csdn.net/u010746357/article/details/81813739" target="_blank" rel="noopener">Ubuntu 频繁卡死解决</a></strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><a href="https://www.cnblogs.com/wmr95/p/7574615.html" target="_blank" rel="noopener">Ubuntu16.04 安装 Teamviewer</a></strong></td><td style="text-align:center"><strong>… …</strong></td></tr></tbody></table><p><br></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 官方资料 </tag>
            
            <tag> 优秀博主 </tag>
            
            <tag> 干货资源 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客索引（Android 9.0）</title>
      <link href="/2020/01/01/00.thinking-in-android-01.bo-ke-suo-yin/"/>
      <url>/2020/01/01/00.thinking-in-android-01.bo-ke-suo-yin/</url>
      
        <content type="html"><![CDATA[<h4 id="Thinking-in-Android-–-“启动阶段”"><a href="#Thinking-in-Android-–-“启动阶段”" class="headerlink" title="Thinking in Android – “启动阶段”"></a><center>Thinking in Android – “启动阶段”</center></h4><p><br></p><table><thead><tr><th style="text-align:center"><strong><font color="#EE2C2C" size="3">【启动阶段】</font></strong></th><th style="text-align:center"><strong><font color="#0000FF" size="3">【相关文章】</font></strong></th><th style="text-align:center"><strong><font color="#9932CC" size="3">状态</font></strong></th><th style="text-align:center"><strong>源码版本</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">init</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/10/03/A_01.%20Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20init/">深入研究 Android 启动阶段 之 init</a></td><td style="text-align:center"><font color="#FF0000" size="3">完结</font></td><td style="text-align:center"><strong>9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">zygote</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/10/10/A_03.%20Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20zygote/">深入研究 Android 启动阶段 之 zygote</a></td><td style="text-align:center"><font color="#FF0000" size="3">完结</font></td><td style="text-align:center"><strong>9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">systemserver</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/10/18/A_02.%20Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20systemServer/">深入研究 Android 启动阶段 之 systemserver</a></td><td style="text-align:center"><font color="#FF0000" size="3">完结</font></td><td style="text-align:center"><strong>9.0</strong></td></tr><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">Launcher</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/10/26/A_04.%20Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20Android%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%B9%8B%20Launcher/">深入研究 Android 启动阶段 之 Launcher 启动及加载流程</a></td><td style="text-align:center"><font color="#FF0000" size="3">完结</font></td><td style="text-align:center"><strong>9.0</strong></td></tr></tbody></table><p><br></p><h4 id="Thinking-in-Android-–-“算法专栏”"><a href="#Thinking-in-Android-–-“算法专栏”" class="headerlink" title="Thinking in Android – “算法专栏”"></a><center>Thinking in Android – “算法专栏”</center></h4><p><br></p><table><thead><tr><th style="text-align:center"><strong><font color="#EE2C2C" size="3">【算法专栏】</font></strong></th><th style="text-align:center"><strong><font color="#0000FF" size="3">【相关文章】</font></strong></th><th style="text-align:center"><strong><font color="#9932CC" size="3">状态</font></strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><font color="#FF7F00" size="3">算法复杂度</font></strong></td><td style="text-align:center"><a href="https://superandroid.pro/2018/12/25/K_01.%20Android%20%E7%A8%8B%E5%BA%8F%E7%AE%97%E6%B3%95%E7%AF%87%20--%20%E8%B0%88%E8%B0%88%20%E2%80%9C%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E2%80%9D/">谈谈算法中的 “时间复杂度”</a></td><td style="text-align:center">&nbsp;&nbsp;&nbsp;&nbsp;<font color="#FF0000" size="3">完结</font></td></tr></tbody></table><p><br></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架服务 </tag>
            
            <tag> 通信机制 </tag>
            
            <tag> 性能优化 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 开发常见问题总结（基础篇）</title>
      <link href="/2019/04/15/jing-yan-zong-jie-android-kai-fa-chang-jian-wen-ti-ji-chu-pian/"/>
      <url>/2019/04/15/jing-yan-zong-jie-android-kai-fa-chang-jian-wen-ti-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<h3 id="1-访客模式-PC-端不显示盘符"><a href="#1-访客模式-PC-端不显示盘符" class="headerlink" title="1. 访客模式 PC 端不显示盘符"></a><center>1. 访客模式 PC 端不显示盘符</center></h3><p><br></p><p>在之前 Android 系统开发的 Bug 库中，遇到一个访客模式下 PC 端不显示盘符的问题，如果你也有此问题，这边给您提供一种方案！</p><p><strong><font color="#FF0000" size="4">✒ 问题现象</font></strong>（这个问题主要是针对 MTK 平台）</p><p>Device 切换到访客模式下，连接电脑 USB ，打开传输模式，却发现在 PC 端无法显示内部存储的盘符。</p><p><strong><font color="#FF0000" size="4">✒ 问题原因</font></strong></p><p>这个现象是不合理的，原生代码逻辑（或者说 Pixel）是不存在这个问题的，Bug 的原因是 MTK 合入了一个 patch 所导致。</p><p>导致问题的修改如下：<strong><font color="#0099ff" size="4">MtpService.java</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">onStartCommand</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    UserHandle user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserHandle</span><span class="token punctuation">(</span>ActivityManager<span class="token punctuation">.</span><span class="token function">getCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sServerHolder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"MTP server is still running."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mVolumeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mStorageMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mStorageManager<span class="token punctuation">.</span><span class="token function">registerListener</span><span class="token punctuation">(</span>mStorageEventListener<span class="token punctuation">)</span><span class="token punctuation">;</span>            mVolumes <span class="token operator">=</span> StorageManager<span class="token punctuation">.</span><span class="token function">getVolumeList</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>StorageVolume volume <span class="token operator">:</span> mVolumes<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>MEDIA_MOUNTED<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>volume<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 跟踪 volumeMountedLocked() 函数</span>                    <span class="token function">volumeMountedLocked</span><span class="token punctuation">(</span>volume<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"StorageVolume not mounted "</span> <span class="token operator">+</span> volume<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">volumeMountedLocked</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// For update storage</span>    <span class="token comment" spellcheck="true">/*     * 问题就出在这里！     * MTK 为了修改一个 Bug：偶现显示两个内部存储盘符，所以在这边重新     * 获取一遍 StroageVolume ，但是没有考虑多用户模式！     *     */</span>    StorageVolume<span class="token punctuation">[</span><span class="token punctuation">]</span> volumes <span class="token operator">=</span> mStorageManager<span class="token punctuation">.</span><span class="token function">getVolumeList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mVolumes <span class="token operator">=</span> volumes<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mVolumes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StorageVolume volume <span class="token operator">=</span> mVolumes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>volume<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mVolumeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mMtpDisabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// In PTP mode we support only primary storage</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>volume<span class="token punctuation">.</span><span class="token function">isPrimary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>mPtpMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">addStorageLocked</span><span class="token punctuation">(</span>volume<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong><font color="#FF0000" size="4">✒ 解决方案</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">volumeMountedLocked</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// For update storage, support multi-user mode</span>    <span class="token comment" spellcheck="true">/*     * 博主发现原生设计对多用户读取盘符是这么操作的：     *     mVolumes = StorageManager.getVolumeList(user.getIdentifier(), 0);     * 直接进行如下修改：添加多用户模式判断逻辑     *     */</span>    <span class="token comment" spellcheck="true">// 修改方案</span>    StorageVolume<span class="token punctuation">[</span><span class="token punctuation">]</span> volumes <span class="token operator">=</span> mStorageManager<span class="token punctuation">.</span><span class="token function">getVolumeList</span><span class="token punctuation">(</span>             <span class="token keyword">new</span> <span class="token class-name">UserHandle</span><span class="token punctuation">(</span>ActivityManager<span class="token punctuation">.</span><span class="token function">getCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mVolumes <span class="token operator">=</span> volumes<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mVolumes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StorageVolume volume <span class="token operator">=</span> mVolumes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>volume<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mVolumeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mMtpDisabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// In PTP mode we support only primary storage</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>volume<span class="token punctuation">.</span><span class="token function">isPrimary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>mPtpMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">addStorageLocked</span><span class="token punctuation">(</span>volume<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><br></p><h3 id="2-快速点击打开两个重复的-Activity"><a href="#2-快速点击打开两个重复的-Activity" class="headerlink" title="2. 快速点击打开两个重复的 Activity"></a><center>2. 快速点击打开两个重复的 Activity</center></h3><p><br></p><p><strong><font color="#FF0000" size="4">✒ 问题现象</font></strong></p><p>如果你经常遇到一种情况：快速点击按钮（比如 Settings 界面），弹出两个重复的目标 Activity ！解决方法看这里！</p><p><strong><font color="#FF0000" size="4">✒ 问题原因</font></strong></p><p>其实这是一个系统原生自带的 Bug，强迫症受不了，直接提供解决方案！</p><p><strong><font color="#FF0000" size="4">✒ 解决方案</font></strong></p><p>1、找到你的控件所在类，然后添加一个变量，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">long</span> mStartTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 定义一个初始判断时间变量</span></code></pre><p>2、然后在点击处理事件中，找到目标 Activity 点，添加如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>AdapterView<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> parent<span class="token punctuation">,</span> View view<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">,</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> interval <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> mStartTime<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 两次点击时间间隔</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interval <span class="token operator">>=</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mStartTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showConfirmDialog</span><span class="token punctuation">(</span>infoItem<span class="token punctuation">,</span> isChecked<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// target Activity</span>    <span class="token punctuation">}</span></code></pre><p>就这么简单，不需要按照网上众说纷纭，无需设置 SingerTop、SingerTask ，更没必要单独设置个 onclickListen 监听，试试看，效果很好！</p><p><br></p><h3 id="3-判断当前是否为机主模式"><a href="#3-判断当前是否为机主模式" class="headerlink" title="3. 判断当前是否为机主模式"></a><center>3. 判断当前是否为机主模式</center></h3><p><br></p><p>我们在维护和修改 Android 系统或 Bug 的时候，有时候需要区分机主模式和访客模式，针对不同模式，需要添加和修改不同的代码逻辑！</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>ActivityManager<span class="token punctuation">;</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 目标逻辑代码中添加，非机主模式</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ActivityManager<span class="token punctuation">.</span><span class="token function">getCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> UserHandle<span class="token punctuation">.</span>USER_OWNER<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span></code></pre><h3 id="4-判断应用是否已安装"><a href="#4-判断应用是否已安装" class="headerlink" title="4. 判断应用是否已安装"></a><center>4. 判断应用是否已安装</center></h3><p><br></p><p>在 Android 系统开发过程中，有时候我们需要判断应用（Package）是否已存在于 Device 中。判断方法很多，我们提供一种方案！</p><p>源码中加入如下代码即可判断某 Apk 是否安装：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">boolean</span> <span class="token function">isPkgInstalled</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> String packageName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>packageName <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>ApplicationInfo info <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        info <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getApplicationInfo</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> info <span class="token operator">!=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NameNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><br></p><h3 id="5-Android-P-蓝牙开关状态栏无图标显示"><a href="#5-Android-P-蓝牙开关状态栏无图标显示" class="headerlink" title="5. Android P 蓝牙开关状态栏无图标显示"></a><center>5. Android P 蓝牙开关状态栏无图标显示</center></h3><p><br></p><p>这是个原生设计，为了节约状态栏图标空间（刘海屏导致状态栏空间进一步缩小），只在蓝牙连接设备后才显示相应图标。</p><p>如果你的项目需求是需要显示蓝牙图标，按照如下方式改动：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">updateBluetooth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> iconId <span class="token operator">=</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>stat_sys_data_bluetooth<span class="token punctuation">;</span>    String contentDescription <span class="token operator">=</span> mContext<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>accessibility_quick_settings_bluetooth_on<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> bluetoothVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mBluetooth <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// added by marco, begin</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mBluetooth<span class="token punctuation">.</span><span class="token function">isBluetoothEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            iconId <span class="token operator">=</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>stat_sys_data_bluetooth<span class="token punctuation">;</span>            contentDescription <span class="token operator">=</span> mContext<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>accessibility_quick_settings_bluetooth_on<span class="token punctuation">)</span><span class="token punctuation">;</span>            bluetoothVisible <span class="token operator">=</span> mBluetooth<span class="token punctuation">.</span><span class="token function">isBluetoothEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// added by marco, end</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mBluetooth<span class="token punctuation">.</span><span class="token function">isBluetoothConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            iconId <span class="token operator">=</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>stat_sys_data_bluetooth_connected<span class="token punctuation">;</span>            contentDescription <span class="token operator">=</span> mContext<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>accessibility_bluetooth_connected<span class="token punctuation">)</span><span class="token punctuation">;</span>            bluetoothVisible <span class="token operator">=</span> mBluetooth<span class="token punctuation">.</span><span class="token function">isBluetoothEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    mIconController<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>mSlotBluetooth<span class="token punctuation">,</span> iconId<span class="token punctuation">,</span> contentDescription<span class="token punctuation">)</span><span class="token punctuation">;</span>    mIconController<span class="token punctuation">.</span><span class="token function">setIconVisibility</span><span class="token punctuation">(</span>mSlotBluetooth<span class="token punctuation">,</span> bluetoothVisible<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><br></p><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;推荐跳转：<a href="https://superandroid.pro/2020/01/01/00.thinking-in-android-01.bo-ke-suo-yin/">博客索引（Android 9.0）</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术细节 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 整机开发 </tag>
            
            <tag> Bug/需求 </tag>
            
            <tag> 经验总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈算法中的 “时间复杂度”</title>
      <link href="/2019/03/01/suan-fa-zhuan-lan-tan-tan-shi-jian-fu-za-du/"/>
      <url>/2019/03/01/suan-fa-zhuan-lan-tan-tan-shi-jian-fu-za-du/</url>
      
        <content type="html"><![CDATA[<h2 id="1、算法效率"><a href="#1、算法效率" class="headerlink" title="1、算法效率"></a>1、算法效率</h2><p>虽然随着计算机硬件的迭代更新，运算处理的性能越来越强，但实际上，它也需要根据输入数据的大小和算法效率来消耗一定的处理器资源。要想编写出能高效运行的程序，我们就需要考虑到 <strong><font color="#9932CC">“算法的效率”</font></strong>。</p><p>衡量算法的 <strong>“好坏”</strong> 和 <strong>“效率”</strong> 主要由以下两个指标（复杂度）来评估：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong><font color="#FF0000">时间复杂度（运行时间）：</font></strong>评估执行程序所需的时间，可以估算出程序对处理器的使用程度。<strong><font color="#0000CD">（本篇博文我们重点探讨时间复杂度）</font></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong><font color="#FF0000">空间复杂度（占用空间）：</font></strong>评估执行程序所需的存储空间，可以估算出程序对计算机内存的使用程度。</p><h2 id="2、算法事例"><a href="#2、算法事例" class="headerlink" title="2、算法事例"></a>2、算法事例</h2><p>我们通过几个场景引出时间复杂度的概念，以及常见的几种时间复杂度，最后再总结比较它们的优劣！</p><blockquote><p><strong>场景一</strong></p></blockquote><p><strong><font color="#FFA500">生活场景：</font></strong> <strong>你买了一箱“牛栏山二锅头”（16瓶），2 天喝一瓶，全部喝完需要几天？</strong></p><p>这是一道很简单的算术问题，2 ✖ 16 = 32 天。那如果一箱有 n 瓶，则需要 2 ✖ n = 2n 天，如果我们用一个函数来表达这个相对时间，可以记作 <strong><font color="#FF0000">T(n) = 2n</font></strong> 。</p><p><strong><font color="#FFA500">代码场景：</font></strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 执行次数是线性的</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喝一瓶酒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待一天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p><strong>场景二</strong></p></blockquote><p><strong><font color="#FFA500">生活场景：</font></strong> <strong>你又买了一箱“牛栏山二锅头”（16瓶），5 天为一个周期，每次喝剩下酒的一半，于是第一次喝 8 瓶，第二次喝 4 瓶，那么喝到最后一瓶需要几天？</strong></p><p>这个问题也很简单，16/2 = 8，8/2 = 4，4/2 = 2，2/2 = 1（还剩一瓶），这不就是对数函数吗？以 2 为底数，16为真数，得到的对数就是我们需要的答案，我们可以简写为：5log16。如果一箱有 n 瓶，则需要 5logn 天，如果我们用一个函数来表达这个相对时间，可以记作 <strong><font color="#FF0000">T(n) = 5logn</font></strong> 。</p><p><strong><font color="#FFA500">代码场景：</font></strong></p><pre class=" language-java"><code class="language-java">   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喝一瓶酒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待一天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待一天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待一天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待一天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>场景三</strong></p></blockquote><p><strong><font color="#FFA500">生活场景：</font></strong> <strong>酒喝多了，买了一瓶枸杞，3 天喝一瓶，请问喝完枸杞要几天？</strong></p><p>是的，你没听错，我确实是问你喝完枸杞要多久？答案很简单：3天！如果我们用一个函数来表达这个相对时间，可以记作：<strong><font color="#FF0000">T(n) = 3</font></strong> 。</p><p><strong><font color="#FFA500">代码场景：</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">drink</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喝一瓶枸杞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待一天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待一天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>场景四</strong></p></blockquote><p><strong><font color="#FFA500">生活场景：</font></strong> <strong>酒瘾难戒，又买了一箱好酒（6瓶），但是又不能多喝，于是第一瓶喝了1天，第二瓶喝了2天，第三瓶喝了3天，这样下去全部喝完需要几天？</strong></p><p>不用我说，其实这就是一个 1 + 2 + 3 … + 6 的算术问题，我们知道有个公式：6(6+1)/2 = 21 天，那如果有 n 瓶，就需要 n(n+1)/2 天，如果我们用一个函数来表达这个相对时间，可以记作 <strong><font color="#FF0000">T(n) = n²/2 + n/2</font></strong> 。</p><p><strong><font color="#FFA500">代码场景：</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">drink</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待一天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喝一瓶酒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、渐进时间复杂度"><a href="#3、渐进时间复杂度" class="headerlink" title="3、渐进时间复杂度"></a>3、渐进时间复杂度</h2><p>有了基本操作执行次数的函数 T(n)，是否就可以分析和比较一段代码的运行时间了呢？还是有一定的困难。比如算法 A 的相对时间是 <strong><font color="#0000CD">T(n) = 100n</font></strong> ，算法 B 的相对时间是 <strong><font color="#0000CD">T(n) = 5n²</font></strong> ，这两个到底谁的运行时间更长一些？<strong><font color="#0000CD">这就要看 n 的取值了！</font></strong></p><p>所以，这时候有了 <strong><font color="#FF0000">“渐进时间复杂度”</font></strong>（asymptotic time complectiy）的概念。</p><blockquote><p><strong><font color="#8470FF">我们看看官方的定义：</font></strong><br>若存在函数 f(n)，使得当 n 趋近于无穷大时，T(n) / f(n) 的极限值为不等于零的常数，则称 f(n) 是 T(n) 的同数量级函数。记作 T(n)= O(f(n))，称 O(f(n)) 为算法的 <strong><font color="#FF0000">“渐进时间复杂度”</font></strong>，简称 <strong><font color="#FF0000">“时间复杂度”</font></strong>。渐进时间复杂度用大写 O 来表示，所以也被称为 <strong><font color="#FF0000">“大O表示法”</font></strong>。</p></blockquote><h2 id="4、推导原则"><a href="#4、推导原则" class="headerlink" title="4、推导原则"></a>4、推导原则</h2><p><strong><font color="#FF0000">如何推导出时间复杂度呢？有如下几个原则：</font></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;⚫&nbsp;1、如果运行时间是常数量级，用常数 1 表示；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;⚫&nbsp;2、只保留时间函数中的最高阶项；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;⚫&nbsp;3、如果最高阶项存在，则省去最高阶项前面的系数。</p><h2 id="5、事例再分析"><a href="#5、事例再分析" class="headerlink" title="5、事例再分析"></a>5、事例再分析</h2><blockquote><p><strong>场景一</strong></p></blockquote><p>相对时间：<strong><font color="#0000FF">T(n) = 2n</font></strong> ，根据推导原则 3：最高阶数为 2n ，省去系数 2 ，转换后的时间复杂度为：<strong><font color="#FF0000">T(n) = O(n)</font></strong> 。</p><blockquote><p><strong>场景二</strong></p></blockquote><p>相对时间：<strong><font color="#0000FF">T(n) = 5logn</font></strong> ，根据推导原则 3：最高阶数为 5logn ，省去系数 5 ，转换后的时间复杂度为：<strong><font color="#FF0000">T(n) = O(logn)</font></strong> 。</p><blockquote><p><strong>场景三</strong></p></blockquote><p>相对时间：<strong><font color="#0000FF">T(n) = 3</font></strong> ，根据推导原则 1：只有常数量级 ，用常数 1 表示 ，转换后的时间复杂度为：<strong><font color="#FF0000">T(n) = O(1)</font></strong> 。</p><blockquote><p><strong>场景四</strong></p></blockquote><p>相对时间：<strong><font color="#0000FF">T(n) = n²/2 + n/2</font></strong> ，根据推导原则 2：最高阶数为 n²/2 ，省去系数 0.5 ，转换后的时间复杂度为：<strong><font color="#FF0000">T(n) = O(n²)</font></strong> 。</p><p>这四种时间复杂度究竟谁用时更长，谁节省时间呢？<strong><font color="#FF00FF">O(1) &lt; O(logn) &lt; O(n) &lt; O(n²)</font></strong></p><h2 id="6、其他常见复杂度"><a href="#6、其他常见复杂度" class="headerlink" title="6、其他常见复杂度"></a>6、其他常见复杂度</h2><p>除了常数阶、线性阶、平方阶、对数阶，还有如下时间复杂度：</p><table><thead><tr><th style="text-align:center">f(n)</th><th style="text-align:center">时间复杂度</th><th style="text-align:center">阶</th></tr></thead><tbody><tr><td style="text-align:center">nlogn</td><td style="text-align:center">O(nlogn)</td><td style="text-align:center">nlogn 阶</td></tr><tr><td style="text-align:center">n³</td><td style="text-align:center">O(n³)</td><td style="text-align:center">立方阶</td></tr><tr><td style="text-align:center">2ⁿ</td><td style="text-align:center">O(2ⁿ)</td><td style="text-align:center">指数阶</td></tr><tr><td style="text-align:center">n!</td><td style="text-align:center">O(n!)</td><td style="text-align:center">阶乘阶</td></tr><tr><td style="text-align:center">(√n)</td><td style="text-align:center">O(√n)</td><td style="text-align:center">平方根阶</td></tr></tbody></table><h2 id="7、复杂度比较"><a href="#7、复杂度比较" class="headerlink" title="7、复杂度比较"></a>7、复杂度比较</h2><table><thead><tr><th style="text-align:center">n</th><th style="text-align:center">logn</th><th style="text-align:center">√n</th><th style="text-align:center">nlogn</th><th style="text-align:center">n²</th><th style="text-align:center">2ⁿ</th><th style="text-align:center">n!</th></tr></thead><tbody><tr><td style="text-align:center">5</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">10</td><td style="text-align:center">25</td><td style="text-align:center">32</td><td style="text-align:center">120</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">3</td><td style="text-align:center">3</td><td style="text-align:center">30</td><td style="text-align:center">100</td><td style="text-align:center">1024</td><td style="text-align:center">3628800</td></tr><tr><td style="text-align:center">50</td><td style="text-align:center">5</td><td style="text-align:center">7</td><td style="text-align:center">250</td><td style="text-align:center">2500</td><td style="text-align:center">约10^15</td><td style="text-align:center">约3.0*10^64</td></tr><tr><td style="text-align:center">100</td><td style="text-align:center">6</td><td style="text-align:center">10</td><td style="text-align:center">600</td><td style="text-align:center">10000</td><td style="text-align:center">约10^30</td><td style="text-align:center">约9.3*10^157</td></tr><tr><td style="text-align:center">1000</td><td style="text-align:center">9</td><td style="text-align:center">31</td><td style="text-align:center">9000</td><td style="text-align:center">1000 000</td><td style="text-align:center">约10^300</td><td style="text-align:center">约4.0*10^2567</td></tr></tbody></table><p><br></p><p>从上表可以看出，O(n)、O(logn)、O(√n)、O(nlogn) 随着 n 的增加，复杂度提升不大，因此这些复杂度属于效率比较高的算法，反观 O(2ⁿ) 和 O(n!) 当 n 增加到 50 时，复杂度就突破十位数了，这种效率极差的复杂度最好不要出现在程序中，因此在动手编程时要评估所写算法的最坏情况的复杂度。</p><p>这些时间复杂度究竟谁用时更长，谁节省时间呢？</p><p><strong><font color="#FF00FF">O(1) &lt; O(logn) &lt; O(√n) &lt; O(n) &lt; O(nlogn) &lt; O(n²) &lt; O(n³) &lt; O(2ⁿ) &lt; O(n!)</font></strong></p><h2 id="8、再举一例"><a href="#8、再举一例" class="headerlink" title="8、再举一例"></a>8、再举一例</h2><p><strong><font color="#FF0000">【疑问】：现在计算机硬件性能越来越强，算法真的体验那么明显吗？算法时间复杂度真的需要那么重视吗？</font></strong></p><p>我相信你肯定存在这样的疑问，虽然我们知道算法这个东西是很重要的，但是我们平常可能接触不多，很多时候计算机的性能已经能满足我们的需求，但是我还是要举个例子让你更直观的看到不同算法之间的巨大差异！</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#FF00FF">算法 A 的相对时间规模是 T(n) = 100n，时间复杂度是 O(n)，算法 A 运行在老旧电脑上。</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#FF00FF">算法 B 的相对时间规模是 T(n) = 5n²，时间复杂度是 O(n²)，算法 B 运行在某台超级计算机上，运行速度是老旧电脑的 100 倍。</font></p><p>当随着 n 的增大，我们通过表格看看 T(n) 的变化：</p><table><thead><tr><th style="text-align:center">n</th><th style="text-align:center">T(n) = 100n ✖ 100</th><th style="text-align:center">T(n) = 5n²</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">10000</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">50000</td><td style="text-align:center">125</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">10 0000</td><td style="text-align:center">500</td></tr><tr><td style="text-align:center">100</td><td style="text-align:center">100 0000</td><td style="text-align:center">50000</td></tr><tr><td style="text-align:center">1000</td><td style="text-align:center">1000 0000</td><td style="text-align:center">500 0000</td></tr><tr><td style="text-align:center">2000</td><td style="text-align:center"><font color="#FF0000">2000 0000</font></td><td style="text-align:center"><font color="#FF0000">2000 0000</font></td></tr><tr><td style="text-align:center">10000</td><td style="text-align:center">1 0000 0000</td><td style="text-align:center">5 0000 0000</td></tr><tr><td style="text-align:center">100000</td><td style="text-align:center">10 0000 0000</td><td style="text-align:center">500 0000 0000</td></tr><tr><td style="text-align:center">1000000</td><td style="text-align:center">100 0000 0000</td><td style="text-align:center">50000 0000 0000</td></tr></tbody></table><p><br></p><p>从表格中可以看出，当 n 的值很小的时候，算法 A 的运行用时要远大于算法 B；当 n 的值达到 1000 左右，算法 A 和算法 B 的运行时间已经接近；当 n 的值达到 2000 左右，算法 A 和 算法 B 的运行时间一致；当 n 的值越来越大，达到十万、百万时，算法 A 的优势开始显现，算法 B 则越来越慢，差距越来越明显。这就是不同时间复杂度带来的差距，即便你的计算机很牛X！</p><p><br></p><p><strong><font color="#FF00FF" size="5">参考博客</font></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://blog.csdn.net/qq_41523096/article/details/82142747" target="_blank" rel="noopener">一套图 搞懂“时间复杂度”</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 时间复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Framework 核心服务之 PMS 钻研 ( 7 ) - PackageParser</title>
      <link href="/2018/12/31/android-kuang-jia-fu-wu-pian-shen-ru-yan-jiu-pms-xi-lie-7-zhi-packageparser/"/>
      <url>/2018/12/31/android-kuang-jia-fu-wu-pian-shen-ru-yan-jiu-pms-xi-lie-7-zhi-packageparser/</url>
      
        <content type="html"><![CDATA[<p><br></p><p><strong><center><font color="#3A5FCD" size="4">PackageManagerService 系列文章如下（基于 Android 9.0 源码）</font><center></center></center></strong><br></p><table><thead><tr><th style="text-align:center">&nbsp;</th><th style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（1）- 启动流程</font></a></th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（2）- 构造函数</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（3）- PackageManager</font></a></td></tr><tr><td style="text-align:center"><strong><font color="#EE2C2C" size="3">PackageManagerService</font></strong></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（4）- PackageInstaller</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（5）- APK 安装流程（1）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（6）- APK 安装流程（2）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（7）- PackageParser</font></a></td></tr></tbody></table><p><br></p><p><strong><font color="#3A5FCD" size="4">修订日志</font></strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">1、博文格式，文章排版等优化；</font></p><p><br></p><hr><h1 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h1><h2 id="1-1-核心源码"><a href="#1-1-核心源码" class="headerlink" title="1.1 核心源码"></a>1.1 核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">PackageParser.java</font></td><td>frameworks/base/core/java/android/content/pm/PackageParser.java</td></tr><tr><td><font color="#D15FEE">PackageManagerService.java</font></td><td>frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</td></tr></tbody></table><p><br></p><h2 id="1-2-简介"><a href="#1-2-简介" class="headerlink" title="1.2 简介"></a>1.2 简介</h2><p>在分析 <code>PackageManagerService</code> 构造函数的时候，我们知道：Android 安装一个 APK 的时候首先会解析 APK，而解析 APK 则需要用到一个工具类，这个工具类就是我们这篇博文的主角 <code>PackageParser</code>（在我们之前研究的源码中，你已经见过它的身影了）！<br><br></p><h1 id="二、PackageParser"><a href="#二、PackageParser" class="headerlink" title="二、PackageParser"></a>二、PackageParser</h1><h2 id="2-1-官方说明"><a href="#2-1-官方说明" class="headerlink" title="2.1 官方说明"></a>2.1 官方说明</h2><p>首先我们看下官方对 PackageParser 的说明：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Parser for package files (APKs) on disk. This supports apps packaged either * as a single "monolithic" APK, or apps packaged as a "cluster" of multiple * APKs in a single directory. * &lt;p> * Apps packaged as multiple APKs always consist of a single "base" APK (with a * {@code null} split name) and zero or more "split" APKs (with unique split * names). Any subset of those split APKs are a valid install, as long as the * following constraints are met: * &lt;ul> * &lt;li>All APKs must have the exact same package name, version code, and signing * certificates. * &lt;li>All APKs must have unique split names. * &lt;li>All installations must contain a single base APK. * &lt;/ul> * * 翻译如下： * 解析磁盘上的 APK 安装包文件。它既能解析一个"单一" APK 文件，也能解析一个"集群" APK 文件　* (即一个 APK 文件里面包含多个 APK 文件)。一个"集群" APK 有一个"基准" APK (base APK) 组成 * 和其他一些"分割" APK ("split" APKs) 构成，其中这些"分割" APK 用一些数字来分割。 * 这些"分割"的 APK 必须都是有效的安装，同时必须满足下面的几个条件： *     所有的 APK 必须具有完全相同的软件包名称，版本代码和签名证书； *     所有的 APK 必须具有唯一的拆分名称； *     所有安装必须包含一个单一的APK； *  * @hide */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageParser</span> <span class="token punctuation">{</span></code></pre><p><br></p><h2 id="2-2-创建解析器"><a href="#2-2-创建解析器" class="headerlink" title="2.2 创建解析器"></a>2.2 创建解析器</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 具体源码及逻辑流程省略...</span><span class="token comment" spellcheck="true">// 创建解析器</span><span class="token keyword">final</span> PackageParser pp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解析 APK</span>tmpPkg <span class="token operator">=</span> pp<span class="token punctuation">.</span><span class="token function">parsePackage</span><span class="token punctuation">(</span>codePath<span class="token punctuation">,</span> parseFlags<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><br></p><h2 id="2-3-解析-APK"><a href="#2-3-解析-APK" class="headerlink" title="2.3 解析 APK"></a>2.3 解析 APK</h2><p>在分析 PackageParser 解析 APK 之前，我们有必要了解一下 Split APK 机制！<br><br></p><h3 id="2-3-1-Split-APK机制"><a href="#2-3-1-Split-APK机制" class="headerlink" title="2.3.1 Split APK机制"></a>2.3.1 Split APK机制</h3><p>Split APK 是 Google 为解决 65536 上限，以及 APK 安装包越来越大等问题，在 <code>Android L</code> 中引入的机制。 Split APK 可以将一个庞大的 APK，按屏幕密度，ABI 等形式拆分成多个独立的 APK，在应用程序更新时，不必下载整个 APK，只需单独下载某个模块即可安装更新。</p><p>Split APK 将原来一个 APK 中多个模块共享同一份资源的模型分离成多个 APK 使用各自的资源，并且可以继承 Base APK 中的资源，多个 APK 有相同的 data，cache 目录。</p><blockquote><p>在引入了 Split APK 机制后，APK 有两种分类：<br><code>Single APK</code>：安装文件为一个完整的 APK，即 Base APK，源码中定义为 <code>Monolithic</code>。<br><code>Mutiple APK</code>：安装文件在一个文件目录中，其内部有多个被拆分的 APK，这些 APK 由一个 Base APK 和一个或多个 Split APK 组成，源码中定义为 <code>Cluster</code>。</p></blockquote><h3 id="2-3-2-parsePackage"><a href="#2-3-2-parsePackage" class="headerlink" title="2.3.2 parsePackage"></a>2.3.2 parsePackage</h3><p>接下来我们开始正式分析 parsePackage 方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Equivalent to {@link #parsePackage(File, int, boolean)} with {@code useCaches == false}. */</span><span class="token keyword">public</span> Package <span class="token function">parsePackage</span><span class="token punctuation">(</span>File packageFile<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> PackageParserException <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">parsePackage</span><span class="token punctuation">(</span>packageFile<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">/* useCaches */</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>新增一个 <code>useCaches</code> 参数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Package <span class="token function">parsePackage</span><span class="token punctuation">(</span>File packageFile<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">boolean</span> useCaches<span class="token punctuation">)</span>        <span class="token keyword">throws</span> PackageParserException <span class="token punctuation">{</span>    Package parsed <span class="token operator">=</span> useCaches <span class="token operator">?</span> <span class="token function">getCachedResult</span><span class="token punctuation">(</span>packageFile<span class="token punctuation">,</span> flags<span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parsed <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> parsed<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> parseTime <span class="token operator">=</span> LOG_PARSE_TIMINGS <span class="token operator">?</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果解析的 packageFile 是一个目录，则调用 parseClusterPackage 方法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>packageFile<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        parsed <span class="token operator">=</span> <span class="token function">parseClusterPackage</span><span class="token punctuation">(</span>packageFile<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果是单个 APK 文件，则调用 parseMonolithicPackage　方法</span>        parsed <span class="token operator">=</span> <span class="token function">parseMonolithicPackage</span><span class="token punctuation">(</span>packageFile<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> cacheTime <span class="token operator">=</span> LOG_PARSE_TIMINGS <span class="token operator">?</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">cacheResult</span><span class="token punctuation">(</span>packageFile<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> parsed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>LOG_PARSE_TIMINGS<span class="token punctuation">)</span> <span class="token punctuation">{</span>        parseTime <span class="token operator">=</span> cacheTime <span class="token operator">-</span> parseTime<span class="token punctuation">;</span>        cacheTime <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> cacheTime<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parseTime <span class="token operator">+</span> cacheTime <span class="token operator">></span> LOG_PARSE_TIMINGS_THRESHOLD_MS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Parse times for '"</span> <span class="token operator">+</span> packageFile <span class="token operator">+</span> <span class="token string">"': parse="</span> <span class="token operator">+</span> parseTime                    <span class="token operator">+</span> <span class="token string">"ms, update_cache="</span> <span class="token operator">+</span> cacheTime <span class="token operator">+</span> <span class="token string">" ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> parsed<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们这边选取 parseClusterPackage 作为分析的分支，当你搞懂这个方法的具体逻辑，单个 APK 的解析原理就很简单了。</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-702816956a0fec31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"></center><p><br></p><h1 id="三、parseClusterPackage"><a href="#三、parseClusterPackage" class="headerlink" title="三、parseClusterPackage"></a>三、parseClusterPackage</h1><p>我们来看看 <code>parseClusterPackage()</code> 的源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Package <span class="token function">parseClusterPackage</span><span class="token punctuation">(</span>File packageDir<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> PackageParserException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*     * 调用 parseClusterPackageLite 方法用于轻量级解析目录文件，     * 之所以要轻量级解析是因为解析 APK 是一个复杂耗时的操作，这里的逻辑并不需要 APK 所有的信息。     */</span>    <span class="token keyword">final</span> PackageLite lite <span class="token operator">=</span> <span class="token function">parseClusterPackageLite</span><span class="token punctuation">(</span>packageDir<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * mOnlyCoreApps 用来指示 PackageParser 是否只解析“核心”应用，     * “核心”应用指的是 AndroidManifest 中 coreApp 的属性值为 true，     * 只解析“核心”应用是为了创建一个极简的启动环境，     * 我们可以通过 PackageParser 的 setOnlyCoreApps 方法来设置 mOnlyCoreApps 的值。     *     * lite.coreApp 表示当前包是否包含“核心”应用，如果不满足条件就会抛出异常。     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mOnlyCoreApps <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lite<span class="token punctuation">.</span>coreApp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PackageParserException</span><span class="token punctuation">(</span>INSTALL_PARSE_FAILED_MANIFEST_MALFORMED<span class="token punctuation">,</span>                <span class="token string">"Not a coreApp: "</span> <span class="token operator">+</span> packageDir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Build the split dependency tree.</span>    SparseArray<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> splitDependencies <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">final</span> SplitAssetLoader assetLoader<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lite<span class="token punctuation">.</span>isolatedSplits <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ArrayUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>lite<span class="token punctuation">.</span>splitNames<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            splitDependencies <span class="token operator">=</span>                           SplitAssetDependencyLoader<span class="token punctuation">.</span><span class="token function">createDependenciesFromPackage</span><span class="token punctuation">(</span>lite<span class="token punctuation">)</span><span class="token punctuation">;</span>            assetLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SplitAssetDependencyLoader</span><span class="token punctuation">(</span>lite<span class="token punctuation">,</span> splitDependencies<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SplitAssetDependencyLoader<span class="token punctuation">.</span>IllegalDependencyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PackageParserException</span><span class="token punctuation">(</span>INSTALL_PARSE_FAILED_BAD_MANIFEST<span class="token punctuation">,</span>                                              e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        assetLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSplitAssetLoader</span><span class="token punctuation">(</span>lite<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取 AssetManager 对象</span>        <span class="token keyword">final</span> AssetManager assets <span class="token operator">=</span> assetLoader<span class="token punctuation">.</span><span class="token function">getBaseAssetManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> File baseApk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>lite<span class="token punctuation">.</span>baseCodePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析 base APK，获得对应的 Package 对象</span>        <span class="token keyword">final</span> Package pkg <span class="token operator">=</span> <span class="token function">parseBaseApk</span><span class="token punctuation">(</span>baseApk<span class="token punctuation">,</span> assets<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PackageParserException</span><span class="token punctuation">(</span>INSTALL_PARSE_FAILED_NOT_APK<span class="token punctuation">,</span>                    <span class="token string">"Failed to parse base APK: "</span> <span class="token operator">+</span> baseApk<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ArrayUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>lite<span class="token punctuation">.</span>splitNames<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取 split APK 的数量</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> num <span class="token operator">=</span> lite<span class="token punctuation">.</span>splitNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            pkg<span class="token punctuation">.</span>splitNames <span class="token operator">=</span> lite<span class="token punctuation">.</span>splitNames<span class="token punctuation">;</span>            pkg<span class="token punctuation">.</span>splitCodePaths <span class="token operator">=</span> lite<span class="token punctuation">.</span>splitCodePaths<span class="token punctuation">;</span>            pkg<span class="token punctuation">.</span>splitRevisionCodes <span class="token operator">=</span> lite<span class="token punctuation">.</span>splitRevisionCodes<span class="token punctuation">;</span>            pkg<span class="token punctuation">.</span>splitFlags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>            pkg<span class="token punctuation">.</span>splitPrivateFlags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>            pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>splitNames <span class="token operator">=</span> pkg<span class="token punctuation">.</span>splitNames<span class="token punctuation">;</span>            pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>splitDependencies <span class="token operator">=</span> splitDependencies<span class="token punctuation">;</span>            pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>splitClassLoaderNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> AssetManager splitAssets <span class="token operator">=</span> assetLoader<span class="token punctuation">.</span><span class="token function">getSplitAssetManager</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 解析每个 split APK</span>                <span class="token function">parseSplitApk</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> i<span class="token punctuation">,</span> splitAssets<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 设置相应属性</span>        pkg<span class="token punctuation">.</span><span class="token function">setCodePath</span><span class="token punctuation">(</span>packageDir<span class="token punctuation">.</span><span class="token function">getCanonicalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pkg<span class="token punctuation">.</span><span class="token function">setUse32bitAbi</span><span class="token punctuation">(</span>lite<span class="token punctuation">.</span>use32bitAbi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pkg<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PackageParserException</span><span class="token punctuation">(</span>INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION<span class="token punctuation">,</span>                <span class="token string">"Failed to get path: "</span> <span class="token operator">+</span> lite<span class="token punctuation">.</span>baseCodePath<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        IoUtils<span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>assetLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-1-parseClusterPackageLite"><a href="#3-1-parseClusterPackageLite" class="headerlink" title="3.1 parseClusterPackageLite"></a>3.1 parseClusterPackageLite</h2><p>我们来看看轻量级解析函数 <code>parseClusterPackageLite()</code> 的源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> PackageLite <span class="token function">parseClusterPackageLite</span><span class="token punctuation">(</span>File packageDir<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span>                                            <span class="token keyword">throws</span> PackageParserException <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isApkFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 通过 parseApkLite 方法解析每个 Mutiple APK，</span>            <span class="token comment" spellcheck="true">// 得到每个 Mutiple APK 对应的 ApkLite（轻量级 APK 信息）。</span>            <span class="token keyword">final</span> ApkLite lite <span class="token operator">=</span> <span class="token function">parseApkLite</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">final</span> String codePath <span class="token operator">=</span> packageDir<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将这些 ApkLite 封装为一个 PackageLite（轻量级包信息）并返回</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PackageLite</span><span class="token punctuation">(</span>codePath<span class="token punctuation">,</span> baseApk<span class="token punctuation">,</span> splitNames<span class="token punctuation">,</span> isFeatureSplits<span class="token punctuation">,</span> usesSplitNames<span class="token punctuation">,</span>            configForSplits<span class="token punctuation">,</span> splitCodePaths<span class="token punctuation">,</span> splitRevisionCodes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><br></p><h2 id="3-2-parseBaseApk"><a href="#3-2-parseBaseApk" class="headerlink" title="3.2 parseBaseApk"></a>3.2 parseBaseApk</h2><p>我们来看看 Base Apk 的解析函数 <code>parseBaseApk()</code> 的源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String MNT_EXPAND <span class="token operator">=</span> <span class="token string">"/mnt/expand/"</span><span class="token punctuation">;</span><span class="token keyword">private</span> Package <span class="token function">parseBaseApk</span><span class="token punctuation">(</span>File apkFile<span class="token punctuation">,</span> AssetManager assets<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span>                             <span class="token keyword">throws</span> PackageParserException <span class="token punctuation">{</span>    <span class="token keyword">final</span> String apkPath <span class="token operator">=</span> apkFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String volumeUuid <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>apkPath<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>MNT_EXPAND<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> end <span class="token operator">=</span> apkPath<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> MNT_EXPAND<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果 APK 的路径以 /mnt/expand/ 开头，就截取该路径获取 volumeUuid</span>        volumeUuid <span class="token operator">=</span> apkPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>MNT_EXPAND<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mParseError <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">;</span>    mArchiveSourcePath <span class="token operator">=</span> apkFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_JAR<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Scanning base APK: "</span> <span class="token operator">+</span> apkPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    XmlResourceParser parser <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> cookie <span class="token operator">=</span> assets<span class="token punctuation">.</span><span class="token function">findCookieForPath</span><span class="token punctuation">(</span>apkPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookie <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PackageParserException</span><span class="token punctuation">(</span>INSTALL_PARSE_FAILED_BAD_MANIFEST<span class="token punctuation">,</span>                    <span class="token string">"Failed adding asset path: "</span> <span class="token operator">+</span> apkPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        parser <span class="token operator">=</span> assets<span class="token punctuation">.</span><span class="token function">openXmlResourceParser</span><span class="token punctuation">(</span>cookie<span class="token punctuation">,</span> ANDROID_MANIFEST_FILENAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Resources res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resources</span><span class="token punctuation">(</span>assets<span class="token punctuation">,</span> mMetrics<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> outError <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 再次调用 parseBaseApk 方法</span>        <span class="token keyword">final</span> Package pkg <span class="token operator">=</span> <span class="token function">parseBaseApk</span><span class="token punctuation">(</span>apkPath<span class="token punctuation">,</span> res<span class="token punctuation">,</span> parser<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> outError<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PackageParserException</span><span class="token punctuation">(</span>mParseError<span class="token punctuation">,</span>                    apkPath <span class="token operator">+</span> <span class="token string">" (at "</span> <span class="token operator">+</span> parser<span class="token punctuation">.</span><span class="token function">getPositionDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"): "</span> <span class="token operator">+</span> outError<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 用于以后标识这个解析后的 Package</span>        pkg<span class="token punctuation">.</span><span class="token function">setVolumeUuid</span><span class="token punctuation">(</span>volumeUuid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用于标识该 App 所在的存储卷 UUID</span>        pkg<span class="token punctuation">.</span><span class="token function">setApplicationVolumeUuid</span><span class="token punctuation">(</span>volumeUuid<span class="token punctuation">)</span><span class="token punctuation">;</span>        pkg<span class="token punctuation">.</span><span class="token function">setBaseCodePath</span><span class="token punctuation">(</span>apkPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        pkg<span class="token punctuation">.</span><span class="token function">setSigningDetails</span><span class="token punctuation">(</span>SigningDetails<span class="token punctuation">.</span>UNKNOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pkg<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageParserException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PackageParserException</span><span class="token punctuation">(</span>INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION<span class="token punctuation">,</span>                <span class="token string">"Failed to read manifest from "</span> <span class="token operator">+</span> apkPath<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        IoUtils<span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个方法内部主要就是做了两件事：</p><blockquote><p>1、解析 volumeUuid<br>  2、调用 parseBaseApk(res, parser, flags, outError) 来获取 Package 对象 pkg 并返回</p></blockquote><p><br></p><h2 id="3-3-parseBaseApk-重载"><a href="#3-3-parseBaseApk-重载" class="headerlink" title="3.3 parseBaseApk 重载"></a>3.3 parseBaseApk 重载</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Package <span class="token function">parseBaseApk</span><span class="token punctuation">(</span>String apkPath<span class="token punctuation">,</span> Resources res<span class="token punctuation">,</span> XmlResourceParser parser<span class="token punctuation">,</span>            <span class="token keyword">int</span> flags<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> outError<span class="token punctuation">)</span> <span class="token keyword">throws</span> XmlPullParserException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">final</span> String splitName<span class="token punctuation">;</span>    <span class="token keyword">final</span> String pkgName<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 用包名创建一个 Package 对象</span>    <span class="token keyword">final</span> Package pkg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Package</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从资源中提取自定义属性集 com.android.internal.R.styleable.AndroidManifest 得到 TypedArray </span>    TypedArray sa <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">obtainAttributes</span><span class="token punctuation">(</span>parser<span class="token punctuation">,</span>            com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>AndroidManifest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化 pkg 的属性</span>    pkg<span class="token punctuation">.</span>mVersionCode <span class="token operator">=</span> sa<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span>            com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>AndroidManifest_versionCode<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pkg<span class="token punctuation">.</span>mVersionCodeMajor <span class="token operator">=</span> sa<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span>            com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>AndroidManifest_versionCodeMajor<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span><span class="token function">setVersionCode</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span><span class="token function">getLongVersionCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pkg<span class="token punctuation">.</span>baseRevisionCode <span class="token operator">=</span> sa<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span>            com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>AndroidManifest_revisionCode<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pkg<span class="token punctuation">.</span>mVersionName <span class="token operator">=</span> sa<span class="token punctuation">.</span><span class="token function">getNonConfigurationString</span><span class="token punctuation">(</span>            com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>AndroidManifest_versionName<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>mVersionName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pkg<span class="token punctuation">.</span>mVersionName <span class="token operator">=</span> pkg<span class="token punctuation">.</span>mVersionName<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 读取 APK 的 AndroidManifest 中的 coreApp 的值，判断是否为核心 Apk</span>    pkg<span class="token punctuation">.</span>coreApp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getAttributeBooleanValue</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"coreApp"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pkg<span class="token punctuation">.</span>mCompileSdkVersion <span class="token operator">=</span> sa<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span>            com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>AndroidManifest_compileSdkVersion<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>compileSdkVersion <span class="token operator">=</span> pkg<span class="token punctuation">.</span>mCompileSdkVersion<span class="token punctuation">;</span>    pkg<span class="token punctuation">.</span>mCompileSdkVersionCodename <span class="token operator">=</span> sa<span class="token punctuation">.</span><span class="token function">getNonConfigurationString</span><span class="token punctuation">(</span>            com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>AndroidManifest_compileSdkVersionCodename<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>mCompileSdkVersionCodename <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pkg<span class="token punctuation">.</span>mCompileSdkVersionCodename <span class="token operator">=</span> pkg<span class="token punctuation">.</span>mCompileSdkVersionCodename<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>compileSdkVersionCodename <span class="token operator">=</span> pkg<span class="token punctuation">.</span>mCompileSdkVersionCodename<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取资源后要回收</span>    sa<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">parseBaseApkCommon</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> null<span class="token punctuation">,</span> res<span class="token punctuation">,</span> parser<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> outError<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><br></p><h2 id="3-4-parseBaseApkCommon"><a href="#3-4-parseBaseApkCommon" class="headerlink" title="3.4 parseBaseApkCommon"></a>3.4 parseBaseApkCommon</h2><p>最终调用了 <code>parseBaseApkCommon</code> 方法，这个方法主要用来解析 APK 的 <code>AndroidManifest</code> 中的 <code>各个标签</code>，比如 application、permission、uses-sdk、feature-group 等等。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Package <span class="token function">parseBaseApkCommon</span><span class="token punctuation">(</span>Package pkg<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> acceptedTags<span class="token punctuation">,</span> Resources res<span class="token punctuation">,</span>        XmlResourceParser parser<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> outError<span class="token punctuation">)</span> <span class="token keyword">throws</span> XmlPullParserException<span class="token punctuation">,</span>        IOException <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 是否要安装在 SD 卡上</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> PARSE_EXTERNAL_STORAGE<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>flags <span class="token operator">|=</span> ApplicationInfo<span class="token punctuation">.</span>FLAG_EXTERNAL_STORAGE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 开始解析 xml</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>type <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> XmlPullParser<span class="token punctuation">.</span>END_DOCUMENT            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>type <span class="token operator">!=</span> XmlPullParser<span class="token punctuation">.</span>END_TAG <span class="token operator">||</span> parser<span class="token punctuation">.</span><span class="token function">getDepth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> outerDepth<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// private static final String TAG_APPLICATION = "application";</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>TAG_APPLICATION<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>foundApp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>RIGID_PARSER<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    outError<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"&lt;manifest> has more than one &lt;application>"</span><span class="token punctuation">;</span>                    mParseError <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_PARSE_FAILED_MANIFEST_MALFORMED<span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"&lt;manifest> has more than one &lt;application>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    XmlUtils<span class="token punctuation">.</span><span class="token function">skipCurrentTag</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            foundApp <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 其中四大组件的标签在 application 标签下，</span>            <span class="token comment" spellcheck="true">// 解析 application 标签的方法为 parseBaseApplication。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">parseBaseApplication</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> res<span class="token punctuation">,</span> parser<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> outError<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>TAG_OVERLAY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><br></p><h2 id="3-5-parseBaseApplication"><a href="#3-5-parseBaseApplication" class="headerlink" title="3.5 parseBaseApplication"></a>3.5 parseBaseApplication</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// parseBaseApplication 方法很长，我们这里只截取了解析四大组件相关的代码。</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">parseBaseApplication</span><span class="token punctuation">(</span>Package owner<span class="token punctuation">,</span> Resources res<span class="token punctuation">,</span>        XmlResourceParser parser<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> outError<span class="token punctuation">)</span>    <span class="token keyword">throws</span> XmlPullParserException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>type <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> XmlPullParser<span class="token punctuation">.</span>END_DOCUMENT            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>type <span class="token operator">!=</span> XmlPullParser<span class="token punctuation">.</span>END_TAG <span class="token operator">||</span> parser<span class="token punctuation">.</span><span class="token function">getDepth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> innerDepth<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> XmlPullParser<span class="token punctuation">.</span>END_TAG <span class="token operator">||</span> type <span class="token operator">==</span> XmlPullParser<span class="token punctuation">.</span>TEXT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String tagName <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"activity"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用 parseActivity 方法解析 activity 标签，</span>            <span class="token comment" spellcheck="true">// 得到一个 Activity 对象（PackageParser 的静态内部类）</span>            Activity a <span class="token operator">=</span> <span class="token function">parseActivity</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> res<span class="token punctuation">,</span> parser<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> outError<span class="token punctuation">,</span> cachedArgs<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                    owner<span class="token punctuation">.</span>baseHardwareAccelerated<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mParseError <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_PARSE_FAILED_MANIFEST_MALFORMED<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将解析得到的 Activity 对象保存在 Package 的列表 activities 中</span>            owner<span class="token punctuation">.</span>activities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            parsedComponent <span class="token operator">=</span> a<span class="token punctuation">.</span>info<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"receiver"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Activity a <span class="token operator">=</span> <span class="token function">parseActivity</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> res<span class="token punctuation">,</span> parser<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> outError<span class="token punctuation">,</span> cachedArgs<span class="token punctuation">,</span>                    <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mParseError <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_PARSE_FAILED_MANIFEST_MALFORMED<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            owner<span class="token punctuation">.</span>receivers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            parsedComponent <span class="token operator">=</span> a<span class="token punctuation">.</span>info<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Service s <span class="token operator">=</span> <span class="token function">parseService</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> res<span class="token punctuation">,</span> parser<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> outError<span class="token punctuation">,</span> cachedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mParseError <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_PARSE_FAILED_MANIFEST_MALFORMED<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            owner<span class="token punctuation">.</span>services<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            parsedComponent <span class="token operator">=</span> s<span class="token punctuation">.</span>info<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"provider"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Provider p <span class="token operator">=</span> <span class="token function">parseProvider</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> res<span class="token punctuation">,</span> parser<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> outError<span class="token punctuation">,</span> cachedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mParseError <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_PARSE_FAILED_MANIFEST_MALFORMED<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            owner<span class="token punctuation">.</span>providers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            parsedComponent <span class="token operator">=</span> p<span class="token punctuation">.</span>info<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><br></p><h2 id="3-6-总结"><a href="#3-6-总结" class="headerlink" title="3.6 总结"></a>3.6 总结</h2><p>PackageParser 解析 APK 的代码逻辑非常庞大且复杂，基本了解了本文所涉及的逻辑和原理，分析问题基本上足够了，如果有兴趣可以自行深入的研究源码。</p><p>parseBaseApk 方法主要的解析结构可以理解为以下简图：<br><br></p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-f8f66b9d2ba70154.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="1417629-1a9039e0ad81bf21.png"></center><h1 id="四、Package-数据结构"><a href="#四、Package-数据结构" class="headerlink" title="四、Package 数据结构"></a>四、Package 数据结构</h1><p>包被解析后，最终存储在 <code>Package</code> ，它是 <code>PackageParser</code> 的<code>内部类</code>，它的部分成员变量如下所示。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Representation of a full package parsed from APK files on disk. A package * consists of a single base APK, and zero or more split APKs. */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Package</span> <span class="token keyword">implements</span> <span class="token class-name">Parcelable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String packageName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// The package name declared in the manifest as the package can be</span>    <span class="token comment" spellcheck="true">// renamed, for example static shared libs use synthetic package names.</span>    <span class="token keyword">public</span> String manifestPackageName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Names of any split APKs, ordered by parsed splitName */</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> splitNames<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// TODO: work towards making these paths invariant</span>    <span class="token keyword">public</span> String volumeUuid<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Path where this package was found on disk. For monolithic packages     * this is path to single base APK file; for cluster packages this is     * path to the cluster directory.     */</span>    <span class="token keyword">public</span> String codePath<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Path of base APK */</span>    <span class="token keyword">public</span> String baseCodePath<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Paths of any split APKs, ordered by parsed splitName */</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> splitCodePaths<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// For now we only support one application per package.</span>    <span class="token keyword">public</span> ApplicationInfo applicationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>Permission<span class="token operator">></span> permissions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Permission<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>PermissionGroup<span class="token operator">></span> permissionGroups <span class="token operator">=</span>                                                      <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>PermissionGroup<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*      * activities 列表中存储了类型为 Activity 的对象，需要注意的是这个 Acticity 并不是     * 我们常用的那个 Activity ，而是 PackageParser 的静态内部类，Package 中的其他列表也都是如此。     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>Activity<span class="token operator">></span> activities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Activity<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>Activity<span class="token operator">></span> receivers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Activity<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>Provider<span class="token operator">></span> providers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Provider<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>Service<span class="token operator">></span> services <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Service<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>Instrumentation<span class="token operator">></span> instrumentation <span class="token operator">=</span>                                                <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Instrumentation<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>Package 的数据结构简图如下所示：</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-12ea4aeb503246b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"></center><p>从这个简图中可以发现 Package 的数据结构是如何设计的：</p><p>1、Package 中存有许多组件，比如 Acticity、Provider、Permission 等等，它们都继承基类 Component。<br>2、每个组件都包含一个 info 数据，比如 Activity 类中包含了成员变量 ActivityInfo，这个 ActivityInfo 才是真正的 Activity 数据。<br>3、四大组件的标签内可能包含 <intent-filter> 来过滤 Intent 信息，因此需要 IntentInfo 来保存组件的 intent 信息，组件基类 Component 依赖于 IntentInfo，IntentInfo 有三个子类 ActivityIntentInfo、ServiceIntentInfo 和 ProviderIntentInfo，不同组件依赖的 IntentInfo 会有所不同，比如 Activity 继承自Component<activityintentinfo> ，Permission 继承自 Component<intentinfo> 。</intentinfo></activityintentinfo></intent-filter></p><p>最终的解析的数据会封装到 Package 中。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>&nbsp;01. <a href="http://liuwangshu.cn/framework/pms/5-packageparser.html" target="_blank" rel="noopener">Android包管理机制（五）APK是如何被解析的</a><br>&nbsp;02. <a href="https://www.jianshu.com/p/69fb6f9a6ac7" target="_blank" rel="noopener">APK安装流程详解9——PackageParser解析APK(上)</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PackageManagerService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Framework 核心服务之 PMS 钻研 ( 6 ) - APK 安装（二）</title>
      <link href="/2018/12/26/android-kuang-jia-fu-wu-pian-shen-ru-yan-jiu-pms-xi-lie-6-zhi-apk-an-zhuang-pms/"/>
      <url>/2018/12/26/android-kuang-jia-fu-wu-pian-shen-ru-yan-jiu-pms-xi-lie-6-zhi-apk-an-zhuang-pms/</url>
      
        <content type="html"><![CDATA[<p><br></p><p><strong><center><font color="#3A5FCD" size="4">PackageManagerService 系列文章如下（基于 Android 9.0 源码）</font><center></center></center></strong><br></p><table><thead><tr><th style="text-align:center">&nbsp;</th><th style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（1）- 启动流程</font></a></th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（2）- 构造函数</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（3）- PackageManager</font></a></td></tr><tr><td style="text-align:center"><strong><font color="#EE2C2C" size="3">PackageManagerService</font></strong></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（4）- PackageInstaller</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（5）- APK 安装流程（1）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（6）- APK 安装流程（2）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（7）- PackageParser</font></a></td></tr></tbody></table><p><br></p><p><strong><font color="#3A5FCD" size="4">修订日志</font></strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">1、博文格式，文章排版等优化；</font></p><p><br></p><hr><h1 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h1><h2 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">PackageInstallerSession.java</font></td><td>frameworks/base/services/core/java/com/android/server/pm/PackageInstallerSession.java</td></tr><tr><td><font color="#D15FEE">PackageManagerService.java</font></td><td>frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</td></tr></tbody></table><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在本系列上一篇文章<a href="https://superandroid.pro/2018/11/20/02.%20Android%20%E6%A0%B8%E5%BF%83%E7%AF%87%20--%2001.%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PackageManagerService%20%E7%B3%BB%E5%88%97%EF%BC%885%EF%BC%89/">深入研究 PackageManagerService 系列（5）之 PackageInstaller - APK 安装流程</a>中，我们了解了 PackageInstaller 安装 APK 的流程，最后会将 APK 的信息交由 PMS 处理。那么 PMS 是如何处理的？这就是我们这篇文章需要分析的。</p><h1 id="PackageHandler"><a href="#PackageHandler" class="headerlink" title="PackageHandler"></a>PackageHandler</h1><h2 id="commitLocked"><a href="#commitLocked" class="headerlink" title="commitLocked"></a>commitLocked</h2><p>在前一篇文章末尾，我们讲过 commitLocked 方法，我们回顾下：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">final</span> PackageManagerService mPm<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">commitLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">/**         * commitLocked 方法很长，我们主要关注这一行代码         * 调用 PackageManagerService 的 installStage 方法         * 这样安装 APK 的代码逻辑就进入了 PackageManagerService 中         */</span>        mPm<span class="token punctuation">.</span><span class="token function">installStage</span><span class="token punctuation">(</span>mPackageName<span class="token punctuation">,</span> stageDir<span class="token punctuation">,</span> stageCid<span class="token punctuation">,</span> localObserver<span class="token punctuation">,</span> params<span class="token punctuation">,</span>                mInstallerPackageName<span class="token punctuation">,</span> mInstallerUid<span class="token punctuation">,</span> user<span class="token punctuation">,</span> mCertificates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="installStage"><a href="#installStage" class="headerlink" title="installStage"></a>installStage</h2><p>正式进入 PMS 源码分析流程，我们看看 installStage 方法：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">void</span> <span class="token function">installStage</span><span class="token punctuation">(</span>String packageName<span class="token punctuation">,</span> File stagedDir<span class="token punctuation">,</span> String stagedCid<span class="token punctuation">,</span>            IPackageInstallObserver2 observer<span class="token punctuation">,</span> PackageInstaller<span class="token punctuation">.</span>SessionParams sessionParams<span class="token punctuation">,</span>            String installerPackageName<span class="token punctuation">,</span> <span class="token keyword">int</span> installerUid<span class="token punctuation">,</span> UserHandle user<span class="token punctuation">,</span>            Certificate<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> certificates<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 创建类型为 INIT_COPY 的消息</span>        <span class="token keyword">final</span> Message msg <span class="token operator">=</span> mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>INIT_COPY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> installReason <span class="token operator">=</span> <span class="token function">fixUpInstallReason</span><span class="token punctuation">(</span>installerPackageName<span class="token punctuation">,</span> installerUid<span class="token punctuation">,</span>                sessionParams<span class="token punctuation">.</span>installReason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建 InstallParams，它对应于包的安装数据</span>        <span class="token keyword">final</span> InstallParams params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstallParams</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> null<span class="token punctuation">,</span> observer<span class="token punctuation">,</span>                sessionParams<span class="token punctuation">.</span>installFlags<span class="token punctuation">,</span> installerPackageName<span class="token punctuation">,</span> sessionParams<span class="token punctuation">.</span>volumeUuid<span class="token punctuation">,</span>                verificationInfo<span class="token punctuation">,</span> user<span class="token punctuation">,</span> sessionParams<span class="token punctuation">.</span>abiOverride<span class="token punctuation">,</span>                sessionParams<span class="token punctuation">.</span>grantedRuntimePermissions<span class="token punctuation">,</span> certificates<span class="token punctuation">,</span> installReason<span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">setTraceMethod</span><span class="token punctuation">(</span><span class="token string">"installStage"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTraceCookie</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>obj <span class="token operator">=</span> params<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 将 InstallParams 通过消息发送出去</span>        mHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="handleMessage"><a href="#handleMessage" class="headerlink" title="handleMessage"></a>handleMessage</h3><p>因为 PackageHandler 继承 Handler ，所以我们来看下 PackageHandler 的 HandlerMessage 方法：</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">doHandleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 设置了线程的优先级为后台线程</span>                Process<span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span>Process<span class="token punctuation">.</span>THREAD_PRIORITY_BACKGROUND<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h3 id="INIT-COPY"><a href="#INIT-COPY" class="headerlink" title="INIT_COPY"></a>INIT_COPY</h3><p>接下来看下 INIT_COPY 消息的处理流程：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">class</span> <span class="token class-name">PackageHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> <span class="token keyword">boolean</span> mBound <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>HandlerParams<span class="token operator">></span> mPendingInstalls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>HandlerParams<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 用于处理各个类型的消息</span>        <span class="token keyword">void</span> <span class="token function">doHandleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> INIT_COPY<span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 取出 InstallParams</span>                    HandlerParams params <span class="token operator">=</span> <span class="token punctuation">(</span>HandlerParams<span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// idx 为当前需要安装的 APK 个数，mPendingInstalls 里面保存所有需要安装的 APK 解析出来的 HandlerParams 参数</span>                    <span class="token keyword">int</span> idx <span class="token operator">=</span> mPendingInstalls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"init_copy idx="</span> <span class="token operator">+</span> idx <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// mBound 用于标识是否绑定了服务（DefaultContainerService），</span>                    <span class="token comment" spellcheck="true">// 如果已经绑定了，则 mBound 为true，如果是第一次调用 mBound 为 false，默认值为 false。</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mBound<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Trace<span class="token punctuation">.</span><span class="token function">asyncTraceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"bindingMCS"</span><span class="token punctuation">,</span>                                System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>mHandler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 如果没有绑定服务，重新绑定，connectToService 方法内部如果绑定成功会将 mBound 置为 true</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">connectToService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to bind to media container service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            params<span class="token punctuation">.</span><span class="token function">serviceError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            Trace<span class="token punctuation">.</span><span class="token function">asyncTraceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"bindingMCS"</span><span class="token punctuation">,</span>                                    System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>mHandler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>traceMethod <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                Trace<span class="token punctuation">.</span><span class="token function">asyncTraceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> params<span class="token punctuation">.</span>traceMethod<span class="token punctuation">,</span>                                        params<span class="token punctuation">.</span>traceCookie<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">// 绑定服务失败则 return</span>                            <span class="token keyword">return</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 绑定服务成功，将请求添加到 ArrayList 类型的 mPendingInstalls 中，等待处理</span>                            mPendingInstalls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 已经绑定服务</span>                        mPendingInstalls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 如果是第一个安装请求，则直接发送事件 MCS_BOUND 触发处理流程</span>                            mHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span>MCS_BOUND<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span></code></pre><h3 id="connectToService"><a href="#connectToService" class="headerlink" title="connectToService"></a>connectToService</h3><p>假设我们是第一次走流程，还没有绑定服务，则会调用 connectToService() 方法，我们看下流程：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">class</span> <span class="token class-name">PackageHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">connectToService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_SD_INSTALL<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Trying to bind to"</span> <span class="token operator">+</span>                    <span class="token string">" DefaultContainerService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Intent service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span>DEFAULT_CONTAINER_COMPONENT<span class="token punctuation">)</span><span class="token punctuation">;</span>            Process<span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span>Process<span class="token punctuation">.</span>THREAD_PRIORITY_DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * bindServiceAsUser 方法会传入 mDefContainerConn，             * bindServiceAsUser 方法的处理逻辑和我们调用 bindService 是类似的，             * 服务建立连接后，会调用 onServiceConnected             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mContext<span class="token punctuation">.</span><span class="token function">bindServiceAsUser</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> mDefContainerConn<span class="token punctuation">,</span>                    Context<span class="token punctuation">.</span>BIND_AUTO_CREATE<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>SYSTEM<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Process<span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span>Process<span class="token punctuation">.</span>THREAD_PRIORITY_BACKGROUND<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果绑定 DefaultContainerService 成功，mBound 会置为 ture</span>                mBound <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Process<span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span>Process<span class="token punctuation">.</span>THREAD_PRIORITY_BACKGROUND<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>这里可以看到 bind 到了一个 service ，这个 service 的 ComponentName 是 “DEFAULT_CONTAINER_COMPONENT” 这个常量，那我们就来看下这个 ComponentName。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">static</span> <span class="token keyword">final</span> ComponentName DEFAULT_CONTAINER_COMPONENT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span>            DEFAULT_CONTAINER_PACKAGE<span class="token punctuation">,</span>            <span class="token string">"com.android.defcontainer.DefaultContainerService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>所以我们知道 bind 的 service 是 DefaultContainerService 。绑定 DefaultContainerService 之后，设定进程的优先级为 THREAD_PRIORITY_DEFAULT。</p><p>然后等 bindServiceAsUser 这个方法执行完则又把线程的优先级设为 THREAD_PRIORITY_BACKGROUND。</p><p>我们这边要重点提到一个<font color="#FFFF00"> <strong>mDefContainerConn</strong></font> 变量，研究一下：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">final</span> <span class="token keyword">private</span> DefaultContainerConnection mDefContainerConn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultContainerConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这下我们知道了 mDefContainerConn 的类型是 DefaultContainerConnection ，那我们来看下 DefaultContainerConnection 这个类。</p><h3 id="DefaultContainerConnection"><a href="#DefaultContainerConnection" class="headerlink" title="DefaultContainerConnection"></a>DefaultContainerConnection</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// DefaultContainerConnection 实现了 ServiceConnection，所以在连接成功的时候会调用 onServiceConnected 方法</span>    <span class="token keyword">class</span> <span class="token class-name">DefaultContainerConnection</span> <span class="token keyword">implements</span> <span class="token class-name">ServiceConnection</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span>ComponentName name<span class="token punctuation">,</span> IBinder service<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_SD_INSTALL<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onServiceConnected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> IMediaContainerService imcs <span class="token operator">=</span> IMediaContainerService<span class="token punctuation">.</span>Stub                    <span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>Binder<span class="token punctuation">.</span><span class="token function">allowBlocking</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 发送了 MCS_BOUND 类型的消息</span>            mHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>MCS_BOUND<span class="token punctuation">,</span> imcs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span>ComponentName name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_SD_INSTALL<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onServiceDisconnected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre><code>上文我们提及到 mContext.bindServiceAsUser(service, mDefContainerConn, Context.BIND_AUTO_CREATE, UserHandle.SYSTEM) 方法，其实就是&quot;绑定&quot; DefaultContainerService。我们知道 bind 一个 Service ，其中负责通信的 ServiceConnection，而本方法中负责通信的就是 mDefContainerConn。所以一旦绑定成功会执行 mDefContainerConn 的 onServiceConnected 方法。而现实是当绑定成功后在 onServiceConnected 中将一个 IBinder 转换成了一个 IMediaContainerService。这个就是 onServiceConnected 回调函数中根据参数传进来的 IMediaContainerService.Stub 的对象引用创建的一个远程代理对象，后面 PacakgeManagerServic 通过该代理对象访问 DefaultContainerService 服务。</code></pre><p>我们简单梳理一下以上代码所做的工作：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp; mBound 用于标识是否绑定了 DefaultContainerService，默认值为 false。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp; DefaultContainerService 是用于检查和复制可移动文件的服务，这是一个比较耗时的操作，因此 DefaultContainerService 没有和 PMS 运行在同一进程中，它运行在 com.android.defcontainer 进程，通过 IMediaContainerService 和 PMS 进行 IPC 通信。</p><p>彼此之间的 IPC 通信如下图所示：<br><br></p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-fc2af2fd9ed961c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/680" alt="微信截图_20181114173938.png"></center><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp; connectToService 方法用来绑定 DefaultContainerService。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp; mHandler.sendEmptyMessage(MCS_BOUND)：发送 MCS_BOUND 类型的消息，触发处理第一个安装请求。</p><p>不知道你是否发现，有两个发送 MCS_BOUND 类型消息的方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// PackageHandler.doHandleMessage（已绑定服务）</span>mHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span>MCS_BOUND<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 不带参数</span><span class="token comment" spellcheck="true">// DefaultContainerConnection（未绑定服务 - 绑定服务）</span>mHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>MCS_BOUND<span class="token punctuation">,</span> imcs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 带参数</span></code></pre><h2 id="MCS-BOUND-分析"><a href="#MCS-BOUND-分析" class="headerlink" title="MCS_BOUND 分析"></a>MCS_BOUND 分析</h2><h3 id="不带参数"><a href="#不带参数" class="headerlink" title="不带参数"></a>不带参数</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">case</span> MCS_BOUND<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"mcs_bound"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不带参数，则此条件不满足</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>obj <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mContainerService <span class="token operator">=</span> <span class="token punctuation">(</span>IMediaContainerService<span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>        Trace<span class="token punctuation">.</span><span class="token function">asyncTraceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"bindingMCS"</span><span class="token punctuation">,</span>        System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>mHandler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 走这边的逻辑</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mContainerService <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 服务没有绑定，则走这边，但是之前我们讲解过，发送 MCS_BOUND 时，已经绑定了服务，这显然是不正常的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mBound<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Something seriously wrong since we are not bound and we are not</span>            <span class="token comment" spellcheck="true">// waiting for connection. Bail out.</span>            Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Cannot bind to media container service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>HandlerParams params <span class="token operator">:</span> mPendingInstalls<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 负责处理服务发生错误的情况</span>                params<span class="token punctuation">.</span><span class="token function">serviceError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Trace<span class="token punctuation">.</span><span class="token function">asyncTraceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"queueInstall"</span><span class="token punctuation">,</span>                        System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>traceMethod <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Trace<span class="token punctuation">.</span><span class="token function">asyncTraceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span>                            params<span class="token punctuation">.</span>traceMethod<span class="token punctuation">,</span> params<span class="token punctuation">.</span>traceCookie<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 绑定失败，清空安装请求队列</span>            mPendingInstalls<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 继续等待绑定服务</span>            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Waiting to connect to media container service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingInstalls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Should never happen ideally.</span>        Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Empty queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="带参数"><a href="#带参数" class="headerlink" title="带参数"></a>带参数</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">case</span> MCS_BOUND<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"mcs_bound"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>obj <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mContainerService <span class="token operator">=</span> <span class="token punctuation">(</span>IMediaContainerService<span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>        Trace<span class="token punctuation">.</span><span class="token function">asyncTraceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"bindingMCS"</span><span class="token punctuation">,</span>                System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>mHandler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 带参数，此条件不满足</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mContainerService <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 走这边的逻辑，安装请求队列不为空</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingInstalls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 得到安装请求队列第一个请求 HandlerParams</span>        HandlerParams params <span class="token operator">=</span> mPendingInstalls<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>params <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">asyncTraceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"queueInstall"</span><span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"startCopy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果 HandlerParams 不为 null 就会调用 HandlerParams 的 startCopy 方法，用于开始复制 APK 的流程</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">startCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_SD_INSTALL<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Checking for more work or unbind..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果 APK 安装成功，删除本次安装请求</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingInstalls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mPendingInstalls<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingInstalls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>mBound<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 如果没有安装请求了，发送解绑服务的请求</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_SD_INSTALL<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Posting delayed MCS_UNBIND"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">removeMessages</span><span class="token punctuation">(</span>MCS_UNBIND<span class="token punctuation">)</span><span class="token punctuation">;</span>                        Message ubmsg <span class="token operator">=</span> <span class="token function">obtainMessage</span><span class="token punctuation">(</span>MCS_UNBIND<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span>ubmsg<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_SD_INSTALL<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Posting MCS_BOUND for next work"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 如果还有其他的安装请求，接着发送 MCS_BOUND 消息继续处理剩余的安装请求</span>                    mHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span>MCS_BOUND<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果安装请求数不大于 0 就会打印 “Empty queue”</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Should never happen ideally.</span>        Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Empty queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面的流程其实很简单，我们根据是否传入了 ims 这个参数，走两条流程，核心的方法就是最终的 startCopy()。</p><h1 id="复制-APK"><a href="#复制-APK" class="headerlink" title="复制 APK"></a>复制 APK</h1><p>上面我们提过，Copy APK 的操作是调用 HandlerParams 的 startCopy 方法。HandlerParams 是 PMS 中的抽象类，它的实现类为 PMS 的内部类 InstallParams。</p><h2 id="startCopy"><a href="#startCopy" class="headerlink" title="startCopy"></a>startCopy</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HandlerParams</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_RETRIES <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * Number of times startCopy() has been attempted and had a non-fatal         * error.         */</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> mRetries <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">startCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> res<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"startCopy "</span> <span class="token operator">+</span> mUser <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/**                 * mRetries 用于记录 startCopy 方法调用的次数，调用 startCopy 方法时会先自动加 1                 * startCopy 方法尝试的次数超过了 4 次，就放弃这个安装请求                 */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>mRetries <span class="token operator">></span> MAX_RETRIES<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to invoke remote methods on default container service. Giving up"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 发送 MCS_GIVE_UP 类型消息，将第一个安装请求（本次安装请求）从安装请求队列 mPendingInstalls 中移除掉</span>                    mHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span>MCS_GIVE_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">handleServiceError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">handleStartCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 💥 💥 💥 重点方法 💥 💥 💥 </span>                    res <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Posting install MCS_RECONNECT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span>MCS_RECONNECT<span class="token punctuation">)</span><span class="token punctuation">;</span>                res <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 调用 handleReturnCode 抽象方法，这个方法会在 handleStartCopy 执行完拷贝相关行为之后，根据 handleStartCopy 做进一步的处理，主要返回状态码</span>            <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleStartCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException<span class="token punctuation">;</span>        <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleServiceError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这边我们还是简单的看一下 MCS_GIVE_UP 和 MCS_RECONNECT 两种 message 的处理流程，逻辑相当简单：</p><h3 id="MCS-RECONNECT"><a href="#MCS-RECONNECT" class="headerlink" title="MCS_RECONNECT"></a>MCS_RECONNECT</h3><pre class=" language-java"><code class="language-java">                <span class="token keyword">case</span> MCS_RECONNECT<span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"mcs_reconnect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingInstalls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>mBound<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">disconnectService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">connectToService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to bind to media container service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span>HandlerParams params <span class="token operator">:</span> mPendingInstalls<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// Indicate service bind error</span>                                params<span class="token punctuation">.</span><span class="token function">serviceError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                Trace<span class="token punctuation">.</span><span class="token function">asyncTraceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"queueInstall"</span><span class="token punctuation">,</span>                                        System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            mPendingInstalls<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span></code></pre><p>判断安装请求队列 mPendingInstalls 是否还有元素，如果有元素先断开绑定，则再次重新调用 connectToService 方法，我们知道 connectToService() 内部会再次执行绑定 DefaultContainerService，而在绑定成功后会再次发送一个 what 值为 MCS_BOUND 的 Message，从而又回到了 startCopy 里面。</p><h3 id="MCS-GIVE-UP"><a href="#MCS-GIVE-UP" class="headerlink" title="MCS_GIVE_UP"></a>MCS_GIVE_UP</h3><pre class=" language-java"><code class="language-java">                <span class="token keyword">case</span> MCS_GIVE_UP<span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"mcs_giveup too many retries"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    HandlerParams params <span class="token operator">=</span> mPendingInstalls<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Trace<span class="token punctuation">.</span><span class="token function">asyncTraceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"queueInstall"</span><span class="token punctuation">,</span>                            System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span></code></pre><p>直接删除了安装请求队列 mPendingInstalls 里面下标为 0 的元素，即取消本次安装请求。</p><h2 id="handleStartCopy"><a href="#handleStartCopy" class="headerlink" title="handleStartCopy"></a>handleStartCopy</h2><p>我们发现 handleStartCopy 也是一个抽象的方法，那么它在哪实现？前面我们说过：HandlerParams 是 PMS 中的抽象类，它的实现类为 PMS 的内部类 InstallParams。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">class</span> <span class="token class-name">InstallParams</span> <span class="token keyword">extends</span> <span class="token class-name">HandlerParams</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*         * Invoke remote method to get package information and install         * location values. Override install location based on default         * policy if needed and then create install arguments based         * on the install location.         */</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleStartCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>            <span class="token keyword">int</span> ret <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">/**             * 确定 APK 的安装位置             *     onSd：     安装到 SD 卡             *     onInt：    内部存储即 Data 分区             *     ephemeral：安装到临时存储             */</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> onSd <span class="token operator">=</span> <span class="token punctuation">(</span>installFlags <span class="token operator">&amp;</span> PackageManager<span class="token punctuation">.</span>INSTALL_EXTERNAL<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> onInt <span class="token operator">=</span> <span class="token punctuation">(</span>installFlags <span class="token operator">&amp;</span> PackageManager<span class="token punctuation">.</span>INSTALL_INTERNAL<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> ephemeral <span class="token operator">=</span> <span class="token punctuation">(</span>installFlags <span class="token operator">&amp;</span> PackageManager<span class="token punctuation">.</span>INSTALL_INSTANT_APP<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>            PackageInfoLite pkgLite <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// APK 不能同时安装在 SD 卡和 Data 分区</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>onInt <span class="token operator">&amp;&amp;</span> onSd<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Check if both bits are set.</span>                Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Conflicting flags specified for installing on both internal and external"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ret <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INVALID_INSTALL_LOCATION<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 安装标志冲突，Instant Apps 不能安装到 SD 卡中</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>onSd <span class="token operator">&amp;&amp;</span> ephemeral<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span>  <span class="token string">"Conflicting flags specified for installing ephemeral on external"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ret <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INVALID_INSTALL_LOCATION<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/**                 * 获取 APK 的少量的信息                 * 通过 IMediaContainerService 跨进程调用 DefaultContainerService 的 getMinimalPackageInfo 方法，                 * 该方法轻量解析 APK 并得到 APK 的少量信息，                 * 轻量解析的原因是这里不需要得到 APK 的全部信息，APK 的少量信息会封装到 PackageInfoLite 中。                 */</span>                pkgLite <span class="token operator">=</span> mContainerService<span class="token punctuation">.</span><span class="token function">getMinimalPackageInfo</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span>resolvedPath<span class="token punctuation">,</span> installFlags<span class="token punctuation">,</span>                        packageAbiOverride<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_EPHEMERAL <span class="token operator">&amp;&amp;</span> ephemeral<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Slog<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"pkgLite for install: "</span> <span class="token operator">+</span> pkgLite<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 判断安装的位置</span>                <span class="token keyword">int</span> loc <span class="token operator">=</span> pkgLite<span class="token punctuation">.</span>recommendedInstallLocation<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>loc <span class="token operator">==</span> PackageHelper<span class="token punctuation">.</span>RECOMMEND_FAILED_INVALID_LOCATION<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ret <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INVALID_INSTALL_LOCATION<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>loc <span class="token operator">==</span> PackageHelper<span class="token punctuation">.</span>RECOMMEND_FAILED_ALREADY_EXISTS<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    installFlags <span class="token operator">=</span> sPmsExt<span class="token punctuation">.</span><span class="token function">customizeInstallPkgFlags</span><span class="token punctuation">(</span>installFlags<span class="token punctuation">,</span> pkgLite<span class="token punctuation">,</span>                            mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">,</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    loc <span class="token operator">=</span> <span class="token function">installLocationPolicy</span><span class="token punctuation">(</span>pkgLite<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/**             * 根据 InstallParams 创建 InstallArgs 对象             * InstallArgs 是一个抽象类，定义了 APK 的安装逻辑，比如"复制"和"重命名" APK 等             *             *     abstract int copyApk(IMediaContainerService imcs, boolean temp) throws RemoteException;             *             * InstallArgs 有 3 个子类，都被定义在 PMS 中：             *     FileInstallArgs：用于处理安装到非 ASEC 的存储空间的 APK ，也就是内部存储空间（Data分区）             *     AsecInstallArgs：用于处理安装到 ASEC 中（mnt/asec）即 SD 卡中的 APK             *     MoveInstallArgs：用于处理已安装 APK 的移动的逻辑             */</span>            <span class="token keyword">final</span> InstallArgs args <span class="token operator">=</span> <span class="token function">createInstallArgs</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mArgs <span class="token operator">=</span> args<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>origin<span class="token punctuation">.</span>existing <span class="token operator">&amp;&amp;</span> requiredUid <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span>                        <span class="token operator">&amp;&amp;</span> <span class="token function">isVerificationEnabled</span><span class="token punctuation">(</span>                                verifierUser<span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> installFlags<span class="token punctuation">,</span> installerUid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 对 APK 进行检查后就会调用 InstallArgs 的 copyApk 方法进行安装</span>                    ret <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">copyApk</span><span class="token punctuation">(</span>mContainerService<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            mRet <span class="token operator">=</span> ret<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span></code></pre><h2 id="FileInstallArgs"><a href="#FileInstallArgs" class="headerlink" title="FileInstallArgs"></a>FileInstallArgs</h2><p>OK，我们知道 InstallParams 有三个子类，不同的 InstallArgs 子类会有着不同的处理，那我们现在以 FileInstallArgs 为例跟踪学习一下具体的流程：</p><h3 id="copyApk"><a href="#copyApk" class="headerlink" title="copyApk"></a>copyApk</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Logic to handle installation of non-ASEC applications, including copying     * and renaming logic.     */</span>    <span class="token keyword">class</span> <span class="token class-name">FileInstallArgs</span> <span class="token keyword">extends</span> <span class="token class-name">InstallArgs</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> File codeFile<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">int</span> <span class="token function">copyApk</span><span class="token punctuation">(</span>IMediaContainerService imcs<span class="token punctuation">,</span> <span class="token keyword">boolean</span> temp<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"copyApk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">doCopyApk</span><span class="token punctuation">(</span>imcs<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h3 id="doCopyApk"><a href="#doCopyApk" class="headerlink" title="doCopyApk"></a>doCopyApk</h3><p>调用了 doCopyApk 方法：</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">doCopyApk</span><span class="token punctuation">(</span>IMediaContainerService imcs<span class="token punctuation">,</span> <span class="token keyword">boolean</span> temp<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token keyword">boolean</span> isEphemeral <span class="token operator">=</span> <span class="token punctuation">(</span>installFlags <span class="token operator">&amp;</span> PackageManager<span class="token punctuation">.</span>INSTALL_INSTANT_APP<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 用于创建临时存储目录，比如 /data/app/vmdl18300388.tmp ，其中 18300388 是安装的 sessionId</span>                <span class="token keyword">final</span> File tempDir <span class="token operator">=</span>                        mInstallerService<span class="token punctuation">.</span><span class="token function">allocateStageDirLegacy</span><span class="token punctuation">(</span>volumeUuid<span class="token punctuation">,</span> isEphemeral<span class="token punctuation">)</span><span class="token punctuation">;</span>                codeFile <span class="token operator">=</span> tempDir<span class="token punctuation">;</span>                resourceFile <span class="token operator">=</span> tempDir<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to create copy file: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INSUFFICIENT_STORAGE<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">int</span> ret <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * 通过 IMediaContainerService 跨进程调用 DefaultContainerService 的 copyPackage 方法，             * 这个方法会在 DefaultContainerService 所在的进程中将 APK 复制到临时存储目录，             * 比如 /data/app/vmdl18300388.tmp/base.apk 。             */</span>            ret <span class="token operator">=</span> imcs<span class="token punctuation">.</span><span class="token function">copyPackage</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 真正的文件拷贝</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h1 id="安装-APK"><a href="#安装-APK" class="headerlink" title="安装 APK"></a>安装 APK</h1><h2 id="handleReturnCode"><a href="#handleReturnCode" class="headerlink" title="handleReturnCode"></a>handleReturnCode</h2><p>我们回到 APK 的复制调用链的头部方法：HandlerParams 的 startCopy 方法，在最后 调用了 handleReturnCode 方法，进行 APK 的安装。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HandlerParams</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_RETRIES <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> mRetries <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">startCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> res<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>mRetries <span class="token operator">></span> MAX_RETRIES<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">handleStartCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           res <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 处理复制 APK 后的安装 APK 逻辑</span>            <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 💥 💥 💥 💥 💥 💥 </span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>handleReturnCode 也是一个抽象方法，那么在哪里实现？同样，它的实现在 InstallParams 中。</p><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">void</span> <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// If mArgs is null, then MCS couldn't be reached. When it</span>            <span class="token comment" spellcheck="true">// reconnects, it will try again to install. At that point, this</span>            <span class="token comment" spellcheck="true">// will succeed.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mArgs <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// "装载代码"的入口是 processPendingInstall(InstallArgs,int) 方法</span>                <span class="token function">processPendingInstall</span><span class="token punctuation">(</span>mArgs<span class="token punctuation">,</span> mRet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>我们发现调用了 processPendingInstall 方法，继续跟！</p><h2 id="processPendingInstall"><a href="#processPendingInstall" class="headerlink" title="processPendingInstall"></a>processPendingInstall</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processPendingInstall</span><span class="token punctuation">(</span><span class="token keyword">final</span> InstallArgs args<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> currentStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mHandler<span class="token punctuation">.</span><span class="token function">removeCallbacks</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                PackageInstalledInfo res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageInstalledInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">setReturnCode</span><span class="token punctuation">(</span>currentStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span>uid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span>pkg <span class="token operator">=</span> null<span class="token punctuation">;</span>                res<span class="token punctuation">.</span>removedInfo <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>returnCode <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>                     <span class="token operator">*</span> 安装前处理                     <span class="token operator">*</span> 用于检查 APK 的状态的，在安装前确保安装环境的可靠，如果不可靠会清除复制的 APK 文件                    args<span class="token punctuation">.</span><span class="token function">doPreInstall</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>returnCode<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mInstallLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">installPackageTracedLI</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 💥 💥 💥 💥 💥 💥 </span>                    <span class="token punctuation">}</span>                    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>                     <span class="token operator">*</span> 安装后收尾                     <span class="token operator">*</span> 用于处理安装后的收尾操作，如果安装不成功，删除掉安装相关的目录与文件                    args<span class="token punctuation">.</span><span class="token function">doPostInstall</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>returnCode<span class="token punctuation">,</span> res<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="installPackageTracedLI"><a href="#installPackageTracedLI" class="headerlink" title="installPackageTracedLI"></a>installPackageTracedLI</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">installPackageTracedLI</span><span class="token punctuation">(</span>InstallArgs args<span class="token punctuation">,</span> PackageInstalledInfo res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"installPackage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">installPackageLI</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="installPackageLI"><a href="#installPackageLI" class="headerlink" title="installPackageLI"></a>installPackageLI</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">installPackageLI</span><span class="token punctuation">(</span>InstallArgs args<span class="token punctuation">,</span> PackageInstalledInfo res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        PackageParser pp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setSeparateProcesses</span><span class="token punctuation">(</span>mSeparateProcesses<span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setDisplayMetrics</span><span class="token punctuation">(</span>mMetrics<span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span>mPackageParserCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>        Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"parsePackage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> PackageParser<span class="token punctuation">.</span>Package pkg<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 解析 APK</span>            pkg <span class="token operator">=</span> pp<span class="token punctuation">.</span><span class="token function">parsePackage</span><span class="token punctuation">(</span>tmpPackageFile<span class="token punctuation">,</span> parseFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageParserException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"Failed parse during installPackageLI"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// Get rid of all references to package scan path via parser.</span>        pp <span class="token operator">=</span> null<span class="token punctuation">;</span>        String oldCodePath <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> systemApp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 检查 APK 是否存在</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>installFlags <span class="token operator">&amp;</span> PackageManager<span class="token punctuation">.</span>INSTALL_REPLACE_EXISTING<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 获取没被改名前的包名</span>                String oldName <span class="token operator">=</span> mSettings<span class="token punctuation">.</span><span class="token function">getRenamedPackageLPr</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>mOriginalPackages <span class="token operator">!=</span> null                        <span class="token operator">&amp;&amp;</span> pkg<span class="token punctuation">.</span>mOriginalPackages<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>oldName<span class="token punctuation">)</span>                        <span class="token operator">&amp;&amp;</span> mPackages<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>oldName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    pkg<span class="token punctuation">.</span><span class="token function">setPackageName</span><span class="token punctuation">(</span>oldName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    pkgName <span class="token operator">=</span> pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 设置标志位表示是替换安装</span>                    replace <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Replacing existing renamed package: oldName="</span>                            <span class="token operator">+</span> oldName <span class="token operator">+</span> <span class="token string">" pkgName="</span> <span class="token operator">+</span> pkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>            PackageSetting ps <span class="token operator">=</span> mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 查看 Settings 中是否存有要安装的 APK 的信息，如果有就获取签名信息</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ps <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Existing package: "</span> <span class="token operator">+</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span>                PackageSetting signatureCheckPs <span class="token operator">=</span> ps<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span><span class="token function">isStaticSharedLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    SharedLibraryEntry libraryEntry <span class="token operator">=</span> <span class="token function">getLatestSharedLibraVersionLPr</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>libraryEntry <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        signatureCheckPs <span class="token operator">=</span> mSettings<span class="token punctuation">.</span><span class="token function">getPackageLPr</span><span class="token punctuation">(</span>libraryEntry<span class="token punctuation">.</span>apk<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 检查签名的正确性</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldCheckUpgradeKeySetLP</span><span class="token punctuation">(</span>signatureCheckPs<span class="token punctuation">,</span> scanFlags<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkUpgradeKeySetLP</span><span class="token punctuation">(</span>signatureCheckPs<span class="token punctuation">,</span> pkg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>INSTALL_FAILED_UPDATE_INCOMPATIBLE<span class="token punctuation">,</span> <span class="token string">"Package "</span>                                <span class="token operator">+</span> pkg<span class="token punctuation">.</span>packageName <span class="token operator">+</span> <span class="token string">" upgrade keys do not match the "</span>                                <span class="token operator">+</span> <span class="token string">"previously installed version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> N <span class="token operator">=</span> pkg<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 遍历每个权限，对权限进行处理</span>                PackageParser<span class="token punctuation">.</span>Permission perm <span class="token operator">=</span> pkg<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                BasePermission bp <span class="token operator">=</span> mSettings<span class="token punctuation">.</span>mPermissions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>perm<span class="token punctuation">.</span>info<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>systemApp <span class="token operator">||</span> sPmsExt<span class="token punctuation">.</span><span class="token function">isOperatorApp</span><span class="token punctuation">(</span>mPackages<span class="token punctuation">,</span> mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">,</span> pkgName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>onExternal<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 系统APP不能在SD卡上替换安装</span>                res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>INSTALL_FAILED_INVALID_INSTALL_LOCATION<span class="token punctuation">,</span>                        <span class="token string">"Cannot install updates to system apps on sdcard"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>instantApp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 系统 APP 不能被 Instant App 替换</span>                res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>INSTALL_FAILED_INSTANT_APP_INVALID<span class="token punctuation">,</span>                        <span class="token string">"Cannot update a system app with an instant app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 重命名临时文件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>args<span class="token punctuation">.</span><span class="token function">doRename</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>returnCode<span class="token punctuation">,</span> pkg<span class="token punctuation">,</span> oldCodePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>INSTALL_FAILED_INSUFFICIENT_STORAGE<span class="token punctuation">,</span> <span class="token string">"Failed rename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instantApp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">startIntentFilterVerifications</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> replace<span class="token punctuation">,</span> pkg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_DOMAIN_VERIFICATION<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Not verifying instant app install for app links: "</span> <span class="token operator">+</span> pkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>PackageFreezer freezer <span class="token operator">=</span> <span class="token function">freezePackageForInstall</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">,</span> installFlags<span class="token punctuation">,</span>                <span class="token string">"installPackageLI"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>replace<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 替换安装</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span><span class="token function">isStaticSharedLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    PackageParser<span class="token punctuation">.</span>Package existingPkg <span class="token operator">=</span> mPackages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>existingPkg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> existingPkg<span class="token punctuation">.</span>mVersionCode <span class="token operator">!=</span> pkg<span class="token punctuation">.</span>mVersionCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>INSTALL_FAILED_DUPLICATE_PACKAGE<span class="token punctuation">,</span> <span class="token string">"Packages declaring "</span>                                <span class="token operator">+</span> <span class="token string">"static-shared libs cannot be updated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token function">replacePackageLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags <span class="token operator">|</span> SCAN_REPLACING<span class="token punctuation">,</span> args<span class="token punctuation">.</span>user<span class="token punctuation">,</span>                        installerPackageName<span class="token punctuation">,</span> res<span class="token punctuation">,</span> args<span class="token punctuation">.</span>installReason<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 安装新的 APK</span>                <span class="token function">installNewPackageLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags <span class="token operator">|</span> SCAN_DELETE_DATA_ON_FAILURES<span class="token punctuation">,</span>                        args<span class="token punctuation">.</span>user<span class="token punctuation">,</span> installerPackageName<span class="token punctuation">,</span> volumeUuid<span class="token punctuation">,</span> res<span class="token punctuation">,</span> args<span class="token punctuation">.</span>installReason<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 更新应用程序所属的用户</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> PackageSetting ps <span class="token operator">=</span> mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ps <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span>newUsers <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">queryInstalledUsers</span><span class="token punctuation">(</span>sUserManager<span class="token punctuation">.</span><span class="token function">getUserIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">setUpdateAvailable</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token comment" spellcheck="true">/*updateAvailable*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>installPackageLI 方法的代码很长，这里截取主要的部分，主要做了几件事：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;1、创建 PackageParser 解析 APK 。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;2、检查 APK 是否存在，如果存在就获取此前没被改名前的包名，赋值给 PackageParser.Package 类型的 pkg ，将标志位 replace 置为 true 表示是替换安装。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;3、如果 Settings 中保存有要安装的 APK 的信息，说明此前安装过该 APK ，则需要校验 APK 的签名信息，确保安全的进行替换。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;4、将临时文件重新命名，比如前面提到的 /data/app/vmdl18300388.tmp/base.apk ，重命名为 /data/app/包名-1/base.apk 。这个新命名的包名会带上一个数字后缀 1，每次升级一个已有的 App ，这个数字会不断的累加。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;5、系统 APP 的更新安装会有两个限制，一个是系统 APP 不能在 SD 卡上替换安装，另一个是系统 APP 不能被 Instant App 替换。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;6、根据 replace 来做区分，如果是替换安装就会调用 replacePackageLIF 方法，其方法内部还会对系统 APP 和非系统 APP 进行区分处理，如果是新安装 APK 会调用 installNewPackageLIF 方法。</p><h2 id="installNewPackageLIF"><a href="#installNewPackageLIF" class="headerlink" title="installNewPackageLIF"></a>installNewPackageLIF</h2><p>我们以安装新 APK 为例，查看 installNewPackageLIF 的源码：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*     * Install a non-existing package.     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">installNewPackageLIF</span><span class="token punctuation">(</span>PackageParser<span class="token punctuation">.</span>Package pkg<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> policyFlags<span class="token punctuation">,</span>            <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> UserHandle user<span class="token punctuation">,</span> String installerPackageName<span class="token punctuation">,</span> String volumeUuid<span class="token punctuation">,</span>            PackageInstalledInfo res<span class="token punctuation">,</span> <span class="token keyword">int</span> installReason<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"installNewPackage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 扫描 APK</span>            PackageParser<span class="token punctuation">.</span>Package newPackage <span class="token operator">=</span> <span class="token function">scanPackageTracedLI</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> policyFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span>                    System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 更新 Settings 信息</span>            <span class="token function">updateSettingsLI</span><span class="token punctuation">(</span>newPackage<span class="token punctuation">,</span> installerPackageName<span class="token punctuation">,</span> null<span class="token punctuation">,</span> res<span class="token punctuation">,</span> user<span class="token punctuation">,</span> installReason<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>returnCode <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 安装成功后，为新安装的应用程序准备数据</span>                <span class="token function">prepareAppDataAfterInstallLIF</span><span class="token punctuation">(</span>newPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 安装失败则删除 APK</span>                <span class="token function">deletePackageLIF</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span>                        PackageManager<span class="token punctuation">.</span>DELETE_KEEP_DATA<span class="token punctuation">,</span> res<span class="token punctuation">.</span>removedInfo<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageManagerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"Package couldn't be installed in "</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span>codePath<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>installNewPackageLIF 主要做了以下 3 件事：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;1、扫描 APK，将 APK 的信息存储在 PackageParser.Package 类型的 newPackage 中，一个 Package 的信息包含了 1 个 base APK 以及 0 个或者多个 split APK 。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;2、更新该 APK 对应的 Settings 信息，Settings 用于保存所有包的动态设置。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;3、如果安装成功就为新安装的应用程序准备数据，安装失败就删除APK。</p><h2 id="scanPackageTracedLI"><a href="#scanPackageTracedLI" class="headerlink" title="scanPackageTracedLI"></a>scanPackageTracedLI</h2><p>调用 scanPackageTracedLI() 进行安装 ：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> PackageParser<span class="token punctuation">.</span>Package <span class="token function">scanPackageTracedLI</span><span class="token punctuation">(</span>File scanFile<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> parseFlags<span class="token punctuation">,</span>            <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> <span class="token keyword">long</span> currentTime<span class="token punctuation">,</span> UserHandle user<span class="token punctuation">)</span> <span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>        Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"scanPackage ["</span> <span class="token operator">+</span> scanFile<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">scanPackageLI</span><span class="token punctuation">(</span>scanFile<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span> currentTime<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="scanPackageLI-01"><a href="#scanPackageLI-01" class="headerlink" title="scanPackageLI - 01"></a>scanPackageLI - 01</h2><p>scanPackageTracedLI() 调用了 scanPackageLI() 方法：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     *  Scans a package and returns the newly parsed package.     *  Returns {@code null} in case of errors and the error code is stored in mLastScanError     */</span>    <span class="token keyword">private</span> PackageParser<span class="token punctuation">.</span>Package <span class="token function">scanPackageLI</span><span class="token punctuation">(</span>File scanFile<span class="token punctuation">,</span> <span class="token keyword">int</span> parseFlags<span class="token punctuation">,</span> <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span>            <span class="token keyword">long</span> currentTime<span class="token punctuation">,</span> UserHandle user<span class="token punctuation">)</span> <span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Parsing: "</span> <span class="token operator">+</span> scanFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        PackageParser pp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setSeparateProcesses</span><span class="token punctuation">(</span>mSeparateProcesses<span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setOnlyCoreApps</span><span class="token punctuation">(</span>mOnlyCore<span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setDisplayMetrics</span><span class="token punctuation">(</span>mMetrics<span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span>mPackageParserCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> <span class="token function">scanPackageLI</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> scanFile<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span> currentTime<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="scanPackageLI-02"><a href="#scanPackageLI-02" class="headerlink" title="scanPackageLI - 02"></a>scanPackageLI - 02</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> PackageParser<span class="token punctuation">.</span>Package <span class="token function">scanPackageLI</span><span class="token punctuation">(</span>PackageParser<span class="token punctuation">.</span>Package pkg<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> policyFlags<span class="token punctuation">,</span>            <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> <span class="token keyword">long</span> currentTime<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> UserHandle user<span class="token punctuation">)</span>                    <span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// scanPackageDirtyLI 实际安装 package 的方法</span>            <span class="token keyword">final</span> PackageParser<span class="token punctuation">.</span>Package res <span class="token operator">=</span> <span class="token function">scanPackageDirtyLI</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> policyFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span>                    currentTime<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>scanFlags <span class="token operator">&amp;</span> SCAN_DELETE_DATA_ON_FAILURES<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// DELETE_DATA_ON_FAILURES is only used by frozen paths</span>                <span class="token function">destroyAppDataLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>USER_ALL<span class="token punctuation">,</span>                        StorageManager<span class="token punctuation">.</span>FLAG_STORAGE_DE <span class="token operator">|</span> StorageManager<span class="token punctuation">.</span>FLAG_STORAGE_CE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">destroyAppProfilesLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>USER_ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>最终调用 scanPackageLI 方法！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文主要讲解了 PMS 是如何处理 APK 安装的流程，主要有几个步骤：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;PackageInstaller 安装 APK 时会将 APK 的信息交由 PMS 处理，PMS 通过向 PackageHandler 发送消息来驱动 APK 的复制和安装工作。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;PMS 发送 INIT_COPY 和 MCS_BOUND 类型的消息，控制 PackageHandler 来绑定 DefaultContainerService ，完成复制 APK 等工作。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;复制 APK 完成后，会开始进行安装 APK 的流程，包括安装前的检查、安装 APK 和安装后的收尾工作。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>&nbsp;01. <a href="http://liuwangshu.cn/framework/pms/3-pms-install.html" target="_blank" rel="noopener">http://liuwangshu.cn/framework/pms/3-pms-install.html</a><br>&nbsp;02. <a href="https://www.jianshu.com/p/c4333c7eb409" target="_blank" rel="noopener">https://www.jianshu.com/p/c4333c7eb409</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PackageManagerService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Framework 核心服务之 PMS 钻研 ( 5 ) - APK 安装（一）</title>
      <link href="/2018/12/22/android-kuang-jia-fu-wu-pian-shen-ru-yan-jiu-pms-xi-lie-5-zhi-apk-an-zhuang-pi/"/>
      <url>/2018/12/22/android-kuang-jia-fu-wu-pian-shen-ru-yan-jiu-pms-xi-lie-5-zhi-apk-an-zhuang-pi/</url>
      
        <content type="html"><![CDATA[<p><br></p><p><strong><center><font color="#3A5FCD" size="4">PackageManagerService 系列文章如下（基于 Android 9.0 源码）</font><center></center></center></strong><br></p><table><thead><tr><th style="text-align:center">&nbsp;</th><th style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（1）- 启动流程</font></a></th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（2）- 构造函数</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（3）- PackageManager</font></a></td></tr><tr><td style="text-align:center"><strong><font color="#EE2C2C" size="3">PackageManagerService</font></strong></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（4）- PackageInstaller</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（5）- APK 安装流程（1）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（6）- APK 安装流程（2）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（7）- PackageParser</font></a></td></tr></tbody></table><p><br></p><p><strong><font color="#3A5FCD" size="4">修订日志</font></strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">1、博文格式，文章排版等优化；</font></p><p><br></p><hr><h1 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h1><h2 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">PackageManagerService.java</font></td><td>frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</td></tr><tr><td><font color="#D15FEE">PackageInstallerSession.java</font></td><td>frameworks/base/services/core/java/com/android/server/pm/PackageInstallerSession.java</td></tr><tr><td><font color="#D15FEE">PackageInstallerActivity.java</font></td><td>packages/apps/PackageInstaller/src/com/android/packageinstaller/PackageInstallerActivity.java</td></tr></tbody></table><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在本系列上一篇文章<a href="https://superandroid.pro/2018/11/22/02.%20Android%20%E6%A0%B8%E5%BF%83%E7%AF%87%20--%2001.%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PackageManagerService%20%E7%B3%BB%E5%88%97%EF%BC%884%EF%BC%89/">深入研究 PackageManagerService 系列（4）之 PackageInstaller 初始化</a>中，我们学习了 PackageInstaller 是如何初始化的，这一篇文章我们继续学习 <font color="#FF0000"><strong>PackageInstaller 是如何安装 APK 的</strong></font>。</p><h1 id="PackageInstallerActivity"><a href="#PackageInstallerActivity" class="headerlink" title="PackageInstallerActivity"></a>PackageInstallerActivity</h1><p>在上一篇文章的末尾阶段，我们知道 <font color="#FFFF00"><strong>PackageInstallerActivity 调用 startInstallConfirm 方法初始化安装确认界面</strong></font>后，这个安装确认界面就会呈现给用户，用户如果想要安装这个应用程序就会点击确定按钮，就会调用 PackageInstallerActivity 的 <font color="#FFFF00"><strong>onClick()</strong></font> 方法。</p><h2 id="onClick"><a href="#onClick" class="headerlink" title="onClick"></a>onClick</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> mOk<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mOk<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mOkCanInstall <span class="token operator">||</span> mScrollView <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>mSessionId <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 如果原本是确认权限请求则赋予安装权限后退出</span>                        mInstaller<span class="token punctuation">.</span><span class="token function">setPermissionsResult</span><span class="token punctuation">(</span>mSessionId<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token function">startInstall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 💥 💥 💥 开始安装 💥 💥 💥 </span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    mScrollView<span class="token punctuation">.</span><span class="token function">pageScroll</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>FOCUS_DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> mCancel<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 取消安装</span>            <span class="token function">setResult</span><span class="token punctuation">(</span>RESULT_CANCELED<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mSessionId <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mInstaller<span class="token punctuation">.</span><span class="token function">setPermissionsResult</span><span class="token punctuation">(</span>mSessionId<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>onClick 方法中分别对”确定”和”取消”按钮做了处理，主要查看对”确定”按钮的处理，调用了 startInstall 方法！</p><h2 id="startInstall"><a href="#startInstall" class="headerlink" title="startInstall"></a>startInstall</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startInstall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Intent newIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 带上安装包的 applicationInfo</span>        newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>PackageUtil<span class="token punctuation">.</span>INTENT_ATTR_APPLICATION_INFO<span class="token punctuation">,</span>                mPkgInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 带上安装包的 URI</span>        newIntent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>mPackageURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置目标类</span>        newIntent<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> InstallInstalling<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String installerPackageName <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span>                Intent<span class="token punctuation">.</span>EXTRA_INSTALLER_PACKAGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 带上安装包的 mOriginatingURI</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOriginatingURI <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_ORIGINATING_URI<span class="token punctuation">,</span> mOriginatingURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 带上安装包的 mReferrerURI</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mReferrerURI <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_REFERRER<span class="token punctuation">,</span> mReferrerURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 带上安装包的 mOriginatingUid 这个 uid 不是安装应用的 uid</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOriginatingUid <span class="token operator">!=</span> PackageInstaller<span class="token punctuation">.</span>SessionParams<span class="token punctuation">.</span>UID_UNKNOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_ORIGINATING_UID<span class="token punctuation">,</span> mOriginatingUid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>installerPackageName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_INSTALLER_PACKAGE_NAME<span class="token punctuation">,</span>                    installerPackageName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBooleanExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_RETURN_RESULT<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_RETURN_RESULT<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            newIntent<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_FORWARD_RESULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>localLOGV<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"downloaded app uri="</span><span class="token operator">+</span>mPackageURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * startInstall 方法用于跳转到 InstallInstalling 这个 Activity         */</span>        <span class="token function">startActivity</span><span class="token punctuation">(</span>newIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 关闭当前的 PackageInstallerActivity</span>    <span class="token punctuation">}</span></code></pre><p>可以看到在 startInstall 方法中，主要是构造了一个 intent，并且将安装包信息封装到 intent 中，然后跳转到 InstallInstalling 类。</p><h1 id="InstallInstalling"><a href="#InstallInstalling" class="headerlink" title="InstallInstalling"></a>InstallInstalling</h1><p>InstallInstalling 的主要工作：用于向包管理器发送包的信息并处理包管理的回调。</p><h2 id="onCreate"><a href="#onCreate" class="headerlink" title="onCreate"></a>onCreate</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstallInstalling</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>install_installing<span class="token punctuation">)</span><span class="token punctuation">;</span>        ApplicationInfo appInfo <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getParcelableExtra</span><span class="token punctuation">(</span>PackageUtil<span class="token punctuation">.</span>INTENT_ATTR_APPLICATION_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPackageURI <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 分别对 package 和 content 协议的 Uri 进行处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"package"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mPackageURI<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">installExistingPackage</span><span class="token punctuation">(</span>appInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">launchSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageManager<span class="token punctuation">.</span>NameNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">launchFailure</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INTERNAL_ERROR<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 根据 mPackageURI 创建一个对应的 File</span>            <span class="token keyword">final</span> File sourceFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mPackageURI<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            PackageUtil<span class="token punctuation">.</span><span class="token function">initSnippetForNewApp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> PackageUtil<span class="token punctuation">.</span><span class="token function">getAppSnippet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> appInfo<span class="token punctuation">,</span>                    sourceFile<span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>app_snippet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果 savedInstanceState 不为 null，获取此前保存的 mSessionId 和 mInstallId</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>savedInstanceState <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mSessionId <span class="token operator">=</span> savedInstanceState<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>SESSION_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// mSessionId 是安装包的会话 id</span>                mInstallId <span class="token operator">=</span> savedInstanceState<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>INSTALL_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// mInstallId 是等待的安装事件 id</span>                <span class="token comment" spellcheck="true">/**                 * 根据 mInstallId 向 InstallEventReceiver 注册一个观察者                 * launchFinishBasedOnResult 会接收到安装事件的回调，无论安装成功或者失败都会关闭当前的 Activity(InstallInstalling)                 */</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    InstallEventReceiver<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> mInstallId<span class="token punctuation">,</span>                            <span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>launchFinishBasedOnResult<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">EventResultPersister<span class="token punctuation">.</span>OutOfIdsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Does not happen</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// savedInstanceState 为 null</span>                PackageInstaller<span class="token punctuation">.</span>SessionParams params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageInstaller<span class="token punctuation">.</span>SessionParams</span><span class="token punctuation">(</span>                        PackageInstaller<span class="token punctuation">.</span>SessionParams<span class="token punctuation">.</span>MODE_FULL_INSTALL<span class="token punctuation">)</span><span class="token punctuation">;</span>                params<span class="token punctuation">.</span>referrerUri <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParcelableExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_REFERRER<span class="token punctuation">)</span><span class="token punctuation">;</span>                params<span class="token punctuation">.</span>originatingUri <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">getParcelableExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_ORIGINATING_URI<span class="token punctuation">)</span><span class="token punctuation">;</span>                params<span class="token punctuation">.</span>originatingUid <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getIntExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_ORIGINATING_UID<span class="token punctuation">,</span>                        UID_UNKNOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>                File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mPackageURI<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    PackageParser<span class="token punctuation">.</span>PackageLite pkg <span class="token operator">=</span> PackageParser<span class="token punctuation">.</span><span class="token function">parsePackageLite</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    params<span class="token punctuation">.</span><span class="token function">setAppPackageName</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    params<span class="token punctuation">.</span><span class="token function">setInstallLocation</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>installLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>                    params<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>                            PackageHelper<span class="token punctuation">.</span><span class="token function">calculateInstalledSize</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span>abiOverride<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageParser<span class="token punctuation">.</span>PackageParserException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span> <span class="token string">"Cannot parse package "</span> <span class="token operator">+</span> file <span class="token operator">+</span> <span class="token string">". Assuming defaults."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span>                            <span class="token string">"Cannot calculate installed size "</span> <span class="token operator">+</span> file <span class="token operator">+</span> <span class="token string">". Try only apk size."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    params<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span>                            <span class="token string">"Cannot calculate installed size "</span> <span class="token operator">+</span> file <span class="token operator">+</span> <span class="token string">". Try only apk size."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    params<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    mInstallId <span class="token operator">=</span> InstallEventReceiver                            <span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> EventResultPersister<span class="token punctuation">.</span>GENERATE_NEW_ID<span class="token punctuation">,</span>                                    <span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>launchFinishBasedOnResult<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">EventResultPersister<span class="token punctuation">.</span>OutOfIdsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">launchFailure</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INTERNAL_ERROR<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    mSessionId <span class="token operator">=</span> <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">launchFailure</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INTERNAL_ERROR<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            mSessionCallback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstallSessionCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="onResume"><a href="#onResume" class="headerlink" title="onResume"></a>onResume</h2><p>我们查看 InstallInstalling 的 onResume 方法：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// This is the first onResume in a single life of the activity</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mInstallingTask <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            PackageInstaller installer <span class="token operator">=</span> <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 根据 mSessionId 得到 SessionInfo，SessionInfo 代表安装会话的详细信息</span>            PackageInstaller<span class="token punctuation">.</span>SessionInfo sessionInfo <span class="token operator">=</span> installer<span class="token punctuation">.</span><span class="token function">getSessionInfo</span><span class="token punctuation">(</span>mSessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果 sessionInfo 不为 Null 并且不是活动的，就创建并执行 InstallingAsyncTask</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sessionInfo <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>sessionInfo<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mInstallingTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstallingAsyncTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 💥 💥 💥 💥 💥 💥</span>                mInstallingTask<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// we will receive a broadcast when the install is finished</span>                mCancelButton<span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setFinishOnTouchOutside</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="InstallingAsyncTask"><a href="#InstallingAsyncTask" class="headerlink" title="InstallingAsyncTask"></a>InstallingAsyncTask</h2><p>既然启动了 InstallingAsyncTask，那我们就来看看相关的 doInBackground 和 onPostExecute 方法：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Send the package to the package installer and then register a event result observer that     * will call {@link #launchFinishBasedOnResult(int, int, String)}     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">InstallingAsyncTask</span> <span class="token keyword">extends</span> <span class="token class-name">AsyncTask</span><span class="token operator">&lt;</span>Void<span class="token punctuation">,</span> Void<span class="token punctuation">,</span>            PackageInstaller<span class="token punctuation">.</span>Session<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> isDone<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据包(APK)的 Uri，将 APK 的信息通过 IO 流的形式写入到 PackageInstaller.Session 中</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> PackageInstaller<span class="token punctuation">.</span>Session <span class="token function">doInBackground</span><span class="token punctuation">(</span>Void<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>            PackageInstaller<span class="token punctuation">.</span>Session session<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                session <span class="token operator">=</span> <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span>mSessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            session<span class="token punctuation">.</span><span class="token function">setStagingProgress</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mPackageURI<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">(</span>InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">long</span> sizeBytes <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">(</span>OutputStream out <span class="token operator">=</span> session                            <span class="token punctuation">.</span><span class="token function">openWrite</span><span class="token punctuation">(</span><span class="token string">"PackageInstaller"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sizeBytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">int</span> numRead <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>numRead <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                session<span class="token punctuation">.</span><span class="token function">fsync</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> numRead<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>sizeBytes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">float</span> fraction <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> numRead <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> sizeBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                                session<span class="token punctuation">.</span><span class="token function">addProgress</span><span class="token punctuation">(</span>fraction<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> session<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> SecurityException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span> <span class="token string">"Could not write package"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    isDone <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPostExecute</span><span class="token punctuation">(</span>PackageInstaller<span class="token punctuation">.</span>Session session<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Intent broadcastIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>BROADCAST_ACTION<span class="token punctuation">)</span><span class="token punctuation">;</span>                broadcastIntent<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_RECEIVER_FOREGROUND<span class="token punctuation">)</span><span class="token punctuation">;</span>                broadcastIntent<span class="token punctuation">.</span><span class="token function">setPackage</span><span class="token punctuation">(</span>                        <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPermissionControllerPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                broadcastIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>EventResultPersister<span class="token punctuation">.</span>EXTRA_ID<span class="token punctuation">,</span> mInstallId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 创建了一个 PendingIntent</span>                PendingIntent pendingIntent <span class="token operator">=</span> PendingIntent<span class="token punctuation">.</span><span class="token function">getBroadcast</span><span class="token punctuation">(</span>                        InstallInstalling<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>                        mInstallId<span class="token punctuation">,</span>                        broadcastIntent<span class="token punctuation">,</span>                        PendingIntent<span class="token punctuation">.</span>FLAG_UPDATE_CURRENT<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/**                 * 将该 PendingIntent 的 IntentSender 通过                 * PackageInstaller.Session 的 commit 方法发送出去                 */</span>                session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>pendingIntent<span class="token punctuation">.</span><span class="token function">getIntentSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 💥 💥 💥 💥 💥 💥</span>                mCancelButton<span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setFinishOnTouchOutside</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">abandonSession</span><span class="token punctuation">(</span>mSessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">launchFailure</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INVALID_APK<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>Ok，问题来了，commit 到哪去了？我们不妨来看一下 PackageInstaller.Session 的 commit 方法：</p><h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> IntentSender statusReceiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                mSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>statusReceiver<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h3 id="mSession"><a href="#mSession" class="headerlink" title="mSession"></a>mSession</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Session</span> <span class="token keyword">implements</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> IPackageInstallerSession mSession<span class="token punctuation">;</span></code></pre><p>我们发现，mSession 的类型为 IPackageInstallerSession ，这说明要通过 IPackageInstallerSession 来进行进程间的通信，最终会调用 PackageInstallerSession 的 commit 方法，又回到框架层处理了。</p><h1 id="PackageInstallerSession"><a href="#PackageInstallerSession" class="headerlink" title="PackageInstallerSession"></a>PackageInstallerSession</h1><h2 id="commit-1"><a href="#commit-1" class="headerlink" title="commit"></a>commit</h2><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> IntentSender statusReceiver<span class="token punctuation">,</span> <span class="token keyword">boolean</span> forTransfer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Preconditions<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>statusReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> wasSealed<span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">assertCallerIsOwnerOrRootLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">assertPreparedAndNotDestroyedLocked</span><span class="token punctuation">(</span><span class="token string">"commit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将包的信息封装为 PackageInstallObserverAdapter</span>            <span class="token keyword">final</span> PackageInstallObserverAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageInstallObserverAdapter</span><span class="token punctuation">(</span>                    mContext<span class="token punctuation">,</span> statusReceiver<span class="token punctuation">,</span> sessionId<span class="token punctuation">,</span> <span class="token function">isInstallerDeviceOwnerLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>            mRemoteObserver <span class="token operator">=</span> adapter<span class="token punctuation">.</span><span class="token function">getBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>MSG_COMMIT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 💥 💥 💥 💥 💥 💥</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span></code></pre><h2 id="Handler-Callback"><a href="#Handler-Callback" class="headerlink" title="Handler.Callback"></a>Handler.Callback</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">final</span> Handler<span class="token punctuation">.</span>Callback mHandlerCallback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler<span class="token punctuation">.</span>Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> MSG_COMMIT<span class="token operator">:</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token function">commitLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 💥 💥 💥 重点方法 💥 💥 💥</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageManagerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">final</span> String completeMsg <span class="token operator">=</span> ExceptionUtils<span class="token punctuation">.</span><span class="token function">getCompleteMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                            Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span>                                    <span class="token string">"Commit of session "</span> <span class="token operator">+</span> sessionId <span class="token operator">+</span> <span class="token string">" failed: "</span> <span class="token operator">+</span> completeMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">destroyInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">dispatchSessionFinished</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>error<span class="token punctuation">,</span> completeMsg<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 💥 💥 💥 重点方法 💥 💥 💥</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> MSG_SESSION_FINISHED_WITH_EXCEPTION<span class="token operator">:</span>                    PackageManagerException e <span class="token operator">=</span> <span class="token punctuation">(</span>PackageManagerException<span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>                    <span class="token function">dispatchSessionFinished</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>error<span class="token punctuation">,</span> ExceptionUtils<span class="token punctuation">.</span><span class="token function">getCompleteMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>                            null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="commitLocked"><a href="#commitLocked" class="headerlink" title="commitLocked"></a>commitLocked</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">final</span> PackageManagerService mPm<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">commitLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">/**         * commitLocked 方法很长，我们主要关注这一行代码         * 调用 PackageManagerService 的 installStage 方法         * 这样安装 APK 的代码逻辑就进入了 PackageManagerService 中         */</span>        mPm<span class="token punctuation">.</span><span class="token function">installStage</span><span class="token punctuation">(</span>mPackageName<span class="token punctuation">,</span> stageDir<span class="token punctuation">,</span> stageCid<span class="token punctuation">,</span> localObserver<span class="token punctuation">,</span> params<span class="token punctuation">,</span>                mInstallerPackageName<span class="token punctuation">,</span> mInstallerUid<span class="token punctuation">,</span> user<span class="token punctuation">,</span> mCertificates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="dispatchSessionFinished"><a href="#dispatchSessionFinished" class="headerlink" title="dispatchSessionFinished"></a>dispatchSessionFinished</h2><p>我们这边再看一下，如果 commitLocked 出现了异常后的流程处理：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dispatchSessionFinished</span><span class="token punctuation">(</span><span class="token keyword">int</span> returnCode<span class="token punctuation">,</span> String msg<span class="token punctuation">,</span> Bundle extras<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> IPackageInstallObserver2 observer<span class="token punctuation">;</span>        <span class="token keyword">final</span> String packageName<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>observer <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 调用 IPackageInstallObserver2 的 onPackageInstalled 方法</span>                observer<span class="token punctuation">.</span><span class="token function">onPackageInstalled</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> returnCode<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> extras<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 💥 💥 💥 💥 💥 💥</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        mCallback<span class="token punctuation">.</span><span class="token function">onSessionFinished</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> success<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>它的实现方法在 PackageInstallObserver 类中：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageInstallObserver</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> IPackageInstallObserver2<span class="token punctuation">.</span>Stub mBinder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IPackageInstallObserver2<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onUserActionRequired</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            PackageInstallObserver<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onUserActionRequired</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPackageInstalled</span><span class="token punctuation">(</span>String basePackageName<span class="token punctuation">,</span> <span class="token keyword">int</span> returnCode<span class="token punctuation">,</span>                String msg<span class="token punctuation">,</span> Bundle extras<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             * 调用了 PackageInstallObserver 的 onPackageInstalled 方法             * 实现这个方法的类为 PackageInstallObserver 的子类：PackageInstallObserverAdapter             */</span>            PackageInstallObserver<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onPackageInstalled</span><span class="token punctuation">(</span>basePackageName<span class="token punctuation">,</span> returnCode<span class="token punctuation">,</span> msg<span class="token punctuation">,</span>                    extras<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>也就是说：dispatchSessionFinished 方法会通过 Observer 的 onPackageInstalled 方法，将出现的 PackageManagerException 异常信息回调给 PackageInstallObserverAdapter。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇文章讲解了 PackageInstaller 安装 APK 的过程，简单来说就两步：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp; 1. 将 APK 的信息通过 IO流 的形式写入到 PackageInstaller.Session中。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp; 2. 调用 PackageInstaller.Session 的 commit 方法，将 APK 的信息交由 PMS 处理。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>&nbsp;01. <a href="https://blog.csdn.net/itachi85/article/details/81024903" target="_blank" rel="noopener">https://blog.csdn.net/itachi85/article/details/81024903</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PackageInstaller </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Framework 核心服务之 PMS 钻研 ( 4 )- PackageInstaller</title>
      <link href="/2018/12/18/android-kuang-jia-fu-wu-pian-shen-ru-yan-jiu-pms-xi-lie-4-zhi-packageinstaller/"/>
      <url>/2018/12/18/android-kuang-jia-fu-wu-pian-shen-ru-yan-jiu-pms-xi-lie-4-zhi-packageinstaller/</url>
      
        <content type="html"><![CDATA[<p><br></p><p><strong><center><font color="#3A5FCD" size="4">PackageManagerService 系列文章如下（基于 Android 9.0 源码）</font><center></center></center></strong><br></p><table><thead><tr><th style="text-align:center">&nbsp;</th><th style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（1）- 启动流程</font></a></th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（2）- 构造函数</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（3）- PackageManager</font></a></td></tr><tr><td style="text-align:center"><strong><font color="#EE2C2C" size="3">PackageManagerService</font></strong></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（4）- PackageInstaller</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（5）- APK 安装流程（1）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（6）- APK 安装流程（2）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（7）- PackageParser</font></a></td></tr></tbody></table><p><br></p><p><strong><font color="#3A5FCD" size="4">修订日志</font></strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">1、博文格式，文章排版等优化；</font></p><p><br></p><hr><h1 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h1><h2 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">PackageInstaller.java</font></td><td>frameworks/base/core/java/android/content/pm/PackageInstaller.java</td></tr><tr><td><font color="#D15FEE">InstallStart.java</font></td><td>packages/apps/PackageInstaller/src/com/android/packageinstaller/InstallStart.java</td></tr><tr><td><font color="#D15FEE">InstallStaging.java</font></td><td>packages/apps/PackageInstaller/src/com/android/packageinstaller/InstallStaging.java</td></tr><tr><td><font color="#D15FEE">PackageInstallerActivity.java</font></td><td>packages/apps/PackageInstaller/src/com/android/packageinstaller/PackageInstallerActivity.java</td></tr></tbody></table><h2 id="PackageManager-简介"><a href="#PackageManager-简介" class="headerlink" title="PackageManager 简介"></a>PackageManager 简介</h2><p>在详细讲解包管理机制如何安装 APK 之前，我们回顾一下前面一篇文章讲解的 <font color="#FF0000"><strong>PackageManager</strong></font>。</p><p>与 ActivityManagerService（AMS） 和 ActivityManager 的关系类似，PackageManagerService（PMS） 也有一个对应的管理类 PackageManager ，用于向应用程序进程提供一些功能。</p><p>PackageManager 是一个抽象类，它的具体实现类为 ApplicationPackageManager ，ApplicationPackageManager 中的方法会通过 IPackageManager 与 PMS 进行进程间通信，因此 PackageManager 所提供的功能最终是由 PMS 来实现的，这么设计的主要用意是为了避免系统服务 PMS 直接被访问。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Class for retrieving various kinds of information related to the application * packages that are currently installed on the device. * * You can find this class through {@link Context#getPackageManager}. */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PackageManager</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// PackageManager 是一个抽象类</span><span class="token comment" spellcheck="true">/** @hide */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationPackageManager</span> <span class="token keyword">extends</span> <span class="token class-name">PackageManager</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// ApplicationPackageManager 继承自 PackageManager</span></code></pre><font color="#FFFF00"><strong>抽象类 PackageManager 提供了的功能，主要有以下几点：</strong></font><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;1、获取一个应用程序的所有信息（ApplicationInfo）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;2、获取四大组件的信息<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;3、查询 permission 相关信息<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;4、获取包的信息<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;5、安装、卸载 APK</p><h2 id="APK-文件结构和安装方式"><a href="#APK-文件结构和安装方式" class="headerlink" title="APK 文件结构和安装方式"></a>APK 文件结构和安装方式</h2><p>APK 是 AndroidPackage 的缩写，即 Android 安装包，它实际上是 zip 格式的压缩文件，一般情况下，解压后的文件结构如下表所示。</p><table><thead><tr><th>目录/文件</th><th>描述</th></tr></thead><tbody><tr><td>assert</td><td>存放的原生资源文件，通过 AssetManager 类访问。</td></tr><tr><td>lib</td><td>存放库文件。</td></tr><tr><td>META-INF</td><td>保存应用的签名信息，签名信息可以验证 APK 文件的完整性。</td></tr><tr><td>res</td><td>存放资源文件。res 中除了 raw 子目录，其他的子目录都参与编译，这些子目录下的资源是通过编译出的 R 类在代码中访问。</td></tr><tr><td>AndroidManifest.xml</td><td>用来声明应用程序的包名称、版本、组件和权限等数据。 apk 中的 AndroidManifest.xml 经过压缩，可以通过 AXMLPrinter2 工具解开。</td></tr><tr><td>classes.dex</td><td>Java 源码编译后生成的 Java 字节码文件。</td></tr><tr><td>resources.arsc</td><td>编译后的二进制资源文件。</td></tr></tbody></table><h2 id="APK-的安装场景"><a href="#APK-的安装场景" class="headerlink" title="APK 的安装场景"></a>APK 的安装场景</h2><p>目前，我们常见的安装 APK 的场景主要分为以下 <font color="#FF0000"><strong>四种</strong></font> ：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;1、通过 adb 命令安装：adb 命令包括 adb push/install。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;2、用户下载的 Apk，通过系统安装器 packageinstaller（系统内置的应用程序，用于安装和卸载应用程序）安装该 Apk。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;3、系统开机时安装系统应用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;4、电脑或者手机上的应用商店自动安装。</p><p>其实，这4种方式最终都是由 PMS 来进行处理，只是在此之前的调用链是不同的。我们在接下来的分析中，会选择第二种方式，因为对于开发者来说，这是调用链比较长的安装方式（利于我们分析源码）。</p><p>我们看下这种安装方式的<font color="#FFFF00"> <strong>实际操作图</strong> </font>：（后面我们分析的代码流程会紧密联系着这几张图，大家可以对比理解！）<br><br></p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-7404e3513b6871cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/220" alt="1.png">&nbsp;&nbsp;<img src="https://upload-images.jianshu.io/upload_images/3517194-7f3099737f62e7b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/220" alt="2.png">&nbsp;&nbsp;<img src="https://upload-images.jianshu.io/upload_images/3517194-836d60ebb88bea77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/220" alt="3.png">&nbsp;&nbsp;<img src="https://upload-images.jianshu.io/upload_images/3517194-088d3c221086bffb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/220" alt="4.png">&nbsp;&nbsp;<img src="https://upload-images.jianshu.io/upload_images/3517194-6ce997c33e3193a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/220" alt="5.png"></center><h2 id="APK-安装相关目录"><a href="#APK-安装相关目录" class="headerlink" title="APK 安装相关目录"></a>APK 安装相关目录</h2><table><thead><tr><th>目录/文件</th><th>描述</th></tr></thead><tbody><tr><td>/system/app</td><td>系统自带的应用程序，获得 adb root 权限才能删除。</td></tr><tr><td>/data/app</td><td>用户程序安装的目录，安装时把 apk 文件复制到此目录。</td></tr><tr><td>/data/data</td><td>存放应用程序的数据。</td></tr><tr><td>/data/dalvik-cache</td><td>将 apk 中的 dex 文件安装到 dalvik-cache 目录下(dex 文件是 dalvik 虚拟机的可执行文件，当然，ART-Android Runtime 的可执行文件格式为 .oat ，启动 ART 时，系统会执行 dex 文件转换至 oat 文件)。</td></tr><tr><td>/data/system</td><td>该目录下的 packages.xml 文件类似于 Window 的注册表，这个文件是解析 apk 时由 writeLP() 创建的，里面记录了系统的 permissons ，以及每个 apk 的 name，codePath，flag，ts，version ，userid 等信息，这些信息主要通过 apk 的 AndroidManifest 解析获取，解析完 apk 后将更新信息写入这个文件并保存到 flash ，下次开机的时候直接从里面读取相关信息并添加到内存相关列表中。当有 apk 升级，安装或删除时会更新这个文件。</td></tr><tr><td>/data/system/package.xml</td><td>包含了该应用申请的权限、签名和代码所在的位置等信息系，并且两者都有同一个userld。之所以每个应用都要一个userId，是因为Android在系统设计上把每个应用当做Linux系统上的一个用户对待，这样就可以利用已有的Linux用户管理机制来设计Android应用，比如应用目录，应用权限，应用进程管理等。</td></tr><tr><td>/data/system/package.list</td><td>指定了应用的默认存储位置/data/data/com.xxx.xxx。</td></tr></tbody></table><h1 id="PackageInstaller-初始化"><a href="#PackageInstaller-初始化" class="headerlink" title="PackageInstaller 初始化"></a>PackageInstaller 初始化</h1><p>首先，我们需要指出的是：从 Android 8.0 开始系统是通过如下代码安装指定路径中的 APK：</p><pre class=" language-java"><code class="language-java">Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_VIEW<span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">setDataAndType</span><span class="token punctuation">(</span>Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"file://"</span> <span class="token operator">+</span> apkfile<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"application/vnd.android.package-archive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Intent 的 Action 属性为 ACTION_VIEW，Type 属性指定 Intent 的数据类型为 application/vnd.android.package-archive。</p><font color="#FFFF00"><strong>“application/vnd.android.package-archive” 是什么？</strong></font><pre class=" language-java"><code class="language-java">          <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> MIME_MapTable<span class="token operator">=</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//{后缀名，MIME类型} </span>            <span class="token punctuation">{</span><span class="token string">".3gp"</span><span class="token punctuation">,</span>    <span class="token string">"video/3gpp"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">".apk"</span><span class="token punctuation">,</span>    <span class="token string">"application/vnd.android.package-archive"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">".asf"</span><span class="token punctuation">,</span>    <span class="token string">"video/x-ms-asf"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">".avi"</span><span class="token punctuation">,</span>    <span class="token string">"video/x-msvideo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>我们发现 “application/vnd.android.package-archive” 其实就是文件类型，具体对应 apk 类型。</p><p>那么这个 Intent 隐式匹配的 Activity 是什么？这边我们直接告诉你：<font color="#FF0000"><strong>InstallStart</strong></font> ！（其实，7.0能隐式匹配的 Activity 为 <font color="#FF0000"><strong>PackageInstallerActivity</strong></font> ，两者的区别我们后面会讲解到！）。</p><pre class=" language-xml"><code class="language-xml">// packages/apps/PackageInstaller/AndroidManifest.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.InstallStart<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>excludeFromRecents</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span> <span class="token attr-name"><span class="token namespace">android:</span>priority</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.VIEW<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.INSTALL_PACKAGE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.DEFAULT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>scheme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>scheme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>mimeType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application/vnd.android.package-archive<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>    ... ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span></code></pre><h2 id="InstallStart"><a href="#InstallStart" class="headerlink" title="InstallStart"></a>InstallStart</h2><p>其实，InstallStart 是 PackageInstaller 中的入口 Activity。当我们调用 PackageInstaller 来安装应用时会跳转到 InstallStart，并调用它的 onCreate 方法，我们来看看：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        mIPackageManager <span class="token operator">=</span> AppGlobals<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Intent intent <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String callingPackage <span class="token operator">=</span> <span class="token function">getCallingPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">/**         * public static final String ACTION_CONFIRM_PERMISSIONS = "android.content.pm.action.CONFIRM_PERMISSIONS";         * 判断 Intent 的 Action 是否为 CONFIRM_PERMISSIONS ;         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>PackageInstaller<span class="token punctuation">.</span>ACTION_CONFIRM_PERMISSIONS<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nextActivity<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> PackageInstallerActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 我们此时的情景会走这边</span>            Uri packageUri <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 保证 packageUri 不为 null，判断 packageUri 的 Scheme 协议是否是 content 或者 File</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>packageUri <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>packageUri<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ContentResolver<span class="token punctuation">.</span>SCHEME_FILE<span class="token punctuation">)</span>                    <span class="token operator">||</span> packageUri<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ContentResolver<span class="token punctuation">.</span>SCHEME_CONTENT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 跳转到 InstallStaging （Android 8.0-9.0）</span>                nextActivity<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> InstallStaging<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>packageUri <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> packageUri<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>                    PackageInstallerActivity<span class="token punctuation">.</span>SCHEME_PACKAGE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 跳转到 PackageInstallerActivity（Android 7.0）</span>                nextActivity<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> PackageInstallerActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                Intent result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                result<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_INSTALL_RESULT<span class="token punctuation">,</span>                        PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INVALID_URI<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setResult</span><span class="token punctuation">(</span>RESULT_FIRST_USER<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>                nextActivity <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextActivity <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 启动相应的 Activity（InstallStaging、PackageInstallerActivity）</span>            <span class="token function">startActivity</span><span class="token punctuation">(</span>nextActivity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="InstallStaging"><a href="#InstallStaging" class="headerlink" title="InstallStaging"></a>InstallStaging</h2><p>我们是基于 Android 9.0 的代码进行的分析，所以会走到 InstallStaging 分支，我们继续看源码：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// This is the first onResume in a single life of the activity</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mStagingTask <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// File does not exist, or became invalid</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mStagedFile <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Create file delayed to be able to show error</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 如果 File 类型的 mStagedFile 为 null，则创建 mStagedFile，mStagedFile 用于存储临时数据</span>                    mStagedFile <span class="token operator">=</span> TemporaryFileManager<span class="token punctuation">.</span><span class="token function">getStagedFile</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">showError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            mStagingTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StagingAsyncTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 启动 StagingAsyncTask 线程，并传入了 content 协议的 Uri</span>            mStagingTask<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>我们可以看到，<font color="#FFFF00"><strong>InstallStaging 主要做了两部分工作</strong></font>：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;1、判断 mStagingTask 是否为空，主要用于存储临时数据；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;2、创建并启动 StagingAsyncTask 线程。</p><h2 id="StagingAsyncTask"><a href="#StagingAsyncTask" class="headerlink" title="StagingAsyncTask"></a>StagingAsyncTask</h2><p>接下来，我们看看这个线程所做的工作：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">StagingAsyncTask</span> <span class="token keyword">extends</span> <span class="token class-name">AsyncTask</span><span class="token operator">&lt;</span>Uri<span class="token punctuation">,</span> Void<span class="token punctuation">,</span> Boolean<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> Boolean <span class="token function">doInBackground</span><span class="token punctuation">(</span>Uri<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>params <span class="token operator">==</span> null <span class="token operator">||</span> params<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Uri packageUri <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">(</span>InputStream in <span class="token operator">=</span> <span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openInputStream</span><span class="token punctuation">(</span>packageUri<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/*                 * 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥                 * 将 packageUri（content协议的Uri）的内容写入到 mStagedFile 中                 * 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥                 */</span>                                 <span class="token keyword">try</span> <span class="token punctuation">(</span>OutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>mStagedFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> bytesRead<span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bytesRead <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> SecurityException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span> <span class="token string">"Error staging apk from content URI"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPostExecute</span><span class="token punctuation">(</span>Boolean success<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Intent installIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                 * 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥                 * 如果写入成功，跳转到 PackageInstallerActivity                 * 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥 💥                 */</span>                                installIntent<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span>InstallStaging<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> PackageInstallerActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 并将 mStagedFile 传进去</span>                installIntent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>Uri<span class="token punctuation">.</span><span class="token function">fromFile</span><span class="token punctuation">(</span>mStagedFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                installIntent                        <span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>installIntent<span class="token punctuation">.</span><span class="token function">getFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_FORWARD_RESULT<span class="token punctuation">)</span><span class="token punctuation">;</span>                installIntent<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_NO_ANIMATION<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">startActivityForResult</span><span class="token punctuation">(</span>installIntent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">showError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><font color="#FF0000" size="4"><strong>【总结】：</strong></font>doInBackground 方法中将 packageUri（content 协议的 Uri）的内容写入到 mStagedFile 中，如果写入成功，onPostExecute 方法中会跳转到 PackageInstallerActivity 中，并将 mStagedFile 传进去。</p><p><font color="#FFFF00"><strong>绕了一圈又回到了 PackageInstallerActivity</strong></font>，这里可以看出 InstallStaging 主要起了转换的作用，将 content 协议的 Uri 转换为 File 协议，然后跳转到 PackageInstallerActivity，接下来的安装流程就和 Android 7.0 一样了。</p><h1 id="PackageInstallerActivity"><a href="#PackageInstallerActivity" class="headerlink" title="PackageInstallerActivity"></a>PackageInstallerActivity</h1><p>接下来，我们就要重点分析 PackageInstallerActivity ！从功能上来说，<font color="#FF0000"><strong>PackageInstallerActivity 才是应用安装器 PackageInstaller 真正的入口 Activity</strong></font>。</p><p>我们看下官方对于这个类的说明：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * This activity is launched when a new application is installed via side loading * The package is first parsed and the user is notified of parse errors via a dialog. * If the package is successfully parsed, the user is notified to turn on the install unknown * applications setting. A memory check is made at this point and the user is notified of out * of memory conditions if any. If the package is already existing on the device, * a confirmation dialog (to replace the existing package) is presented to the user. * Based on the user response the package is then installed by launching InstallAppConfirm * sub activity. All state transitions are handled in this activity */</span><span class="token comment" spellcheck="true">/** * 当通过渠道安装一个应用程序的时候，会启动这个 Activity。 * 如果在首次解析这个安装包的时候出现解析错误，会通过对话框的形式告诉用户。 * 如果首次解析安装包的时候，成功解析了，则会通知用户去打开"安装未知应用程序设置"。 * 在启动 Activity 的时候会进行内存检查，如果内存不足会通知用户。 * 如果这个应用程序已经在这个设备安装过了，则会向用户弹出一个对话框询问用户是否"替换现有应用程序的安装包"。 * 基于用户的回应，然后通过 InstallAppConfirm 的子类来安装应用程序。 * 所有状态的转换都是在这 Activity 中处理。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageInstallerActivity</span> <span class="token keyword">extends</span> <span class="token class-name">OverlayTouchActivity</span> <span class="token keyword">implements</span> <span class="token class-name">OnClickListener</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>了解完了官方说明，接下来我们查看它的 onCreate 方法：</p><h2 id="onCreate"><a href="#onCreate" class="headerlink" title="onCreate"></a>onCreate</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageInstallerActivity</span> <span class="token keyword">extends</span> <span class="token class-name">OverlayTouchActivity</span> <span class="token keyword">implements</span> <span class="token class-name">OnClickListener</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    PackageManager mPm<span class="token punctuation">;</span>    IPackageManager mIpm<span class="token punctuation">;</span>    AppOpsManager mAppOpsManager<span class="token punctuation">;</span>    PackageInstaller mInstaller<span class="token punctuation">;</span>    UserManager mUserManager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle icicle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>icicle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>icicle <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mAllowUnknownSources <span class="token operator">=</span> icicle<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span>ALLOW_UNKNOWN_SOURCES_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 初始话 PackageManager 对象：具体用来执行安装操作，最终的功能是由 PMS 来实现的；         */</span>        mPm <span class="token operator">=</span> <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 初始话 IPackageManager 对象：一个AIDL的接口，用于和 PMS 进行进程间通信；         */</span>        mIpm <span class="token operator">=</span> AppGlobals<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 初始化 AppOpsManager 对象：用于权限动态检测，在，Android 4.3 中被引入；         */</span>        mAppOpsManager <span class="token operator">=</span> <span class="token punctuation">(</span>AppOpsManager<span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>APP_OPS_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 初始化 PackageInstaller 对象：在该对象中包含了安装 APK 的基本信息；         */</span>        mInstaller <span class="token operator">=</span> mPm<span class="token punctuation">.</span><span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 初始化 UserManager 对象：用于多用户管理；         */</span>        mUserManager <span class="token operator">=</span> <span class="token punctuation">(</span>UserManager<span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>USER_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Intent intent <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">final</span> Uri packageUri<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>PackageInstaller<span class="token punctuation">.</span>ACTION_CONFIRM_PERMISSIONS<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 可能是系统级别的应用安装时，需要授权走这个流程</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> sessionId <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getIntExtra</span><span class="token punctuation">(</span>PackageInstaller<span class="token punctuation">.</span>EXTRA_SESSION_ID<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> PackageInstaller<span class="token punctuation">.</span>SessionInfo info <span class="token operator">=</span> mInstaller<span class="token punctuation">.</span><span class="token function">getSessionInfo</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>info <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>info<span class="token punctuation">.</span>sealed <span class="token operator">||</span> info<span class="token punctuation">.</span>resolvedBaseCodePath <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Session "</span> <span class="token operator">+</span> mSessionId <span class="token operator">+</span> <span class="token string">" in funky state; ignoring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mSessionId <span class="token operator">=</span> sessionId<span class="token punctuation">;</span>            packageUri <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">fromFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>resolvedBaseCodePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mOriginatingURI <span class="token operator">=</span> null<span class="token punctuation">;</span>            mReferrerURI <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果是用户自己拉起来的安装，则默认 sessionId 为 -1，并且获取 packageUri</span>            mSessionId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            packageUri <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mOriginatingURI <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getParcelableExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_ORIGINATING_URI<span class="token punctuation">)</span><span class="token punctuation">;</span>            mReferrerURI <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getParcelableExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_REFERRER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 返回 URI 解析错误</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>packageUri <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Unspecified source"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setPmResult</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INVALID_URI<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果设备为手表，则不支持</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>DeviceUtils<span class="token punctuation">.</span><span class="token function">isWear</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">showDialogInner</span><span class="token punctuation">(</span>DLG_NOT_SUPPORTED_ON_WEAR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 根据 Uri 的 Scheme 进行预处理</span>        <span class="token keyword">boolean</span> wasSetUp <span class="token operator">=</span> <span class="token function">processPackageUri</span><span class="token punctuation">(</span>packageUri<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 💥 💥 💥 重点方法 1 💥 💥 💥 </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wasSetUp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">bindUi</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>install_confirm<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断是否是未知来源的应用，如果开启允许安装未知来源选项则直接初始化安装</span>        <span class="token function">checkIfAllowedAndInitiateInstall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 💥 💥 💥 重点方法 2 💥 💥 💥 </span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="processPackageUri"><a href="#processPackageUri" class="headerlink" title="processPackageUri"></a>processPackageUri</h2><p>我们首先来看看 processPackageUri 所做的工作：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Parse the Uri and set up the installer for this package.     * @param packageUri The URI to parse     * @return {@code true} iff the installer could be set up     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">processPackageUri</span><span class="token punctuation">(</span><span class="token keyword">final</span> Uri packageUri<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPackageURI <span class="token operator">=</span> packageUri<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 得到 packageUri 的 Scheme 协议</span>        <span class="token keyword">final</span> String scheme <span class="token operator">=</span> packageUri<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据这个 Scheme 协议分别对 package 协议和 file 协议进行处理</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>scheme<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 处理 scheme 为 package 的情况</span>            <span class="token keyword">case</span> SCHEME_PACKAGE<span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/**                      *     PackageInfo mPkgInfo;                      *                      * 获取 package 对应的 Android 应用信息 PackageInfo 如：应用名称，权限列表等...                      */</span>                    mPkgInfo <span class="token operator">=</span> mPm<span class="token punctuation">.</span><span class="token function">getPackageInfo</span><span class="token punctuation">(</span>packageUri<span class="token punctuation">.</span><span class="token function">getSchemeSpecificPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            PackageManager<span class="token punctuation">.</span>GET_PERMISSIONS <span class="token operator">|</span> PackageManager<span class="token punctuation">.</span>MATCH_UNINSTALLED_PACKAGES<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NameNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 如果无法获取 PackageInfo ，弹出一个错误的对话框，然后直接退出安装</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mPkgInfo <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Requested package "</span> <span class="token operator">+</span> packageUri<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token operator">+</span> <span class="token string">" not available. Discontinuing installation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">showDialogInner</span><span class="token punctuation">(</span>DLG_PACKAGE_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">setPmResult</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INVALID_APK<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 创建 AppSnipet 对象，该对象封装了待安装 Android 应用的标题和图标</span>                mAppSnippet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageUtil<span class="token punctuation">.</span>AppSnippet</span><span class="token punctuation">(</span>mPm<span class="token punctuation">.</span><span class="token function">getApplicationLabel</span><span class="token punctuation">(</span>mPkgInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>                        mPm<span class="token punctuation">.</span><span class="token function">getApplicationIcon</span><span class="token punctuation">(</span>mPkgInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 处理 scheme 为 file 的情况</span>            <span class="token keyword">case</span> ContentResolver<span class="token punctuation">.</span>SCHEME_FILE<span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 根据 packageUri 创建一个新的 File</span>                File sourceFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>packageUri<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 创建 APK 文件的分析器 parsed</span>                PackageParser<span class="token punctuation">.</span>Package parsed <span class="token operator">=</span> PackageUtil<span class="token punctuation">.</span><span class="token function">getPackageInfo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> sourceFile<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 💥 💥 💥 重点方法 💥 💥 💥 </span>                <span class="token comment" spellcheck="true">// 说明解析错误，则弹出对话框，并退出安装</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parsed <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Parse error when parsing manifest. Discontinuing installation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">showDialogInner</span><span class="token punctuation">(</span>DLG_PACKAGE_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">setPmResult</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INVALID_APK<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/**                 * 走到这边，说明解析成功                 * 对 parsed 进行进一步处理得到包信息 PackageInfo，获取权限部分                 * 这里面包含APK文件的相关信息                 *                 *     PackageInfo mPkgInfo;                 */</span>                mPkgInfo <span class="token operator">=</span> PackageParser<span class="token punctuation">.</span><span class="token function">generatePackageInfo</span><span class="token punctuation">(</span>parsed<span class="token punctuation">,</span> null<span class="token punctuation">,</span>                        PackageManager<span class="token punctuation">.</span>GET_PERMISSIONS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PackageUserState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                 *     private PackageUtil.AppSnippet mAppSnippet;                 *                 * 获取 PackageUtil.AppSnippet，AppSnippet 是 PackageUtil 的静态内部类，内部封装了icon和label；                 * AppSnippet 中只有两个属性：lable（应用名称）、icon（应用图标）                 *                 *     return new PackageUtil.AppSnippet(label, icon);  // getAppSnippet 返回的是 label 和 icon                 */</span>                mAppSnippet <span class="token operator">=</span> PackageUtil<span class="token punctuation">.</span><span class="token function">getAppSnippet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> mPkgInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">,</span> sourceFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果不是这两个协议就会抛出异常</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Unexpected URI scheme "</span> <span class="token operator">+</span> packageUri<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="PackageUtil-getPackageInfo"><a href="#PackageUtil-getPackageInfo" class="headerlink" title="PackageUtil.getPackageInfo"></a>PackageUtil.getPackageInfo</h2><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Utility method to get package information for a given {@link File}     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> PackageParser<span class="token punctuation">.</span>Package <span class="token function">getPackageInfo</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> File sourceFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// new 了一个 PackageParser 对象</span>        <span class="token keyword">final</span> PackageParser parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parser<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PackageParser<span class="token punctuation">.</span>CallbackImpl</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> parser<span class="token punctuation">.</span><span class="token function">parsePackage</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageParserException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="checkIfAllowedAndInitiateInstall"><a href="#checkIfAllowedAndInitiateInstall" class="headerlink" title="checkIfAllowedAndInitiateInstall"></a>checkIfAllowedAndInitiateInstall</h2><p>接下来我们看看 checkIfAllowedAndInitiateInstall 做所工作：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkIfAllowedAndInitiateInstall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> installAppsRestrictionSource <span class="token operator">=</span> mUserManager<span class="token punctuation">.</span><span class="token function">getUserRestrictionSource</span><span class="token punctuation">(</span>                UserManager<span class="token punctuation">.</span>DISALLOW_INSTALL_APPS<span class="token punctuation">,</span> Process<span class="token punctuation">.</span><span class="token function">myUserHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>installAppsRestrictionSource <span class="token operator">&amp;</span> UserManager<span class="token punctuation">.</span>RESTRICTION_SOURCE_SYSTEM<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">showDialogInner</span><span class="token punctuation">(</span>DLG_INSTALL_APPS_RESTRICTED_FOR_USER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>installAppsRestrictionSource <span class="token operator">!=</span> UserManager<span class="token punctuation">.</span>RESTRICTION_NOT_SET<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>ACTION_SHOW_ADMIN_SUPPORT_DETAILS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**          * isInstallRequestFromUnknownSource    // 安装请求是否来自一个未知的源          *          * 判断如果允许安装未知来源或者根据 Intent 判断得出该 APK 不是未知来源          */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mAllowUnknownSources <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isInstallRequestFromUnknownSource</span><span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 初始化安装</span>            <span class="token function">initiateInstall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 💥 💥 💥 重点方法 1 💥 💥 💥 </span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> unknownSourcesRestrictionSource <span class="token operator">=</span> mUserManager<span class="token punctuation">.</span><span class="token function">getUserRestrictionSource</span><span class="token punctuation">(</span>                    UserManager<span class="token punctuation">.</span>DISALLOW_INSTALL_UNKNOWN_SOURCES<span class="token punctuation">,</span> Process<span class="token punctuation">.</span><span class="token function">myUserHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果管理员限制来自未知源的安装, 就弹出提示 Dialog</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>unknownSourcesRestrictionSource <span class="token operator">&amp;</span> UserManager<span class="token punctuation">.</span>RESTRICTION_SOURCE_SYSTEM<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">showDialogInner</span><span class="token punctuation">(</span>DLG_UNKNOWN_SOURCES_RESTRICTED_FOR_USER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>unknownSourcesRestrictionSource <span class="token operator">!=</span> UserManager<span class="token punctuation">.</span>RESTRICTION_NOT_SET<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>ACTION_SHOW_ADMIN_SUPPORT_DETAILS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">handleUnknownSources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 💥 💥 💥 重点方法 2 💥 💥 💥 </span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="handleUnknownSources"><a href="#handleUnknownSources" class="headerlink" title="handleUnknownSources"></a>handleUnknownSources</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleUnknownSources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOriginatingPackage <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"No source found for package "</span> <span class="token operator">+</span> mPkgInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">showDialogInner</span><span class="token punctuation">(</span>DLG_ANONYMOUS_SOURCE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> appOpCode <span class="token operator">=</span>                AppOpsManager<span class="token punctuation">.</span><span class="token function">permissionToOpCode</span><span class="token punctuation">(</span>Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>REQUEST_INSTALL_PACKAGES<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> appOpMode <span class="token operator">=</span> mAppOpsManager<span class="token punctuation">.</span><span class="token function">noteOpNoThrow</span><span class="token punctuation">(</span>appOpCode<span class="token punctuation">,</span>                mOriginatingUid<span class="token punctuation">,</span> mOriginatingPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>appOpMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> AppOpsManager<span class="token punctuation">.</span>MODE_DEFAULT<span class="token operator">:</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> result <span class="token operator">=</span> mIpm<span class="token punctuation">.</span><span class="token function">checkUidPermission</span><span class="token punctuation">(</span>                            Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>REQUEST_INSTALL_PACKAGES<span class="token punctuation">,</span> mOriginatingUid<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>PERMISSION_GRANTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">initiateInstall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> exc<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Unable to talk to package manager"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                mAppOpsManager<span class="token punctuation">.</span><span class="token function">setMode</span><span class="token punctuation">(</span>appOpCode<span class="token punctuation">,</span> mOriginatingUid<span class="token punctuation">,</span>                        mOriginatingPackage<span class="token punctuation">,</span> AppOpsManager<span class="token punctuation">.</span>MODE_ERRORED<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// fall through</span>            <span class="token comment" spellcheck="true">// 我们看下这边，当系统默认不允许安装位置来源的应用时，会弹出一个 Dialog 等待用户确认</span>            <span class="token keyword">case</span> AppOpsManager<span class="token punctuation">.</span>MODE_ERRORED<span class="token operator">:</span>                <span class="token function">showDialogInner</span><span class="token punctuation">(</span>DLG_EXTERNAL_SOURCE_BLOCKED<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> AppOpsManager<span class="token punctuation">.</span>MODE_ALLOWED<span class="token operator">:</span>                <span class="token function">initiateInstall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Invalid app op mode "</span> <span class="token operator">+</span> appOpMode                        <span class="token operator">+</span> <span class="token string">" for OP_REQUEST_INSTALL_PACKAGES found for uid "</span> <span class="token operator">+</span> mOriginatingUid<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="showDialogInner"><a href="#showDialogInner" class="headerlink" title="showDialogInner"></a>showDialogInner</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">showDialogInner</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DialogFragment currentDialog <span class="token operator">=</span>                <span class="token punctuation">(</span>DialogFragment<span class="token punctuation">)</span> <span class="token function">getFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFragmentByTag</span><span class="token punctuation">(</span><span class="token string">"dialog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentDialog <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            currentDialog<span class="token punctuation">.</span><span class="token function">dismissAllowingStateLoss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        DialogFragment newDialog <span class="token operator">=</span> <span class="token function">createDialog</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newDialog <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newDialog<span class="token punctuation">.</span><span class="token function">showAllowingStateLoss</span><span class="token punctuation">(</span><span class="token function">getFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"dialog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="createDialog"><a href="#createDialog" class="headerlink" title="createDialog"></a>createDialog</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> DialogFragment <span class="token function">createDialog</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">// </span>            <span class="token keyword">case</span> DLG_EXTERNAL_SOURCE_BLOCKED<span class="token operator">:</span>                <span class="token keyword">return</span> ExternalSourcesBlockedDialog<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>mOriginatingPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> DLG_ANONYMOUS_SOURCE<span class="token operator">:</span>                <span class="token keyword">return</span> AnonymousSourceDialog<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="ExternalSourcesBlockedDialog"><a href="#ExternalSourcesBlockedDialog" class="headerlink" title="ExternalSourcesBlockedDialog"></a>ExternalSourcesBlockedDialog</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * An error dialog shown when external sources are not allowed     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ExternalSourcesBlockedDialog</span> <span class="token keyword">extends</span> <span class="token class-name">AppErrorDialog</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> AppErrorDialog <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String originationPkg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ExternalSourcesBlockedDialog dialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExternalSourcesBlockedDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dialog<span class="token punctuation">.</span><span class="token function">setArgument</span><span class="token punctuation">(</span>originationPkg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> dialog<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> Dialog <span class="token function">createDialog</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> CharSequence argument<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                PackageManager pm <span class="token operator">=</span> <span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ApplicationInfo sourceInfo <span class="token operator">=</span> pm<span class="token punctuation">.</span><span class="token function">getApplicationInfo</span><span class="token punctuation">(</span>argument<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span><span class="token function">getApplicationLabel</span><span class="token punctuation">(</span>sourceInfo<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span><span class="token function">getApplicationIcon</span><span class="token punctuation">(</span>sourceInfo<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">/*                         * untrusted_external_source_warning：出于安全考虑，已禁止您的电视安装来自此来源的未知应用                         * 对应文章开头的操作图，我们可以更加清晰的理解安装的逻辑                         */</span>                        <span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>untrusted_external_source_warning<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>external_sources_settings<span class="token punctuation">,</span>                                <span class="token punctuation">(</span>dialog<span class="token punctuation">,</span> which<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                                    Intent settingsIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    settingsIntent<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>                                            Settings<span class="token punctuation">.</span>ACTION_MANAGE_UNKNOWN_APP_SOURCES<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">final</span> Uri packageUri <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"package:"</span> <span class="token operator">+</span> argument<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    settingsIntent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>packageUri<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                                        <span class="token comment" spellcheck="true">// packages/apps/Settings/src/com/android/settings/applications/appinfo/ExternalSourcesDetails.java</span>                                        <span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startActivityForResult</span><span class="token punctuation">(</span>settingsIntent<span class="token punctuation">,</span>                                                REQUEST_TRUST_EXTERNAL_SOURCE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ActivityNotFoundException</span> exc<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Settings activity not found for action: "</span>                                                <span class="token operator">+</span> Settings<span class="token punctuation">.</span>ACTION_MANAGE_UNKNOWN_APP_SOURCES<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token punctuation">}</span>                                <span class="token punctuation">}</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setNegativeButton</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>cancel<span class="token punctuation">,</span>                                <span class="token punctuation">(</span>dialog<span class="token punctuation">,</span> which<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NameNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Did not find app info for "</span> <span class="token operator">+</span> argument<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="initiateInstall"><a href="#initiateInstall" class="headerlink" title="initiateInstall"></a>initiateInstall</h2><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 判断如果允许安装未知来源或者根据Intent判断得出该APK不是未知来源</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initiateInstall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 得到包名</span>        String pkgName <span class="token operator">=</span> mPkgInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 是否有同名应用已经安装上去了，在此安装则被认为是替换安装</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> oldName <span class="token operator">=</span> mPm<span class="token punctuation">.</span><span class="token function">canonicalToCurrentPackageNames</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> pkgName <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldName <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> oldName<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> oldName<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            pkgName <span class="token operator">=</span> oldName<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            mPkgInfo<span class="token punctuation">.</span>packageName <span class="token operator">=</span> pkgName<span class="token punctuation">;</span>            mPkgInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>packageName <span class="token operator">=</span> pkgName<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Check if package is already installed. display confirmation dialog if replacing pkg</span>        <span class="token comment" spellcheck="true">// 检查这个包是否真的被安装，如果要替换，则显示替换对话框</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取设备上的残存数据，并且标记为 “installed” 的，实际上已经被卸载的应用</span>            mAppInfo <span class="token operator">=</span> mPm<span class="token punctuation">.</span><span class="token function">getApplicationInfo</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">,</span>                    PackageManager<span class="token punctuation">.</span>MATCH_UNINSTALLED_PACKAGES<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mAppInfo<span class="token punctuation">.</span>flags<span class="token operator">&amp;</span>ApplicationInfo<span class="token punctuation">.</span>FLAG_INSTALLED<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果应用是被卸载的，但是又是被标识成安装过的，则认为是新安装</span>                mAppInfo <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NameNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mAppInfo <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 列出权限列表，等待用户确认安装</span>        <span class="token function">startInstallConfirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>我们可以看到，<font color="#FFFF00"><strong>initiateInstall 主要做了三件事</strong></font>：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;1、检查设备是否是同名安装，如果是则后续是替换安装。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;2、检查设备上是否已经安装了这个安装包，如果是，后面是替换安装。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;3、调用 startInstallConfirm() 这个方法是安装的核心代码。</p><h2 id="startInstallConfirm"><a href="#startInstallConfirm" class="headerlink" title="startInstallConfirm"></a>startInstallConfirm</h2><p>下面我们就来看下 startInstallConfirm() 方法里面的具体实现：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startInstallConfirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// We might need to show permissions, load layout with permissions</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mAppInfo <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">bindUi</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>install_confirm_perm_update<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">bindUi</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>install_confirm_perm<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>install_confirm_question<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>install_confirm_question<span class="token punctuation">)</span><span class="token punctuation">;</span>        TabHost tabHost <span class="token operator">=</span> <span class="token punctuation">(</span>TabHost<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tabhost<span class="token punctuation">)</span><span class="token punctuation">;</span>        tabHost<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ViewPager viewPager <span class="token operator">=</span> <span class="token punctuation">(</span>ViewPager<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>pager<span class="token punctuation">)</span><span class="token punctuation">;</span>        TabsAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TabsAdapter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tabHost<span class="token punctuation">,</span> viewPager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// If the app supports runtime permissions the new permissions will</span>        <span class="token comment" spellcheck="true">// be requested at runtime, hence we do not show them at install.</span>        <span class="token comment" spellcheck="true">// 根据 sdk 版本来判断 app 是否支持运行时权限</span>        <span class="token comment" spellcheck="true">// 如果app支持运行时权限，这里会显示新的运行时权限</span>        <span class="token keyword">boolean</span> supportsRuntimePermissions <span class="token operator">=</span> mPkgInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>targetSdkVersion                <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>M<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 显示权限列表的变量，true：显示权限列表，false：未显示权限列表</span>        <span class="token keyword">boolean</span> permVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        mScrollView <span class="token operator">=</span> null<span class="token punctuation">;</span>        mOkCanInstall <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> msg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// perms 这个对象包括了该应用的用户的 uid 以及相应的一些权限，以及权限组信息</span>        AppSecurityPermissions perms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppSecurityPermissions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> mPkgInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取隐私相关权限的数量</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> N <span class="token operator">=</span> perms<span class="token punctuation">.</span><span class="token function">getPermissionCount</span><span class="token punctuation">(</span>AppSecurityPermissions<span class="token punctuation">.</span>WHICH_ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断是否为已经安装过的应用</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mAppInfo <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果已经安装过则继续判断是否为系统应用</span>            msg <span class="token operator">=</span> <span class="token punctuation">(</span>mAppInfo<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span>                    <span class="token operator">?</span> R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>install_confirm_question_update_system                    <span class="token operator">:</span> R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>install_confirm_question_update<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 用来显示权限列表的 scrollview</span>            mScrollView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CaffeinatedScrollView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果显示的内容超过了 mScrollView ，则就会折叠可以滚动</span>            mScrollView<span class="token punctuation">.</span><span class="token function">setFillViewport</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> newPermissionsFound <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>supportsRuntimePermissions<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/**                  * 针对更新应用程序相对于旧版本而判断是否加入新的权限                 *                 *     AppSecurityPermissions.WHICH_NEW    // 新加入的权限                 */</span>                newPermissionsFound <span class="token operator">=</span>                        <span class="token punctuation">(</span>perms<span class="token punctuation">.</span><span class="token function">getPermissionCount</span><span class="token punctuation">(</span>AppSecurityPermissions<span class="token punctuation">.</span>WHICH_NEW<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>newPermissionsFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 将新的权限列表视频添加到滚动视图中</span>                    permVisible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 调用 AppSecurityPermissions 的 getPermissionsView 方法来获取 PermissionItemView，</span>                    <span class="token comment" spellcheck="true">// 并将 PermissionItemView 添加到 CaffeinatedScrollView 中，这样安装该 APK 需要访问的系统权限就可以全部的展示出来了</span>                    mScrollView<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>perms<span class="token punctuation">.</span><span class="token function">getPermissionsView</span><span class="token punctuation">(</span>                            AppSecurityPermissions<span class="token punctuation">.</span>WHICH_NEW<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>supportsRuntimePermissions <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>newPermissionsFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果既不支持可运行权限项也没有新权限发现，则提示没有新权限（没有设置任何权限，只显示应用程序名称和图标）</span>                LayoutInflater inflater <span class="token operator">=</span> <span class="token punctuation">(</span>LayoutInflater<span class="token punctuation">)</span><span class="token function">getSystemService</span><span class="token punctuation">(</span>                        Context<span class="token punctuation">.</span>LAYOUT_INFLATER_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>                TextView label <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span>inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>label<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                label<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>no_new_perms<span class="token punctuation">)</span><span class="token punctuation">;</span>                mScrollView<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            adapter<span class="token punctuation">.</span><span class="token function">addTab</span><span class="token punctuation">(</span>tabHost<span class="token punctuation">.</span><span class="token function">newTabSpec</span><span class="token punctuation">(</span>TAB_ID_NEW<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIndicator</span><span class="token punctuation">(</span>                    <span class="token function">getText</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>newPerms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mScrollView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果至少设置了一个权限</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>supportsRuntimePermissions <span class="token operator">&amp;&amp;</span> N <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            permVisible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            LayoutInflater inflater <span class="token operator">=</span> <span class="token punctuation">(</span>LayoutInflater<span class="token punctuation">)</span><span class="token function">getSystemService</span><span class="token punctuation">(</span>                    Context<span class="token punctuation">.</span>LAYOUT_INFLATER_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析权限列表的视图</span>            View root <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>permissions_list<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mScrollView <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mScrollView <span class="token operator">=</span> <span class="token punctuation">(</span>CaffeinatedScrollView<span class="token punctuation">)</span>root<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>scrollview<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 添加到权限列表的视图</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>ViewGroup<span class="token punctuation">)</span>root<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>permission_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>                        perms<span class="token punctuation">.</span><span class="token function">getPermissionsView</span><span class="token punctuation">(</span>AppSecurityPermissions<span class="token punctuation">.</span>WHICH_ALL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            adapter<span class="token punctuation">.</span><span class="token function">addTab</span><span class="token punctuation">(</span>tabHost<span class="token punctuation">.</span><span class="token function">newTabSpec</span><span class="token punctuation">(</span>TAB_ID_ALL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIndicator</span><span class="token punctuation">(</span>                    <span class="token function">getText</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>allPerms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 默认为 false，如果有新的权限会置为 true</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>permVisible<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mAppInfo <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*                 * 更新安装包，并且没有任何权限要求，会走这边的逻辑                 * 根据是否为内置应用，做不同的字串提醒                 * install_confirm_question_update_system_no_perms：系统应用                 *         Do you want to install an update to this built-in application?                  *         Your existing data will not be lost. It does not require any special access.                 * install_confirm_question_update_no_perms：非系统应用                 *         Do you want to install an update to this existing application?                  *         Your existing data will not be lost. It does not require any special access.                 */</span>                msg <span class="token operator">=</span> <span class="token punctuation">(</span>mAppInfo<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span>                        <span class="token operator">?</span> R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>install_confirm_question_update_system_no_perms                        <span class="token operator">:</span> R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>install_confirm_question_update_no_perms<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*                  * 是新安装的 app 并且没有权限列表，则提示如下                 * install_confirm_question_no_perms：                 *         Do you want to install this application? It does not require any special access.                 */</span>                msg <span class="token operator">=</span> R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>install_confirm_question_no_perms<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// We do not need to show any permissions, load layout without permissions</span>            <span class="token comment" spellcheck="true">// 设置相应的 UI</span>            <span class="token function">bindUi</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>install_confirm<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mScrollView <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>TextView<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>install_confirm_question<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mScrollView <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// There is nothing to scroll view, so the ok button is immediately</span>            <span class="token comment" spellcheck="true">// set to install.</span>            mOk<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>install<span class="token punctuation">)</span><span class="token punctuation">;</span>            mOkCanInstall <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mScrollView<span class="token punctuation">.</span><span class="token function">setFullScrollAction</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mOk<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>install<span class="token punctuation">)</span><span class="token punctuation">;</span>                    mOkCanInstall <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这个方法其实主要是根据不同的情况来设置相应的 UI，主要是将安装包分为新安装和更新安装，在更新安装里面又分为系统应用和非系统应用，然后根据不同的情况来显示不同的 UI，UI这块主要是通过 getPermissionsView 方法来获取不同的权限 View。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>PackageInstaller 初始化的过程：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;1、根据 Uri 的 Scheme 协议不同，跳转到不同的界面，content 协议跳转到 InstallStart，其他的跳转到 PackageInstallerActivity。本文应用场景中，如果是 Android7.0 以及更高版本会跳转到 InstallStart。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;2、InstallStart 将 content 协议的 Uri 转换为 File 协议，然后跳转到 PackageInstallerActivity。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;3、PackageInstallerActivity 会分别对 package 协议和 file 协议的 Uri 进行处理，如果是 file 协议会解析 APK 文件得到包信息 PackageInfo。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;4、PackageInstallerActivity 中会对未知来源进行处理，如果允许安装未知来源或者根据 Intent 判断得出该 APK 不是未知来源，就会初始化安装确认界面，如果管理员限制来自未知源的安装, 就弹出提示 Dialog 或者跳转到设置界面。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>&nbsp;01. <a href="http://liuwangshu.cn/framework/pms/1-packageinstaller-initialize.html" target="_blank" rel="noopener">http://liuwangshu.cn/framework/pms/1-packageinstaller-initialize.html</a><br>&nbsp;02. <a href="https://www.cnblogs.com/ouyanliu/articles/7100682.html" target="_blank" rel="noopener">https://www.cnblogs.com/ouyanliu/articles/7100682.html</a><br>&nbsp;03. <a href="https://www.jianshu.com/p/cbf8e73f41ed" target="_blank" rel="noopener">https://www.jianshu.com/p/cbf8e73f41ed</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架服务&quot;&quot; </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PackageInstaller </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Framework 核心服务之 PMS 钻研 ( 3 ) - PackageManager</title>
      <link href="/2018/12/12/android-kuang-jia-fu-wu-pian-shen-ru-yan-jiu-pms-xi-lie-3-zhi-packagemanager/"/>
      <url>/2018/12/12/android-kuang-jia-fu-wu-pian-shen-ru-yan-jiu-pms-xi-lie-3-zhi-packagemanager/</url>
      
        <content type="html"><![CDATA[<p><br></p><p><strong><center><font color="#3A5FCD" size="4">PackageManagerService 系列文章如下（基于 Android 9.0 源码）</font><center></center></center></strong><br></p><table><thead><tr><th style="text-align:center">&nbsp;</th><th style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（1）- 启动流程</font></a></th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（2）- 构造函数</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（3）- PackageManager</font></a></td></tr><tr><td style="text-align:center"><strong><font color="#EE2C2C" size="3">PackageManagerService</font></strong></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（4）- PackageInstaller</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（5）- APK 安装流程（1）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（6）- APK 安装流程（2）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（7）- PackageParser</font></a></td></tr></tbody></table><p><br></p><p><strong><font color="#3A5FCD" size="4">修订日志</font></strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">1、博文格式，文章排版等优化；</font></p><p><br></p><hr><h1 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h1><h2 id="1-1-核心源码"><a href="#1-1-核心源码" class="headerlink" title="1.1 核心源码"></a>1.1 核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">Context.java</font></td><td>frameworks/base/core/java/android/content/Context.java</td></tr><tr><td><font color="#D15FEE">ContextImpl.java</font></td><td>frameworks/base/core/java/android/app/ContextImpl.java</td></tr><tr><td><font color="#D15FEE">ActivityThread.java</font></td><td>frameworks/base/core/java/android/app/ActivityThread.java</td></tr><tr><td><font color="#D15FEE">PackageManager.java</font></td><td>frameworks/base/core/java/android/content/pm/PackageManager.java</td></tr><tr><td><font color="#D15FEE">ApplicationPackageManager.java</font></td><td>frameworks/base/core/java/android/app/ApplicationPackageManager.java</td></tr></tbody></table><p><br></p><h1 id="二、PackageManager"><a href="#二、PackageManager" class="headerlink" title="二、PackageManager"></a>二、PackageManager</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h2><p>PackageManager 是一个抽象类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Class for retrieving various kinds of information related to the application * packages that are currently installed on the device. * * You can find this class through {@link Context#getPackageManager}. */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PackageManager</span> <span class="token punctuation">{</span></code></pre><p>注释可以看出：PackageManager 这个类是检测当前已经安装在当前设备上的应用程序包的信息。你可以调用 Context 类的 getPackageManager() 方法来获取 PackageManager。</p><h2 id="2-2-安装-APK"><a href="#2-2-安装-APK" class="headerlink" title="2.2 安装 APK"></a>2.2 安装 APK</h2><p>PackageManager 是一个实际上管理应用程序安装、卸载和升级的 API。当我们安装 APK 文件时，PackageManager 会解析 APK 包文件和显示确认信息。当我们点击 OK 按钮后，PackageManager 会调用一个叫 “InstallPackage” 的方法，这个方法有 4 个参数，也就是 uri、installFlags、observer、installPackagename。PackageManager 会启动一个叫 “package” 的 servcie 服务，现在所有模糊的东西会发生在这个 service 中。<br><br></p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-f195e3a3c47103fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5713484-0a2df5e912885229.png"></center><h2 id="2-3-实现功能"><a href="#2-3-实现功能" class="headerlink" title="2.3 实现功能"></a>2.3 实现功能</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;1、安装、卸载应用<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;2、查询 permission 相关信息<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;3、查询 Application 相关信息(application、activity、receiver、service、provider 及相应属性等)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;4、查询已安装应用<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;5、增加、删除 permission<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;6、清除用户数据、缓存、代码等</p><h2 id="2-4-抽象方法"><a href="#2-4-抽象方法" class="headerlink" title="2.4 抽象方法"></a>2.4 抽象方法</h2><h3 id="2-4-1-getPackageInfo"><a href="#2-4-1-getPackageInfo" class="headerlink" title="2.4.1 getPackageInfo"></a>2.4.1 getPackageInfo</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Retrieve overall information about an application package that is     * installed on the system.     *     * @param packageName The full name (i.e. com.google.apps.contacts) of the     *            desired package.     * @param flags Additional option flags to modify the data returned.     * @return A PackageInfo object containing information about the package. If     *         flag {@code MATCH_UNINSTALLED_PACKAGES} is set and if the package     *         is not found in the list of installed applications, the package     *         information is retrieved from the list of uninstalled     *         applications (which includes installed applications as well as     *         applications with data directory i.e. applications which had been     *         deleted with {@code DONT_DELETE_DATA} flag set).     * @throws NameNotFoundException if a package with the given name cannot be     *             found on the system.     *      * 通过包名获取该包名对应的应用程序的 PackageInfo 对象，     * PackageInfo 类包含了从 AndroidManifest.xml 文件中收集的所有信息。     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> PackageInfo <span class="token function">getPackageInfo</span><span class="token punctuation">(</span>String packageName<span class="token punctuation">,</span> <span class="token annotation punctuation">@PackageInfoFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span>            <span class="token keyword">throws</span> NameNotFoundException<span class="token punctuation">;</span></code></pre><h3 id="2-4-2-getApplicationInfo"><a href="#2-4-2-getApplicationInfo" class="headerlink" title="2.4.2 getApplicationInfo"></a>2.4.2 getApplicationInfo</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Retrieve all of the information we know about a particular     * package/application.     *     * @param packageName The full name (i.e. com.google.apps.contacts) of an     *            application.     * @param flags Additional option flags to modify the data returned.     * @return An {@link ApplicationInfo} containing information about the     *         package. If flag {@code MATCH_UNINSTALLED_PACKAGES} is set and if     *         the package is not found in the list of installed applications,     *         the application information is retrieved from the list of     *         uninstalled applications (which includes installed applications     *         as well as applications with data directory i.e. applications     *         which had been deleted with {@code DONT_DELETE_DATA} flag set).     * @throws NameNotFoundException if a package with the given name cannot be     *             found on the system.     *     * 根据包名返回其对应的 ApplicationInfo 信息。     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> ApplicationInfo <span class="token function">getApplicationInfo</span><span class="token punctuation">(</span>String packageName<span class="token punctuation">,</span>            <span class="token annotation punctuation">@ApplicationInfoFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> NameNotFoundException<span class="token punctuation">;</span></code></pre><h3 id="2-4-3-getActivityInfo"><a href="#2-4-3-getActivityInfo" class="headerlink" title="2.4.3 getActivityInfo"></a>2.4.3 getActivityInfo</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Retrieve all of the information we know about a particular activity     * class.     *     * @param component The full component name (i.e.     *            com.google.apps.contacts/com.google.apps.contacts.     *            ContactsList) of an Activity class.     * @param flags Additional option flags to modify the data returned.     * @return An {@link ActivityInfo} containing information about the     *         activity.     * @throws NameNotFoundException if a package with the given name cannot be     *             found on the system.     *     * 检索出一个特定的 Activity 类的所有信息。     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> ActivityInfo <span class="token function">getActivityInfo</span><span class="token punctuation">(</span>ComponentName component<span class="token punctuation">,</span>            <span class="token annotation punctuation">@ComponentInfoFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> NameNotFoundException<span class="token punctuation">;</span></code></pre><h3 id="2-4-4-getReceiverInfo"><a href="#2-4-4-getReceiverInfo" class="headerlink" title="2.4.4 getReceiverInfo"></a>2.4.4 getReceiverInfo</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Retrieve all of the information we know about a particular receiver     * class.     *     * @param component The full component name (i.e.     *            com.google.apps.calendar/com.google.apps.calendar.     *            CalendarAlarm) of a Receiver class.     * @param flags Additional option flags to modify the data returned.     * @return An {@link ActivityInfo} containing information about the     *         receiver.     * @throws NameNotFoundException if a package with the given name cannot be     *             found on the system.     *     * 检索出一个特定的 Receiver 类的所有信息(这里主要指 ActivityInfo)。     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> ActivityInfo <span class="token function">getReceiverInfo</span><span class="token punctuation">(</span>ComponentName component<span class="token punctuation">,</span>            <span class="token annotation punctuation">@ComponentInfoFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> NameNotFoundException<span class="token punctuation">;</span></code></pre><h3 id="2-4-5-getServiceInfo"><a href="#2-4-5-getServiceInfo" class="headerlink" title="2.4.5 getServiceInfo"></a>2.4.5 getServiceInfo</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Retrieve all of the information we know about a particular service class.     *     * @param component The full component name (i.e.     *            com.google.apps.media/com.google.apps.media.     *            BackgroundPlayback) of a Service class.     * @param flags Additional option flags to modify the data returned.     * @return A {@link ServiceInfo} object containing information about the     *         service.     * @throws NameNotFoundException if a package with the given name cannot be     *             found on the system.     *     * 检索出一个特定的 Service 类的所有信息(这里主要指 ServiceInfo)。     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> ServiceInfo <span class="token function">getServiceInfo</span><span class="token punctuation">(</span>ComponentName component<span class="token punctuation">,</span>            <span class="token annotation punctuation">@ComponentInfoFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> NameNotFoundException<span class="token punctuation">;</span></code></pre><h3 id="2-4-6-getProviderInfo"><a href="#2-4-6-getProviderInfo" class="headerlink" title="2.4.6 getProviderInfo"></a>2.4.6 getProviderInfo</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Retrieve all of the information we know about a particular content     * provider class.     *     * @param component The full component name (i.e.     *            com.google.providers.media/com.google.providers.media.     *            MediaProvider) of a ContentProvider class.     * @param flags Additional option flags to modify the data returned.     * @return A {@link ProviderInfo} object containing information about the     *         provider.     * @throws NameNotFoundException if a package with the given name cannot be     *             found on the system.     *     * 检索出一个特定的 content provider 类的所有信息(这里主要指 ProviderInfo)。     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> ProviderInfo <span class="token function">getProviderInfo</span><span class="token punctuation">(</span>ComponentName component<span class="token punctuation">,</span>            <span class="token annotation punctuation">@ComponentInfoFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> NameNotFoundException<span class="token punctuation">;</span></code></pre><h3 id="2-4-7-getInstalledPackages"><a href="#2-4-7-getInstalledPackages" class="headerlink" title="2.4.7 getInstalledPackages"></a>2.4.7 getInstalledPackages</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Return a List of all packages that are installed for the current user.     *     * @param flags Additional option flags to modify the data returned.     * @return A List of PackageInfo objects, one for each installed package,     *         containing information about the package. In the unlikely case     *         there are no installed packages, an empty list is returned. If     *         flag {@code MATCH_UNINSTALLED_PACKAGES} is set, the package     *         information is retrieved from the list of uninstalled     *         applications (which includes installed applications as well as     *         applications with data directory i.e. applications which had been     *         deleted with {@code DONT_DELETE_DATA} flag set).     *     * 获取设备上安装的所有软件包。     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> List<span class="token operator">&lt;</span>PackageInfo<span class="token operator">></span> <span class="token function">getInstalledPackages</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PackageInfoFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-4-8-currentToCanonicalPackageNames"><a href="#2-4-8-currentToCanonicalPackageNames" class="headerlink" title="2.4.8 currentToCanonicalPackageNames"></a>2.4.8 currentToCanonicalPackageNames</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Map from the current package names in use on the device to whatever     * the current canonical name of that package is.     * @param names Array of current names to be mapped.     * @return Returns an array of the same size as the original, containing     * the canonical name for each package.     *     * 从设备上使用当前包名映射到该软件包名的当前规范名称，     * 如果修改包名会用到，没有修改过包名一般不会用到。     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">currentToCanonicalPackageNames</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> names<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-4-9-canonicalToCurrentPackageNames"><a href="#2-4-9-canonicalToCurrentPackageNames" class="headerlink" title="2.4.9 canonicalToCurrentPackageNames"></a>2.4.9 canonicalToCurrentPackageNames</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Map from a packages canonical name to the current name in use on the device.     * @param names Array of new names to be mapped.     * @return Returns an array of the same size as the original, containing     * the current name for each package.     *     * 将软件包规范名称映射到设备上正在使用的当前名称，     * 我们发现：canonicalToCurrentPackageNames() 和 currentToCanonicalPackageNames() 方法是相反的两个方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">canonicalToCurrentPackageNames</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> names<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-4-10-getPermissionInfo"><a href="#2-4-10-getPermissionInfo" class="headerlink" title="2.4.10 getPermissionInfo"></a>2.4.10 getPermissionInfo</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Retrieve all of the information we know about a particular permission.     *     * @param name The fully qualified name (i.e. com.google.permission.LOGIN)     *            of the permission you are interested in.     * @param flags Additional option flags to modify the data returned.     * @return Returns a {@link PermissionInfo} containing information about the     *         permission.     * @throws NameNotFoundException if a package with the given name cannot be     *             found on the system.     *     * 检测出我们想要知道的所有关于权限的信息。     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> PermissionInfo <span class="token function">getPermissionInfo</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@PermissionInfoFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span>            <span class="token keyword">throws</span> NameNotFoundException<span class="token punctuation">;</span></code></pre><h3 id="2-4-11-queryPermissionsByGroup"><a href="#2-4-11-queryPermissionsByGroup" class="headerlink" title="2.4.11 queryPermissionsByGroup"></a>2.4.11 queryPermissionsByGroup</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Query for all of the permissions associated with a particular group.     *     * @param group The fully qualified name (i.e. com.google.permission.LOGIN)     *            of the permission group you are interested in. Use null to     *            find all of the permissions not associated with a group.     * @param flags Additional option flags to modify the data returned.     * @return Returns a list of {@link PermissionInfo} containing information     *         about all of the permissions in the given group.     * @throws NameNotFoundException if a package with the given name cannot be     *             found on the system.     *     * 查询与特定组相关的所有权限。     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> List<span class="token operator">&lt;</span>PermissionInfo<span class="token operator">></span> <span class="token function">queryPermissionsByGroup</span><span class="token punctuation">(</span>String group<span class="token punctuation">,</span>            <span class="token annotation punctuation">@PermissionInfoFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> NameNotFoundException<span class="token punctuation">;</span></code></pre><h3 id="2-4-12-getAllPermissionGroups"><a href="#2-4-12-getAllPermissionGroups" class="headerlink" title="2.4.12 getAllPermissionGroups"></a>2.4.12 getAllPermissionGroups</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Retrieve all of the known permission groups in the system.     *     * @param flags Additional option flags to modify the data returned.     * @return Returns a list of {@link PermissionGroupInfo} containing     *         information about all of the known permission groups.     *     * 检索出系统中所有已知的权限。     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> List<span class="token operator">&lt;</span>PermissionGroupInfo<span class="token operator">></span> <span class="token function">getAllPermissionGroups</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@PermissionGroupInfoFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当然除了上面列举出来的方法以外，还有其他很多方法，我们不再一一列出来，如果后面分析遇到会再单独拿出来分析！</p><h2 id="2-5-安装方法"><a href="#2-5-安装方法" class="headerlink" title="2.5 安装方法"></a>2.5 安装方法</h2><p>接下来我们来看看 PackageManager 中关于安装的几个方法！</p><h3 id="2-5-1-InstallPackage"><a href="#2-5-1-InstallPackage" class="headerlink" title="2.5.1 InstallPackage"></a>2.5.1 InstallPackage</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * packageURI：表示安装的路径，可以是 "file:" 或者 "content:" 的 URI     * observer：  一个回调的观察者，有了这个观察者，就可以在软件包安装完成后得到安装结果的通知。     *             如果安装完成会调用这个观察者 IPackageInstallObserver 的 packageInstalled(String，int)方法，observer这个入参不能为空。     * flags：     标志位参数     * nstallerPackageName：正在进行安装的安装包包名     */</span>    <span class="token comment" spellcheck="true">/**     * @deprecated replaced by {@link PackageInstaller}     * @hide     */</span>    <span class="token annotation punctuation">@Deprecated</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">installPackage</span><span class="token punctuation">(</span>      <span class="token comment" spellcheck="true">// 弃用</span>            Uri packageURI<span class="token punctuation">,</span>            IPackageInstallObserver observer<span class="token punctuation">,</span>            <span class="token annotation punctuation">@InstallFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>            String installerPackageName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @deprecated replaced by {@link PackageInstaller}     * @hide     */</span>    <span class="token annotation punctuation">@Deprecated</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">installPackage</span><span class="token punctuation">(</span>      <span class="token comment" spellcheck="true">// 弃用</span>            Uri packageURI<span class="token punctuation">,</span>            PackageInstallObserver observer<span class="token punctuation">,</span>            <span class="token annotation punctuation">@InstallFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>            String installerPackageName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>从 8.1 开始，已经弃用了 installPackage 方法（9.0 的代码中已经去除 installPackage 代码了），而是使用 PackageInstaller 执行应用的安装、升级和删除操作。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Return interface that offers the ability to install, upgrade, and remove     * applications on the device.     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token annotation punctuation">@NonNull</span> PackageInstaller <span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-5-2-installExistingPackage"><a href="#2-5-2-installExistingPackage" class="headerlink" title="2.5.2 installExistingPackage"></a>2.5.2 installExistingPackage</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * If there is already an application with the given package name installed     * on the system for other users, also install it for the calling user.     * @hide     */</span>    <span class="token annotation punctuation">@SystemApi</span>   <span class="token comment" spellcheck="true">// 系统 API</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">installExistingPackage</span><span class="token punctuation">(</span>String packageName<span class="token punctuation">)</span> <span class="token keyword">throws</span> NameNotFoundException<span class="token punctuation">;</span></code></pre><p>通过注释可以看出这个方法的用途：如果系统上已经安装相同包名的应用程序，则重复重新安装。</p><h2 id="2-6-具体实现类"><a href="#2-6-具体实现类" class="headerlink" title="2.6 具体实现类"></a>2.6 具体实现类</h2><p>我们知道 PackageManager 是一个抽象类，它里面很重要的方法都是抽象的，所以在具体执行的时候，肯定是它的实现子类，那么我们就来看下它的具体实现类。</p><p>前面我们讲解 PackageManager 类的时候，官网推荐获取 PackageManager 对象的方法是 Context 的 Context#getPackageManager() 方法，那我们来看下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// frameworks/base/core/java/android/content/Context.java</span>    <span class="token comment" spellcheck="true">/** Return PackageManager instance to find global package information. */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> PackageManager <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们知道 Context 也是一个抽象类，而它的 getPackageManager() 也是抽象方法，但 Context 的具体实现类是 ContextImpl，那我们就去 ContextImpl 里面看下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Common implementation of Context API, which provides the base * context object for Activity and other application components. * @hide */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextImpl</span> <span class="token keyword">extends</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> PackageManager mPackageManager<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PackageManager <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断 mPackageManager 是否为空，如果为空，则说明是第一次调用</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mPackageManager <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mPackageManager<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 调用 ActivityThread 的静态方法 getPackageManager() 获取一个 IPackageManager 对象</span>        IPackageManager pm <span class="token operator">=</span> ActivityThread<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果获取的 IPackageManager 对象不为空，则构造一个 ApplicationPackageManager 对象，ApplicationPackageManager 是 PackageManager 的子类</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pm <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Doesn't matter if we make more than one instance.</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>mPackageManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationPackageManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> pm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>所以，在我们平时调用 Context 的 getPackageManager()方法后，其实返回的是 ApplicationPackageManager 这个类。</p><h1 id="三、ApplicationPackageManager"><a href="#三、ApplicationPackageManager" class="headerlink" title="三、ApplicationPackageManager"></a>三、ApplicationPackageManager</h1><h2 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h2><p>我们先来看下 ApplicationPackageManager 类的源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** @hide */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationPackageManager</span> <span class="token keyword">extends</span> <span class="token class-name">PackageManager</span> <span class="token punctuation">{</span></code></pre><p>通过源码我们知道 ApplicationPackageManager 继承自PackageManager，而且 ApplicationPackageManager 类不是抽象的，所以 ApplicationPackageManager 必然实现了 PackageManager 的所有抽象方法。</p><h2 id="3-2-构造函数"><a href="#3-2-构造函数" class="headerlink" title="3.2 构造函数"></a>3.2 构造函数</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token function">ApplicationPackageManager</span><span class="token punctuation">(</span>ContextImpl context<span class="token punctuation">,</span> IPackageManager pm<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mContext <span class="token operator">=</span> context<span class="token punctuation">;</span>        mPM <span class="token operator">=</span> pm<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="3-3-InstallPackage"><a href="#3-3-InstallPackage" class="headerlink" title="3.3 InstallPackage"></a>3.3 InstallPackage</h2><p>在讲解 PackageManager 的时候，我们提到过安装 APK 会调用 InstallPackage 方法（Android 8.1，9.0 已弃用），我们看下在 ApplicationPackageManager 中的具体实现：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">installPackage</span><span class="token punctuation">(</span>Uri packageURI<span class="token punctuation">,</span> IPackageInstallObserver observer<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>                               String installerPackageName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">installCommon</span><span class="token punctuation">(</span>packageURI<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LegacyPackageInstallObserver</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">,</span> flags<span class="token punctuation">,</span>                installerPackageName<span class="token punctuation">,</span> mContext<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="3-4-installCommon"><a href="#3-4-installCommon" class="headerlink" title="3.4 installCommon"></a>3.4 installCommon</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码来自：Android 8.1，9.0 已弃用</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">installCommon</span><span class="token punctuation">(</span>Uri packageURI<span class="token punctuation">,</span>            PackageInstallObserver observer<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> String installerPackageName<span class="token punctuation">,</span>            <span class="token keyword">int</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// scheme 判断，如果非 "file" 则抛异常，因为只支持 file 格式的 URI</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"file"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>packageURI<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"Only file:// URIs are supported"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取相应的路径</span>        <span class="token keyword">final</span> String originPath <span class="token operator">=</span> packageURI<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用 installPackageAsUser 方法</span>            mPM<span class="token punctuation">.</span><span class="token function">installPackageAsUser</span><span class="token punctuation">(</span>originPath<span class="token punctuation">,</span> observer<span class="token punctuation">.</span><span class="token function">getBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> flags<span class="token punctuation">,</span> installerPackageName<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>可以发现，public abstract void installPackage() 方法其内部本质是调用的 IPackageManager 的 installPackageAsUser() 方法。</p><h1 id="四、IPackageManager"><a href="#四、IPackageManager" class="headerlink" title="四、IPackageManager"></a>四、IPackageManager</h1><h2 id="4-1-ActivityThread"><a href="#4-1-ActivityThread" class="headerlink" title="4.1 ActivityThread"></a>4.1 ActivityThread</h2><p>我们先来看看如下代码（上面没有分析）：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 调用 ActivityThread 的静态方法 getPackageManager() 获取一个 IPackageManager 对象</span>IPackageManager pm <span class="token operator">=</span> ActivityThread<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>跟踪 getPackageManager()：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">static</span> <span class="token keyword">volatile</span> IPackageManager sPackageManager<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> IPackageManager <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断 sPackageManager 是否为空，如果为空，则说明是的第一次调用，走第二步，如果不为空，则直接返回 sPackageManager</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sPackageManager <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> sPackageManager<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 能走到第二步，说明这是第一次调用，则调用 ServiceManager 的 getService(String) 方法获取一个 IBinder 对象</span>        IBinder b <span class="token operator">=</span> ServiceManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token string">"package"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用 IPackageManager.Stub.asInterface(IBinder) 获取一个 sPackageManager 对象</span>        sPackageManager <span class="token operator">=</span> IPackageManager<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sPackageManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="五、IPM-PM-PMS-三者关联"><a href="#五、IPM-PM-PMS-三者关联" class="headerlink" title="五、IPM/PM/PMS 三者关联"></a>五、IPM/PM/PMS 三者关联</h1><h2 id="5-1-APM-PMS-IPM"><a href="#5-1-APM-PMS-IPM" class="headerlink" title="5.1 APM/PMS/IPM"></a>5.1 APM/PMS/IPM</h2><p>在上面分析 ContextImpl 的 getPackageManager() 方法里面，我们知道：</p><pre class=" language-java"><code class="language-java">        IPackageManager pm <span class="token operator">=</span> ActivityThread<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pm <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Doesn't matter if we make more than one instance.</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>mPackageManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationPackageManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> pm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>而在 ActivityThread 的静态方法 getPackageManager() 里面：</p><pre class=" language-java"><code class="language-java">        sPackageManager <span class="token operator">=</span> IPackageManager<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sPackageManager<span class="token punctuation">;</span></code></pre><p>所以在 ApplicationPackageManager 里面的 mPM 其实就是 IPackageManager.Stub 内部类 Proxy 对象。</p><p>那对应的 IPackageManager.Stub 是什么？其实就是 <strong><font color="#FF0000">PackageManagerService.java</font></strong> 。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageManagerService</span> <span class="token keyword">extends</span> <span class="token class-name">IPackageManager<span class="token punctuation">.</span>Stub</span> <span class="token keyword">implements</span> <span class="token class-name">PackageSender</span> <span class="token punctuation">{</span></code></pre><p>如下图所示：<br><br></p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-74ae1197e39297b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5713484-3e75d4de4b56b02f.png"></center><h2 id="5-2-小结"><a href="#5-2-小结" class="headerlink" title="5.2 小结"></a>5.2 小结</h2><p>结合上面的知识，再结合 PackageManager、ApplicationPackageManager 和 PackageManagerService 总结如下：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ <strong>&nbsp;IPackageManager 负责通信</strong>：IPackageManager 接口类中定义了很多业务方法，但是由于安全等方面的考虑，Android 对外(即SDK)提供的仅仅是一个子集，该子集被封装在抽象类 PackageManager 中。客户端一般通过 Context 的 getPackageManager 函数返回一个类型为 PackageManager 的对象，该对象的实际类型是 PackageManager 的子类 ApplicationPackageManager 。ApplicationPackageManager 并没有直接参与 Binder 通信，而是通过 mPM 成员变量指向了一个 IPackageManager.Stub.Proxy 类型的对象。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ &nbsp;<strong>AIDL中 的 Binder 服务端是 PackageManagerService</strong>，因为 PackageManagerService 继承自 IPackageManager.Stub 。由于 IPackageManager.Stub 类从 Binder 派生，所以 PackageManagerService 将作为服务端参与 Binder 通信。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨ &nbsp;<strong>AIDL中 的 Binder 客户端是 ApplicationPackageManager 中成员变量 mPM</strong>，因为mPM内部指向的是 IPackageManager.Stub.Proxy。</p><p>整体流程的 Binder 结构大致如下：<br><br></p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-09c7bb4e6a03b74a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5713484-5bc8b7f82efd3cf3.png"></center><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 01. <a href="https://www.jianshu.com/p/c56376916d5e" target="_blank" rel="noopener">https://www.jianshu.com/p/c56376916d5e</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 02. <a href="https://www.jianshu.com/p/a301291ca845" target="_blank" rel="noopener">https://www.jianshu.com/p/a301291ca845</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PackageManager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Framework 核心服务之 PMS 钻研 ( 2 ) - 构造函数</title>
      <link href="/2018/12/05/android-kuang-jia-fu-wu-pian-shen-ru-yan-jiu-pms-xi-lie-2-zhi-gou-zao-han-shu/"/>
      <url>/2018/12/05/android-kuang-jia-fu-wu-pian-shen-ru-yan-jiu-pms-xi-lie-2-zhi-gou-zao-han-shu/</url>
      
        <content type="html"><![CDATA[<p><br></p><p><strong><center><font color="#3A5FCD" size="4">PackageManagerService 系列文章如下（基于 Android 9.0 源码）</font><center></center></center></strong><br></p><table><thead><tr><th style="text-align:center">&nbsp;</th><th style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（1）- 启动流程</font></a></th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（2）- 构造函数</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（3）- PackageManager</font></a></td></tr><tr><td style="text-align:center"><strong><font color="#EE2C2C" size="3">PackageManagerService</font></strong></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（4）- PackageInstaller</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（5）- APK 安装流程（1）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（6）- APK 安装流程（2）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（7）- PackageParser</font></a></td></tr></tbody></table><p><br></p><p><strong><font color="#3A5FCD" size="4">修订日志</font></strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">1、重新梳理 Android 9.0 源码中扫描系统 Apk 及非系统 Apk 的代码逻辑；</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">2、细化源码，添加更为详细的注释说明；</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">3、新增流程图及时序图；</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">4、博文格式，文章排版等优化；</font></p><p><br></p><hr><h1 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h1><h2 id="1-1-核心源码"><a href="#1-1-核心源码" class="headerlink" title="1.1 核心源码"></a>1.1 核心源码</h2><table><thead><tr><th>关键类</th><th>路径</th></tr></thead><tbody><tr><td><font color="#D15FEE">Process.java</font></td><td>frameworks/base/core/java/android/os/Process.java</td></tr><tr><td><font color="#D15FEE">Settings.java</font></td><td>frameworks/base/services/core/java/com/android/server/pm/Settings.java</td></tr><tr><td><font color="#D15FEE">SystemConfig.java</font></td><td>frameworks/base/core/java/com/android/server/SystemConfig.java</td></tr><tr><td><font color="#D15FEE">SystemServer.java</font></td><td>frameworks/base/services/java/com/android/server/SystemServer.java</td></tr><tr><td><font color="#D15FEE">PackageManagerService.java</font></td><td>frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</td></tr></tbody></table><p><br></p><h2 id="1-2-回顾"><a href="#1-2-回顾" class="headerlink" title="1.2 回顾"></a>1.2 回顾</h2><p>在系列第一篇文章中，我们将 PackageManagerService 分成了两部分研究，如下：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong><font color="#551A8B">🍁 &nbsp;构造函数（1） - 前期准备工作</font></strong>&nbsp;<strong><font color="#FF0000">（分析完）</font></strong><a href="https://superandroid.pro/2018/11/01/B_01.%20Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89%E4%B9%8B%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/">《Framework 核心服务之 PMS 钻研（1）- 启动流程》</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong><font color="#551A8B">🍁 &nbsp;构造函数（2） - 扫描 Package 和 扫尾工作</font></strong>&nbsp;<strong><font color="#FF0000">（本篇文章要讨论的内容）</font></strong><br><br></p><hr><h1 id="二、扫描-Package"><a href="#二、扫描-Package" class="headerlink" title="二、扫描 Package"></a>二、扫描 Package</h1><p>PMS 构造函数 <code>第二阶段</code>（我们前面分析的 <code>Settings 和 XML 解析作为构造函数的第一部分</code>）的工作就是 <code>扫描系统中的 APK</code>了。由于需要逐个扫描文件，因此手机上装的程序越多，PMS 的工作量就越大，系统启动速度也就越慢，这就是为什么你的手机启动速度有快慢的原因<strong><font color="#0000FF">（所以优化开机启动速度，了解 PMS 也是很关键的）</font></strong>。<br><br></p><h2 id="2-1-第一阶段剩余工作"><a href="#2-1-第一阶段剩余工作" class="headerlink" title="2.1 第一阶段剩余工作"></a>2.1 第一阶段剩余工作</h2><p>接着前面的 PMS 构造函数继续分析源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">PackageManagerService</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Installer installer<span class="token punctuation">,</span>        <span class="token keyword">boolean</span> factoryTest<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyCore<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mInstallLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// writer </span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mHandlerThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceThread</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span>                Process<span class="token punctuation">.</span>THREAD_PRIORITY_BACKGROUND<span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/*allowIo*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mHandlerThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageHandler</span><span class="token punctuation">(</span>mHandlerThread<span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mProcessLoggingHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessLoggingHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Watchdog<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addThread</span><span class="token punctuation">(</span>mHandler<span class="token punctuation">,</span> WATCHDOG_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>        mInstantAppRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstantAppRegistry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> libConfig <span class="token operator">=</span> systemConfig<span class="token punctuation">.</span><span class="token function">getSharedLibraries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> builtInLibCount <span class="token operator">=</span> libConfig<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> builtInLibCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String name <span class="token operator">=</span> libConfig<span class="token punctuation">.</span><span class="token function">keyAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            String path <span class="token operator">=</span> libConfig<span class="token punctuation">.</span><span class="token function">valueAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">addSharedLibraryLPw</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> null<span class="token punctuation">,</span> name<span class="token punctuation">,</span> SharedLibraryInfo<span class="token punctuation">.</span>VERSION_UNDEFINED<span class="token punctuation">,</span>                    SharedLibraryInfo<span class="token punctuation">.</span>TYPE_BUILTIN<span class="token punctuation">,</span> PLATFORM_PACKAGE_NAME<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        SELinuxMMAC<span class="token punctuation">.</span><span class="token function">readInstallPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FallbackCategoryProvider<span class="token punctuation">.</span><span class="token function">loadFallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mFirstBoot <span class="token operator">=</span> <span class="token operator">!</span>mSettings<span class="token punctuation">.</span><span class="token function">readLPw</span><span class="token punctuation">(</span>sUserManager<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> packageSettingCount <span class="token operator">=</span> mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 清理那些代码路径不存在的异常 package</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> packageSettingCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            PackageSetting ps <span class="token operator">=</span> mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">.</span><span class="token function">valueAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isExternal</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ps<span class="token punctuation">.</span>codePath <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>ps<span class="token punctuation">.</span>codePath<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token operator">&amp;&amp;</span> mSettings<span class="token punctuation">.</span><span class="token function">getDisabledSystemPkgLPr</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                mSettings<span class="token punctuation">.</span><span class="token function">enableSystemPackageLPw</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mFirstBoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">requestCopyPreoptedFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 设置模块来代替 framework-res.apk 中缺省的 ResolverActivity</span>        String customResolverActivity <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>                R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>config_customResolverActivity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>TextUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>customResolverActivity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            customResolverActivity <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mCustomResolverComponentName <span class="token operator">=</span> ComponentName<span class="token punctuation">.</span><span class="token function">unflattenFromString</span><span class="token punctuation">(</span>                    customResolverActivity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 记录扫描开始的时间</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 需要系统提前加载的一些 jar</span>        <span class="token keyword">final</span> String bootClassPath <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"BOOTCLASSPATH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String systemServerClassPath <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"SYSTEMSERVERCLASSPATH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bootClassPath <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"No BOOTCLASSPATH found!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>systemServerClassPath <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"No SYSTEMSERVERCLASSPATH found!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 至此，第一阶段代码全部结束！</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><br></p><h2 id="2-2-扫描系统-Package"><a href="#2-2-扫描系统-Package" class="headerlink" title="2.2 扫描系统 Package"></a>2.2 扫描系统 Package</h2><p>接下来看 PMS 第二阶段工作的核心内容，即 <code>扫描 Package</code>，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">PackageManagerService</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Installer installer<span class="token punctuation">,</span>        <span class="token keyword">boolean</span> factoryTest<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyCore<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>　　　　<span class="token comment" spellcheck="true">// 第一阶段分析结束！</span>    <span class="token comment" spellcheck="true">// 定义 frameworkDir 指向 /system/frameworks 目录</span>    File frameworkDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getRootDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"framework"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> VersionInfo ver <span class="token operator">=</span> mSettings<span class="token punctuation">.</span><span class="token function">getInternalVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mIsUpgrade <span class="token operator">=</span> <span class="token operator">!</span>Build<span class="token punctuation">.</span>FINGERPRINT<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ver<span class="token punctuation">.</span>fingerprint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mIsUpgrade<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">logCriticalInfo</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token string">"Upgrading from "</span> <span class="token operator">+</span>                         ver<span class="token punctuation">.</span>fingerprint <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> Build<span class="token punctuation">.</span>FINGERPRINT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mPromoteSystemApps <span class="token operator">=</span> mIsUpgrade <span class="token operator">&amp;&amp;</span> ver<span class="token punctuation">.</span>sdkVersion <span class="token operator">&lt;=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>LOLLIPOP_MR1<span class="token punctuation">;</span>    mIsPreNUpgrade <span class="token operator">=</span> mIsUpgrade <span class="token operator">&amp;&amp;</span> ver<span class="token punctuation">.</span>sdkVersion <span class="token operator">&lt;</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>N<span class="token punctuation">;</span>    mIsPreNMR1Upgrade <span class="token operator">=</span> mIsUpgrade <span class="token operator">&amp;&amp;</span> ver<span class="token punctuation">.</span>sdkVersion <span class="token operator">&lt;</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>N_MR1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否需要提升权限</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mPromoteSystemApps<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Iterator<span class="token operator">&lt;</span>PackageSetting<span class="token operator">></span> pkgSettingIter <span class="token operator">=</span> mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pkgSettingIter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            PackageSetting ps <span class="token operator">=</span> pkgSettingIter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSystemApp</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 遍历 Settings::mPackages 集合，将系统 APP 加入到</span>                <span class="token comment" spellcheck="true">// PackageManagerService::mExistingSystemPackages</span>                mExistingSystemPackages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    mCacheDir <span class="token operator">=</span> <span class="token function">preparePackageParserCache</span><span class="token punctuation">(</span>mIsUpgrade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义扫描参数</span>    <span class="token keyword">int</span> scanFlags <span class="token operator">=</span> SCAN_BOOTING <span class="token operator">|</span> SCAN_INITIAL<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mIsUpgrade <span class="token operator">||</span> mFirstBoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        scanFlags <span class="token operator">=</span> scanFlags <span class="token operator">|</span> SCAN_FIRST_BOOT_OR_UPGRADE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Collect vendor/product overlay packages. (Do this before scanning any apps.)</span>    <span class="token comment" spellcheck="true">// For security and version matching reason, only consider</span>    <span class="token comment" spellcheck="true">// overlay packages if they reside in the right directory.</span>    <span class="token comment" spellcheck="true">// private static final String VENDOR_OVERLAY_DIR = "/vendor/overlay";</span>    <span class="token function">scanDirTracedLI</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>VENDOR_OVERLAY_DIR<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 扫描 /vendor/overlay 目录</span>                    mDefParseFlags                    <span class="token operator">|</span> PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">,</span>                     scanFlags                    <span class="token operator">|</span> SCAN_AS_SYSTEM                    <span class="token operator">|</span> SCAN_AS_VENDOR<span class="token punctuation">,</span>                    <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// private static final String PRODUCT_OVERLAY_DIR = "/product/overlay";</span>    <span class="token function">scanDirTracedLI</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>PRODUCT_OVERLAY_DIR<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 扫描 /product/overlay 目录</span>                    mDefParseFlags                    <span class="token operator">|</span> PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">,</span>                     scanFlags                    <span class="token operator">|</span> SCAN_AS_SYSTEM                    <span class="token operator">|</span> SCAN_AS_PRODUCT<span class="token punctuation">,</span>                    <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mParallelPackageParserCallback<span class="token punctuation">.</span><span class="token function">findStaticOverlayPackages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Find base frameworks (resource packages without code).</span>    <span class="token function">scanDirTracedLI</span><span class="token punctuation">(</span>frameworkDir<span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true">// 扫描 /system/frameworks 目录</span>                    mDefParseFlags                    <span class="token operator">|</span> PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">,</span>                     scanFlags                    <span class="token operator">|</span> SCAN_NO_DEX                    <span class="token operator">|</span> SCAN_AS_SYSTEM                    <span class="token operator">|</span> SCAN_AS_PRIVILEGED<span class="token punctuation">,</span>                    <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Collected privileged system packages.</span>    <span class="token keyword">final</span> File privilegedAppDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getRootDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"priv-app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanDirTracedLI</span><span class="token punctuation">(</span>privilegedAppDir<span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true">// 扫描 /system/priv-app 目录</span>                    mDefParseFlags                    <span class="token operator">|</span> PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">,</span>                     scanFlags                    <span class="token operator">|</span> SCAN_AS_SYSTEM                    <span class="token operator">|</span> SCAN_AS_PRIVILEGED<span class="token punctuation">,</span>                    <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Collect ordinary system packages.</span>    <span class="token keyword">final</span> File systemAppDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getRootDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanDirTracedLI</span><span class="token punctuation">(</span>systemAppDir<span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true">// 扫描 /system/app 目录</span>                    mDefParseFlags                    <span class="token operator">|</span> PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">,</span>                     scanFlags                    <span class="token operator">|</span> SCAN_AS_SYSTEM<span class="token punctuation">,</span>                    <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// Collect ordinary vendor packages.</span>    File vendorAppDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getVendorDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        vendorAppDir <span class="token operator">=</span> vendorAppDir<span class="token punctuation">.</span><span class="token function">getCanonicalFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// failed to look up canonical path, continue with original one</span>    <span class="token punctuation">}</span>    <span class="token function">scanDirTracedLI</span><span class="token punctuation">(</span>vendorAppDir<span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true">// 扫描 /vendor/app 目录</span>                    mDefParseFlags                    <span class="token operator">|</span> PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">,</span>                    scanFlags                    <span class="token operator">|</span> SCAN_AS_SYSTEM                    <span class="token operator">|</span> SCAN_AS_VENDOR<span class="token punctuation">,</span>                    <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// Collect all OEM packages.</span>    <span class="token keyword">final</span> File oemAppDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getOemDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanDirTracedLI</span><span class="token punctuation">(</span>oemAppDir<span class="token punctuation">,</span>                         <span class="token comment" spellcheck="true">// 扫描 /oem/app 目录</span>                    mDefParseFlags                    <span class="token operator">|</span> PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">,</span>                     scanFlags                    <span class="token operator">|</span> SCAN_AS_SYSTEM                    <span class="token operator">|</span> SCAN_AS_OEM<span class="token punctuation">,</span>                    <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>｝</code></pre><p>由以上代码可知，PMS 扫描了很多目录，我们列举几个重点说明：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;<code>/system/frameworks</code> ：该目录中的文件都是系统库，例如：framework.jar、services.jar、framework-res.apk。不过 scanDirTracedLI 只扫描 APK 文件，所以 <code>framework-res.apk</code> 是该目录中唯一被扫描的文件。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;<code>/system/app</code> ：该目录下全是默认的系统应用。例如：Browser.apk、SettingsProvider.apk 等。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;<code>/vendor/app</code> ：该目录中的文件由厂商提供，即全是厂商特定的 APK 文件。<br><br></p><h3 id="2-2-1-scanDirTracedLI"><a href="#2-2-1-scanDirTracedLI" class="headerlink" title="2.2.1 scanDirTracedLI"></a>2.2.1 scanDirTracedLI</h3><p>PMS 扫描目录统一调用 <code>scanDirTracedLI</code> 方法，我们来跟踪源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scanDirTracedLI</span><span class="token punctuation">(</span>File scanDir<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> parseFlags<span class="token punctuation">,</span>                                           <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> <span class="token keyword">long</span> currentTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 跳转至 scanDirLI 方法</span>        <span class="token function">scanDirLI</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span> currentTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><br></p><h3 id="2-2-2-scanDirLI"><a href="#2-2-2-scanDirLI" class="headerlink" title="2.2.2 scanDirLI"></a>2.2.2 scanDirLI</h3><p>下面的重点就转移到 <code>scanDirLI</code> 方法了：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">scanDirLI</span><span class="token punctuation">(</span>File scanDir<span class="token punctuation">,</span> <span class="token keyword">int</span> parseFlags<span class="token punctuation">,</span> <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> <span class="token keyword">long</span> currentTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 扫描该目录下所有后缀为 .apk 的文件</span>    <span class="token keyword">final</span> File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> scanDir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ArrayUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"No files in app dir "</span> <span class="token operator">+</span> scanDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_PACKAGE_SCANNING<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Scanning app dir "</span> <span class="token operator">+</span> scanDir <span class="token operator">+</span> <span class="token string">" scanFlags="</span> <span class="token operator">+</span> scanFlags                <span class="token operator">+</span> <span class="token string">" flags=0x"</span> <span class="token operator">+</span> Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>parseFlags<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ParallelPackageParser 是 Android 9.0　新增的一个类，我们可以理解它其实就是一个队列，</span>    <span class="token comment" spellcheck="true">// 收集系统 apk 文件，然后从这个队列里面一个个取出 apk ，调用 PackageParser　解析！</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span>ParallelPackageParser parallelPackageParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParallelPackageParser</span><span class="token punctuation">(</span>            mSeparateProcesses<span class="token punctuation">,</span> mOnlyCore<span class="token punctuation">,</span> mMetrics<span class="token punctuation">,</span> mCacheDir<span class="token punctuation">,</span>            mParallelPackageParserCallback<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Submit files for parsing in parallel</span>        <span class="token keyword">int</span> fileCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> isPackage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">isApkFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">||</span> file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                       <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>PackageInstallerService<span class="token punctuation">.</span><span class="token function">isStageName</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 过滤掉非　apk　文件，如果不是则跳过继续扫描</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isPackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Ignore entries which are not packages</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            parallelPackageParser<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> parseFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>            fileCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Process results one by one</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> fileCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> fileCount<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ParallelPackageParser<span class="token punctuation">.</span>ParseResult parseResult <span class="token operator">=</span> parallelPackageParser<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Throwable throwable <span class="token operator">=</span> parseResult<span class="token punctuation">.</span>throwable<span class="token punctuation">;</span>            <span class="token keyword">int</span> errorCode <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>throwable <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Static shared libraries have synthetic package names</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parseResult<span class="token punctuation">.</span>pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span><span class="token function">isStaticSharedLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">renameStaticSharedLibraryPackage</span><span class="token punctuation">(</span>parseResult<span class="token punctuation">.</span>pkg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>errorCode <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">/*                         * Android 9.0 调用 scanPackageChildLI，                         * Android 8.0 调用 scanPackageLI，                         * Android 7.0 调用 scanPackageTracedLI，                         *                          * 调用 scanPackageChildLI 函数扫描一个特定的 apk 文件，                         * 返回值是 PackageParser 的内部类 Package，                         * 该类的实例代表一个 APK 文件，所以它就是和 apk 文件对应的数据结构。                         */</span>                        <span class="token function">scanPackageChildLI</span><span class="token punctuation">(</span>parseResult<span class="token punctuation">.</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span>                                currentTime<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageManagerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　  <span class="token comment" spellcheck="true">// 扫描APK过程中发生异常</span>                    errorCode <span class="token operator">=</span> e<span class="token punctuation">.</span>error<span class="token punctuation">;</span>                    Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to scan "</span> <span class="token operator">+</span> parseResult<span class="token punctuation">.</span>scanFile <span class="token operator">+</span> <span class="token string">": "</span>                                                               <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>throwable <span class="token keyword">instanceof</span> <span class="token class-name">PackageParser<span class="token punctuation">.</span>PackageParserException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                PackageParser<span class="token punctuation">.</span>PackageParserException e <span class="token operator">=</span>                                           <span class="token punctuation">(</span>PackageParser<span class="token punctuation">.</span>PackageParserException<span class="token punctuation">)</span>                        throwable<span class="token punctuation">;</span>                errorCode <span class="token operator">=</span> e<span class="token punctuation">.</span>error<span class="token punctuation">;</span>                Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to parse "</span> <span class="token operator">+</span> parseResult<span class="token punctuation">.</span>scanFile <span class="token operator">+</span> <span class="token string">": "</span>                                                            <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Unexpected exception occurred while parsing "</span>                        <span class="token operator">+</span> parseResult<span class="token punctuation">.</span>scanFile<span class="token punctuation">,</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Delete invalid userdata apps -- 如果解析失败，并且是非系统 apk</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>scanFlags <span class="token operator">&amp;</span> SCAN_AS_SYSTEM<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>                    errorCode <span class="token operator">!=</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 非系统 Package 扫描失败，删除文件</span>                <span class="token function">removeCodePathLI</span><span class="token punctuation">(</span>parseResult<span class="token punctuation">.</span>scanFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们看下 <code>ParallelPackageParser</code> 这个类：</p><h4 id="2-2-2-1-ParallelPackageParser"><a href="#2-2-2-1-ParallelPackageParser" class="headerlink" title="2.2.2.1 ParallelPackageParser"></a>2.2.2.1 ParallelPackageParser</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Helper class for parallel parsing of packages using {@link PackageParser}. * &lt;p>Parsing requests are processed by a thread-pool of {@link #MAX_THREADS}. * At any time, at most {@link #QUEUE_CAPACITY} results are kept in RAM&lt;/p> */</span><span class="token keyword">class</span> <span class="token class-name">ParallelPackageParser</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> BlockingQueue<span class="token operator">&lt;</span>ParseResult<span class="token operator">></span> mQueue <span class="token operator">=</span>                                              <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>QUEUE_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ParallelPackageParser</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> separateProcesses<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyCoreApps<span class="token punctuation">,</span>            DisplayMetrics metrics<span class="token punctuation">,</span> File cacheDir<span class="token punctuation">,</span> PackageParser<span class="token punctuation">.</span>Callback callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mSeparateProcesses <span class="token operator">=</span> separateProcesses<span class="token punctuation">;</span>        mOnlyCore <span class="token operator">=</span> onlyCoreApps<span class="token punctuation">;</span>        mMetrics <span class="token operator">=</span> metrics<span class="token punctuation">;</span>        mCacheDir <span class="token operator">=</span> cacheDir<span class="token punctuation">;</span>        mPackageParserCallback <span class="token operator">=</span> callback<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * Submits the file for parsing     * @param scanFile file to scan     * @param parseFlags parse falgs     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submit</span><span class="token punctuation">(</span>File scanFile<span class="token punctuation">,</span> <span class="token keyword">int</span> parseFlags<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            ParseResult pr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParseResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span>                              <span class="token string">"parallel parsePackage ["</span> <span class="token operator">+</span> scanFile <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                PackageParser pp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pp<span class="token punctuation">.</span><span class="token function">setSeparateProcesses</span><span class="token punctuation">(</span>mSeparateProcesses<span class="token punctuation">)</span><span class="token punctuation">;</span>                pp<span class="token punctuation">.</span><span class="token function">setOnlyCoreApps</span><span class="token punctuation">(</span>mOnlyCore<span class="token punctuation">)</span><span class="token punctuation">;</span>                pp<span class="token punctuation">.</span><span class="token function">setDisplayMetrics</span><span class="token punctuation">(</span>mMetrics<span class="token punctuation">)</span><span class="token punctuation">;</span>                pp<span class="token punctuation">.</span><span class="token function">setCacheDir</span><span class="token punctuation">(</span>mCacheDir<span class="token punctuation">)</span><span class="token punctuation">;</span>                pp<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span>mPackageParserCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>                pr<span class="token punctuation">.</span>scanFile <span class="token operator">=</span> scanFile<span class="token punctuation">;</span>                pr<span class="token punctuation">.</span>pkg <span class="token operator">=</span> <span class="token function">parsePackage</span><span class="token punctuation">(</span>pp<span class="token punctuation">,</span> scanFile<span class="token punctuation">,</span> parseFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                pr<span class="token punctuation">.</span>throwable <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                mQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>pr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Propagate result to callers of take().</span>                <span class="token comment" spellcheck="true">// This is helpful to prevent main thread from getting stuck waiting on</span>                <span class="token comment" spellcheck="true">// ParallelPackageParser to finish in case of interruption</span>                mInterruptedInThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>我们再看下 <code>ParseResult</code> ：</p><h4 id="2-2-2-2-ParseResult"><a href="#2-2-2-2-ParseResult" class="headerlink" title="2.2.2.2 ParseResult"></a>2.2.2.2 ParseResult</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Helper class for parallel parsing of packages using {@link PackageParser}. * &lt;p>Parsing requests are processed by a thread-pool of {@link #MAX_THREADS}. * At any time, at most {@link #QUEUE_CAPACITY} results are kept in RAM&lt;/p> */</span><span class="token keyword">class</span> <span class="token class-name">ParallelPackageParser</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">{</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ParseResult</span> <span class="token punctuation">{</span>        PackageParser<span class="token punctuation">.</span>Package pkg<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Parsed package</span>        File scanFile<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// File that was parsed</span>        Throwable throwable<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Set if an error occurs during parsing</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"ParseResult{"</span> <span class="token operator">+</span>　<span class="token string">"pkg="</span> <span class="token operator">+</span> pkg <span class="token operator">+</span>　<span class="token string">", scanFile="</span> <span class="token operator">+</span> scanFile <span class="token operator">+</span>                    <span class="token string">", throwable="</span> <span class="token operator">+</span> throwable <span class="token operator">+</span>　<span class="token string">'}'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Take the parsed package from the parsing queue, waiting if necessary until the element     * appears in the queue.     * @return parsed package     */</span>    <span class="token keyword">public</span> ParseResult <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mInterruptedInThread <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token string">"Interrupted in "</span> <span class="token operator">+</span> mInterruptedInThread<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> mQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// We cannot recover from interrupt here</span>            Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><br></p><h3 id="2-2-3-scanPackageChildLI"><a href="#2-2-3-scanPackageChildLI" class="headerlink" title="2.2.3 scanPackageChildLI"></a>2.2.3 scanPackageChildLI</h3><p>上面我们提高，如果 apk 文件没有问题，就是走如下的流程：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>errorCode <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*         * Android 9.0 调用 scanPackageChildLI，         * Android 8.0 调用 scanPackageLI，         * Android 7.0 调用 scanPackageTracedLI，         *          * 调用 scanPackageChildLI 函数扫描一个特定的 apk 文件，         * 返回值是 PackageParser 的内部类 Package，         * 该类的实例代表一个 APK 文件，所以它就是和 apk 文件对应的数据结构。         *         * PackageParser.Package pkg;    // Parsed package         */</span>        <span class="token function">scanPackageChildLI</span><span class="token punctuation">(</span>parseResult<span class="token punctuation">.</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span>　currentTime<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接下来的重点就是继续分析 <code>scanPackageChildLI</code> 方法了！</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  Scans a package and returns the newly parsed package.  *  扫描一个 apk 文件并返回 package！ *  @throws PackageManagerException on a parse error. */</span><span class="token keyword">private</span> PackageParser<span class="token punctuation">.</span>Package <span class="token function">scanPackageChildLI</span><span class="token punctuation">(</span>PackageParser<span class="token punctuation">.</span>Package pkg<span class="token punctuation">,</span>        <span class="token keyword">final</span> <span class="token annotation punctuation">@ParseFlags</span> <span class="token keyword">int</span> parseFlags<span class="token punctuation">,</span> <span class="token annotation punctuation">@ScanFlags</span> <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> <span class="token keyword">long</span> currentTime<span class="token punctuation">,</span>        <span class="token annotation punctuation">@Nullable</span> UserHandle user<span class="token punctuation">)</span> <span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>scanFlags <span class="token operator">&amp;</span> SCAN_CHECK_ONLY<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>childPackages <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> pkg<span class="token punctuation">.</span>childPackages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            scanFlags <span class="token operator">|=</span> SCAN_CHECK_ONLY<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        scanFlags <span class="token operator">&amp;=</span> <span class="token operator">~</span>SCAN_CHECK_ONLY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Scan the parent</span>    PackageParser<span class="token punctuation">.</span>Package scannedPkg <span class="token operator">=</span> <span class="token function">addForInitLI</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span>            scanFlags<span class="token punctuation">,</span> currentTime<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Scan the children</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> childCount <span class="token operator">=</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>childPackages <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> pkg<span class="token punctuation">.</span>childPackages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        PackageParser<span class="token punctuation">.</span>Package childPackage <span class="token operator">=</span> pkg<span class="token punctuation">.</span>childPackages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addForInitLI</span><span class="token punctuation">(</span>childPackage<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span>                currentTime<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>scanFlags <span class="token operator">&amp;</span> SCAN_CHECK_ONLY<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">scanPackageChildLI</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span> currentTime<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> scannedPkg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><br></p><h3 id="2-2-4-addForInitLI"><a href="#2-2-4-addForInitLI" class="headerlink" title="2.2.4 addForInitLI"></a>2.2.4 addForInitLI</h3><p>继续跟踪源码，调用 <code>addForInitLI</code>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> PackageParser<span class="token punctuation">.</span>Package <span class="token function">addForInitLI</span><span class="token punctuation">(</span>PackageParser<span class="token punctuation">.</span>Package pkg<span class="token punctuation">,</span>        <span class="token annotation punctuation">@ParseFlags</span> <span class="token keyword">int</span> parseFlags<span class="token punctuation">,</span> <span class="token annotation punctuation">@ScanFlags</span> <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> <span class="token keyword">long</span> currentTime<span class="token punctuation">,</span>        <span class="token annotation punctuation">@Nullable</span> UserHandle user<span class="token punctuation">)</span>　<span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> scanSystemPartition <span class="token operator">=</span> <span class="token punctuation">(</span>parseFlags <span class="token operator">&amp;</span> PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> String renamedPkgName<span class="token punctuation">;</span>    <span class="token keyword">final</span> PackageSetting disabledPkgSetting<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> isSystemPkgUpdated<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> pkgAlreadyExists<span class="token punctuation">;</span>    PackageSetting pkgSetting<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 判断系统 APk 是否需要更新</span>    <span class="token comment" spellcheck="true">// final ArrayMap&lt;String, PackageParser.Package> mPackages = </span>    <span class="token comment" spellcheck="true">//                        new ArrayMap&lt;String, PackageParser.Package>();</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        renamedPkgName <span class="token operator">=</span> mSettings<span class="token punctuation">.</span><span class="token function">getRenamedPackageLPr</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>mRealPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String realPkgName <span class="token operator">=</span> <span class="token function">getRealPackageName</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> renamedPkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>realPkgName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ensurePackageRenamed</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> renamedPkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> PackageSetting originalPkgSetting <span class="token operator">=</span>                                            <span class="token function">getOriginalPackageLocked</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> renamedPkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> PackageSetting installedPkgSetting <span class="token operator">=</span> mSettings<span class="token punctuation">.</span><span class="token function">getPackageLPr</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>        pkgSetting <span class="token operator">=</span> originalPkgSetting <span class="token operator">==</span> null <span class="token operator">?</span> installedPkgSetting <span class="token operator">:</span> originalPkgSetting<span class="token punctuation">;</span>        pkgAlreadyExists <span class="token operator">=</span> pkgSetting <span class="token operator">!=</span> null<span class="token punctuation">;</span>        <span class="token keyword">final</span> String disabledPkgName <span class="token operator">=</span> pkgAlreadyExists <span class="token operator">?</span> pkgSetting<span class="token punctuation">.</span>name <span class="token operator">:</span> pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">;</span>        disabledPkgSetting <span class="token operator">=</span> mSettings<span class="token punctuation">.</span><span class="token function">getDisabledSystemPkgLPr</span><span class="token punctuation">(</span>disabledPkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>        isSystemPkgUpdated <span class="token operator">=</span> disabledPkgSetting <span class="token operator">!=</span> null<span class="token punctuation">;</span>        <span class="token keyword">final</span> SharedUserSetting sharedUserSetting <span class="token operator">=</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>mSharedUserId <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token operator">?</span> mSettings<span class="token punctuation">.</span><span class="token function">getSharedUserLPw</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>mSharedUserId<span class="token punctuation">,</span>                        <span class="token number">0</span> <span class="token comment" spellcheck="true">/*pkgFlags*/</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">/*pkgPrivateFlags*/</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token operator">:</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scanSystemPartition<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isSystemPkgUpdated<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> scannedChildCount <span class="token operator">=</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>childPackages <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        <span class="token operator">?</span> pkg<span class="token punctuation">.</span>childPackages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> disabledChildCount <span class="token operator">=</span> disabledPkgSetting<span class="token punctuation">.</span>childPackageNames <span class="token operator">!=</span> null                        <span class="token operator">?</span> disabledPkgSetting<span class="token punctuation">.</span>childPackageNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> disabledChildCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　                String disabledChildPackageName <span class="token operator">=</span>                            disabledPkgSetting<span class="token punctuation">.</span>childPackageNames<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">boolean</span> disabledPackageAvailable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> scannedChildCount<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        PackageParser<span class="token punctuation">.</span>Package childPkg <span class="token operator">=</span> pkg<span class="token punctuation">.</span>childPackages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>childPkg<span class="token punctuation">.</span>packageName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>disabledChildPackageName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            disabledPackageAvailable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>disabledPackageAvailable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mSettings<span class="token punctuation">.</span><span class="token function">removeDisabledSystemPackageLPw</span><span class="token punctuation">(</span>disabledChildPackageName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// we're updating the disabled package, so, scan it as the package setting</span>                <span class="token keyword">final</span> ScanRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScanRequest</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> sharedUserSetting<span class="token punctuation">,</span> null<span class="token punctuation">,</span>                        disabledPkgSetting <span class="token comment" spellcheck="true">/* pkgSetting */</span><span class="token punctuation">,</span> null <span class="token comment" spellcheck="true">/* disabledPkgSetting */</span><span class="token punctuation">,</span>                        null <span class="token comment" spellcheck="true">/* originalPkgSetting */</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span>                        <span class="token punctuation">(</span>pkg <span class="token operator">==</span> mPlatformPackage<span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">applyPolicy</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span> mPlatformPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">scanPackageOnlyLI</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> mFactoryTest<span class="token punctuation">,</span> <span class="token operator">-</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> newPkgChangedPaths <span class="token operator">=</span>            pkgAlreadyExists <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>pkgSetting<span class="token punctuation">.</span>codePathString<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>codePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> newPkgVersionGreater <span class="token operator">=</span>            pkgAlreadyExists <span class="token operator">&amp;&amp;</span> pkg<span class="token punctuation">.</span><span class="token function">getLongVersionCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> pkgSetting<span class="token punctuation">.</span>versionCode<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> isSystemPkgBetter <span class="token operator">=</span> scanSystemPartition <span class="token operator">&amp;&amp;</span> isSystemPkgUpdated            <span class="token operator">&amp;&amp;</span> newPkgChangedPaths <span class="token operator">&amp;&amp;</span> newPkgVersionGreater<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isSystemPkgBetter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 更新安装包到系统分区中</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 从 PackageManagerService 的安装包列表中删除该包</span>            mPackages<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>pkgSetting<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建安装参数 InstallArgs</span>        <span class="token keyword">final</span> InstallArgs args <span class="token operator">=</span> <span class="token function">createInstallArgsForExisting</span><span class="token punctuation">(</span>                <span class="token function">packageFlagsToInstallFlags</span><span class="token punctuation">(</span>pkgSetting<span class="token punctuation">)</span><span class="token punctuation">,</span> pkgSetting<span class="token punctuation">.</span>codePathString<span class="token punctuation">,</span>                pkgSetting<span class="token punctuation">.</span>resourcePathString<span class="token punctuation">,</span> <span class="token function">getAppDexInstructionSets</span><span class="token punctuation">(</span>pkgSetting<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        args<span class="token punctuation">.</span><span class="token function">cleanUpResourcesLI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mSettings<span class="token punctuation">.</span><span class="token function">enableSystemPackageLPw</span><span class="token punctuation">(</span>pkgSetting<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 安装包校验</span>    <span class="token function">collectCertificatesLI</span><span class="token punctuation">(</span>pkgSetting<span class="token punctuation">,</span> pkg<span class="token punctuation">,</span> forceCollect<span class="token punctuation">,</span> skipVerify<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * A new system app appeared, but we already had a non-system one of the     * same name installed earlier.     *     * 当我们安装一个系统 apk 的时候，发现已经有了一个相同包名的 apk，     * 而且这个相同包名 apk 是在非系统的分区中     */</span>    <span class="token keyword">boolean</span> shouldHideSystemApp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// A new application appeared on /system, but, we already have a copy of</span>    <span class="token comment" spellcheck="true">// the application installed on /data.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>scanSystemPartition <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isSystemPkgUpdated <span class="token operator">&amp;&amp;</span> pkgAlreadyExists            <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>pkgSetting<span class="token punctuation">.</span><span class="token function">isSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pkg<span class="token punctuation">.</span>mSigningDetails<span class="token punctuation">.</span><span class="token function">checkCapability</span><span class="token punctuation">(</span>pkgSetting<span class="token punctuation">.</span>signatures<span class="token punctuation">.</span>mSigningDetails<span class="token punctuation">,</span>                PackageParser<span class="token punctuation">.</span>SigningDetails<span class="token punctuation">.</span>CertCapabilities<span class="token punctuation">.</span>INSTALLED_DATA<span class="token punctuation">)</span>                        <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>pkgSetting<span class="token punctuation">.</span>signatures<span class="token punctuation">.</span>mSigningDetails<span class="token punctuation">.</span><span class="token function">checkCapability</span><span class="token punctuation">(</span>                                pkg<span class="token punctuation">.</span>mSigningDetails<span class="token punctuation">,</span>                                PackageParser<span class="token punctuation">.</span>SigningDetails<span class="token punctuation">.</span>CertCapabilities<span class="token punctuation">.</span>ROLLBACK<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">logCriticalInfo</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>WARN<span class="token punctuation">,</span> <span class="token string">"System package signature mismatch;"</span>                                           <span class="token operator">+</span> <span class="token string">" name: "</span> <span class="token operator">+</span> pkgSetting<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">(</span>PackageFreezer freezer <span class="token operator">=</span> <span class="token function">freezePackage</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                    <span class="token string">"scanPackageInternalLI"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果两个 apk 签名不匹配，则调用 deletePackageLI 方法清除 apk 文件及其数据</span>                <span class="token function">deletePackageLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            pkgSetting <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newPkgVersionGreater<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// The application on /system is newer than the application on /data.</span>            <span class="token comment" spellcheck="true">// Simply remove the application on /data [keeping application data]</span>            <span class="token comment" spellcheck="true">// and replace it with the version on /system.</span>            <span class="token function">logCriticalInfo</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>WARN<span class="token punctuation">,</span> <span class="token string">"System package enabled;"</span> <span class="token operator">+</span> <span class="token string">" name: "</span> <span class="token operator">+</span> pkgSetting<span class="token punctuation">.</span>name                    <span class="token operator">+</span> <span class="token string">"; "</span> <span class="token operator">+</span> pkgSetting<span class="token punctuation">.</span>versionCode <span class="token operator">+</span> <span class="token string">" --> "</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span><span class="token function">getLongVersionCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">+</span> <span class="token string">"; "</span> <span class="token operator">+</span> pkgSetting<span class="token punctuation">.</span>codePathString <span class="token operator">+</span> <span class="token string">" --> "</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span>codePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 更新系统 apk 程序</span>            InstallArgs args <span class="token operator">=</span> <span class="token function">createInstallArgsForExisting</span><span class="token punctuation">(</span>                    <span class="token function">packageFlagsToInstallFlags</span><span class="token punctuation">(</span>pkgSetting<span class="token punctuation">)</span><span class="token punctuation">,</span> pkgSetting<span class="token punctuation">.</span>codePathString<span class="token punctuation">,</span>                    pkgSetting<span class="token punctuation">.</span>resourcePathString<span class="token punctuation">,</span> <span class="token function">getAppDexInstructionSets</span><span class="token punctuation">(</span>pkgSetting<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mInstallLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                args<span class="token punctuation">.</span><span class="token function">cleanUpResourcesLI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// The application on /system is older than the application on /data. Hide</span>            <span class="token comment" spellcheck="true">// the application on /system and the version on /data will be scanned later</span>            <span class="token comment" spellcheck="true">// and re-added like an update.</span>            shouldHideSystemApp <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">logCriticalInfo</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span>                    <span class="token string">"System package disabled;"</span>                    <span class="token operator">+</span> <span class="token string">" name: "</span> <span class="token operator">+</span> pkgSetting<span class="token punctuation">.</span>name                    <span class="token operator">+</span> <span class="token string">"; old: "</span> <span class="token operator">+</span> pkgSetting<span class="token punctuation">.</span>codePathString <span class="token operator">+</span> <span class="token string">" @ "</span> <span class="token operator">+</span> pkgSetting<span class="token punctuation">.</span>versionCode                    <span class="token operator">+</span> <span class="token string">"; new: "</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span>codePath <span class="token operator">+</span> <span class="token string">" @ "</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span>codePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> PackageParser<span class="token punctuation">.</span>Package scannedPkg <span class="token operator">=</span> <span class="token function">scanPackageNewLI</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags            <span class="token operator">|</span> SCAN_UPDATE_SIGNATURE<span class="token punctuation">,</span> currentTime<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果新安装的系统APP 会被旧的APP数据覆盖，所以需要隐藏隐藏系统应用程序，并重新扫描/data/app目录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldHideSystemApp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mSettings<span class="token punctuation">.</span><span class="token function">disableSystemPackageLPw</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> scannedPkg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><br></p><h3 id="2-2-5-scanPackageNewLI"><a href="#2-2-5-scanPackageNewLI" class="headerlink" title="2.2.5 scanPackageNewLI"></a>2.2.5 scanPackageNewLI</h3><p>我们再来看看 <code>scanPackageNewLI</code> 源码：开始解析 PackageParser.Package ！</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> PackageParser<span class="token punctuation">.</span>Package <span class="token function">scanPackageNewLI</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> PackageParser<span class="token punctuation">.</span>Package pkg<span class="token punctuation">,</span>        <span class="token keyword">final</span> <span class="token annotation punctuation">@ParseFlags</span> <span class="token keyword">int</span> parseFlags<span class="token punctuation">,</span> <span class="token annotation punctuation">@ScanFlags</span> <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> <span class="token keyword">long</span> currentTime<span class="token punctuation">,</span>        <span class="token annotation punctuation">@Nullable</span> UserHandle user<span class="token punctuation">)</span> <span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>    <span class="token keyword">final</span> String renamedPkgName <span class="token operator">=</span> mSettings<span class="token punctuation">.</span><span class="token function">getRenamedPackageLPr</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>mRealPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> String realPkgName <span class="token operator">=</span> <span class="token function">getRealPackageName</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> renamedPkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>realPkgName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensurePackageRenamed</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> renamedPkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> PackageSetting originalPkgSetting <span class="token operator">=</span>                                            <span class="token function">getOriginalPackageLocked</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> renamedPkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> PackageSetting pkgSetting <span class="token operator">=</span> mSettings<span class="token punctuation">.</span><span class="token function">getPackageLPr</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> PackageSetting disabledPkgSetting <span class="token operator">=</span>                         mSettings<span class="token punctuation">.</span><span class="token function">getDisabledSystemPkgLPr</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mTransferedPackages<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Package "</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span>packageName                <span class="token operator">+</span> <span class="token string">" was transferred to another, but its .apk remains"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    scanFlags <span class="token operator">=</span> <span class="token function">adjustScanFlags</span><span class="token punctuation">(</span>scanFlags<span class="token punctuation">,</span> pkgSetting<span class="token punctuation">,</span> disabledPkgSetting<span class="token punctuation">,</span> user<span class="token punctuation">,</span> pkg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">applyPolicy</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span> mPlatformPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertPackageIsValid</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>        SharedUserSetting sharedUserSetting <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>mSharedUserId <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// SIDE EFFECTS; may potentially allocate a new shared user</span>            sharedUserSetting <span class="token operator">=</span> mSettings<span class="token punctuation">.</span><span class="token function">getSharedUserLPw</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>mSharedUserId<span class="token punctuation">,</span>                            <span class="token number">0</span> <span class="token comment" spellcheck="true">/*pkgFlags*/</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">/*pkgPrivateFlags*/</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/*create*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_PACKAGE_SCANNING<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>parseFlags <span class="token operator">&amp;</span> PackageParser<span class="token punctuation">.</span>PARSE_CHATTY<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Shared UserID "</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span>mSharedUserId                            <span class="token operator">+</span> <span class="token string">" (uid="</span> <span class="token operator">+</span> sharedUserSetting<span class="token punctuation">.</span>userId <span class="token operator">+</span> <span class="token string">"):"</span>                            <span class="token operator">+</span> <span class="token string">" packages="</span> <span class="token operator">+</span> sharedUserSetting<span class="token punctuation">.</span>packages<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> scanSucceeded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> ScanRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScanRequest</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> sharedUserSetting<span class="token punctuation">,</span>                    pkgSetting <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> pkgSetting<span class="token punctuation">.</span>pkg<span class="token punctuation">,</span> pkgSetting<span class="token punctuation">,</span>                     disabledPkgSetting<span class="token punctuation">,</span> originalPkgSetting<span class="token punctuation">,</span> realPkgName<span class="token punctuation">,</span> parseFlags<span class="token punctuation">,</span>                     scanFlags<span class="token punctuation">,</span> <span class="token punctuation">(</span>pkg <span class="token operator">==</span> mPlatformPackage<span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> ScanResult result <span class="token operator">=</span> <span class="token function">scanPackageOnlyLI</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> mFactoryTest<span class="token punctuation">,</span> currentTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 将 pkg 中的数据保存到对应的 PMS 变量中，用于以后的管理查询调用等</span>                <span class="token function">commitScanResultsLocked</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            scanSucceeded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scanSucceeded <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>scanFlags <span class="token operator">&amp;</span> SCAN_DELETE_DATA_ON_FAILURES<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// DELETE_DATA_ON_FAILURES is only used by frozen paths</span>                  <span class="token function">destroyAppDataLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>USER_ALL<span class="token punctuation">,</span>                          StorageManager<span class="token punctuation">.</span>FLAG_STORAGE_DE <span class="token operator">|</span> StorageManager<span class="token punctuation">.</span>FLAG_STORAGE_CE<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">destroyAppProfilesLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>USER_ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pkg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><br></p><h3 id="2-2-5-commitScanResultsLocked"><a href="#2-2-5-commitScanResultsLocked" class="headerlink" title="2.2.5 commitScanResultsLocked"></a>2.2.5 commitScanResultsLocked</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GuardedBy</span><span class="token punctuation">(</span><span class="token string">"mPackages"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">commitScanResultsLocked</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ScanRequest request<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> ScanResult result<span class="token punctuation">)</span>        <span class="token keyword">throws</span> PackageManagerException <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>scanFlags <span class="token operator">&amp;</span> SCAN_CHECK_ONLY<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldPkgSetting <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>oldPkgSetting<span class="token punctuation">.</span>name<span class="token punctuation">,</span> oldPkgSetting<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> userId <span class="token operator">=</span> user <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> user<span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Modify state for the given package setting</span>        <span class="token comment" spellcheck="true">// 将 pkg 中的数据保存到对应的 PMS 变量中，用于以后的管理查询调用等</span>        <span class="token function">commitPackageSettings</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> oldPkg<span class="token punctuation">,</span> pkgSetting<span class="token punctuation">,</span> user<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span>                <span class="token punctuation">(</span>parseFlags <span class="token operator">&amp;</span> PackageParser<span class="token punctuation">.</span>PARSE_CHATTY<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">/*chatty*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pkgSetting<span class="token punctuation">.</span><span class="token function">getInstantApp</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mInstantAppRegistry<span class="token punctuation">.</span><span class="token function">addInstantAppLPw</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> pkgSetting<span class="token punctuation">.</span>appId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><br></p><h3 id="2-2-6-commitPackageSettings"><a href="#2-2-6-commitPackageSettings" class="headerlink" title="2.2.6 commitPackageSettings"></a>2.2.6 commitPackageSettings</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Adds a scanned package to the system. When this method is finished, the package will * be available for query, resolution, etc... */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">commitPackageSettings</span><span class="token punctuation">(</span>PackageParser<span class="token punctuation">.</span>Package pkg<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Nullable</span> PackageParser<span class="token punctuation">.</span>Package oldPkg<span class="token punctuation">,</span> PackageSetting pkgSetting<span class="token punctuation">,</span>             UserHandle user<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token annotation punctuation">@ScanFlags</span> <span class="token keyword">int</span> scanFlags<span class="token punctuation">,</span> <span class="token keyword">boolean</span> chatty<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> String pkgName <span class="token operator">=</span> pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// mCustomResolverComponentName 是从系统资源中读出的，可以配置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mCustomResolverComponentName <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span>                mCustomResolverComponentName<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里的用途和下面判断 packageName 是否为 "android" 有联系，</span>        <span class="token comment" spellcheck="true">// 因为调用 setUpCustomResolverActivity(pkg) 后 mResolverReplaced 为true</span>        <span class="token function">setUpCustomResolverActivity</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 针对包名为 "android" 的 apk 进行处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"android"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>scanFlags <span class="token operator">&amp;</span> SCAN_CHECK_ONLY<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Set up information for our fall-back user intent resolution activity.</span>                <span class="token comment" spellcheck="true">// 为我们回退的页面配置信息</span>                mPlatformPackage <span class="token operator">=</span> pkg<span class="token punctuation">;</span>                pkg<span class="token punctuation">.</span>mVersionCode <span class="token operator">=</span> mSdkVersion<span class="token punctuation">;</span>                pkg<span class="token punctuation">.</span>mVersionCodeMajor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                mAndroidApplication <span class="token operator">=</span> pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果上面的代码中调用了 setUpCustomResolverActivity 方法，</span>                <span class="token comment" spellcheck="true">// 在 setUpCustomResolverActivity 方法里面设置了 mResolverReplaced = true</span>                <span class="token comment" spellcheck="true">// 如果没有调用 setUpCustomResolverActivity 方法，配置相应 mResolveActivity 的属性</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mResolverReplaced<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mResolveActivity<span class="token punctuation">.</span>applicationInfo <span class="token operator">=</span> mAndroidApplication<span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>name <span class="token operator">=</span> ResolverActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>packageName <span class="token operator">=</span> mAndroidApplication<span class="token punctuation">.</span>packageName<span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>processName <span class="token operator">=</span> <span class="token string">"system:ui"</span><span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>launchMode <span class="token operator">=</span> ActivityInfo<span class="token punctuation">.</span>LAUNCH_MULTIPLE<span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>documentLaunchMode <span class="token operator">=</span> ActivityInfo<span class="token punctuation">.</span>DOCUMENT_LAUNCH_NEVER<span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>flags <span class="token operator">=</span> ActivityInfo<span class="token punctuation">.</span>FLAG_EXCLUDE_FROM_RECENTS<span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>theme <span class="token operator">=</span> R<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Theme_Material_Dialog_Alert<span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>exported <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>resizeMode <span class="token operator">=</span> ActivityInfo<span class="token punctuation">.</span>RESIZE_MODE_RESIZEABLE<span class="token punctuation">;</span>                    mResolveActivity<span class="token punctuation">.</span>configChanges <span class="token operator">=</span> ActivityInfo<span class="token punctuation">.</span>CONFIG_SCREEN_SIZE                            <span class="token operator">|</span> ActivityInfo<span class="token punctuation">.</span>CONFIG_SMALLEST_SCREEN_SIZE                            <span class="token operator">|</span> ActivityInfo<span class="token punctuation">.</span>CONFIG_SCREEN_LAYOUT                            <span class="token operator">|</span> ActivityInfo<span class="token punctuation">.</span>CONFIG_ORIENTATION                            <span class="token operator">|</span> ActivityInfo<span class="token punctuation">.</span>CONFIG_KEYBOARD                            <span class="token operator">|</span> ActivityInfo<span class="token punctuation">.</span>CONFIG_KEYBOARD_HIDDEN<span class="token punctuation">;</span>                    mResolveInfo<span class="token punctuation">.</span>activityInfo <span class="token operator">=</span> mResolveActivity<span class="token punctuation">;</span>                    mResolveInfo<span class="token punctuation">.</span>priority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    mResolveInfo<span class="token punctuation">.</span>preferredOrder <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    mResolveInfo<span class="token punctuation">.</span>match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    mResolveComponentName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span>                             mAndroidApplication<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> mResolveActivity<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 在此之前，四大组件的信息都是 Package 对象的私有变量，通过下面的代码，</span>        <span class="token comment" spellcheck="true">// 将他们注册到 PackageManagerService 里面，这样 PackageManagerService 就有了所有的组件信息</span>        <span class="token keyword">int</span> N <span class="token operator">=</span> pkg<span class="token punctuation">.</span>providers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder r <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册 pkg 里面的 provider 到 PackageManagerService 上的 mProvider 上</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            PackageParser<span class="token punctuation">.</span>Provider p <span class="token operator">=</span> pkg<span class="token punctuation">.</span>providers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置进程名称，如果在 AndroidManifest 里面配置了进程名称，就以配置为准，</span>            <span class="token comment" spellcheck="true">// 如果没有配置，就是默认包名</span>            p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>processName <span class="token operator">=</span> <span class="token function">fixProcessName</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>processName<span class="token punctuation">,</span>                        p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>processName<span class="token punctuation">)</span><span class="token punctuation">;</span>            mProviders<span class="token punctuation">.</span><span class="token function">addProvider</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span>syncable <span class="token operator">=</span> p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>isSyncable<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>authority <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String names<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>authority<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>authority <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> names<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>syncable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageParser<span class="token punctuation">.</span>Provider</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                        p<span class="token punctuation">.</span>syncable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mProvidersByAuthority<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mProvidersByAuthority<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>authority <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>authority <span class="token operator">=</span> names<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>authority <span class="token operator">=</span> p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>authority <span class="token operator">+</span> <span class="token string">";"</span> <span class="token operator">+</span> names<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        PackageParser<span class="token punctuation">.</span>Provider other <span class="token operator">=</span> mProvidersByAuthority<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>chatty<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    r<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                r<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 注册该 Package 中的 service 到 PackageManagerService 的 mServices 上</span>        N <span class="token operator">=</span> pkg<span class="token punctuation">.</span>services<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            mServices<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 注册 pkg 里面的 receiver 到 PackageManagerService 上的 mReceivers 上</span>        N <span class="token operator">=</span> pkg<span class="token punctuation">.</span>receivers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            mReceivers<span class="token punctuation">.</span><span class="token function">addActivity</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"receiver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 注册 pkg 里面的 activity 到 PackageManagerService 上的 mActivities 上</span>        N <span class="token operator">=</span> pkg<span class="token punctuation">.</span>activities<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            mActivities<span class="token punctuation">.</span><span class="token function">addActivity</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"activity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Don't allow ephemeral applications to define new permissions groups.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>scanFlags <span class="token operator">&amp;</span> SCAN_AS_INSTANT_APP<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Permission groups from package "</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span>packageName                    <span class="token operator">+</span> <span class="token string">" ignored: instant apps cannot define new permission groups."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mPermissionManager<span class="token punctuation">.</span><span class="token function">addAllPermissionGroups</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> chatty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Don't allow ephemeral applications to define new permissions.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>scanFlags <span class="token operator">&amp;</span> SCAN_AS_INSTANT_APP<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Permissions from package "</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span>packageName                    <span class="token operator">+</span> <span class="token string">" ignored: instant apps cannot define new permissions."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mPermissionManager<span class="token punctuation">.</span><span class="token function">addAllPermissions</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> chatty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//  注册 pkg 里面的 instrumentation 到 PackageManagerService 的 mInstrumentation 中</span>        <span class="token comment" spellcheck="true">// Instrumentation 用来跟踪本应用内的 application 及 activity 的生命周期</span>        N <span class="token operator">=</span> pkg<span class="token punctuation">.</span>instrumentation<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            PackageParser<span class="token punctuation">.</span>Instrumentation a <span class="token operator">=</span> pkg<span class="token punctuation">.</span>instrumentation<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span>info<span class="token punctuation">.</span>packageName <span class="token operator">=</span> pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">;</span>            a<span class="token punctuation">.</span>info<span class="token punctuation">.</span>sourceDir <span class="token operator">=</span> pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>sourceDir<span class="token punctuation">;</span>            a<span class="token punctuation">.</span>info<span class="token punctuation">.</span>publicSourceDir <span class="token operator">=</span> pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>publicSourceDir<span class="token punctuation">;</span>            a<span class="token punctuation">.</span>info<span class="token punctuation">.</span>splitNames <span class="token operator">=</span> pkg<span class="token punctuation">.</span>splitNames<span class="token punctuation">;</span>            a<span class="token punctuation">.</span>info<span class="token punctuation">.</span>splitSourceDirs <span class="token operator">=</span> pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>splitSourceDirs<span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            mInstrumentation<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getComponentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果有包内广播</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>protectedBroadcasts <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            N <span class="token operator">=</span> pkg<span class="token punctuation">.</span>protectedBroadcasts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mProtectedBroadcasts<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mProtectedBroadcasts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>protectedBroadcasts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><br></p><h2 id="2-3-扫描非系统-Package"><a href="#2-3-扫描非系统-Package" class="headerlink" title="2.3 扫描非系统 Package"></a>2.3 扫描非系统 Package</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*  * mOnlyCore 用于控制是否扫描非系统 Package */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mOnlyCore<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do this first before mucking with mPackages for the "expecting better" case</span>    <span class="token keyword">final</span> Iterator<span class="token operator">&lt;</span>PackageParser<span class="token punctuation">.</span>Package<span class="token operator">></span> pkgIterator <span class="token operator">=</span> mPackages<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pkgIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> PackageParser<span class="token punctuation">.</span>Package pkg <span class="token operator">=</span> pkgIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>isStub<span class="token punctuation">)</span> <span class="token punctuation">{</span>            stubSystemApps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> Iterator<span class="token operator">&lt;</span>PackageSetting<span class="token operator">></span> psit <span class="token operator">=</span> mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>psit<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        PackageSetting ps <span class="token operator">=</span> psit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * If this is not a system app, it can't be a         * disable system app.         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>pkgFlags <span class="token operator">&amp;</span> ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*         * If the package is scanned, it's not erased.         */</span>        <span class="token keyword">final</span> PackageParser<span class="token punctuation">.</span>Package scannedPkg <span class="token operator">=</span> mPackages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scannedPkg <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mSettings<span class="token punctuation">.</span><span class="token function">isDisabledSystemPackageLPr</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">removePackageLI</span><span class="token punctuation">(</span>scannedPkg<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mExpectingBetter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>name<span class="token punctuation">,</span> ps<span class="token punctuation">.</span>codePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mSettings<span class="token punctuation">.</span><span class="token function">isDisabledSystemPackageLPr</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            psit<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> PackageSetting disabledPs <span class="token operator">=</span>                    mSettings<span class="token punctuation">.</span><span class="token function">getDisabledSystemPkgLPr</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>disabledPs<span class="token punctuation">.</span>codePath <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>disabledPs<span class="token punctuation">.</span>codePath<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">||</span> disabledPs<span class="token punctuation">.</span>pkg <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                possiblyDeletedUpdatedSystemApps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mOnlyCore<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 扫描 /data/app 目录</span>    <span class="token function">scanDirTracedLI</span><span class="token punctuation">(</span>mAppInstallDir<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> scanFlags <span class="token operator">|</span> SCAN_REQUIRE_KNOWN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 扫描 /data/app-private 目录</span>    <span class="token function">scanDirTracedLI</span><span class="token punctuation">(</span>mDrmAppPrivateInstallDir<span class="token punctuation">,</span> mDefParseFlags            <span class="token operator">|</span> PackageParser<span class="token punctuation">.</span>PARSE_FORWARD_LOCK<span class="token punctuation">,</span>            scanFlags <span class="token operator">|</span> SCAN_REQUIRE_KNOWN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里检查用户目录下升级文件是否还存在，然后进行处理</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String deletedAppName <span class="token operator">:</span> possiblyDeletedUpdatedSystemApps<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PackageParser<span class="token punctuation">.</span>Package deletedPkg <span class="token operator">=</span> mPackages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>deletedAppName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从 mSettings.mDisabledSysPackages 变量中移除去此应用</span>        mSettings<span class="token punctuation">.</span><span class="token function">removeDisabledSystemPackageLPw</span><span class="token punctuation">(</span>deletedAppName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String msg<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用户目录中也没有升级包，则肯定是残留的应用信息，则把它的数据目录删除掉</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>deletedPkg <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            msg <span class="token operator">=</span> <span class="token string">"Updated system package "</span> <span class="token operator">+</span> deletedAppName                    <span class="token operator">+</span> <span class="token string">" no longer exists; removing its data"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果在用户空间找到了文件，则说明系统目录下的文件可能被删除了，</span>        <span class="token comment" spellcheck="true">// 因此，把应用的系统属性去掉，以普通应用的方式运行</span>            msg <span class="token operator">=</span> <span class="token string">"Updated system package + "</span> <span class="token operator">+</span> deletedAppName                    <span class="token operator">+</span> <span class="token string">" no longer exists; revoking system privileges"</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> PackageSetting deletedPs <span class="token operator">=</span> mSettings<span class="token punctuation">.</span>mPackages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>deletedAppName<span class="token punctuation">)</span><span class="token punctuation">;</span>            deletedPkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">;</span>            deletedPs<span class="token punctuation">.</span>pkgFlags <span class="token operator">&amp;=</span> <span class="token operator">~</span>ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 报告系统发生了不一致的情况</span>        <span class="token function">logCriticalInfo</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>WARN<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 处理 mExpectingBetter 列表，这个列表的应用是带有升级包的系统的应用，</span>    <span class="token comment" spellcheck="true">// 前面把他们从 mPackages 列表中清除了并放到 mExpectingBetter 列表，</span>    <span class="token comment" spellcheck="true">// 最后也对他们进行扫描处理，但不会放到 mPackages 中。</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mExpectingBetter<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> String packageName <span class="token operator">=</span> mExpectingBetter<span class="token punctuation">.</span><span class="token function">keyAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mPackages<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> File scanFile <span class="token operator">=</span> mExpectingBetter<span class="token punctuation">.</span><span class="token function">valueAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token annotation punctuation">@ParseFlags</span> <span class="token keyword">int</span> reparseFlags<span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token annotation punctuation">@ScanFlags</span> <span class="token keyword">int</span> rescanFlags<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 确保应用位于下面的系统应用目录中，如果不在，则不需要处理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>FileUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>privilegedAppDir<span class="token punctuation">,</span> scanFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                reparseFlags <span class="token operator">=</span>                        mDefParseFlags <span class="token operator">|</span>                        PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">;</span>                rescanFlags <span class="token operator">=</span>                        scanFlags                        <span class="token operator">|</span> SCAN_AS_SYSTEM                        <span class="token operator">|</span> SCAN_AS_PRIVILEGED<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>FileUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>systemAppDir<span class="token punctuation">,</span> scanFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                reparseFlags <span class="token operator">=</span>                        mDefParseFlags <span class="token operator">|</span>                        PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">;</span>                rescanFlags <span class="token operator">=</span>                        scanFlags                        <span class="token operator">|</span> SCAN_AS_SYSTEM<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>FileUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>privilegedVendorAppDir<span class="token punctuation">,</span> scanFile<span class="token punctuation">)</span>                       <span class="token operator">||</span> FileUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>privilegedOdmAppDir<span class="token punctuation">,</span> scanFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                reparseFlags <span class="token operator">=</span>                        mDefParseFlags <span class="token operator">|</span>                        PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">;</span>                rescanFlags <span class="token operator">=</span>                        scanFlags                        <span class="token operator">|</span> SCAN_AS_SYSTEM                        <span class="token operator">|</span> SCAN_AS_VENDOR                        <span class="token operator">|</span> SCAN_AS_PRIVILEGED<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>FileUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>vendorAppDir<span class="token punctuation">,</span> scanFile<span class="token punctuation">)</span>                       <span class="token operator">||</span> FileUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>odmAppDir<span class="token punctuation">,</span> scanFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                reparseFlags <span class="token operator">=</span>                        mDefParseFlags <span class="token operator">|</span>                        PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">;</span>                rescanFlags <span class="token operator">=</span>                        scanFlags                        <span class="token operator">|</span> SCAN_AS_SYSTEM                        <span class="token operator">|</span> SCAN_AS_VENDOR<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>FileUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>oemAppDir<span class="token punctuation">,</span> scanFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                reparseFlags <span class="token operator">=</span>                        mDefParseFlags <span class="token operator">|</span>                        PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">;</span>                rescanFlags <span class="token operator">=</span>                        scanFlags                        <span class="token operator">|</span> SCAN_AS_SYSTEM                        <span class="token operator">|</span> SCAN_AS_OEM<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>FileUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>privilegedProductAppDir<span class="token punctuation">,</span> scanFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                reparseFlags <span class="token operator">=</span>                        mDefParseFlags <span class="token operator">|</span>                        PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">;</span>                rescanFlags <span class="token operator">=</span>                        scanFlags                        <span class="token operator">|</span> SCAN_AS_SYSTEM                        <span class="token operator">|</span> SCAN_AS_PRODUCT                        <span class="token operator">|</span> SCAN_AS_PRIVILEGED<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>FileUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>productAppDir<span class="token punctuation">,</span> scanFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                reparseFlags <span class="token operator">=</span>                        mDefParseFlags <span class="token operator">|</span>                        PackageParser<span class="token punctuation">.</span>PARSE_IS_SYSTEM_DIR<span class="token punctuation">;</span>                rescanFlags <span class="token operator">=</span>                        scanFlags                        <span class="token operator">|</span> SCAN_AS_SYSTEM                        <span class="token operator">|</span> SCAN_AS_PRODUCT<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Ignoring unexpected fallback path "</span> <span class="token operator">+</span> scanFile<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果应用不在上面这些目录，继续循环，不要处理</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mSettings<span class="token punctuation">.</span><span class="token function">enableSystemPackageLPw</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 重新扫描一下这个文件，会添加一个 &lt;update-package> 标签</span>                <span class="token function">scanPackageTracedLI</span><span class="token punctuation">(</span>scanFile<span class="token punctuation">,</span> reparseFlags<span class="token punctuation">,</span> scanFlags<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageManagerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to parse original system package: "</span>                        <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Uncompress and install any stubbed system applications.</span>    <span class="token comment" spellcheck="true">// This must be done last to ensure all stubs are replaced or disabled.</span>    <span class="token function">decompressSystemApplications</span><span class="token punctuation">(</span>stubSystemApps<span class="token punctuation">,</span> scanFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> cachedNonSystemApps <span class="token operator">=</span> PackageParser<span class="token punctuation">.</span>sCachedPackageReadCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">-</span> cachedSystemApps<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">long</span> dataScanTime <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> systemScanTime <span class="token operator">-</span> startTime<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> dataPackagesCount <span class="token operator">=</span> mPackages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> systemPackagesCount<span class="token punctuation">;</span>    Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Finished scanning non-system apps. Time: "</span> <span class="token operator">+</span> dataScanTime            <span class="token operator">+</span> <span class="token string">" ms, packageCount: "</span> <span class="token operator">+</span> dataPackagesCount            <span class="token operator">+</span> <span class="token string">" , timePerPackage: "</span>            <span class="token operator">+</span> <span class="token punctuation">(</span>dataPackagesCount <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> dataScanTime <span class="token operator">/</span> dataPackagesCount<span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token string">" , cached: "</span> <span class="token operator">+</span> cachedNonSystemApps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mIsUpgrade <span class="token operator">&amp;&amp;</span> dataPackagesCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MetricsLogger<span class="token punctuation">.</span><span class="token function">histogram</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"ota_package_manager_data_app_avg_scan_time"</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> dataScanTime<span class="token punctuation">)</span> <span class="token operator">/</span> dataPackagesCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>　　　　<span class="token comment" spellcheck="true">//　扫描非系统 apk　工作完成！</span><span class="token punctuation">}</span></code></pre><p><br></p><h1 id="三、扫尾工作"><a href="#三、扫尾工作" class="headerlink" title="三、扫尾工作"></a>三、扫尾工作</h1><p>这部分任务比较简单，就是将第二阶段 APK 的信息再集中整理一次，可自行研究。<br><br></p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>&nbsp;01. <a href="https://www.2cto.com/kf/201609/551752.html" target="_blank" rel="noopener">Android7.0 PackageManagerService (2) PKMS构造函数的主要工作</a><br>&nbsp;02. <a href="https://www.jianshu.com/p/8e2831428110" target="_blank" rel="noopener">APK安装流程详解7——PackageManagerService的启动流程(上)</a></p><hr><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>推荐跳转：<a href="https://superandroid.pro/2019/01/01/00.%20Thinking%20in%20Android%20--%2001.%20%E5%8D%9A%E5%AE%A2%E7%B4%A2%E5%BC%95/">博客索引（Android 9.0）</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://superandroid.pro/2018/11/01/B_01.%20Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89%E4%B9%8B%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/">Framework 核心服务之 PMS 钻研（1）- 启动流程</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://superandroid.pro/2018/11/08/B_03.%20Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%883%EF%BC%89%E4%B9%8B%20PackageManager/">Framework 核心服务之 PMS 钻研（3）- PackageManager</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PackageManagerService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Framework 核心服务之 PMS 钻研 ( 1 ) - 启动流程</title>
      <link href="/2018/12/01/android-kuang-jia-fu-wu-pian-shen-ru-yan-jiu-pms-xi-lie-1-zhi-qi-dong-liu-cheng/"/>
      <url>/2018/12/01/android-kuang-jia-fu-wu-pian-shen-ru-yan-jiu-pms-xi-lie-1-zhi-qi-dong-liu-cheng/</url>
      
        <content type="html"><![CDATA[<p><br></p><p><strong><center><font color="#3A5FCD" size="4">PackageManagerService 系列文章如下（基于 Android 9.0 源码）</font><center></center></center></strong><br></p><table><thead><tr><th style="text-align:center">&nbsp;</th><th style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（1）- 启动流程</font></a></th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（2）- 构造函数</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（3）- PackageManager</font></a></td></tr><tr><td style="text-align:center"><strong><font color="#EE2C2C" size="3">PackageManagerService</font></strong></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（4）- PackageInstaller</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（5）- APK 安装流程（1）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（6）- APK 安装流程（2）</font></a></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><a href><font color="#B452CD">系统核心服务之 PackageManagerService 钻研（7）- PackageParser</font></a></td></tr></tbody></table><p><br></p><p><strong><font color="#3A5FCD" size="4">修订日志</font></strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">1、重新梳理 Android 9.0 源码中 PMS 的启动流程；</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">2、重新梳理涉及 Settings 的代码逻辑；</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">3、重新梳理 XML 文件扫描的代码逻辑；</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#8E388E">4、博文格式，文章排版等优化；</font></p><p><br></p><hr><h1 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h1><h2 id="1-1-核心源码"><a href="#1-1-核心源码" class="headerlink" title="1.1 核心源码"></a>1.1 核心源码</h2><table><thead><tr><th>Files</th><th>sources（/frameworks/base/） </th></tr></thead><tbody><tr><td><font color="#D15FEE">Process.java</font></td><td>core/java/android/os/Process.java</td></tr><tr><td><font color="#D15FEE">Settings.java</font></td><td>services/core/java/com/android/server/pm/Settings.java</td></tr><tr><td><font color="#D15FEE">SettingBase.java</font></td><td>services/core/java/com/android/server/pm/SettingBase.java</td></tr><tr><td><font color="#D15FEE">SystemConfig.java</font></td><td>core/java/com/android/server/SystemConfig.java</td></tr><tr><td><font color="#D15FEE">SystemServer.java</font></td><td>services/java/com/android/server/SystemServer.java</td></tr><tr><td><font color="#D15FEE">SharedUserSetting.java</font></td><td>services/core/java/com/android/server/pm/SharedUserSetting.java</td></tr><tr><td><font color="#D15FEE">PackageManagerService.java</font></td><td>services/core/java/com/android/server/pm/PackageManagerService.java</td></tr></tbody></table><h2 id="1-2-简介"><a href="#1-2-简介" class="headerlink" title="1.2 简介"></a>1.2 简介</h2><p><strong><font color="#63B8FF">PackageManagerService（PMS）</font></strong>是 SystemServer 启动后的第一个核心服务，也是 Android 系统中最常用的服务之一。它负责系统中 Package 的管理，应用程序的安装、卸载、信息查询等。</p><p>如果你是 Android 系统开发工程师，基础概念我们不多赘述，文章的重点是阅读源码，钻研原理！</p><h2 id="1-3-家族谱"><a href="#1-3-家族谱" class="headerlink" title="1.3 家族谱"></a>1.3 家族谱</h2><p>首先，我们看一下 PackageManagerService 及客户端的家族谱，如下图所示（这边暂且只需有个印象，整个系列研究完后再回来看这个家族谱，你会清晰很多！）</p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-ece68587e315bc1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PackageManagerService 及客户端的家族谱.png"></center><p><strong><font color="#436EEE" size="3">简单说明：</font></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;☪ &nbsp;IPackageManager 接口类中定义了服务端和客户端通信的业务函数，还定义了内部类 Stub，该类从 Binder 派生并实现了 IPackageManager 接口。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;☪ &nbsp;PackageManagerService 继承自 IPackageManager.Stub类，由于 Stub 类从 Binder 派生，因此 PackageManagerService 将作为服务端参与 Binder 通信。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;☪ &nbsp;Stub 类中定义了一个内部类 Proxy，该类有一个 IBinder类型（实际类型为 BinderProxy）的成员变量 mRemote，mRemote 用于和服务端 PackageManagerService通信。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;☪ &nbsp;IPackageManager 接口类中定义了许多业务函数，但是处于安全等方面的考虑，Android 对外（即SDK）提供的只是一个子集，该子类被封装在抽象类 PackageManager中。客户端一般通过 Context 的 getPackageManager 函数返回一个类型为 PackageManager的对象，该对象的实际类型是 PackageManager 的子类 ApplicationPackageManager。这种基于接口编程的方式，虽然极大降低了模块之间的耦合性，却给代码分析带来了不小的麻烦。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;☪ &nbsp;ApplicationPackageManager 类继承自 PackageManager类。它并没有直接参与 Binder 通信，而是通过 mPM 成员变量指向一个 IPackageManager.Stub.Proxy 类型的对象。</p><blockquote><p><strong><font color="#FF0000">【提示】：</font></strong>在你自己的分析过程中，可能会发现源码中找不到 IPackageManager.java 这个文件。其实该文件是在编译过程中产生的，最终的文件位于 Android 源码 /out 目录下面。</p></blockquote><p><strong><font color="#0000FF">IPackageManager.java：</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPackageManager</span> <span class="token keyword">extends</span> <span class="token class-name">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IInterface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** Local-side IPC implementation stub class. */</span>    <span class="token comment" spellcheck="true">// 定义内部类 Stub，派生自 Binder，实现 IPackageManager 接口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Stub</span> <span class="token keyword">extends</span> <span class="token class-name">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Binder</span>                                 <span class="token keyword">implements</span> <span class="token class-name">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>IPackageManager</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String DESCRIPTOR <span class="token operator">=</span>                                       <span class="token string">"android.content.pm.IPackageManager"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** Construct the stub at attach it to the interface. */</span>        <span class="token keyword">public</span> <span class="token function">Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachInterface</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 定义 Stub 的内部类 Proxy，实现 IPackageManager 接口</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>IPackageManager</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder mRemote<span class="token punctuation">;</span>            <span class="token function">Proxy</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder remote<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mRemote <span class="token operator">=</span> remote<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><strong><font color="#436EEE">看源码，梳理流程，就像是走进迷宫，很容易迷失！</font></strong></p><p>所以在开始分析之前，我给大家一些建议：<strong><font color="#FF0000">紧抓主干，熟悉流程，再去啃细枝末节！</font></strong></p><p><br></p><hr><h1 id="二、SystemServer"><a href="#二、SystemServer" class="headerlink" title="二、SystemServer"></a>二、SystemServer</h1><p><strong><font color="#63B8FF">PackageManagerService</font></strong> 作为系统的核心服务，由 <strong><font color="#63B8FF">SystemServer</font></strong> 创建，SystemServer 调用了 PackageManagerService 的 <code>main()</code> 创建 <code>PackageManagerService</code> 实例。</p><h2 id="2-1-main"><a href="#2-1-main" class="headerlink" title="2.1 main"></a>2.1 main</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/services/java/com/android/server/SystemServer.java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SystemServer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"SystemServer"</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**      * The main entry point from zygote.      */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">SystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// Start services.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">startBootstrapServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建 PackageManagerService 实例</span>            <span class="token function">startCoreServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">startOtherServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SystemServerInitThreadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-2-startBootstrapServices"><a href="#2-2-startBootstrapServices" class="headerlink" title="2.2 startBootstrapServices"></a>2.2 startBootstrapServices</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/services/java/com/android/server/SystemServer.java</span><span class="token keyword">private</span> PackageManagerService mPackageManagerService<span class="token punctuation">;</span><span class="token keyword">private</span> Context mSystemContext<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> mOnlyCore<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startBootstrapServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 启动 installer 服务</span>    Installer installer <span class="token operator">=</span> mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span>Installer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处于加密状态则仅仅解析核心应用</span>    String cryptState <span class="token operator">=</span> SystemProperties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"vold.decrypt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ENCRYPTING_STATE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cryptState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Detected encryption in progress - only parsing core apps"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mOnlyCore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ENCRYPTED_STATE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cryptState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Device encrypted - only parsing core apps"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mOnlyCore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 调用 PMS 的 main 函数，主要是创建 PMS 服务，并注册到 ServiceManager（服务管家）</span>    mPackageManagerService <span class="token operator">=</span> PackageManagerService<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>mSystemContext<span class="token punctuation">,</span> installer<span class="token punctuation">,</span>                mFactoryTestMode <span class="token operator">!=</span> FactoryTest<span class="token punctuation">.</span>FACTORY_TEST_OFF<span class="token punctuation">,</span> mOnlyCore<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断本次是否为初次启动，当 Zygote 或 SystemServer 退出时，init 会再次启动它们</span>    <span class="token comment" spellcheck="true">// 所以这里的 FirstBoot 是指开机后的第一次启动</span>    mFirstBoot <span class="token operator">=</span> mPackageManagerService<span class="token punctuation">.</span><span class="token function">isFirstBoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取 PackageManager</span>    mPackageManager <span class="token operator">=</span> mSystemContext<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="2-3-startOtherServices"><a href="#2-3-startOtherServices" class="headerlink" title="2.3 startOtherServices"></a>2.3 startOtherServices</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/services/java/com/android/server/SystemServer.java</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startOtherServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token function">traceBeginAndSlog</span><span class="token punctuation">(</span><span class="token string">"MakePackageManagerServiceReady"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mPackageManagerService<span class="token punctuation">.</span><span class="token function">systemReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><hr><h1 id="三、PackageManagerService"><a href="#三、PackageManagerService" class="headerlink" title="三、PackageManagerService"></a>三、PackageManagerService</h1><p>通过源码，我们知道了 SystemServer 调用 PackageManagerService 的 <code>main()</code> 创建了 PackageManagerService 实例。那么接下来的重点就是关注 PackageManagerService 的 <code>main()</code>！</p><h2 id="3-1-main"><a href="#3-1-main" class="headerlink" title="3.1 main"></a>3.1 main</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/services/core/java/com/android/server/pm/</span>            PackageManagerService<span class="token punctuation">.</span>java<span class="token keyword">public</span> <span class="token keyword">static</span> PackageManagerService <span class="token function">main</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Installer installer<span class="token punctuation">,</span>                                         <span class="token keyword">boolean</span> factoryTest<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyCore<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Self-check for initial settings: 此处主要检查系统属性</span>    PackageManagerServiceCompilerMapping<span class="token punctuation">.</span><span class="token function">checkProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 此处创建构造函数，其中，factoryTest：决定是否测试版本，onlyCore：决定是否只解析系统目录</span>    PackageManagerService m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageManagerService</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> installer<span class="token punctuation">,</span>                                                         factoryTest<span class="token punctuation">,</span> onlyCore<span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token punctuation">.</span><span class="token function">enableSystemUserPackages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 利用 Binder 通信，将自己注册到 ServiceManager 进程中（这是 Binder 服务的常规注册流程）</span>    ServiceManager<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span><span class="token string">"package"</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> PackageManagerNative pmn <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">PackageManagerNative</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ServiceManager<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span><span class="token string">"package_native"</span><span class="token punctuation">,</span> pmn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>该方法主要<code>创建 PMS 对象</code>，并将其注册到 <code>ServiceManager</code> 中，内部是一个 <code>HashMap</code> 的集合，存储了很多相关的 Binder 服务，缓存起来，我们在使用的时候，会通过 <code>getService(key)</code> 的方式去 <code>Map</code> 中获取。</p><blockquote><p><strong><font color="#436EEE">main 函数看似几行代码很简单，但执行时间却很长。主要原因是 PMS 在其“构造函数”中做了很多“重体力活”，这也是 Android 启动速度慢的主要原因之一。</font></strong></p></blockquote><p><strong><font color="#FF0000">具体分析前，我们先简单了解一下 PMS 构造函数的主要功能：</font></strong></p><p>扫描 Android 系统中几个目标文件夹中的 APK，从而建立合适的数据结构来管理各种信息，如：Package 信息、四大组件信息、权限信息等。</p><p>抽象地来看，PMS 像一个加工厂，它解析实际的物理文件（APK文件）以生成符合自己要求的产品。（例如：PMS 将解析 APK 包中的 <code>AndroidManifest.xml</code>，并根据其中声明的 <code>Activity 标签</code>来创建与此对应的对象并加以保管。）</p><p>从源码角度来看，PMS 的工作流程相对简单。但深入研究后，发现其很复杂！</p><blockquote><p><strong><font color="#A020F0">复杂的是其中用于保存各种信息的<code>数据结构</code>和<code>它们之间的关系</code>，以及影响最终结果的<code>策略控制</code></font></strong>。</p></blockquote><p>如果你自行研究过 PMS，你会发现代码中存在大量不同的数据结构以及它们之间的关系会让人大为头疼。所以，在这篇文章中我们除了分析 PMS 的工作流程以外，会重点关注重要的数据结构以及它们的作用。</p><p><strong><font color="#FF0000">接下来开始重点分析 PMS 的构造函数</font></strong>，如果放在一篇文章中去分析是完全不可能梳理清楚的！</p><p>我们分两部分研究，如下：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong><font color="#551A8B">🍁 &nbsp;构造函数（1） - 前期准备工作</font></strong>&nbsp;<strong><font color="#FF0000">（本篇文章要讨论的内容）</font></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong><font color="#551A8B">🍁 &nbsp;构造函数（2） - 扫描 Package 和 扫尾工作</font></strong> <a href="https://superandroid.pro/2018/11/05/B_02.%20Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%882%EF%BC%89%E4%B9%8B%20%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/">《Framework 核心服务之 PMS 钻研（2）- 构造函数》</a></p><hr><p>正式开始分析 PMS 的构造函数：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 此处创建构造函数，其中，factoryTest：决定是否测试版本，onlyCore：决定是否只解析系统目录</span>PackageManagerService m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageManagerService</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> installer<span class="token punctuation">,</span>                                                     factoryTest<span class="token punctuation">,</span> onlyCore<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-2-Settings"><a href="#3-2-Settings" class="headerlink" title="3.2 Settings"></a>3.2 Settings</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// public static final int SDK_INT = SystemProperties.getInt("ro.build.version.sdk", 0);</span><span class="token keyword">final</span> <span class="token keyword">int</span> mSdkVersion <span class="token operator">=</span> Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">PackageManagerService</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Installer installer<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> factoryTest<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyCore<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*     * mSdkVersion是 PMS 的成员变量，定义的时候进行赋值，其值取自系统属性 ro.build.version.sdk     * 如果没有定义，则 APK 就无法知道自己运行在 Android 哪个版本上     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mSdkVersion <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"**** ro.build.version.sdk not set!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mContext <span class="token operator">=</span> context<span class="token punctuation">;</span>    mFactoryTest <span class="token operator">=</span> factoryTest<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 运行在非工厂模式下</span>    mOnlyCore <span class="token operator">=</span> onlyCore<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 标记是否只加载核心服务</span>    mMetrics <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 存储与显示屏相关的一些属性，例如屏幕的宽/高尺寸，分辨率等信息</span>    mInstaller <span class="token operator">=</span> installer<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 创建 Installer 对象，该对象和 Native 进程 installd 交互</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mInstallLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Expose private service for system components to use.</span>        LocalServices<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span>PackageManagerInternal<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">PackageManagerInternalImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sUserManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserManagerService</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UserDataPreparer</span><span class="token punctuation">(</span>mInstaller<span class="token punctuation">,</span> mInstallLock<span class="token punctuation">,</span> mContext<span class="token punctuation">,</span> mOnlyCore<span class="token punctuation">)</span><span class="token punctuation">,</span>                 mPackages<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPermissionManager <span class="token operator">=</span> PermissionManagerService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">DefaultPermissionGrantedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDefaultRuntimePermissionsGranted</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            mSettings<span class="token punctuation">.</span><span class="token function">onDefaultRuntimePermissionsGrantedLPr</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> mPackages <span class="token comment" spellcheck="true">/*externalLock*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mDefaultPermissionPolicy <span class="token operator">=</span> mPermissionManager<span class="token punctuation">.</span><span class="token function">getDefaultPermissionGrantPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Settings 是一个非常重要的类，该类用于存储系统运行过程中的一些设置，我们后面会重点分析这个类！</span>        mSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Settings</span><span class="token punctuation">(</span>mPermissionManager<span class="token punctuation">.</span><span class="token function">getPermissionSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mPackages<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 添加system、phone、log、nfc、bluetooth、shell这六种 shareUserId 到 mSettings</span>    <span class="token comment" spellcheck="true">// addSharedUserLPw 函数做了什么？这是我们接下来要分析的重点！</span>    mSettings<span class="token punctuation">.</span><span class="token function">addSharedUserLPw</span><span class="token punctuation">(</span><span class="token string">"android.uid.system"</span><span class="token punctuation">,</span> Process<span class="token punctuation">.</span>SYSTEM_UID<span class="token punctuation">,</span>                ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">,</span> ApplicationInfo<span class="token punctuation">.</span>PRIVATE_FLAG_PRIVILEGED<span class="token punctuation">)</span><span class="token punctuation">;</span>    mSettings<span class="token punctuation">.</span><span class="token function">addSharedUserLPw</span><span class="token punctuation">(</span><span class="token string">"android.uid.phone"</span><span class="token punctuation">,</span> RADIO_UID<span class="token punctuation">,</span>                ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">,</span> ApplicationInfo<span class="token punctuation">.</span>PRIVATE_FLAG_PRIVILEGED<span class="token punctuation">)</span><span class="token punctuation">;</span>    mSettings<span class="token punctuation">.</span><span class="token function">addSharedUserLPw</span><span class="token punctuation">(</span><span class="token string">"android.uid.log"</span><span class="token punctuation">,</span> LOG_UID<span class="token punctuation">,</span>                ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">,</span> ApplicationInfo<span class="token punctuation">.</span>PRIVATE_FLAG_PRIVILEGED<span class="token punctuation">)</span><span class="token punctuation">;</span>    mSettings<span class="token punctuation">.</span><span class="token function">addSharedUserLPw</span><span class="token punctuation">(</span><span class="token string">"android.uid.nfc"</span><span class="token punctuation">,</span> NFC_UID<span class="token punctuation">,</span>                ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">,</span> ApplicationInfo<span class="token punctuation">.</span>PRIVATE_FLAG_PRIVILEGED<span class="token punctuation">)</span><span class="token punctuation">;</span>    mSettings<span class="token punctuation">.</span><span class="token function">addSharedUserLPw</span><span class="token punctuation">(</span><span class="token string">"android.uid.bluetooth"</span><span class="token punctuation">,</span> BLUETOOTH_UID<span class="token punctuation">,</span>                ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">,</span> ApplicationInfo<span class="token punctuation">.</span>PRIVATE_FLAG_PRIVILEGED<span class="token punctuation">)</span><span class="token punctuation">;</span>    mSettings<span class="token punctuation">.</span><span class="token function">addSharedUserLPw</span><span class="token punctuation">(</span><span class="token string">"android.uid.shell"</span><span class="token punctuation">,</span> SHELL_UID<span class="token punctuation">,</span>                ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">,</span> ApplicationInfo<span class="token punctuation">.</span>PRIVATE_FLAG_PRIVILEGED<span class="token punctuation">)</span><span class="token punctuation">;</span>    mSettings<span class="token punctuation">.</span><span class="token function">addSharedUserLPw</span><span class="token punctuation">(</span><span class="token string">"android.uid.se"</span><span class="token punctuation">,</span> SE_UID<span class="token punctuation">,</span>                ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">,</span> ApplicationInfo<span class="token punctuation">.</span>PRIVATE_FLAG_PRIVILEGED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>刚进入构造函数，我们就遇到了第一个较为复杂的数据结构 <code>Settings</code> ，以及它的 <code>addSharedUserLPw</code> 函数。</p><h4 id="3-2-1-构造函数"><a href="#3-2-1-构造函数" class="headerlink" title="3.2.1 构造函数"></a>3.2.1 构造函数</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Settings</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token function">Settings</span><span class="token punctuation">(</span>PermissionSettings permissions<span class="token punctuation">,</span> Object lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getDataDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> permissions<span class="token punctuation">,</span> lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Settings</span><span class="token punctuation">(</span>File dataDir<span class="token punctuation">,</span> PermissionSettings permission<span class="token punctuation">,</span> Object lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mLock <span class="token operator">=</span> lock<span class="token punctuation">;</span>        mPermissions <span class="token operator">=</span> permission<span class="token punctuation">;</span>        mRuntimePermissionsPersistence <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuntimePermissionPersistence</span><span class="token punctuation">(</span>mLock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建指向 /data/system/ 目录的 File</span>        mSystemDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dataDir<span class="token punctuation">,</span> <span class="token string">"system"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建目录</span>        mSystemDir<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileUtils<span class="token punctuation">.</span><span class="token function">setPermissions</span><span class="token punctuation">(</span>mSystemDir<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  FileUtils<span class="token punctuation">.</span>S_IRWXU<span class="token operator">|</span>FileUtils<span class="token punctuation">.</span>S_IRWXG                  <span class="token operator">|</span>FileUtils<span class="token punctuation">.</span>S_IROTH<span class="token operator">|</span>FileUtils<span class="token punctuation">.</span>S_IXOTH<span class="token punctuation">,</span>                  <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用于描述系统所安装的 Package 信息</span>        mSettingsFilename <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mSystemDir<span class="token punctuation">,</span> <span class="token string">"packages.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// packages.xml的备份信息</span>        mBackupSettingsFilename <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mSystemDir<span class="token punctuation">,</span> <span class="token string">"packages-backup.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 保存系统中存在的所有非系统自带的 APK 信息，即 UID 大于 10000 的 apk</span>        mPackageListFilename <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mSystemDir<span class="token punctuation">,</span> <span class="token string">"packages.list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileUtils<span class="token punctuation">.</span><span class="token function">setPermissions</span><span class="token punctuation">(</span>mPackageListFilename<span class="token punctuation">,</span> <span class="token number">0640</span><span class="token punctuation">,</span> SYSTEM_UID<span class="token punctuation">,</span> PACKAGE_INFO_GID<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// sdcardfs 相关的文件</span>        <span class="token keyword">final</span> File kernelDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/config/sdcardfs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mKernelMappingFilename <span class="token operator">=</span> kernelDir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> kernelDir <span class="token operator">:</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 记录系统中被强制停止运行的 App 信息，如有 App 被强制停止运行，会将一些信息记录到该文件中</span>        mStoppedPackagesFilename <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mSystemDir<span class="token punctuation">,</span> <span class="token string">"packages-stopped.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// packages-stopped.xml 的备份信息</span>        mBackupStoppedPackagesFilename <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mSystemDir<span class="token punctuation">,</span> <span class="token string">"packages-stopped-backup.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><strong><font color="#FF0000">Settings 的构造函数的主要工作：建立与某些系统配置文件、目录之间的关联</font></strong>。首先，它会创建指向 <code>/data/system/</code> 目录的 <code>File</code> 实例，这个目录下会保存很多系统文件。其次，就是创建 <code>/data/system/</code> 目录下的某些 <code>.xml 文件</code> 或其他文件的 <code>File</code> 实例。</p><p>上面源码中涉及到 5 个文件：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#63B8FF">✨ packages.xml：</font> PMS 扫描完目标文件夹后，会创建packages.xml。当系统进行程序安装、卸载和更新等操作时，均会更新该文件;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#63B8FF">✨ packages-backup.xml：</font>packages.xml 文件的备份;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#63B8FF">✨ packages.list：</font>用于描述系统中存在的所有非系统自带的 APK 信息。当这些 APK 有变化时，PKMS就会更新该文件;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#63B8FF">✨ packages-stopped.xml：</font>记录被用户强行停止的应用的 Package 信息（例如，从设置进入某个应用，然后点击强行停止，那么应用的Package信息就会被记录）;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#63B8FF">✨ packages-stopped-back.xml：</font>packages-stopped.xml 文件的备份。</p><blockquote><p>我们注意到，上面的介绍中涉及到了两个 <code>back-up</code> 文件，它们是做什么的呢？其实 Android 系统在修改 <code>packages.xml</code>、<code>packages-stopped.xml</code> 之前，会先对它们进行<code>备份</code>。当对它们的修改操作正常完成，则会删掉备份的文件。如果在修改过程中系统出现问题重启了，会再次去读取这两个文件；如果此时发现它们的备份文件还存在，则说明上一次对两份文件的修改操作发生了异常，这两份文件的内容可能已经不准确了，这时系统会去使用之前备份的文件的内容。</p></blockquote><p>创建完相关系统文件 File 实例后，Settings 的构造工作也就结束了。</p><p>之前我们提出了一个问题：<strong><font color="#63B8FF">addSharedUserLPw 函数做了什么？</font></strong>从上面截取一段代码回顾一下：</p><pre class=" language-java"><code class="language-java">mSettings<span class="token punctuation">.</span><span class="token function">addSharedUserLPw</span><span class="token punctuation">(</span><span class="token string">"android.uid.system"</span><span class="token punctuation">,</span> Process<span class="token punctuation">.</span>SYSTEM_UID<span class="token punctuation">,</span>            ApplicationInfo<span class="token punctuation">.</span>FLAG_SYSTEM<span class="token punctuation">,</span> ApplicationInfo<span class="token punctuation">.</span>PRIVATE_FLAG_PRIVILEGED<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>addSharedUserLPw 传递了 4 个参数：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#63B8FF">✨ &nbsp;android.uid.system</font>：字符串，name 和 uid 一一对应</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>public static final int SYSTEM_UID = 1000;</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#63B8FF">✨ &nbsp;Process.SYSTEM_UID</font>：值为 1000，name 和 uid 一一对应</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>public static final int FLAG_SYSTEM = 1&lt;&lt;0;</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#63B8FF">✨ &nbsp;ApplicationInfo.FLAG_SYSTEM</font>：标志</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>public static final int PRIVATE_FLAG_PRIVILEGED = 1&lt;&lt;3;</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#63B8FF">✨ &nbsp;ApplicationInfo.PRIVATE_FLAG_PRIVILEGED</font>：特权Apk</p><p>对 addSharedUserLPw 函数分析之前，我们有必要了解 <code>SYSTEM_UID</code> 的相关知识。</p><hr><h3 id="3-2-2-UID-GID"><a href="#3-2-2-UID-GID" class="headerlink" title="3.2.2 UID/GID"></a>3.2.2 UID/GID</h3><p><strong><font color="#FF0000">UID 为 <code>用户 ID</code> 的缩写，GID 为 <code>用户组 ID</code> 的缩写</font></strong>。一般来说，每一个进程都会有一个对应的 UID（即标示该进程属于哪个用户，不同用户拥有不同权限）。一个进程也可分属不用的用户组（每个用户都有对应的权限）。<strong><font color="#FF0000">UID/GID 和进程的权限有关</font></strong>。</p><p>在 Android 平台中，系统定义的 UID/GID 在 <strong><font color="#8470FF">Process.java</font></strong> 文件中，如下所示（列举部分）：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/core/java/android/os/Process.java</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SYSTEM_UID <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 系统进程的 UID/GID</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PHONE_UID <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// Phone 进程的 UID/GID</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHELL_UID <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// shell 进程的 UID/GID</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LOG_UID <span class="token operator">=</span> <span class="token number">1007</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// LOG 进程的 UID/GID</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> WIFI_UID <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// WIFI 进程的 UID/GID</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MEDIA_UID <span class="token operator">=</span> <span class="token number">1013</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// mediaserver 进程的 UID/GID</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NFC_UID <span class="token operator">=</span> <span class="token number">1027</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// NFC 进程的 UID/GID</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> FIRST_APPLICATION_UID <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第一个应用 Package 的起始 UID</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LAST_APPLICATION_UID <span class="token operator">=</span> <span class="token number">19999</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 系统所支持的最大的应用 Package 的 UID</span></code></pre><h3 id="3-2-3-addSharedUserLPw"><a href="#3-2-3-addSharedUserLPw" class="headerlink" title="3.2.3 addSharedUserLPw"></a>3.2.3 addSharedUserLPw</h3><p>现在我们开始分析 addSharedUserLPw 函数：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/services/core/java/com/android/server/pm/Settings.java</span>SharedUserSetting <span class="token function">addSharedUserLPw</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> pkgFlags<span class="token punctuation">,</span> <span class="token keyword">int</span> pkgPrivateFlags<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 根据 key 从 map 中获取值</span>    SharedUserSetting s <span class="token operator">=</span> mSharedUsers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果值不为 null 并且保存的 uid 和传递过来的一致，就直接返回结果</span>    <span class="token comment" spellcheck="true">// uid 不一致则返回 null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>userId <span class="token operator">==</span> uid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        PackageManagerService<span class="token punctuation">.</span><span class="token function">reportSettingsProblem</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>ERROR<span class="token punctuation">,</span>                    <span class="token string">"Adding duplicate shared user, keeping first: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 若 s 为 null，则根据传递过来的参数新创建对象</span>    s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedUserSetting</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> pkgFlags<span class="token punctuation">,</span> pkgPrivateFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>userId <span class="token operator">=</span> uid<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在系统中保存值为 uid 的 用户 id，成功返回 true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addUserIdLPw</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> s<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mSharedUsers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将 name 与 s 键值对添加到 mSharedUsers 中保存</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从源码中我们发现，Settings 中有一个 <code>mSharedUsers</code> 成员，该成员存储的是 <code>【“字符串” 与 “SharedUserSetting” 键值对】</code>，也就是说可以通过 <code>字符串</code> 为 <code>key</code> 得到对应的 <code>SharedUserSetting</code> 对象。</p><p>那么 SharedUserSetting 是什么？创建它的目的是什么？接下来我们继续分析！</p><h4 id="3-2-3-1-SharedUserSetting"><a href="#3-2-3-1-SharedUserSetting" class="headerlink" title="3.2.3.1 SharedUserSetting"></a>3.2.3.1 SharedUserSetting</h4><p>为了解释 SharedUserSetting，我们拿 <strong><font color="#1874CD">SystemUI</font></strong> 作为例子来讨论这个问题。</p><p>我们看下 SystemUI 的 <code>AndroidManifest.xml</code>（这个文件你肯定不陌生）：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>androidprv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/prv/res/android<span class="token punctuation">"</span></span>        <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.android.systemui<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>sharedUserId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.uid.system<span class="token punctuation">"</span></span>        <span class="token attr-name">coreApp</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>在 <code>AndroidManifest.xml</code> 中，声明了一个名为 <code>android:sharedUserId</code> 的属性：<code>android.uid.systemui</code>。</p><p><strong><font color="#FF0000">有必要聊聊这个 “sharedUserId” 的作用！</font></strong></p><p>1、两个或多个声明了同一种 <code>sharedUserId</code> 的 <code>APK</code> 可共享彼此的数据，并且可运行在同一进程中。</p><p>2、通过声明特定的 <code>sharedUserId</code>，该 <code>APK</code> 所在 <code>进程</code> 将被赋予指定的 <code>UID</code>（比如本例中的 SystemUI 声明了 system 的 uid，运行 SystemUI 的进程就可享受 system 用户所对应的权限）。</p><blockquote><p>除了在 <code>AndroidManifest.xml</code> 中声明 <code>sharedUserId</code> 外，APK 在编译时还必须使用对应的证书进行签名。例如本例的 <code>SystemUI</code>，在其 <code>Android.mk</code> 中需要额外申明 <code>LOCAL_CERTIFICATE := platform</code>，如此才可以获得指定的 <code>UID</code>（当然这个不是我们分析的重点，在项目开发的过程中，我们会了解到这一点）。</p></blockquote><p>通过以上分析，我们知道了如何组织一种数据结构来包括上面的内容。</p><p><strong><font color="#FF0000">有 3 个关键点需要注意：</font></strong></p><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🍁 &nbsp;XML 中 sharedUserId 属性指定了一个字符串，它是 UID 的字符串描述，故对应数据结构中也应该有这样一个字符串，这样就把代码和 XML 中的属性联系起来了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🍁 &nbsp;在 LINUX 系统中，真正的 uid 是一个整数，所以该数据结构中必然有一个整型变量。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🍁 &nbsp;多个 Package 可声明同一个 sharedUserId，因此该数据结构必然会保存那些声明了相同 sharedUserId 的 Package 的某些信息。</p></blockquote><p>对 <strong><font color="#8470FF">SharedUserSetting</font></strong> 我们做个总结：</p><p>1、<code>Settings</code> 类定义了一个 <code>mSharedUsers</code> 成员，它是一个 <code>ArrayMap</code>，以 <code>字符串</code>（如：android.uid.system）为 <code>key</code>，对应的 <code>Value</code> 是一个 <code>SharedUserSetting</code> 对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> ArrayMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> SharedUserSetting<span class="token operator">></span> mSharedUsers <span class="token operator">=</span>                                           <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> SharedUserSetting<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2、<code>SharedUserSetting</code> 定义了一个成员变量 <code>packages</code>，类型为 <code>ArraySet</code>，用于保存声明了相同 <code>sharedUserId</code> 的 <code>Package</code> 的权限设置信息（这一点我们之前提到过）。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SharedUserSetting</span> <span class="token keyword">extends</span> <span class="token class-name">SettingBase</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> userId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// flags that are associated with this uid, regardless of any package flags</span>    <span class="token keyword">int</span> uidFlags<span class="token punctuation">;</span>    <span class="token keyword">int</span> uidPrivateFlags<span class="token punctuation">;</span>    <span class="token keyword">final</span> ArraySet<span class="token operator">&lt;</span>PackageSetting<span class="token operator">></span> packages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArraySet</span><span class="token operator">&lt;</span>PackageSetting<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>3、每个 <code>Package</code> 有自己的权限设置。权限的概念由 <code>PackageSeting</code> 类表达。该类继承自 <code>PackageSettingBase</code> 类，<code>PackageSettingBase</code> 又继承自 <code>SettingBase</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">PackageSetting</span> <span class="token keyword">extends</span> <span class="token class-name">PackageSettingBase</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PackageSettingBase</span> <span class="token keyword">extends</span> <span class="token class-name">SettingBase</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><code>SettingBase</code> 对象持有 <code>PermissionsState</code> 对象，用于表示可用的权限。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SettingBase</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> PermissionsState mPermissionsState<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4、<code>Settings</code> 中还有两个成员，一个是 <code>mUserIds</code>，另一个是 <code>mOtherUserIds</code>，这两位成员的类型分别是 <code>ArrayList</code> 和 <code>SparseArray</code>。其目的是以 <code>UID</code> 为索引，得到对应的 <code>SharedUserSeting</code> 对象。在一般情况下，以 <code>索引</code> 获取<code>数组元素</code>的速度，比以 <code>Key</code> 获取 <code>ArrayMap</code> 中 <code>元素</code> 的速度要快很多。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>Object<span class="token operator">></span> mUserIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> SparseArray<span class="token operator">&lt;</span>Object<span class="token operator">></span> mOtherUserIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparseArray</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-2-3-2-addUserIdLPw"><a href="#3-2-3-2-addUserIdLPw" class="headerlink" title="3.2.3.2 addUserIdLPw"></a>3.2.3.2 addUserIdLPw</h4><p>我们回忆一下 addSharedUserLPw 方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/services/core/java/com/android/server/pm/Settings.java</span>SharedUserSetting <span class="token function">addSharedUserLPw</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> pkgFlags<span class="token punctuation">,</span> <span class="token keyword">int</span> pkgPrivateFlags<span class="token punctuation">)</span> <span class="token punctuation">{</span>    SharedUserSetting s <span class="token operator">=</span> mSharedUsers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedUserSetting</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> pkgFlags<span class="token punctuation">,</span> pkgPrivateFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>userId <span class="token operator">=</span> uid<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addUserIdLPw</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> s<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mSharedUsers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>源码中还有一个 <code>addUserIdLPw</code> 方法，它的功能就是将 <code>SharedUserSettings</code> 对象保存到对应的数组中，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/services/core/java/com/android/server/pm/Settings.java</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addUserIdLPw</span><span class="token punctuation">(</span><span class="token keyword">int</span> uid<span class="token punctuation">,</span> Object obj<span class="token punctuation">,</span> Object name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 系统所支持的最大的应用 Package 的 UID，不能超出限制 19999</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>uid <span class="token operator">></span> Process<span class="token punctuation">.</span>LAST_APPLICATION_UID<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 第一个应用 Package（非系统安装应用）的起始 UID</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>uid <span class="token operator">>=</span> Process<span class="token punctuation">.</span>FIRST_APPLICATION_UID<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取数组的长度</span>        <span class="token keyword">int</span> N <span class="token operator">=</span> mUserIds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">// 计算索引，其值是 uid 和 FIRST_APPLICATION_UID 的差</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> uid <span class="token operator">-</span> Process<span class="token punctuation">.</span>FIRST_APPLICATION_UID<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mUserIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            N<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果数组的目标索引值位置有不为 null 的值，说明已经添加过</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mUserIds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            PackageManagerService<span class="token punctuation">.</span><span class="token function">reportSettingsProblem</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>ERROR<span class="token punctuation">,</span>                    <span class="token string">"Adding duplicate user id: "</span> <span class="token operator">+</span> uid                    <span class="token operator">+</span> <span class="token string">" name="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 应用 Package 的 uid 由 mUserIds 保存</span>        mUserIds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOtherUserIds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            PackageManagerService<span class="token punctuation">.</span><span class="token function">reportSettingsProblem</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>ERROR<span class="token punctuation">,</span>                    <span class="token string">"Adding duplicate shared id: "</span> <span class="token operator">+</span> uid                            <span class="token operator">+</span> <span class="token string">" name="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 系统 Package 的 uid 由 mOtherUserIds 保存</span>        mOtherUserIds<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong><font color="#FF0000">至此对 Settings 的分析我们暂时告一段落。</font></strong></p><h3 id="3-2-4-总结"><a href="#3-2-4-总结" class="headerlink" title="3.2.4 总结"></a>3.2.4 总结</h3><p>我们来看一个 SharedUserSettings 的类图：(类名改变，后期重新补图)<br><br></p><p><center><img src="https://upload-images.jianshu.io/upload_images/3517194-6aeecba875f5450b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20160929092228475.jpg"></center><br></p><p>如上图所示，<code>Settings</code> 对象中持有多个 <code>SharedUserSetting</code> 对象，每个 <code>SharedUserSetting</code> 对象又会持有多个 <code>PackageSetting</code> 对象。</p><p>从继承关系来看，<code>SharedUserSetting</code> 和 <code>PackageSetting</code> 对象，最终都将继承 <code>SettingBase</code> 对象。</p><p>从图上可以看出，<code>SettingBase</code> 对象持有 <code>PermissionsState</code> 对象，用于表示可用的权限。</p><p>因此，<code>SharedUserSetting</code> 对象和 <code>PackageSetting</code> 对象中都将包含有 <code>PermissionsState</code>。</p><p>从而我们可以据此推测出，<code>SharedUserSetting</code> 中持有的是一组 <code>Package</code> 共有的权限；<code>PackageSetting</code> 中持有的是单个 <code>Package</code> 独有的权限。</p><hr><h2 id="3-3-XML-文件扫描"><a href="#3-3-XML-文件扫描" class="headerlink" title="3.3 XML 文件扫描"></a>3.3 XML 文件扫描</h2><p>分析完 PMS 构造函数前期工作的第一阶段后，接下来就要继续回到构造函数中分析剩下的代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码：frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</span><span class="token keyword">public</span> <span class="token function">PackageManagerService</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Installer installer<span class="token punctuation">,</span>              <span class="token keyword">boolean</span> factoryTest<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyCore<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 第一阶段</span>    <span class="token comment" spellcheck="true">// 该值和调试有关，一般不设置该属性</span>    String separateProcesses <span class="token operator">=</span> SystemProperties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"debug.separate_processes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>separateProcesses <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> separateProcesses<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>separateProcesses<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mDefParseFlags <span class="token operator">=</span> PackageParser<span class="token punctuation">.</span>PARSE_IGNORE_PROCESSES<span class="token punctuation">;</span>            mSeparateProcesses <span class="token operator">=</span> null<span class="token punctuation">;</span>            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Running with debug.separate_processes: * (ALL)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mDefParseFlags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            mSeparateProcesses <span class="token operator">=</span> separateProcesses<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Running with debug.separate_processes: "</span> <span class="token operator">+</span> separateProcesses<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        mDefParseFlags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        mSeparateProcesses <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 对应用进行 dexopt 优化的辅助类</span>    mPackageDexOptimizer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageDexOptimizer</span><span class="token punctuation">(</span>installer<span class="token punctuation">,</span> mInstallLock<span class="token punctuation">,</span> context<span class="token punctuation">,</span>                                                   <span class="token string">"*dexopt*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DexManager<span class="token punctuation">.</span>Listener dexManagerListener <span class="token operator">=</span> DexLogger<span class="token punctuation">.</span><span class="token function">getListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> installer<span class="token punctuation">,</span>                                                                   mInstallLock<span class="token punctuation">)</span><span class="token punctuation">;</span>    mDexManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DexManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> mPackageDexOptimizer<span class="token punctuation">,</span> installer<span class="token punctuation">,</span> mInstallLock<span class="token punctuation">)</span><span class="token punctuation">;</span>    mArtManagerService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArtManagerService</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> installer<span class="token punctuation">,</span> mInstallLock<span class="token punctuation">)</span><span class="token punctuation">;</span>    mMoveCallbacks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MoveCallbacks</span><span class="token punctuation">(</span>FgThread<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mOnPermissionChangeListeners <span class="token operator">=</span> <span class="token keyword">new</span>                                    <span class="token class-name">OnPermissionChangeListeners</span><span class="token punctuation">(</span>FgThread<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取当前设备的显示屏信息</span>    <span class="token function">getDefaultDisplayMetrics</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> mMetrics<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过 SystemConfig 读取系统的 feature、permession 等配置，</span>    <span class="token comment" spellcheck="true">// 并初始化 mGlobalGids/mAvailableFeatures 成员</span>    SystemConfig systemConfig <span class="token operator">=</span> SystemConfig<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重点讨论</span>    mAvailableFeatures <span class="token operator">=</span> systemConfig<span class="token punctuation">.</span><span class="token function">getAvailableFeatures</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mProtectedPackages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProtectedPackages</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">}</span></code></pre><p>以上代码除了创建了几个对象以外，还有一个重要的需要关注的类：<strong><font color="#FF0000">SystemConfig</font></strong>，这就是我们接下来分析的重点！！！</p><h3 id="3-3-1-SystemConfig"><a href="#3-3-1-SystemConfig" class="headerlink" title="3.3.1 SystemConfig"></a>3.3.1 SystemConfig</h3><p>我们先来分析 <strong><font color="#1874CD">SystemConfig systemConfig = SystemConfig.getInstance() </font></strong> 函数！</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/core/java/com/android/server/SystemConfig.java</span><span class="token comment" spellcheck="true">/** * Loads global system configuration info. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> SystemConfig sInstance<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SystemConfig <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 单例模式</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SystemConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> sInstance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>查看它的构造函数：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/core/java/com/android/server/SystemConfig.java</span><span class="token comment" spellcheck="true">/** * 通过 readPermissions() 读取并解析 /system/etc/　等目录下的 sysconfig.xml、permission.xml 文件 */</span><span class="token function">SystemConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Read configuration from system</span>    <span class="token function">readPermissions</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">buildPath</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span><span class="token function">getRootDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"etc"</span><span class="token punctuation">,</span> <span class="token string">"sysconfig"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ALLOW_ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Read configuration from the old permissions dir</span>    <span class="token function">readPermissions</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">buildPath</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span><span class="token function">getRootDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"etc"</span><span class="token punctuation">,</span> <span class="token string">"permissions"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ALLOW_ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Vendors are only allowed to customze libs, features and privapp permissions</span>    <span class="token keyword">int</span> vendorPermissionFlag <span class="token operator">=</span> ALLOW_LIBS <span class="token operator">|</span> ALLOW_FEATURES <span class="token operator">|</span> ALLOW_PRIVAPP_PERMISSIONS<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>FIRST_SDK_INT <span class="token operator">&lt;=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>O_MR1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// For backward compatibility</span>        vendorPermissionFlag <span class="token operator">|=</span> <span class="token punctuation">(</span>ALLOW_PERMISSIONS <span class="token operator">|</span> ALLOW_APP_CONFIGS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">readPermissions</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">buildPath</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span><span class="token function">getVendorDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"etc"</span><span class="token punctuation">,</span> <span class="token string">"sysconfig"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vendorPermissionFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">readPermissions</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">buildPath</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span><span class="token function">getVendorDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"etc"</span><span class="token punctuation">,</span> <span class="token string">"permissions"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vendorPermissionFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Allow ODM to customize system configs as much as Vendor, because /odm is another</span>    <span class="token comment" spellcheck="true">// vendor partition other than /vendor.</span>    <span class="token keyword">int</span> odmPermissionFlag <span class="token operator">=</span> vendorPermissionFlag<span class="token punctuation">;</span>    <span class="token function">readPermissions</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">buildPath</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span><span class="token function">getOdmDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"etc"</span><span class="token punctuation">,</span> <span class="token string">"sysconfig"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> odmPermissionFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">readPermissions</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">buildPath</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span><span class="token function">getOdmDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"etc"</span><span class="token punctuation">,</span> <span class="token string">"permissions"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> odmPermissionFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Allow OEM to customize features and OEM permissions</span>    <span class="token keyword">int</span> oemPermissionFlag <span class="token operator">=</span> ALLOW_FEATURES <span class="token operator">|</span> ALLOW_OEM_PERMISSIONS<span class="token punctuation">;</span>    <span class="token function">readPermissions</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">buildPath</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span><span class="token function">getOemDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"etc"</span><span class="token punctuation">,</span> <span class="token string">"sysconfig"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> oemPermissionFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">readPermissions</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">buildPath</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span><span class="token function">getOemDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"etc"</span><span class="token punctuation">,</span> <span class="token string">"permissions"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> oemPermissionFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Allow Product to customize system configs around libs, features, permissions and apps</span>    <span class="token keyword">int</span> productPermissionFlag <span class="token operator">=</span> ALLOW_LIBS <span class="token operator">|</span> ALLOW_FEATURES <span class="token operator">|</span> ALLOW_PERMISSIONS <span class="token operator">|</span>            ALLOW_APP_CONFIGS <span class="token operator">|</span> ALLOW_PRIVAPP_PERMISSIONS<span class="token punctuation">;</span>    <span class="token function">readPermissions</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">buildPath</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span><span class="token function">getProductDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"etc"</span><span class="token punctuation">,</span> <span class="token string">"sysconfig"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> productPermissionFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">readPermissions</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">buildPath</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span><span class="token function">getProductDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"etc"</span><span class="token punctuation">,</span> <span class="token string">"permissions"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> productPermissionFlag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们发现 <code>SystemConfig</code> 的构造函数所做的工作就是：<code>readPermissions()</code>，即从文件中<code>读取权限</code>！</p><h3 id="3-3-2-readPermissions"><a href="#3-3-2-readPermissions" class="headerlink" title="3.3.2 readPermissions"></a>3.3.2 readPermissions</h3><p>接下来我们看看 readPermissions 的源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/core/java/com/android/server/SystemConfig.java</span><span class="token keyword">void</span> <span class="token function">readPermissions</span><span class="token punctuation">(</span>File libraryDir<span class="token punctuation">,</span> <span class="token keyword">int</span> permissionFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// Iterate over the files in the directory and scan .xml files</span>    File platformFile <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>File f <span class="token operator">:</span> libraryDir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// We'll read platform.xml last</span>        <span class="token comment" spellcheck="true">// 处理该目录下的非 platform.xml 文件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"etc/permissions/platform.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            platformFile <span class="token operator">=</span> f<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 调用 readPermissionsFromXml 解析此 XML 文件</span>        <span class="token function">readPermissionsFromXml</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> permissionFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Read platform permissions last so it will take precedence</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>platformFile <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 不知道你有没有发现，platform.xml文件的解析优先级最高！</span>        <span class="token function">readPermissionsFromXml</span><span class="token punctuation">(</span>platformFile<span class="token punctuation">,</span> permissionFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从源码中，我们发现 <code>readPermissions</code> 函数不就是调用 <code>readPermissionFromXml</code> 函数解析 <code>&quot;/xxx/etc/permissions/&quot;</code> 目录下的文件吗？</p><p>这些文件似乎都是 XML 文件。你也许有个疑问？该目录下都有哪些 XML 文件？这些 XML 文件中有些什么内容呢？<strong><font color="#63B8FF">以我手中的 pixel 为例</font></strong>：</p><pre><code>sailfish:/system/etc/permissions $ ls -alls -altotal 168drwxr-xr-x  2 root root  4096 2009-01-01 16:00 .drwxr-xr-x 14 root root  4096 2009-01-01 16:00 ..-rw-r--r--  1 root root  1050 2009-01-01 16:00 android.software.live_wallpaper.xml-rw-r--r--  1 root root   748 2009-01-01 16:00 android.software.webview.xml-rw-r--r--  1 root root  1778 2009-01-01 16:00 com.android.ims.rcsmanager.xml-rw-r--r--  1 root root   828 2009-01-01 16:00 com.android.location.provider.xml-rw-r--r--  1 root root   828 2009-01-01 16:00 com.android.media.remotedisplay.xml-rw-r--r--  1 root root   820 2009-01-01 16:00 com.android.mediadrm.signer.xml-rw-r--r--  1 root root   158 2009-01-01 16:00 com.android.omadm.service.xml-rw-r--r--  1 root root   435 2009-01-01 16:00 com.android.sdm.plugins.connmo.xml-rw-r--r--  1 root root   701 2009-01-01 16:00 com.android.sdm.plugins.sprintdm.xml-rw-r--r--  1 root root   234 2009-01-01 16:00 com.android.vzwomatrigger.xml-rw-r--r--  1 root root  1079 2009-01-01 16:00 com.customermobile.preload.vzw.xml-rw-r--r--  1 root root   850 2009-01-01 16:00 com.google.android.camera.experimental2016.xml-rw-r--r--  1 root root   563 2009-01-01 16:00 com.google.android.dialer.support.xml-rw-r--r--  1 root root   816 2009-01-01 16:00 com.google.android.maps.xml-rw-r--r--  1 root root   835 2009-01-01 16:00 com.google.android.media.effects.xml-rw-r--r--  1 root root   811 2009-01-01 16:00 com.google.vr.platform.xml-rw-r--r--  1 root root   160 2009-01-01 16:00 com.verizon.apn.xml-rw-r--r--  1 root root   158 2009-01-01 16:00 com.verizon.embms.xml-rw-r--r--  1 root root   288 2009-01-01 16:00 com.verizon.llkagent.xml-rw-r--r--  1 root root   174 2009-01-01 16:00 com.verizon.provider.xml-rw-r--r--  1 root root   220 2009-01-01 16:00 com.verizon.services.xml-rw-r--r--  1 root root   239 2009-01-01 16:00 features-verizon.xml-rw-r--r--  1 root root   811 2009-01-01 16:00 obdm_permissions.xml-rw-r--r--  1 root root  8916 2009-01-01 16:00 platform.xml-rw-r--r--  1 root root 23092 2009-01-01 16:00 privapp-permissions-google.xml-rw-r--r--  1 root root  1346 2009-01-01 16:00 privapp-permissions-marlin.xml-rw-r--r--  1 root root 20848 2009-01-01 16:00 privapp-permissions-platform.xml-rw-r--r--  1 root root  1587 2009-01-01 16:00 vzw_mvs_permissions.xmlsailfish:/system/etc/permissions $</code></pre><p>既然我们上面一直在说 platform.xml 这个文件，那就看下 <strong><font color="#FF0000">platform.xml</font></strong> 有什么：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>permissions</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 建立权限名与 gid 的映射关系。如下面声明的 BLUETOOTH_ADMIN 权限，         它对应的用户组是 net_bt_admin。注意，该文件中的 permission 标签只对         那些需要通过读写设备（蓝牙/cameta）/创建 socket 等进程划分了 gid。         因为这些权限涉及和 Linux 内核交互，所以需要在底层权限（由不用的用户组界定）         和 Android 层权限（由不同的字符串界定）之间建立映射关系。 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>permission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.BLUETOOTH_ADMIN<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">gid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>net_bt_admin<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>permission</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>permission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.BLUETOOTH<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">gid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>net_bt<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>permission</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>permission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.BLUETOOTH_STACK<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">gid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bluetooth<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">gid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wakelock<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">gid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uhid<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>permission</span><span class="token punctuation">></span></span>    ... ...    <span class="token comment" spellcheck="true">&lt;!-- 赋予对应 uid 相应的权限。如果下面一行表示 uid 为 audioserver，那么就         赋予它 WAKE_LOCK 的权限，其实就是把它加到对应的用户组中 --></span>    ... ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>assign-permission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.MODIFY_AUDIO_SETTINGS<span class="token punctuation">"</span></span> <span class="token attr-name">uid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audioserver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>assign-permission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.ACCESS_SURFACE_FLINGER<span class="token punctuation">"</span></span> <span class="token attr-name">uid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audioserver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>assign-permission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.WAKE_LOCK<span class="token punctuation">"</span></span> <span class="token attr-name">uid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audioserver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>assign-permission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.UPDATE_DEVICE_STATS<span class="token punctuation">"</span></span> <span class="token attr-name">uid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audioserver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>assign-permission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.UPDATE_APP_OPS_STATS<span class="token punctuation">"</span></span> <span class="token attr-name">uid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audioserver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    ... ...    <span class="token comment" spellcheck="true">&lt;!-- This is a list of all the libraries available for application         code to link against. --></span>    <span class="token comment" spellcheck="true">&lt;!-- 系统提供的 Java 库，应用程序运行时必须要链接这些库，该工作由系统自动完成 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>library</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.test.mock<span class="token punctuation">"</span></span>            <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/system/framework/android.test.mock.jar<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>library</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.test.runner<span class="token punctuation">"</span></span>            <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/system/framework/android.test.runner.jar<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>library</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javax.obex<span class="token punctuation">"</span></span>            <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/system/framework/javax.obex.jar<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>library</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.http.legacy<span class="token punctuation">"</span></span>            <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/system/framework/org.apache.http.legacy.jar<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    ... ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>permissions</span><span class="token punctuation">></span></span></code></pre><p>platform.xml 文件中主要使用了如下 <strong><font color="#FF0000">4 个标签</font></strong>：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;<strong><font color="#87CEFA">permission</font></strong> 和 <strong><font color="#87CEFA">group</font></strong> 用于建立 Linux 层 gid 和 Andrid 层 permission 之间的映射关系。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;<strong><font color="#87CEFA">assign-permission</font></strong> 用于向指定的 uid 赋予相应的权限。这个权限由 Android 定义，用于字符串表示。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;✨&nbsp;<strong><font color="#87CEFA">library</font></strong> 用于指定系统库。当应用程序运行时，系统会自动为这些进程加载这些库。</p><p>不知道你是否已经产生了疑问？设备上的 /system/etc/permission 目录中的文件是从哪里来的？我直接告诉你答案：在编译阶段由不用硬件平台根据自己的配置信息复制相关文件到目标目录中的来的。（这个具体我们不讨论，有兴趣的读者可以自行查阅） </p><h3 id="3-3-3-readPermissionFromXML"><a href="#3-3-3-readPermissionFromXML" class="headerlink" title="3.3.3 readPermissionFromXML"></a>3.3.3 readPermissionFromXML</h3><p>前面我们说过：<code>readPermissions</code> 函数其实就是调用 <code>readPermissionFromXml</code> 函数解析 <code>&quot;/xxx/etc/permissions/&quot;</code> 目录下的文件！</p><p>readPermissionFromXml 又有什么作用？其实它的作用就是将 XML 文件中的标签以及它们之间的关系转换成代码中的相应数据结构，直接看源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 源码路径：frameworks/base/core/java/com/android/server/SystemConfig.java</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readPermissionsFromXml</span><span class="token punctuation">(</span>File permFile<span class="token punctuation">,</span> <span class="token keyword">int</span> permissionFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    FileReader permReader <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> lowRam <span class="token operator">=</span> ActivityManager<span class="token punctuation">.</span><span class="token function">isLowRamDeviceStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        XmlPullParser parser <span class="token operator">=</span> Xml<span class="token punctuation">.</span><span class="token function">newPullParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parser<span class="token punctuation">.</span><span class="token function">setInput</span><span class="token punctuation">(</span>permReader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            String name <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析 group 标签</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"group"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> allowAll<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String gidStr <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"gid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>gidStr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> gid <span class="token operator">=</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Process<span class="token punctuation">.</span><span class="token function">getGidForName</span><span class="token punctuation">(</span>gidStr<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 转换 XML 中的 gid 字符串为整型，并保存到 mGlobalGids中</span>                    mGlobalGids <span class="token operator">=</span> <span class="token function">appendInt</span><span class="token punctuation">(</span>mGlobalGids<span class="token punctuation">,</span> gid<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"&lt;group> without gid in "</span> <span class="token operator">+</span> permFile <span class="token operator">+</span> <span class="token string">" at "</span>                            <span class="token operator">+</span> parser<span class="token punctuation">.</span><span class="token function">getPositionDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                XmlUtils<span class="token punctuation">.</span><span class="token function">skipCurrentTag</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析 permission标签</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"permission"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> allowPermissions<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String perm <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>perm <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    XmlUtils<span class="token punctuation">.</span><span class="token function">skipCurrentTag</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                perm <span class="token operator">=</span> perm<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 调用 readPermission 处理</span>                <span class="token function">readPermission</span><span class="token punctuation">(</span>parser<span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析 assign-permission 标签</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"assign-permission"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> allowPermissions<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String perm <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                String uidStr <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token comment" spellcheck="true">// 如果是 assign-permission，则取出 uid 字符串，然后获得 Linux 平台上的整型 uid 值</span>                <span class="token keyword">int</span> uid <span class="token operator">=</span> Process<span class="token punctuation">.</span><span class="token function">getUidForName</span><span class="token punctuation">(</span>uidStr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                perm <span class="token operator">=</span> perm<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 和 assign 相关的信息保存在 mSystemPermissions 中</span>                ArraySet<span class="token operator">&lt;</span>String<span class="token operator">></span> perms <span class="token operator">=</span> mSystemPermissions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>perms <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    perms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArraySet</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    mSystemPermissions<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> perms<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                perms<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>perm<span class="token punctuation">)</span><span class="token punctuation">;</span>                XmlUtils<span class="token punctuation">.</span><span class="token function">skipCurrentTag</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析 library 标签</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"library"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> allowLibs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String lname <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String lfile <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lname <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lfile <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token comment" spellcheck="true">// 将 XML 中的 name 和 library 属性值存储到 mSharedLibraries 中</span>                    mSharedLibraries<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>lname<span class="token punctuation">,</span> lfile<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                XmlUtils<span class="token punctuation">.</span><span class="token function">skipCurrentTag</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析 feature标签</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"feature"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> allowFeatures<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String fname <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> fversion <span class="token operator">=</span> XmlUtils<span class="token punctuation">.</span><span class="token function">readIntAttribute</span><span class="token punctuation">(</span>parser<span class="token punctuation">,</span> <span class="token string">"version"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> allowed<span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"unavailable-feature"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> allowFeatures<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 解析其它标签</span>        <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><strong><font color="#FF0000">readPermission 函数果然是将 XML 中的标签转换成对应的数据结构！！！</font></strong></p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>&nbsp;01. <a href="https://www.2cto.com/kf/201609/551752.html" target="_blank" rel="noopener">Android7.0 PackageManagerService (2) PKMS构造函数的主要工作</a><br>&nbsp;02. <a href="https://www.jianshu.com/p/8e2831428110" target="_blank" rel="noopener">APK安装流程详解7——PackageManagerService的启动流程(上)</a></p><hr><h1 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h1><p>推荐跳转：<a href="https://superandroid.pro/2019/01/01/00.%20Thinking%20in%20Android%20--%2001.%20%E5%8D%9A%E5%AE%A2%E7%B4%A2%E5%BC%95/">博客索引（Android 9.0）</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://superandroid.pro/2018/11/05/B_02.%20Android%20%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E7%AF%87%20--%20%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%20PMS%20%E7%B3%BB%E5%88%97%EF%BC%882%EF%BC%89%E4%B9%8B%20%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/">Framework 核心服务之 PMS 钻研（2）- 构造函数</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PackageManagerService </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
